{
  "version": 3,
  "sources": [
    "web/src/app/ui/kmwuifloat.ts"
  ],
  "sourceRoot": "https://s.keyman.com/kmw/engine/18.0.214/src",
  "sourcesContent": [
    "/***\r\n   KeymanWeb 17.0\r\n   Copyright 2019-2023 SIL International\r\n***/\r\n\r\nimport type { KeymanEngine, UIModule } from 'keyman/app/browser';\r\n\r\ndeclare global {\r\n  interface Window {\r\n    keyman: KeymanEngine\r\n  }\r\n}\r\n\r\nconst keymanweb=window.keyman;\r\n\r\n// If a UI module has been loaded, we can rely on the publically-published 'name' property\r\n// having been set as a way to short-out a UI reload.  Its parent object always exists by\r\n// this point in the build process.\r\nif(!keymanweb) {\r\n  throw new Error(\"`keyman` global is missing; Keyman Engine for Web script has not been loaded\");\r\n} else if(!keymanweb.ui?.name) {\r\n  /********************************/\r\n  /*                              */\r\n  /* Floating User Interface      */\r\n  /*                              */\r\n  /********************************/\r\n\r\n  /**\r\n   * Do not enclose in an anonymous function, as the compiler may create\r\n   * global scope variables to replace true, false, null, which can collide\r\n   * with other variables.\r\n   * Instead, use the --output-wrapper command during optimization, which will\r\n   * add the anonymous function to enclose all code, including those optimized\r\n   * variables which would otherwise have global scope.\r\n   **/\r\n\r\n  try {\r\n\r\n    // Declare KeymanWeb, OnScreen keyboard and Util objects\r\n    const util=keymanweb.util;\r\n\r\n    // Disable UI for touch devices\r\n    if(util.isTouchDevice()) {\r\n      throw '';\r\n    }\r\n\r\n    class UIFloat implements UIModule {\r\n      // User interface global and local variables\r\n      readonly name = 'float';\r\n\r\n      /**\r\n       * The top-level element for the keyboard-selection drop menu\r\n       */\r\n      KeyboardSelector: HTMLSelectElement = null;\r\n\r\n      /**\r\n       * Container for all Float UI elements (visible when KeymanWeb is active)\r\n       */\r\n      outerDiv: HTMLDivElement = null;     // replaces DivKeymanWeb\r\n\r\n      innerDiv: HTMLDivElement = null;     // replaces Lkdiv\r\n\r\n      /**\r\n       * The button element allowing users to toggle the OSK on or off\r\n       */\r\n      oskButton: HTMLDivElement = null;\r\n\r\n      /**\r\n       * keyboard icon within the OSK button\r\n       */\r\n      kbdIcon: HTMLImageElement = null;\r\n\r\n      /**\r\n       * Tracks ongoing user interactions with the Float UI.  This is used to help\r\n       * control focus-related behaviors during selection so that KMW may more easily\r\n       * maintain the user's intended focus & expected context.\r\n       */\r\n      selecting = false;\r\n\r\n      updateList = true;   // control keyboard list updating\r\n      updateTimer: number = 0;  // prevent unnecessary list refreshing\r\n      floatRight = false;  // align left by default\r\n      initialized = false; // initialization flag\r\n      initTimer: number = 0;\r\n\r\n      /**\r\n       * Display or hide the OSK from the OSK icon link\r\n       */\r\n      readonly toggleOSK = () => {\r\n        keymanweb.activatingUI(true);\r\n        let osk = keymanweb.osk;\r\n        if(osk && osk.show) {\r\n          if(osk.isEnabled()) {\r\n            osk.hide();\r\n          } else {\r\n            osk.show(true);\r\n          }\r\n        }\r\n        if(window.event) {\r\n          window.event.returnValue=false;\r\n        }\r\n        keymanweb.focusLastActiveElement();\r\n        keymanweb.activatingUI(false);\r\n        return false;\r\n      }\r\n\r\n      /**\r\n       * Function     Initialize\r\n       * Scope        Private\r\n       * Description  UI Initialization\r\n       **/\r\n      readonly initialize = () => {\r\n        if(this.initTimer) {\r\n          window.clearTimeout(this.initTimer);\r\n          this.initTimer = null;\r\n        }\r\n\r\n        // Must always initialize after keymanWeb itself, otherwise options are undefined\r\n        if(!keymanweb.initialized) {\r\n          this.initTimer = window.setTimeout(this.initialize, 50);\r\n          return;\r\n        }\r\n\r\n        if(this.initialized || util.isTouchDevice()) {\r\n          return;\r\n        }\r\n\r\n        const imgPath=util.getOption('resources')+\"ui/float/\";\r\n\r\n        this.outerDiv = util.createElement('div');         // Container for UI (visible when KeymanWeb is active)\r\n        this.innerDiv = util.createElement('div');         // inner div for UI\r\n        this.kbdIcon = util.createElement('img');\r\n        this.outerDiv.innerHTML = \"<a href='http://keyman.com/web/' target='KeymanWebHelp'>\"\r\n          + \"<img src='\"+imgPath+\"kmicon.gif' border='0' style='padding: 0px 2px 0 1px; margin:0px;' title='KeymanWeb' alt='KeymanWeb' /></a>\"; /* I2081 */\r\n\r\n        var s=this.outerDiv.style;\r\n        s.backgroundColor='white'; s.border='solid 1px black'; s.position='absolute'; s.height='18px';\r\n        s.font='bold 8pt sans-serif'; s.display='none'; s.textAlign='left';s.overflow='hidden';\r\n\r\n        util.attachDOMEvent(this.outerDiv, 'mousedown', this._SelectorMouseDown);\r\n        util.attachDOMEvent(this.outerDiv, 'mouseover', this._SelectorMouseOver);\r\n        util.attachDOMEvent(this.outerDiv, 'mouseout',  this._SelectorMouseOut);\r\n\r\n        // Register keymanweb events\r\n        this.registerEvents();\r\n\r\n        this.kbdIcon.src = imgPath+'kbdicon.gif';\r\n        this.kbdIcon.title = 'Display visual keyboard';\r\n\r\n        // Set initial OSK button style (off by default)\r\n        this.oskButtonState(false);\r\n\r\n        var Lhdiv = util.createElement('div');\r\n        this.oskButton = Lhdiv;\r\n        Lhdiv.onclick = this.toggleOSK;\r\n        Lhdiv.appendChild(this.kbdIcon);\r\n        this.innerDiv.appendChild(Lhdiv);\r\n        this.outerDiv.appendChild(this.innerDiv);\r\n        document.body.appendChild(this.outerDiv);\r\n\r\n        this.KeyboardSelector =  util.createElement('select'); // ControlSelector - KeymanWeb keyboard selector\r\n\r\n        s=this.KeyboardSelector.style;\r\n        s.font='8pt sans-serif';\r\n        s.backgroundColor='#f3e5de';\r\n        s.border='solid 1px #7B9EBD';\r\n        s.height='16px';\r\n        s.margin='1px 2px 0px 2px';\r\n        s.left='20px';\r\n        s.top='0px';\r\n        s.position='absolute';\r\n        s.maxWidth='150px';\r\n\r\n        util.attachDOMEvent(this.KeyboardSelector, 'change', this.SelectKeyboardChange);\r\n        util.attachDOMEvent(this.KeyboardSelector, 'blur',   this.SelectBlur);\r\n\r\n        this.innerDiv.appendChild(this.KeyboardSelector);  //this may need to be moved up....\r\n\r\n        // Check required interface alignment and default keyboard\r\n        var opt=util.getOption('ui'), dfltKeyboard='(System keyboard)';\r\n        if(opt && typeof(opt) == 'object') {\r\n          if(typeof(opt['position']) == 'string' && opt['position'] == 'right') {\r\n            this.floatRight = true;\r\n          } if(typeof(opt['default']) == 'string') {\r\n            dfltKeyboard = opt['default'];\r\n          }\r\n        }\r\n\r\n        var Lopt = util.createElement('option');\r\n        Lopt.value = '-';\r\n        Lopt.innerHTML = dfltKeyboard;\r\n        this.KeyboardSelector.appendChild(Lopt);\r\n        Lopt = null;\r\n\r\n        // This must be set before updating the keyboard list to prevent recursion!\r\n        this.initialized = true;\r\n\r\n        // Update the keyboard list if required\r\n        this.updateKeyboardList();\r\n\r\n        //may also want to initialize style sheet here ??\r\n      }\r\n\r\n      readonly _UnloadUserInterface = () => {\r\n        this.KeyboardSelector = this.innerDiv = this.outerDiv = this.kbdIcon = null;\r\n      };\r\n\r\n      /**\r\n       * UI removal - resource cleanup\r\n       */\r\n      shutdown() {\r\n        var root = this.outerDiv;\r\n        if(root) {\r\n          root.parentNode.removeChild(root);\r\n        }\r\n\r\n        this._UnloadUserInterface();\r\n\r\n        if(window.removeEventListener) {\r\n          window.removeEventListener('resize', this._Resize, false);\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Update list of keyboards shown by UI\r\n       */\r\n      readonly updateKeyboardList = () => {\r\n        // Do nothing unless list requires updating\r\n        if(this.updateList) {\r\n          if(!this.initialized) {\r\n            this.initialize();\r\n          }\r\n\r\n          // Remove current list (except for default element)\r\n          const opts=this.KeyboardSelector.getElementsByTagName('OPTION');\r\n          for(let i=opts.length; i>1; i--) {\r\n            this.KeyboardSelector.removeChild(opts[i-1]);\r\n          }\r\n\r\n          // Loop over installed keyboards and add to selection list\r\n          var Lkbds=keymanweb.getKeyboards();\r\n\r\n          for(let Ln=0; Ln<Lkbds.length; Ln++) {\r\n            let Lopt = util.createElement('option');\r\n            Lopt.value = Lkbds[Ln].InternalName+':'+Lkbds[Ln].LanguageCode;\r\n            Lopt.innerHTML = Lkbds[Ln].Name.replace(/\\s?keyboard/i,'');\r\n            if(Lkbds[Ln].LanguageName) {\r\n              var lg=Lkbds[Ln].LanguageName;\r\n              // Only show the main language name if variants indicated (this is tentative)\r\n              // e.g. Chinese rather than Chinese, Mandarin, which is in the keyboard name\r\n              lg = lg.split(',')[0];\r\n              if(Lkbds[Ln].Name.search(lg) == -1) {\r\n                Lopt.innerHTML = lg+' ('+Lopt.innerHTML+')';  // I1300 - Language support\r\n              }\r\n            }\r\n\r\n            this.KeyboardSelector.appendChild(Lopt);\r\n            Lopt = null;\r\n          }\r\n        }\r\n        this.updateList = false;\r\n\r\n        // Set the menu selector to the currently saved keyboard\r\n        const sk = keymanweb.getSavedKeyboard().split(':');\r\n        if(sk.length < 2) {\r\n          sk[1] = '';\r\n        }\r\n        this.updateMenu(sk[0],sk[1]);\r\n\r\n        // Redisplay the UI to correct width for any new language entries\r\n        if(keymanweb.getLastActiveElement()) {\r\n          this.HideInterface();\r\n          this.ShowInterface();\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Function     updateMenu\r\n       * Scope        Private\r\n       * @param       {string}     kbd\r\n       * @param       {string}     lg\r\n       * Description  Update the UI menu selection\r\n       *              Separate arguments passed to allow better control of selection when a keyboard\r\n       *              is listed more than once for different language codes\r\n       */\r\n      readonly updateMenu = (kbd: string, lg: string) => {\r\n        var i=0;\r\n\r\n        // This can be called during startup before fully initialized - ignore if so\r\n        if(!this.initialized) {\r\n          return;\r\n        }\r\n\r\n        var match = kbd;\r\n        if(lg != '') {\r\n          match += ':' + lg;\r\n        }\r\n\r\n        if(kbd == '') {\r\n          this.KeyboardSelector.selectedIndex=0;\r\n        } else {\r\n          const opt=this.KeyboardSelector.getElementsByTagName('option');\r\n          for(i=0; i<opt.length; i++) {\r\n            let t=opt[i].value;\r\n            if(lg == '') {\r\n              t = t.split(':')[0];\r\n            }\r\n\r\n            if(t == match) {\r\n              this.KeyboardSelector.selectedIndex=i;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Function     oskButtonState\r\n       * Scope        Private\r\n       * @param       {boolean}     oskEnabled\r\n       * Description  Update kbd icon border style to indicate whether OSK is enabled for display or not\r\n       **/\r\n      readonly oskButtonState = (oskEnabled: boolean) => {\r\n        var s = this.kbdIcon.style;\r\n        s.width='24px';\r\n        s.height='13px';\r\n        s.top='1px';\r\n        s.verticalAlign='bottom';\r\n        s.padding='2px 2px 1px 2px';\r\n        s.position='absolute';\r\n        s.border=oskEnabled ? 'inset 1px #808080' : 'none';\r\n        s.background=oskEnabled ? '#f7e7de' : 'white';\r\n        s.display = 'block';\r\n        if(this.initialized) {\r\n          this.oskButton.style.display = 'block';\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Register all keymanweb and OSK events only after keymanweb is fully initialized\r\n       *\r\n       **/\r\n      registerEvents() {\r\n        /**\r\n         * Keyboard registration event handler\r\n         *\r\n         * Set a timer to update the UI keyboard list on timeout after each keyboard is registered,\r\n         * thus updating only once when only if multiple keyboards are registered together\r\n         */\r\n        keymanweb.addEventListener('keyboardregistered', (p) => {\r\n          this.updateList = true;\r\n          if(this.updateTimer) {\r\n            clearTimeout(this.updateTimer);\r\n          }\r\n          this.updateTimer = window.setTimeout(this.updateKeyboardList, 200);\r\n        });\r\n\r\n        /**\r\n         * Keyboard load event handler\r\n         *\r\n         * Set the menu selector to the currently saved keyboard when a keyboard is loaded\r\n         *\r\n         * Note: Cannot simply set it to the loaded keyboard,\r\n         *       as more than one language may be supported by that keyboard.\r\n         */\r\n        keymanweb.addEventListener('keyboardloaded', (p) => {\r\n          const sk = keymanweb.getSavedKeyboard().split(':');\r\n          if(sk.length > 1) {\r\n            this.updateMenu(sk[0],sk[1]);\r\n          }\r\n        });\r\n\r\n        /**\r\n         * Keyboard change event handler\r\n         *\r\n         * Update menu selection and control OSK display appropriately\r\n         */\r\n        keymanweb.addEventListener('keyboardchange', (p) => {\r\n          // Update the keyboard selector whenever a keyboard is loaded\r\n          this.updateMenu(p.internalName, p.languageCode);\r\n\r\n          // (Conditionally) display the OSK button, and set the style\r\n          this.addButtonOSK();\r\n        });\r\n\r\n        let osk = keymanweb.osk;\r\n        if(!osk) {\r\n          return;\r\n        }\r\n\r\n        /**\r\n         * Show OSK event handler: show or hide the OSK button (never display if a CJK keyboard)\r\n         */\r\n        osk.addEventListener('show', (oskPosition) => {\r\n          this.addButtonOSK();\r\n          return oskPosition;\r\n        });\r\n\r\n        /**\r\n         * Hide OSK event handler\r\n         */\r\n\r\n        osk.addEventListener('hide', (hiddenByUser) => {\r\n          if(this.initialized) {\r\n            this.oskButtonState(false);\r\n          }\r\n        });\r\n      }\r\n\r\n      /**\r\n       * Function     _SelectorMouseDown\r\n       * Scope        Private\r\n       * @param       {Object}     e      event\r\n       * Description  Set KMW UI activation state on mouse click\r\n       */\r\n      readonly _SelectorMouseDown = (e: MouseEvent) => {\r\n        if(keymanweb.activatingUI) {\r\n          keymanweb.activatingUI(1);\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Function     _SelectorMouseOver\r\n       * Scope        Private\r\n       * @param       {Object}    e       event\r\n       * Description  Set KMW UI activation state on mouse over\r\n       */\r\n      readonly _SelectorMouseOver = (e: MouseEvent) => {\r\n        if(keymanweb.activatingUI) {\r\n          keymanweb.activatingUI(1);\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Function     _SelectorMouseOut\r\n       * Scope        Private\r\n       * @param       {Object}    e       event\r\n       * Description Clear KMW UI activation state on mouse out\r\n       */\r\n      readonly _SelectorMouseOut = (e: MouseEvent) => {\r\n        if(keymanweb.activatingUI) {\r\n          keymanweb.activatingUI(0);\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Function     _SelectKeyboardChange\r\n       * Scope        Private\r\n       * @param       {Object}    e       event\r\n       * Description  Change active keyboard in response to user selection event\r\n       */\r\n      readonly SelectKeyboardChange = (e: Event) => {\r\n        keymanweb.activatingUI(true);\r\n\r\n        if(this.KeyboardSelector.value != '-') {\r\n          var i=this.KeyboardSelector.selectedIndex;\r\n          var t=this.KeyboardSelector.options[i].value.split(':');\r\n          keymanweb.setActiveKeyboard(t[0],t[1]);\r\n        } else {\r\n          keymanweb.setActiveKeyboard('');\r\n        }\r\n\r\n        //if(osk['show']) osk['show'](osk['isEnabled']()); handled by keyboard change event???\r\n        keymanweb.focusLastActiveElement();\r\n        keymanweb.activatingUI(false);\r\n        this.selecting = true;\r\n      }\r\n\r\n      /**\r\n       * Function     _SelectBlur\r\n       * Scope        Private\r\n       * @param       {Object}    e       event\r\n       * Description  Ensure OSK is hidden when moving focus after reselecting a keyboard\r\n       */\r\n      readonly SelectBlur = (e: Event) => {\r\n        if(!this.selecting) {\r\n          keymanweb.focusLastActiveElement();\r\n        }\r\n        this.selecting = false;\r\n      }\r\n\r\n      /**\r\n       * Function     ShowInterface\r\n       * Scope        Private\r\n       * @param       {number=}    Px    x-position for KMW window\r\n       * @param       {number=}    Py    y-position for KMW window\r\n       * Description  Display KMW window at specified position\r\n       */\r\n      readonly ShowInterface = (Px?: number, Py?: number) => {\r\n        if(!this.initialized) return;\r\n\r\n        var Ls = this.outerDiv.style;\r\n\r\n        if(Px  &&  Py) {\r\n          Ls.left = Px + 'px';\r\n          Ls.top = Py + 'px';\r\n        }\r\n        Ls.display = 'block';\r\n\r\n        this.kbdIcon.style.left = this.KeyboardSelector.offsetWidth + 24 + 'px';\r\n\r\n        // (Conditionally) display the OSK button\r\n        this.addButtonOSK();\r\n\r\n        // Set the language selection to the currently active keyboard, if listed\r\n        this.updateMenu(keymanweb.getActiveKeyboard(), keymanweb.getActiveLanguage());\r\n      }\r\n\r\n      /**\r\n       * Function     HideInterface\r\n       * Scope        Private\r\n       * Description  Completely hide KMW window\r\n       */\r\n      readonly HideInterface = () => {\r\n        if(!this.initialized) {\r\n          return;\r\n        }\r\n\r\n        this.outerDiv.style.display = 'none';\r\n      }\r\n\r\n      /**\r\n       * Function     addButtonOSK\r\n       * Scope        Private\r\n       * Description  Display the OSK button unless a CJK keyboard (or English)\r\n       */\r\n      readonly addButtonOSK = () => {\r\n        if(this.oskButton != null) {\r\n          if(keymanweb.isCJK() || (this.KeyboardSelector.selectedIndex==0)) {\r\n            this.oskButton.style.display = 'none';\r\n            this.outerDiv.style.width = this.KeyboardSelector.offsetWidth+30+'px';\r\n          } else {\r\n            this.oskButton.style.display = 'block';\r\n            let osk = keymanweb.osk;\r\n            if(osk) {\r\n              this.oskButtonState(osk.isEnabled());\r\n            } else {\r\n              this.oskButtonState(false);\r\n            }\r\n            this.outerDiv.style.width = this.KeyboardSelector.offsetWidth+56+'px';\r\n          }\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Function     _Resize\r\n       * Scope        Private\r\n       * @param       {Object}     e      event object\r\n       * @return      {boolean}\r\n       * Description  Display KMW OSK at specified position (returns nothing)\r\n       */\r\n      readonly _Resize = (e: Event) => {\r\n        if(this.outerDiv.style.display =='block') {\r\n          var elem = keymanweb.getLastActiveElement();\r\n          if(this.floatRight) {  // I1296\r\n            this.ShowInterface(util.getAbsoluteX(elem) + elem.offsetWidth + 1, util.getAbsoluteY(elem) + 1);\r\n          } else {\r\n            this.ShowInterface(util.getAbsoluteX(elem) + 1, util.getAbsoluteY(elem) + elem.offsetHeight + 1);\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n\r\n    const ui=keymanweb.ui = new UIFloat();\r\n\r\n    //TODO:  had to expose properties of params - what does that do? (focus event doesn't normally include these properties?)\r\n    keymanweb.addEventListener('controlfocused', (params) => {\r\n      // ... this check shouldn't need to check _kmwAttachment directly.\r\n      if(params.activeControl == null || params.activeControl['_kmwAttachment']) {\r\n        /*if(keymanweb.domManager._IsEditableIframe(Ltarg))\r\n          Ltarg = Ltarg.defaultView.frameElement;*/\r\n        if(ui.floatRight) {  // I1296\r\n          ui.ShowInterface(util.getAbsoluteX(params.target) + params.target.offsetWidth + 1, util.getAbsoluteY(params.target) + 1);\r\n        } else {\r\n          ui.ShowInterface(util.getAbsoluteX(params.target), util.getAbsoluteY(params.target)\r\n            - parseInt(util.getStyleValue(ui.outerDiv,'height'),10) - 2);\r\n        }\r\n      }\r\n      return true;\r\n    });\r\n\r\n    keymanweb.addEventListener('controlblurred', (params) => {\r\n      if(!params.event) {\r\n        return true;   // I2404 - Manage IE events in IFRAMEs\r\n      }\r\n\r\n      if(!params.isActivating) {\r\n        ui.HideInterface();\r\n      }\r\n\r\n      return true;\r\n    });\r\n\r\n    if(window.addEventListener) {\r\n      window.addEventListener('resize', ui._Resize, false);\r\n    }\r\n\r\n    // but also call initialization when script loaded, which is after KMW initialization for asynchronous script loading\r\n    ui.initialize();\r\n\r\n    // is/was never actually raised.  Note that the `shutdown` method likely fulfills a similar role.\r\n    // keymanweb.addEventListener('unloaduserinterface', ui._UnloadUserInterface);\r\n\r\n  } catch(err){}\r\n\r\n  // Do not wrap in an anonymous function - let the closure compiler do that, but\r\n  // use try...catch to avoid script errors and only execute if a desktop browser\r\n}"
  ],
  "mappings": "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",
  "names": [
    "keymanweb",
    "_a",
    "util",
    "_UIFloat",
    "osk",
    "imgPath",
    "s",
    "Lhdiv",
    "opt",
    "dfltKeyboard",
    "Lopt",
    "opts",
    "i",
    "Lkbds",
    "Ln",
    "lg",
    "sk",
    "kbd",
    "match",
    "t",
    "oskEnabled",
    "e",
    "Px",
    "Py",
    "Ls",
    "elem",
    "root",
    "p",
    "oskPosition",
    "hiddenByUser",
    "__name",
    "UIFloat",
    "ui",
    "params",
    "err"
  ]
}