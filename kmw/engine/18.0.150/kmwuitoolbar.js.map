{
  "version": 3,
  "sources": [
    "web/src/app/ui/kmwuitoolbar.ts"
  ],
  "sourceRoot": "https://s.keyman.com/kmw/engine/18.0.150/src",
  "sourcesContent": [
    "/***\r\n   KeymanWeb 17.0\r\n   Copyright 2019-2023 SIL International\r\n***/\r\n\r\nimport type { KeymanEngine, KeyboardCookie, UIModule } from 'keyman/app/browser';\r\n\r\ndeclare var keyman: KeymanEngine\r\n\r\ntype MapRegion = {\r\n  /** The title of the region */\r\n  t: string,\r\n\r\n  /** The geometrical specification, in string form, for the region of the map to highlight */\r\n  m: string\r\n}\r\n\r\ntype ToolbarCookie = {\r\n  /**\r\n   * The two-letter code for the currently-selected map region\r\n   */\r\n  region: string;\r\n\r\n  /**\r\n   * The number of encoded 'recent'-keyboard entries enumerated within the cookie.\r\n   */\r\n  maxrecent: number;\r\n} & Record<`recent${number}`, string>;\r\n\r\ntype KeyboardDetail = ReturnType<KeymanEngine['_GetKeyboardDetail']>;\r\n\r\ntype LanguageEntry = {\r\n  /** Language id */\r\n  id: string;\r\n\r\n  /** Language ID */\r\n  name: string;\r\n\r\n  /**\r\n   * A rich list of keyboard metadata for keyboards matching this language's language code (`id`).\r\n   */\r\n  keyboards: KeyboardDetail[];\r\n}\r\n\r\ninterface ListedKeyboard {\r\n  priority: number;\r\n  lang: LanguageEntry,\r\n  keyboard: KeyboardDetail;\r\n  buttonNode: HTMLDivElement;\r\n  aNode: HTMLAnchorElement;\r\n}\r\n\r\n// If a UI module has been loaded, we can rely on the publically-published 'name' property\r\n// having been set as a way to short-out a UI reload.  Its parent object always exists by\r\n// this point in the build process.\r\nif(!keyman?.ui?.name) {\r\n  /********************************/\r\n  /*                              */\r\n  /* Toolbar User Interface       */\r\n  /*                              */\r\n  /********************************/\r\n\r\n  /**\r\n   * Do not enclose in an anonymous function, as the compiler may create\r\n   * global scope variables to replace true, false, null, which can collide\r\n   * with other variables.\r\n   * Instead, use the --output-wrapper command during optimization, which will\r\n   * add the anonymous function to enclose all code, including those optimized\r\n   * variables which would otherwise have global scope.\r\n   **/\r\n\r\n  try {\r\n    // Declare KeymanWeb, OnScreen keyboard and Util objects\r\n    const keymanweb=keyman;\r\n    const util=keymanweb.util;\r\n\r\n    // Disable UI for touch devices\r\n    if(util.isTouchDevice()) {\r\n      throw '';\r\n    }\r\n\r\n    // User interface local variables\r\n    class ToolbarUI implements UIModule {\r\n      init = false;\r\n\r\n      toolbarNode: HTMLDivElement = null;\r\n      browseMapNode: HTMLDivElement = null;\r\n      keyboardsButtonNode: HTMLDivElement = null;\r\n      languageButtonsNode: HTMLDivElement = null;\r\n      offButtonNode: HTMLDivElement = null;\r\n      offBarNode: HTMLDivElement = null;\r\n      oskButtonNode: HTMLDivElement = null;\r\n      oskBarNode: HTMLDivElement = null;\r\n      selectorNode: HTMLDivElement = null;\r\n      regionLanguageListNodes: Record<string, HTMLDivElement> = {};\r\n      regionsNode: HTMLDivElement = null;\r\n      regionNodes: Record<string, HTMLAnchorElement> = null;\r\n      langKeyboardNodes: Record<string, HTMLSpanElement> = {};\r\n      langKeyboardListNodes: Record<string, HTMLUListElement> = {};\r\n      selectedRegion = 'as';\r\n\r\n      /**\r\n       * Tracks a list of recently-selected keyboards.\r\n       *\r\n       * This list may be used to pick the most-recent **and** still-available keyboard upon\r\n       * page refresh.  (If either condition isn't met, it's ignored and the next in line\r\n       * is checked until one is found that meets both conditions.)\r\n       */\r\n      listedKeyboards: ListedKeyboard[] = [];\r\n      catchAllRegion = 'un';\r\n\r\n      /**\r\n       * A seed value for tracking listedKeyboards entry 'age'; smaller values = older, as this\r\n       * seed is incremented on each keyboard change.\r\n       */\r\n      keyboardListPriority = 0;\r\n\r\n      /**\r\n       * The maximum length of the `listedKeyboards` array; once this length is reached, addition\r\n       * of a new entry will result in pruning the oldest in the list, as with a cache.\r\n       */\r\n      maxListedKeyboards = 1;\r\n      lastActiveControl: HTMLElement = null;\r\n      selectedKeyboard: KeyboardDetail = null;\r\n      selectedLanguage = '';\r\n      helpOffsetX = 0;\r\n      helpOffsetY = 0;\r\n\r\n      keyboardsForLangPopup: HTMLUListElement = null;\r\n      lastSelectedKeyboard: {\r\n        internalName: string,\r\n        languageCode: string\r\n      } = null;\r\n\r\n      regions: Record<string, MapRegion>;\r\n\r\n      /**\r\n       * If no prior KeymanWebControl element exists, the Toolbar UI will generate its own\r\n       * during initialization and insert it.  That reference is stored here so that we may\r\n       * remove it later if/when `.shutdown()` is called.\r\n       */\r\n      _insertedElem: HTMLElement;\r\n\r\n      /**\r\n       * associative-array of objects { id: <langid>, name: <name>, keyboards: <array of KeymanWeb keyboards> }\r\n       */\r\n      languages: Record<string, LanguageEntry> = {};\r\n\r\n      /**\r\n       * flag to control re-initialization of keyboard map\r\n       */\r\n      updateMap = false;\r\n\r\n      /**\r\n       * initialization timer - wait 2 seconds after last stub installed then initialize map\r\n       */\r\n      startTimer = 0;\r\n\r\n      /**\r\n       * language name in toolbar\r\n       */\r\n      lgText = ''\r\n\r\n      readonly name = 'toolbar';\r\n\r\n      /**\r\n       * Appears to be the i18n/l10n setup for the KMW Toolbar UI.\r\n       */\r\n      ToolBar_Text = {\r\n        Keyboards: 'Languages',\r\n        OffTitle: 'Turn off KeymanWeb keyboards',\r\n        Off: 'Off',\r\n        ShowOSK: 'Show On Screen Keyboard',\r\n        LanguageSelector: 'Select language',\r\n\r\n        SelectKeyboardPre: 'Select ',\r\n        SelectKeyboardSuf: 'keyboard',\r\n        AltKeyboardsPre: 'Alternate keyboards for ',\r\n        AltKeyboardsSuf: '',\r\n\r\n        ca: 'Central America',\r\n        sa: 'South America',\r\n        na: 'Americas',\r\n        eu: 'Europe',\r\n        af: 'Africa',\r\n        un: 'Undetermined',\r\n        as: 'Asia',\r\n        oc: 'Oceania'\r\n      };\r\n\r\n      /**\r\n       * Create some of the controls but don't insert them into the document yet\r\n       * This does not need or want to prevent loss of focus, so uses document.createElement\r\n       * rather than util.createElement.\r\n       *\r\n       * @param       {string}  tag\r\n       * @param       {?string=}  id\r\n       * @param       {?string=}  className\r\n       * @param       {string=}  innerHTML\r\n       * @return      {Node|null}\r\n       */\r\n      private createNode<E extends keyof HTMLElementTagNameMap>(tag: E, id?: string, className?: string, innerHTML?: string) {\r\n        const node = document.createElement(tag);\r\n        if(id) {\r\n          node.id = id;\r\n        }\r\n        if(className) {\r\n          node.className = className;\r\n        }\r\n        if(innerHTML) {\r\n          node.innerHTML = innerHTML;\r\n        }\r\n\r\n        // The following is OK for IE and for F3.5 and later - should simply be ignored for others\r\n        // first tried preventDefault() as suggested by many on web, which worked but interfered with keyboard and OSK enabling\r\n        if(tag == 'a' || tag == 'area' || tag == 'map') {\r\n          node.ondragstart = () => false;\r\n        }\r\n        return node;\r\n      }\r\n\r\n      /**\r\n       * Initialize toolbar UI\r\n       */\r\n      initialize() {\r\n        if(!keymanweb.initialized || this.init) {\r\n          return;\r\n        }\r\n\r\n        // Find the controller DIV, insert at top of body if undefined\r\n        let e = document.getElementById('KeymanWebControl');\r\n        if(!e) {\r\n          if(document.body == null) {\r\n            return;\r\n          } else {\r\n            e = document.createElement('div');\r\n            e.id = 'KeymanWebControl';\r\n            document.body.insertBefore(e, document.body.firstChild);\r\n            this._insertedElem = e;\r\n          }\r\n        }\r\n\r\n        // Hide toolbar until elements fully drawn, to prevent spurious text displays\r\n        e.style.visibility='hidden';\r\n        e.style.maxHeight='35px';\r\n\r\n        this.init = true;\r\n\r\n        if(util.isTouchDevice()) {\r\n          return;\r\n        }\r\n\r\n        this.regions = {};\r\n        //ui.regions['ca'] = {t: ui.ToolBar_Text['ca'], m: '49,52,65,54,68,57,71,56,73,59,75,60,93,61,94,58,97,58,101,59,107,60,114,64,115,68,114,77,104,74,98,75,96,78,95,82,90,81,85,80,82,76,78,74,74,73,65,68,57,61' },\r\n        //ui.regions['sa'] = {t: ui.ToolBar_Text['sa'], m: '82,82,95,82,96,78,98,75,104,74,114,77,120,79,124,83,126,87,141,90,142,97,138,103,135,113,127,116,123,124,115,131,112,132,109,138,117,139,140,141,141,146,134,148,114,145,109,148,100,148,91,143,91,130,96,111,89,102,83,95,77,89' },\r\n        this.regions['na'] = {t: this.ToolBar_Text['na'], m: '0,3,0,37,24,32,35,37,43,47,49,52,65,54,68,57,71,56,73,59,75,60,93,61,93,57,103,49,118,41,126,41,136,23,148,17,156,14,164,5,164,0,57,0,35,5,25,9,5,8,49,52,65,54,68,57,71,56,73,59,75,60,93,61,94,58,97,58,101,59,107,60,114,64,115,68,114,77,104,74,98,75,96,78,95,82,90,81,85,80,82,76,78,74,74,73,65,68,57,61,82,82,95,82,96,78,98,75,104,74,114,77,120,79,124,83,126,87,141,90,142,97,138,103,135,113,127,116,123,124,115,131,112,132,109,138,117,139,140,141,141,146,134,148,114,145,109,148,100,148,91,143,91,130,96,111,89,102,83,95,77,89' },\r\n        this.regions['eu'] = {t: this.ToolBar_Text['eu'], m: '145,29,146,19,158,14,171,6,187,2,206,1,217,4,227,11,231,16,231,33,227,34,225,35,225,37,227,39,228,44,228,47,227,48,223,46,218,44,215,43,208,43,203,45,202,48,205,52,201,52,195,49,189,50,187,48,177,48,175,49,166,50,147,33' },\r\n        this.regions['af'] = {t: this.ToolBar_Text['af'], m: '150,58,158,50,166,50,175,49,177,48,187,48,189,50,195,49,201,52,205,52,207,53,221,75,229,75,231,77,231,85,227,92,232,101,237,106,237,112,227,115,222,118,206,125,199,127,193,127,185,111,183,104,180,87,168,89,153,85,143,71,147,60' },\r\n        this.regions['as'] = {t: this.ToolBar_Text['as'], m: '219,1,221,6,228,12,231,16,231,33,227,34,225,35,225,37,227,39,229,45,232,48,239,48,240,49,239,53,242,60,243,65,249,70,252,81,259,87,271,87,278,95,289,100,303,101,311,98,320,98,323,98,323,84,311,81,308,73,307,65,317,57,330,50,334,44,348,36,364,38,375,34,375,8,355,8,336,5,292,1,285,0,219,0' },\r\n        this.regions['oc'] = {t: this.ToolBar_Text['oc'], m: '288,117,289,107,303,101,311,98,323,98,323,84,333,77,344,73,362,80,369,88,375,96,375,141,352,143,323,142,316,136,310,130,291,130' }\r\n        this.regions['un'] = {t: this.ToolBar_Text['un'], m: '205,52,202,48,203,45,208,43,215,43,218,44,223,46,227,48,232,48,239,48,240,49,239,53,242,60,243,65,237,76,231,77,229,75,221,75,207,53' },\r\n\r\n        this.toolbarNode = this.createNode('div', 'kmw_controls');\r\n        this.toolbarNode.style.display='block';\r\n\r\n        util.linkStyleSheet(util.getOption('resources')+'ui/toolbar/kmwuitoolbar.css');\r\n\r\n        const tbNode = this.createNode('a', 'kmw_controls_start', null, ' ');\r\n        tbNode.href = \"https://keyman.com/developer/keymanweb/\";\r\n        tbNode.target=\"_blank\";\r\n        this.toolbarNode.appendChild(tbNode);\r\n\r\n        /* Keyboards button */\r\n        this.keyboardsButtonNode = this.createNode('div','kmw_btn_keyboards','kmw_button');\r\n        this.keyboardsButtonNode.title=this.ToolBar_Text.LanguageSelector;\r\n        let aNode = this.createNode('a', null, 'kmw_button_a');\r\n        aNode.href='#';\r\n        aNode.onclick = this.showKeyboardsPopup;\r\n        aNode.appendChild(this.createNode('div', 'kmw_img_keyboards', 'kmw_img'));\r\n        aNode.appendChild(this.createNode('div', null, 'kmw_a', this.ToolBar_Text.Keyboards));\r\n        aNode.appendChild(this.createNode('div', null, 'kmw_drop'));\r\n        this.keyboardsButtonNode.appendChild(aNode);\r\n\r\n        /* Keyboards popup */\r\n        this.selectorNode = this.createNode('div', 'kmw_selector');\r\n        this.regionsNode = this.createNode('div', 'kmw_selector_regions');\r\n\r\n        this.browseMapNode = this.createNode('div', 'kmw_browsemap');\r\n        const imgNode = this.createNode('img', 'kmw_region_browsemap');\r\n        imgNode.src= util.getOption('resources')+'ui/toolbar/blank.gif';\r\n        imgNode.useMap = '#kmw_worldgrey16';\r\n        this.browseMapNode.appendChild(imgNode);\r\n\r\n        const mapNode = this.createNode('map', 'kmw_worldgrey16');\r\n        mapNode.name='kmw_worldgrey16';\r\n        for(let i in this.regions) {\r\n          const areaNode = this.createNode('area');\r\n          areaNode.shape = 'poly';\r\n          areaNode.alt = '';\r\n          areaNode.href = '#';\r\n          areaNode.title = this.regions[i].t;\r\n          // @ts-ignore\r\n          areaNode['hidefocus'] = 'true';\r\n          areaNode.onclick =     ((i) => { return (event) => this.selectRegion(event, i);  })(i);\r\n          areaNode.onmouseover = ((i) => { return (event) => this.hoverRegion(event, i);   })(i);\r\n          areaNode.onmouseout =  ((i) => { return (event) => this.unhoverRegion(event, i); })(i);\r\n          areaNode.coords = this.regions[i].m;\r\n          mapNode.appendChild(areaNode);\r\n        }\r\n\r\n        const areaNode = this.createNode('area');\r\n        areaNode.shape = 'default';\r\n        areaNode.noHref = true;\r\n        areaNode.alt = '';\r\n        areaNode.onclick=this.eventCapture;   // do not close map when clicking on ocean!\r\n        mapNode.appendChild(areaNode);\r\n        this.browseMapNode.appendChild(mapNode);\r\n        this.regionsNode.appendChild(this.browseMapNode);\r\n        this.regionNodes = {};\r\n\r\n        const listNode = this.createNode('ul');\r\n        for(let i in this.regions) {\r\n          const itemNode = this.createNode('li');\r\n          this.regionNodes[i] = this.createNode('a', null, null, this.regions[i].t);\r\n          this.regionNodes[i].href='#';\r\n          this.regionNodes[i].onclick = ((i) =>     { return (event) => this.selectRegion(event, i);  })(i);\r\n          this.regionNodes[i].onmouseover = ((i) => { return (event) => this.hoverRegion(event, i);   })(i);\r\n          this.regionNodes[i].onmouseout = ((i) =>  { return (event) => this.unhoverRegion(event, i); })(i);\r\n          itemNode.appendChild(this.regionNodes[i]);\r\n          listNode.appendChild(itemNode);\r\n        }\r\n        this.regionsNode.appendChild(listNode);\r\n        this.selectorNode.appendChild(this.regionsNode);\r\n        this.keyboardsButtonNode.appendChild(this.selectorNode);\r\n        this.toolbarNode.appendChild(this.keyboardsButtonNode);\r\n\r\n        // Separator and Keyboard Off Button\r\n        this.toolbarNode.appendChild(this.offBarNode = this.createNode('div', 'kmw_bar_off', 'kmw_bar'));\r\n\r\n        this.offButtonNode = this.createNode('div', 'kmw_btn_off', 'kmw_button_selected');\r\n\r\n        // Re-used variable!\r\n        aNode = this.createNode('a', null, 'kmw_button_a');\r\n        aNode.href = '#';\r\n        aNode.onclick = this.offButtonClickEvent;\r\n        aNode.title = this.ToolBar_Text.OffTitle;\r\n        aNode.appendChild(this.createNode('div', 'kmw_img_off', 'kmw_img'));\r\n        aNode.appendChild(this.createNode('div', null, 'kmw_a', this.ToolBar_Text.Off));\r\n        this.offButtonNode.appendChild(aNode);\r\n        this.toolbarNode.appendChild(this.offButtonNode);\r\n\r\n        // Keyboard buttons\r\n        this.toolbarNode.appendChild(this.languageButtonsNode = this.createNode('div', 'kmw_control_keyboards', 'kmw_button'));\r\n\r\n        // Separator and On Screen Keyboard Button\r\n        this.toolbarNode.appendChild(this.oskBarNode = this.createNode('div', 'kmw_bar_osk', 'kmw_bar'));\r\n\r\n        this.oskButtonNode = this.createNode('div', 'kmw_btn_osk', 'kmw_button');//was 'kmw_button_selected'\r\n\r\n        // Re-used variable!\r\n        aNode = this.createNode('a', null, 'kmw_button_a');\r\n        aNode.href = '#';\r\n        aNode.onclick = this.showOSK;\r\n        aNode.onmousedown = function() {\r\n          keymanweb.activatingUI(true);\r\n        };\r\n        aNode.title = this.ToolBar_Text.ShowOSK;\r\n        aNode.appendChild(this.createNode('div', 'kmw_img_osk', 'kmw_img'));\r\n        //aNode.appendChild(ui.createNode('div', null, 'kmw_a', 'On Screen Keyboard'));\r\n        this.oskButtonNode.appendChild(aNode);\r\n        this.toolbarNode.appendChild(this.oskButtonNode);\r\n\r\n        this.toolbarNode.appendChild(this.createNode('div', 'kmw_controls_end', null, ' '));\r\n\r\n        const img = this.createNode('div');\r\n        img.id = 'kmw_map_preload';\r\n        this.toolbarNode.appendChild(img);\r\n\r\n        this.toolbarNode.appendChild(this.createNode('br', null, 'kmw_clear'));\r\n\r\n        // Append toolbar node to controller\r\n        e.appendChild(this.toolbarNode);\r\n\r\n        // Initialize map array, using a timer to allow restarting if necessary after keyboards loaded\r\n        // Note that toolbar will be displayed and enabled on completion of timeout routine\r\n        this.updateMap = true;\r\n        if(this.startTimer) {\r\n          clearTimeout(this.startTimer);\r\n        }\r\n        this.startTimer = window.setTimeout(this.addKeyboardsToMap, 0);\r\n\r\n        // Ensure that popups are hidden by clicking elsewhere on document\r\n        util.attachDOMEvent(document.body,'click', this.hideAllPopups, false);\r\n\r\n        // Set Europe to be the default region\r\n        this.selectedRegion = 'eu';\r\n\r\n        this.registerEvents();\r\n\r\n        // Restore focus\r\n        keymanweb.focusLastActiveElement();\r\n      }\r\n\r\n      shutdown() {\r\n        let root: HTMLElement = this.toolbarNode;\r\n        if(root) {\r\n          root.parentNode.removeChild(root);\r\n        }\r\n\r\n        root = this._insertedElem;\r\n        if(root) {\r\n          root.parentNode.removeChild(root);\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Fill the map with available keyboards when the Keyboards selector is clicked\r\n       *    after all keyboard stubs have been registered\r\n      **/\r\n      readonly addKeyboardsToMap = () => {\r\n        // Do nothing unless a keyboard has been installed since map created\r\n        if(this.updateMap) {\r\n          this.updateMap=false;\r\n        } else {\r\n          return;\r\n        }\r\n\r\n        this.regionLanguageListNodes = {};\r\n\r\n        // Build list of keyboards by region and language\r\n        let Keyboards = keymanweb.getKeyboards();\r\n\r\n        // Sort the keyboards by region and language\r\n        Keyboards.sort(this.sortKeyboards);\r\n\r\n        // Always rebuild the map, so remove any previously created language lists\r\n        let n=0;\r\n        for(n=this.regionsNode.children.length; n>0; n--) {\r\n          if(this.regionsNode.children[n-1].className == 'kmw_selector_region') {\r\n            this.regionsNode.removeChild(this.regionsNode.childNodes[n-1]);\r\n          }\r\n        }\r\n\r\n        for(let i in this.regions) {\r\n          this.regionLanguageListNodes[i] = this.createNode('div', null, 'kmw_selector_region');\r\n          let colNode = this.createNode('div', null, 'kmw_keyboard_col');\r\n          var max = 0, count = 0, languageCode = '';\r\n\r\n          // Get number of languages for the region\r\n          for(let j=0; j<Keyboards.length; j++) {\r\n            // REVERT:  ensures that keyboards without visible map region get displayed SOMEWHERE.\r\n            var kbdRegion = Keyboards[j].RegionCode;\r\n            if(!this.regions[kbdRegion]) {\r\n              // For now, we'll display them within the 'middle-east' region.\r\n              if(i != this.catchAllRegion) {\r\n                continue;\r\n              }\r\n            } else if(kbdRegion != i) {\r\n              continue; // Not this region\r\n            }\r\n\r\n            // Get JUST the language code for this section.  BCP-47 codes can include more!\r\n            var bcpSubtags: string[] = keymanweb.util.getLanguageCodes(Keyboards[j].LanguageCode);\r\n            if(bcpSubtags[0] == languageCode) {\r\n              continue; // Same language as previous keyboard\r\n            }\r\n            languageCode = bcpSubtags[0];\r\n\r\n            max++;\r\n          }\r\n          max = Number(((max+3)/4).toFixed(0));   // Get number of entries per column\r\n\r\n          // Add language list to columns for the region\r\n          languageCode='';\r\n          for(let j=0; j<Keyboards.length; j++) {\r\n            // REVERT:  ensures that keyboards without visible map region get displayed SOMEWHERE.\r\n            const kbdRegion = Keyboards[j].RegionCode;\r\n            if(!this.regions[kbdRegion]) {\r\n              // For now, we'll display them within the 'middle-east' region.\r\n              if(i != this.catchAllRegion) {\r\n                continue;\r\n              }\r\n            } else if(kbdRegion != i) {\r\n              continue; // Not this region\r\n            }\r\n\r\n            var bcpSubtags: string[] = keymanweb.util.getLanguageCodes(Keyboards[j].LanguageCode);\r\n            if(bcpSubtags[0] == languageCode) {  // Same language as previous keyboard, so add it to that entry\r\n              var x = this.languages[languageCode].keyboards;\r\n\r\n              // While we could avoid duplicating keyboard entries that occur for multiple regions, we'll instead\r\n              // allow them to display while distinguishing them more directly.  (That part is handled later.)\r\n              if(x.push) {\r\n                x.push(Keyboards[j]);\r\n              } else {\r\n                this.languages[languageCode].keyboards = x.concat(Keyboards[j]);\r\n              }\r\n\r\n              continue;\r\n            }\r\n\r\n            // Add a new language entry\r\n            languageCode = bcpSubtags[0];\r\n            this.languages[languageCode] = {\r\n              id: Keyboards[j].LanguageCode,\r\n              name: Keyboards[j].LanguageName,\r\n              keyboards: [Keyboards[j]]\r\n            };\r\n\r\n            // Start a new column if necessary\r\n            if(count % max == 0 && count > 0) {\r\n              this.regionLanguageListNodes[i].appendChild(colNode);\r\n              colNode = this.createNode('div', null, count/max == 3 ? 'kmw_keyboard_col_right' : 'kmw_keyboard_col');\r\n            }\r\n            count++;\r\n\r\n            // Add the language to the column\r\n            const langNode = this.createNode('div', null, 'kmw_language');\r\n            const aNode = this.createNode('a', null, null, Keyboards[j].LanguageName);\r\n            aNode.href='#';\r\n            aNode.onclick = ((lang) => {\r\n              return (event) => this.selectLanguage(event, lang);\r\n            }) (this.languages[languageCode]);\r\n\r\n            langNode.appendChild(aNode);\r\n            colNode.appendChild(langNode);\r\n\r\n            // This is almost certainly an irrelevant code line; nothing seems to reference it here.\r\n            n++;\r\n          }\r\n          // Finish the last column and close the list\r\n          this.regionLanguageListNodes[i].appendChild(colNode);\r\n          this.regionLanguageListNodes[i].appendChild(this.createNode('div', null, 'kmw_clear'));\r\n          this.regionsNode.appendChild(this.regionLanguageListNodes[i]);\r\n        }\r\n        this.loadCookie();\r\n\r\n        // Ensure that the correct region has been selected\r\n        this.selectRegion(null, this.selectedRegion);\r\n        this.enableControls();\r\n\r\n        // When a keyboard is activated before init is complete,\r\n        // the toolbar needs to refresh the loaded keyboard\r\n        if(this.lastSelectedKeyboard) {\r\n          this.changeKeyboardEvent(this.lastSelectedKeyboard);\r\n        }\r\n\r\n        // Restore focus\r\n        keymanweb.focusLastActiveElement();\r\n      }\r\n\r\n      /**\r\n       * Sort keyboards array returned from keymanweb by region and language\r\n       *\r\n       * @param       {Object}  a\r\n       * @param       {Object}  b\r\n       * @return      {number}\r\n       **/\r\n      readonly sortKeyboards = function(a: KeyboardDetail, b: KeyboardDetail) {\r\n        if(a.RegionCode < b.RegionCode) {\r\n          return -2;\r\n        }\r\n\r\n        if(a.RegionCode > b.RegionCode) {\r\n          return 2;\r\n        }\r\n\r\n        if(a.LanguageName < b.LanguageName) {\r\n          return -1;\r\n        }\r\n\r\n        if(a.LanguageName > b.LanguageName) {\r\n          return 1;\r\n        }\r\n\r\n        return 0;\r\n      }\r\n\r\n      /* KeymanWeb Interfaces */\r\n\r\n      /**\r\n       * Function     findListedKeyboard\r\n       * Scope        Private\r\n       * @param       {Object}  lang\r\n       * @return      {?number}\r\n       * Description  Test if a keyboard is still shown on the toolbar.  Returns index of keyboard in listedKeyboards or null if not found\r\n       */\r\n      findListedKeyboard(lang: LanguageEntry | string) {\r\n        if(typeof lang != 'string') {\r\n          lang = lang.id;\r\n        }\r\n        for(let i = 0; i < this.listedKeyboards.length; i++) {\r\n          if(this.listedKeyboards[i].lang.id == lang) {\r\n            return i;\r\n          }\r\n        }\r\n\r\n        return null;\r\n      }\r\n\r\n      /**\r\n       * Add a keyboard to the list of keyboards available for a language\r\n       *\r\n       * @param       {Object}  lang\r\n       * @param       {Object}  kbd\r\n       **/\r\n      addKeyboardToList(lang: LanguageEntry, kbd: KeyboardDetail) {\r\n        let found = this.findListedKeyboard(lang);\r\n        if(found == null) {\r\n          // Add the button\r\n          if(this.listedKeyboards.length >= this.maxListedKeyboards) {\r\n            let oldestPriority = 0x7fffffff, oldestFound = null;\r\n\r\n            for(let i = 0; i < this.listedKeyboards.length; i++) {\r\n              if(this.listedKeyboards[i].priority < oldestPriority) {\r\n                oldestFound = i;\r\n                oldestPriority = this.listedKeyboards[i].priority;\r\n              }\r\n            }\r\n\r\n            // delete the oldest used control\r\n            if(oldestFound != null) {\r\n              let rk = this.listedKeyboards[oldestFound];\r\n              this.langKeyboardListNodes[rk.lang.id] = null;\r\n              this.langKeyboardNodes[rk.lang.id] = null;\r\n              this.languageButtonsNode.removeChild(rk.buttonNode);\r\n              if(oldestFound == 0) {\r\n                this.listedKeyboards = this.listedKeyboards.slice(oldestFound + 1);\r\n              } else if(oldestFound == this.listedKeyboards.length - 1) {\r\n                this.listedKeyboards = this.listedKeyboards.slice(0, oldestFound);\r\n              } else {\r\n                this.listedKeyboards = this.listedKeyboards.slice(0, oldestFound).concat(this.listedKeyboards.slice(oldestFound+1));\r\n              }\r\n            }\r\n          }\r\n          let buttonNode = this.createNode('div', null/*'kmw_button_keyboard_'+lang.id*/, 'kmw_button');\r\n          let aNode = this.createNode('a', null, 'kmw_button_a'+(lang.keyboards.length>1 ? ' kmw_norightgap' : ''));\r\n          aNode.href='#';\r\n\r\n          let p1=this.ToolBar_Text['SelectKeyboardPre'] + kbd.Name;\r\n          let p2=this.ToolBar_Text['SelectKeyboardSuf'];\r\n          if(p1.toLowerCase().indexOf(p2.toLowerCase()) < 0) {\r\n            p1=p1+' '+ p2;\r\n          }\r\n          aNode.title = p1;\r\n          aNode.onclick = (event) => this.selectLanguage(event, lang);\r\n          aNode.appendChild(this.createNode('div', 'kmw_img_kbd', 'kmw_img'));\r\n\r\n          this.lgText=this.truncate(lang.name,28);\r\n          aNode.appendChild(this.createNode('div', null, 'kmw_a', this.lgText));\r\n          buttonNode.appendChild(aNode);\r\n\r\n          let thisANode = aNode;\r\n\r\n          if(lang.keyboards.length > 1) {\r\n            aNode = this.createNode('a', null, 'kmw_button_a kmw_noleftgap');\r\n            aNode.href = '#';\r\n            aNode.title = this.ToolBar_Text['AltKeyboardsPre']+lang.name + this.ToolBar_Text['AltKeyboardsSuf'];\r\n            aNode.onclick = (event) => this.showKeyboardsForLanguage(event, lang);\r\n            let divNode = this.createNode('div', null, 'kmw_a');\r\n            let kbdText = this.truncate(kbd.Name.replace(/\\s?keyboard/i,''),40-this.lgText.length);\r\n            divNode.appendChild(this.langKeyboardNodes[lang.id] = this.createNode('span', null, 'kmw_kbd', kbdText));\r\n            aNode.appendChild(divNode);\r\n            aNode.appendChild(this.createNode('div', null, 'kmw_drop'));\r\n            buttonNode.appendChild(aNode);\r\n\r\n            this.langKeyboardListNodes[lang.id] = this.createNode('ul', null, 'kmw_selector_kbd');\r\n            this.langKeyboardListNodes[lang.id].style.display='none';\r\n\r\n            for(let n in lang.keyboards) {\r\n              let itemNode = this.createNode('li');\r\n              kbdText = lang.keyboards[n].Name.replace(/\\s?keyboard/i,'');\r\n              // We append the full BCP-47 code here for disambiguation when regional and/or script variants exist.\r\n              kbdText = kbdText + \" [\" + lang.keyboards[n].LanguageCode + \"]\";\r\n              aNode = this.createNode('a', null, null, kbdText);\r\n              aNode.href = '#';\r\n              aNode.title = '';\r\n              aNode.onclick = ((lang, kbd) => {\r\n                return (event) => this.selectKeyboard(event, lang, kbd, true);\r\n              })(lang, lang.keyboards[n]);\r\n\r\n              itemNode.appendChild(aNode);\r\n              this.langKeyboardListNodes[lang.id].appendChild(itemNode);\r\n            }\r\n            buttonNode.appendChild(this.langKeyboardListNodes[lang.id]);\r\n          }\r\n\r\n          this.languageButtonsNode.appendChild(buttonNode);\r\n\r\n          let thisLang = lang, thisButtonNode = buttonNode;\r\n          this.listedKeyboards.push({priority: this.keyboardListPriority++, lang:thisLang, keyboard:kbd, buttonNode:thisButtonNode, aNode:thisANode});\r\n        } else {\r\n          this.listedKeyboards[found].priority = this.keyboardListPriority++;\r\n          this.listedKeyboards[found].keyboard = kbd;\r\n          let e = this.langKeyboardNodes[lang.id];\r\n          if(e) {\r\n            var kbdText=kbd.Name.replace(/\\s?keyboard/i,'');\r\n            e.innerHTML = this.truncate(kbdText,40-this.lgText.length);\r\n          }\r\n\r\n          if(this.listedKeyboards[found].aNode) {\r\n            let p1 = this.ToolBar_Text['SelectKeyboardPre']+kbd.Name;\r\n            let p2 = this.ToolBar_Text['SelectKeyboardSuf'];\r\n            if(p1.toLowerCase().indexOf(p2.toLowerCase()) < 0) {\r\n              p1=p1+' '+ p2;\r\n            }\r\n\r\n            this.listedKeyboards[found].aNode.title = p1;\r\n          }\r\n        }\r\n      }\r\n\r\n      /**\r\n       *  Truncate a long name and add an ellipsis\r\n       *\r\n       *  @param  {string}  PName   string that may need to be truncated\r\n       *  @param  {number}  PLen    max non-truncated length\r\n       *  @return {string}          string, truncated with ellipsis if necessary\r\n       *\r\n       **/\r\n      truncate(PName: string, PLen: number) {\r\n        if(PName.length <=PLen) {\r\n          return PName;\r\n        }\r\n\r\n        return PName.substr(0,PLen-1)+'\\u2026';\r\n      }\r\n\r\n      /**\r\n       * Rebuild the entire keyboard list whenever a keyboard is installed\r\n       * (without necessarily loading the keyboard)\r\n       **/\r\n      readonly registerKeyboard = () => {\r\n        this.updateMap = true;\r\n        if(this.startTimer) {\r\n          clearTimeout(this.startTimer);\r\n        }\r\n\r\n        this.startTimer = window.setTimeout(this.addKeyboardsToMap, 0);\r\n      }\r\n\r\n      /**\r\n       * Function     hideKeyboardsForLanguage\r\n       * Scope        Private\r\n       * @param       {Object}  event\r\n       * @return      {boolean}\r\n       * Description  Hide the list of keyboards for this language\r\n       **/\r\n      readonly hideKeyboardsForLanguage = (event: Event) => {\r\n        var e = this.keyboardsForLangPopup;\r\n        if(e) {\r\n          e.style.display='none';\r\n        }\r\n        this.CancelPopupDismissal(this.hideKeyboardsForLanguage);\r\n        return this.eventCapture(event);\r\n      }\r\n\r\n      /**\r\n       * Display the list of keyboards for this language\r\n       *\r\n       * @param       {Object}  event\r\n       * @param       {Object}  lang\r\n       * @return      {boolean}\r\n       *\r\n       **/\r\n      readonly showKeyboardsForLanguage = (event: Event, lang: LanguageEntry) => {\r\n        this.hideKeyboardsPopup(event);\r\n        const e = this.langKeyboardListNodes[lang.id];\r\n        if(e) {\r\n          if(e.style.display=='block') {\r\n            return this.hideKeyboardsForLanguage(event);\r\n          }\r\n\r\n          e.style.display='block';\r\n          this.keyboardsForLangPopup = e;\r\n          this.SetupPopupDismissal(e, this.hideKeyboardsForLanguage);\r\n        }\r\n        return this.eventCapture(event);\r\n      }\r\n\r\n      /**\r\n       * Select the language, and either select the keyboard (if unique) or display the list of keyboards\r\n       * available for this language\r\n       *\r\n       * @param       {Object}  event\r\n       * @param       {Object}  lang\r\n       * @return      {boolean}\r\n       **/\r\n      selectLanguage(event: Event, lang: LanguageEntry) {\r\n        let found = this.findListedKeyboard(lang);\r\n        let kbd: KeyboardDetail = null;\r\n\r\n        if(found == null) {\r\n          kbd = lang.keyboards[0];\r\n        } else {\r\n          kbd = this.listedKeyboards[found].keyboard;\r\n        }\r\n\r\n        if(!kbd) {\r\n          return false;\r\n        }\r\n\r\n        return this.selectKeyboard(event, lang, kbd, true);\r\n      }\r\n\r\n\r\n      /**\r\n       * Enable a selected keyboard\r\n       *\r\n       * @param       {Object}  event\r\n       * @param       {Object}  lang\r\n       * @param       {Object}  kbd\r\n       * @param       {boolean} updateKeyman\r\n       * @return      {boolean}\r\n       **/\r\n      selectKeyboard(event: Event, lang: LanguageEntry, kbd: KeyboardDetail, updateKeyman: boolean) {\r\n        keymanweb.activatingUI(true);\r\n\r\n        if(this.selectedLanguage) {\r\n          let found = this.findListedKeyboard(this.selectedLanguage);\r\n          if(found != null) {\r\n            this.listedKeyboards[found].buttonNode.className = 'kmw_button';\r\n          }\r\n        }\r\n\r\n        this.offButtonNode.className = 'kmw_button';\r\n        this.selectedKeyboard = kbd;\r\n\r\n        // In 12.0, this UI class has only been partially converted to BCP-47.\r\n        // `lang.id` refers to the base language identifier and will NOT include\r\n        // any subtags.  We want the FULL language identifier here, with subtags.\r\n        this.selectedLanguage = kbd.LanguageCode;\r\n\r\n        // Return focus to input area and activate the selected keyboard\r\n        this.addKeyboardToList(lang, kbd);\r\n        if(updateKeyman) {\r\n          keymanweb.setActiveKeyboard(kbd.InternalName, kbd.LanguageCode).then(() => {\r\n            // Restore focus _after_ the keyboard finishes loading.\r\n            this.setLastFocus();\r\n          });\r\n        }\r\n        this.listedKeyboards[this.findListedKeyboard(lang)].buttonNode.className = 'kmw_button_selected';\r\n\r\n        // Always save current state when selecting a keyboard\r\n        this.saveCookie();\r\n        this.enableControls();\r\n\r\n        keymanweb.activatingUI(false);\r\n\r\n        return this.hideKeyboardsPopup(event) || this.hideKeyboardsForLanguage(event);\r\n      }\r\n\r\n      /**\r\n       * Enable all UI controls\r\n       *\r\n       * @return      {boolean}\r\n       **/\r\n      enableControls(): boolean {\r\n        let elems = [\r\n          this.offButtonNode,\r\n          this.offBarNode,\r\n          this.oskButtonNode,\r\n          this.oskBarNode\r\n        ];\r\n        let hideOskButton=false;\r\n\r\n        if(keymanweb.isCJK(this.selectedKeyboard)) {\r\n          hideOskButton = true;\r\n        } else if(this.selectedKeyboard == null) {\r\n          hideOskButton = (elems[2].style.display == 'none');\r\n        }\r\n\r\n        if(this.selectedKeyboard != null || this.listedKeyboards.length > 0) {\r\n          for(let i = 0; i < elems.length; i++) {\r\n            elems[i].style.display='';\r\n          }\r\n        } else {\r\n          for(let i = 0; i < elems.length; i++) {\r\n            elems[i].style.display='none';\r\n          }\r\n        }\r\n\r\n        if(hideOskButton) {\r\n          this.oskButtonNode.style.display = this.oskBarNode.style.display = 'none';\r\n        } else if(this.selectedKeyboard == null) {\r\n          this.oskButtonNode.className='kmw_button_disabled';\r\n        }\r\n        // else {\r\n        //   ui.oskButtonNode.className=(osk && osk.isEnabled() ? 'kmw_button_selected' : 'kmw_button');\r\n        // }\r\n\r\n        // Display the toolbar if still hidden\r\n        this.toolbarNode.parentElement.style.visibility='visible';\r\n        return true;\r\n      }\r\n\r\n      /**\r\n       * Restore the focus to the last focused element\r\n       **/\r\n      setLastFocus() {\r\n        keymanweb.focusLastActiveElement();\r\n      }\r\n\r\n      /**\r\n       * Display or hide the OSK according to user control. This will always force\r\n       * the focus to the last active element if currently unfocused, which is\r\n       * preferable to not having the OSK appear when the OSK button is clicked.\r\n       *\r\n       * @param       {Object}  event\r\n       * @return      {boolean}\r\n       **/\r\n      readonly showOSK = (event: Event) => {\r\n        let osk = keymanweb.osk;\r\n        if(!osk) {\r\n          return false;\r\n        }\r\n        keymanweb.activatingUI(true);\r\n        //Toggle OSK on or off\r\n        if(osk && keymanweb.getActiveKeyboard() != '') {\r\n          if(osk.isEnabled()) {\r\n            osk.hide();\r\n           } else {\r\n            osk.show(true);\r\n           }\r\n        }\r\n        this.setLastFocus();\r\n        keymanweb.activatingUI(false);\r\n        return this.eventCapture(event);\r\n      }\r\n\r\n\r\n      /**\r\n       * Function     offButtonClickEvent\r\n       * Scope        Private\r\n       * @param       {Object}  event\r\n       * @return      {boolean}\r\n       * Description  Update the UI when all keyboards disabled by user\r\n       **/\r\n      readonly offButtonClickEvent = (event: Event) => {\r\n        if(this.toolbarNode.className != 'kmw_controls_disabled') {\r\n          this.hideKeyboardsForLanguage(null);\r\n          if(this.selectedLanguage) {\r\n            var found = this.findListedKeyboard(this.selectedLanguage);\r\n            if(found != null) {\r\n              this.listedKeyboards[found].buttonNode.className = 'kmw_button';\r\n            }\r\n          }\r\n          this.selectedKeyboard = null;\r\n          this.selectedLanguage = null;\r\n          this.offButtonNode.className = 'kmw_button_selected';\r\n        }\r\n\r\n        // Return the focus to the input area and set the active keyboard to nothing\r\n        this.setLastFocus();\r\n        keymanweb.setActiveKeyboard('','');\r\n\r\n        //Save current state when deselecting a keyboard (may not be needed)\r\n        this.saveCookie();\r\n        this.enableControls();\r\n        return this.eventCapture(event);\r\n      }\r\n\r\n      /**\r\n       * Function     eventCapture\r\n       * Scope        Private\r\n       * @param       {Object}  event\r\n       * @return      {boolean}\r\n       * Description  Browser-independent event capture\r\n       **/\r\n      readonly eventCapture = (event?: Event) => {\r\n        if(!event) {\r\n          event = window.event;\r\n        }\r\n        if(window.event) {\r\n          window.event.returnValue = false;\r\n        }\r\n        if(event) {\r\n          event.cancelBubble = true;\r\n        }\r\n\r\n        return false;\r\n      }\r\n\r\n      /**\r\n       * Function     selectRegion\r\n       * Scope        Private\r\n       * @param       {Object}  event\r\n       * @param       {string}  region\r\n       * @return      {boolean}\r\n       * Description  Select the region for which to list languages\r\n       **/\r\n      readonly selectRegion = (event: Event, region: string) => {\r\n        let e = this.browseMapNode;\r\n\r\n        if(!e) {\r\n          return this.eventCapture(event);\r\n        }\r\n\r\n        e.className = 'kmw_browsemap_'+region;\r\n        if(typeof(this.regionLanguageListNodes[region]) == 'undefined') {\r\n          this.updateMap = true;\r\n          this.addKeyboardsToMap();\r\n        }\r\n\r\n        this.regionLanguageListNodes[region].style.display='block';\r\n        this.regionNodes[region].className='selected';\r\n        if(this.selectedRegion != null && this.selectedRegion != region) {\r\n          this.regionLanguageListNodes[this.selectedRegion].style.display='none';\r\n          this.regionNodes[this.selectedRegion].className='';\r\n        }\r\n        this.selectedRegion = region;\r\n        //this.saveCookie();\r\n        return this.eventCapture(event);\r\n      }\r\n\r\n      /**\r\n       * Function     unhoverRegion\r\n       * Scope        Private\r\n       * @param       {Object}  event\r\n       * @param       {string}  region\r\n       * @return      {boolean}\r\n       * Description  Remove highlighting from a region\r\n       **/\r\n      readonly unhoverRegion = (event: Event, region: string) => {\r\n        this.browseMapNode.className = (this.selectedRegion == null ? '' : 'kmw_browsemap_' + this.selectedRegion);\r\n        this.regionNodes[region].className=(this.selectedRegion==region?'selected':'');\r\n        return this.eventCapture(event);\r\n      }\r\n\r\n      /**\r\n       * Function     hoverRegion\r\n       * Scope        Private\r\n       * @param       {Object}  event\r\n       * @param       {string}  region\r\n       * @return      {boolean}\r\n       * Description  Highlight a hovered region\r\n       **/\r\n      readonly hoverRegion = (event: Event, region: string) => {\r\n        this.browseMapNode.className = 'kmw_browsemap_'+region+'_sel';\r\n        this.regionNodes[region].className='hover';\r\n        return this.eventCapture(event);\r\n      }\r\n\r\n      /**\r\n       * Function     pluck\r\n       * Scope        Private\r\n       * @param       {Object}  elem\r\n       * @param       {string}  property\r\n       * @return      {*}\r\n       * Description  Get the value of an element property\r\n       **/\r\n      pluck(elem: HTMLElement, property: string) {\r\n        // @ts-ignore\r\n        return elem.getAttribute ? elem.getAttribute(property) || elem[property] : elem[property];\r\n      };\r\n\r\n      /**\r\n       * Function     focusControlEvent\r\n       * Scope        Private\r\n       * @param       {Object}  params    Object containing Target element (or frame)\r\n       * @return      {boolean}\r\n       * Description  UI code to be executed on receiving focus\r\n       */\r\n      readonly focusControlEvent = (params: {target: HTMLElement, activeControl: HTMLElement}) => {\r\n        if(!this.init) {\r\n          return true;\r\n        }\r\n\r\n        let t=params.target;\r\n        if(t.tagName.toLowerCase() == 'textarea' ||\r\n          (t.tagName.toLowerCase() == 'input' && (t as HTMLInputElement).type.toLowerCase() == 'text')\r\n        ) {\r\n          this.lastActiveControl = t;\r\n          if(this.pluck(t, 'kmw_disable')) {\r\n            if(this.toolbarNode.className != 'kmw_controls_disabled') {\r\n              this.toolbarNode.className = 'kmw_controls_disabled';\r\n            }\r\n          } else {\r\n            if(this.selectedKeyboard != null) {\r\n              if(keymanweb.isCJK()) {\r\n                this.oskButtonNode.style.display = this.oskBarNode.style.display = 'none';\r\n              } else {\r\n                let osk = keymanweb.osk;\r\n                this.oskButtonNode.className = (osk && osk.isEnabled()) ? 'kmw_button_selected' : 'kmw_button';\r\n              }\r\n            }\r\n\r\n            if(this.toolbarNode.className != '') {\r\n              this.toolbarNode.className = '';\r\n            }\r\n\r\n            // NOTE:  as best as I can tell, this is to be specified by the site developer, not KMW.\r\n            // I don't see documentation for it on first glance, though.\r\n            let offsetX, offsetY;\r\n            // @ts-ignore\r\n            if(t['KMW_HelpOffsetX']) {\r\n              // @ts-ignore\r\n              offsetX = t['KMW_HelpOffsetX'];\r\n            } else {\r\n              offsetX = 64;\r\n            }\r\n\r\n            // @ts-ignore\r\n            if(t['KMW_HelpOffsetY']) {\r\n              // @ts-ignore\r\n              offsetY = t['KMW_HelpOffsetY'];\r\n            } else {\r\n              offsetY = 0;\r\n            }\r\n\r\n            this.helpOffsetX = util.getAbsoluteX(t)+offsetX;\r\n            this.helpOffsetY = util.getAbsoluteY(t)+t.offsetHeight+offsetY;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n\r\n      /**\r\n       * Function     oncontrolblurred\r\n       * Scope        Private\r\n       * Parameters   {Object}  params  Object containing event\r\n       * @return      {boolean}\r\n       * Description  UI code to be executed on losing focus\r\n       */\r\n      readonly blurControlEvent = () => {\r\n        if(!this.init) {\r\n          return true;\r\n        }\r\n\r\n        // Must disable OSK button when not focused\r\n        if(this.oskButtonNode.style.display != 'none') {\r\n          this.oskButtonNode.className='kmw_button_disabled';\r\n        }\r\n\r\n        return true;\r\n      }\r\n\r\n      /**\r\n       * UI action required when keyboard changed indirectly\r\n       *\r\n       * @param       {Object}  p   keyboard selection object\r\n       * @return      {boolean}\r\n       **/\r\n      readonly changeKeyboardEvent = (p: {\r\n        internalName: string,\r\n        languageCode: string\r\n      }) => {  // Uses a different format than .getKeyboards(), b/c why not?\r\n        // https://help.keyman.com/developer/engine/web/16.0/reference/core/getKeyboards vs\r\n        // https://help.keyman.com/developer/engine/web/16.0/reference/events/kmw.keyboardchange\r\n        this.lastSelectedKeyboard = null;\r\n        let kbName=p.internalName,\r\n            lgName=keymanweb.util.getLanguageCodes(p.languageCode)[0];\r\n        if(lgName != '' && kbName != '') {\r\n          let lg = this.languages[lgName];\r\n          if(lg != null) {\r\n            for(let j=0; j<lg.keyboards.length; j++) {\r\n              if(lg.keyboards[j].InternalName == kbName) {\r\n                this.selectKeyboard(null, lg, lg.keyboards[j], false);\r\n                return true;\r\n              }\r\n            }\r\n          }\r\n          this.lastSelectedKeyboard = {...p};\r\n        }\r\n        return true;\r\n      }\r\n\r\n      /**\r\n       * UI action when OSK displayed: restore to or update the saved OSK position\r\n       *\r\n       * @param       {Object}  oskPosition\r\n       * @return      {Object}\r\n       **/\r\n      readonly onShowOSK = (oskPosition: any) => {\r\n        if(this.init) {\r\n          this.oskButtonNode.className = 'kmw_button_selected';\r\n        }\r\n\r\n        //The return value is not currently useful, but allows for the possibility of the OSK restricting or limiting\r\n        //a UI-set position, and returning the corrected position to the UI\r\n        return oskPosition;\r\n      }\r\n\r\n      /**\r\n       * Update appearance of OSK button whenever the OSK is hidden by the user\r\n       *\r\n       * @param       {Object}  p\r\n       **/\r\n      readonly onHideOSK = (p: {\r\n        HiddenByUser?: boolean\r\n      }) => {\r\n        if(this.init && p.HiddenByUser) {\r\n          this.oskButtonNode.className = 'kmw_button';\r\n        }\r\n      }\r\n\r\n      registerEvents() {\r\n        let osk = keymanweb.osk;\r\n        if(!osk) {\r\n          return;\r\n        }\r\n\r\n        osk.addEventListener('show', this.onShowOSK);\r\n        osk.addEventListener('hide', this.onHideOSK);\r\n      }\r\n\r\n      /**\r\n       * Function     showKeyboardsPopup\r\n       * Scope        Private\r\n       * @param       {Object}  event\r\n       * @return      {boolean}\r\n       * Description  Update the map when displayed\r\n       **/\r\n      readonly showKeyboardsPopup = (event: Event) => {\r\n        // Add any newly available keyboards to the map\r\n        this.addKeyboardsToMap();\r\n\r\n        if(this.toolbarNode.className == 'kmw_controls_disabled') {\r\n          return this.eventCapture(event);\r\n        }\r\n        this.hideKeyboardsForLanguage(null);\r\n        if(this.selectorNode.className=='kmw_over') {\r\n          return this.hideKeyboardsPopup(event);\r\n        }\r\n        this.selectorNode.className='kmw_over';\r\n        this.keyboardsButtonNode.className='kmw_button_selected';\r\n\r\n        this.SetupPopupDismissal(this.selectorNode, this.hideKeyboardsPopup);\r\n        return this.eventCapture(event);\r\n      }\r\n\r\n      /**\r\n       * Function     hideKeyboardsPopup\r\n       * Scope        Private\r\n       * @param       {Object}  event\r\n       * @return      {boolean}\r\n       * Description  Hide the list of keyboards for this language\r\n       **/\r\n      readonly hideKeyboardsPopup = (event: Event) => {\r\n        this.selectorNode.className='';\r\n        this.keyboardsButtonNode.className='kmw_button';\r\n        this.CancelPopupDismissal(this.hideKeyboardsPopup);\r\n        return this.eventCapture(event);\r\n      }\r\n\r\n      /**\r\n       * Hide both language and keyboard selection popups on body click\r\n       * @param   {Object}  event\r\n       * @return  {boolean}\r\n      **/\r\n      readonly hideAllPopups = (event: Event) => {\r\n        var e = this.keyboardsForLangPopup;\r\n        if((!e || (e.style.display =='none')) && (this.selectorNode.className == '')) {\r\n          return true;\r\n        }\r\n        this.hideKeyboardsPopup(event);\r\n        this.hideKeyboardsForLanguage(event);\r\n        return this.eventCapture(event);\r\n      }\r\n\r\n      // Fields only used for the three Popup-related methods that follow.\r\n\r\n      /**\r\n       * A closure to be evaluated upon dismissal of a modal popup generated\r\n       * by this UI module.\r\n       */\r\n      dismissalCallback: (event: MouseEvent) => any = null;\r\n\r\n      /**\r\n       * The root element associated with an active modal popup; related\r\n       * events will check to see if they are a descendant (or this element).\r\n       */\r\n      popupElement: HTMLElement = null;\r\n\r\n      /**\r\n       * As we replace any `onclick` event listener when acting modally\r\n       * for the popup, we stash the old event listener here and restore\r\n       * it when we're done.\r\n       */\r\n      lastDismissalCallback: (event: MouseEvent) => any = null;\r\n\r\n      /**\r\n       * Function     PopupDismissal\r\n       * Scope        Private\r\n       * @param       {Object}  event\r\n       * @return      {Object}\r\n       * Description  Carry out action when popup dismissed\r\n       **/\r\n      readonly PopupDismissal = (event: Event) => {\r\n        let t = ((event && event.target) || (window.event && window.event.srcElement)) as HTMLElement;\r\n        if(t) {\r\n          while(t.parentElement) {\r\n            if (t == this.popupElement) {\r\n              return null;\r\n            }\r\n            t = t.parentElement;\r\n          }\r\n        }\r\n        if(t.nodeName == '#document') {\r\n          this.hideAllPopups(event); //KMEW-41, fixed for build 356.\r\n        }\r\n        return this.dismissalCallback;\r\n      }\r\n\r\n      /**\r\n       * Function     SetupPopupDismissal\r\n       * Scope        Private\r\n       * @param       {Object}            element\r\n       * @param       {function(Object)}  callback\r\n       * Description  Prepare for callback dismissal\r\n       **/\r\n      SetupPopupDismissal(element: HTMLElement, callback: (event: MouseEvent) => any) {\r\n        if(this.PopupDismissal == document.onclick) {\r\n          this.CancelPopupDismissal(this.dismissalCallback);\r\n        }\r\n        this.dismissalCallback = callback;\r\n        this.popupElement = element;\r\n        this.lastDismissalCallback = document.onclick;\r\n        document.onclick = this.PopupDismissal;\r\n      }\r\n\r\n      /**\r\n       * Function     CancelPopupDismissal\r\n       * Scope        Private\r\n       * @param       {?function(Object)}  callback\r\n       * Description  Cancel callback dismissal\r\n       **/\r\n      CancelPopupDismissal(callback?: (event: MouseEvent) => void) {\r\n        if(this.PopupDismissal == document.onclick) {\r\n          document.onclick = this.lastDismissalCallback;\r\n          this.lastDismissalCallback = null;\r\n          this.dismissalCallback = null;\r\n          this.popupElement = null;\r\n        }\r\n      }\r\n\r\n\r\n\r\n\r\n      /**\r\n       * Load the previous state from the KeymanWeb_Keyboard and KeymanWeb_Toolbar cookies\r\n       **/\r\n      loadCookie() {\r\n        let currentKeyboard='';\r\n        const kc=util.loadCookie<KeyboardCookie>(\"KeymanWeb_Keyboard\");\r\n        if(kc.current != undefined) {\r\n          currentKeyboard = kc.current.split(':')[0];\r\n        }\r\n\r\n        const c=util.loadCookie<ToolbarCookie>(\"KeymanWeb_Toolbar\");\r\n\r\n        if(c.region != undefined) {\r\n          this.selectedRegion = c.region;\r\n        }\r\n\r\n        // If there's a defined length for the cookie's keyboard count...\r\n        if(c.maxrecent != undefined) {\r\n\r\n          // Iterate over the implicit array\r\n          for(let i=0; i < c.maxrecent; i++) {\r\n            // Is the entry actually defined?\r\n            if(c[`recent${i}`] != undefined) {\r\n              var r=c[`recent${i}`].split(',');\r\n              // Does its definition have the expected format?  That is: langID,keyboardID\r\n              if(r.length == 2) {\r\n                var k = this.languages[r[0]];\r\n                // If the language has a defined entry in our list of loaded languages...\r\n                if(k != null) {\r\n                  // Then, for our loaded keyboards for said loaded language...\r\n                  // find the most recent match that is available in our current list.\r\n                  for(var j=0; j<k.keyboards.length; j++) {\r\n                    if(k.keyboards[j].InternalName == r[1]) {\r\n                      this.addKeyboardToList(k, k.keyboards[j]);\r\n                      if(k.keyboards[j].InternalName == currentKeyboard) {\r\n                        this.selectKeyboard(null, k, k.keyboards[j], true);\r\n                        window.focus();\r\n                        this.setLastFocus();\r\n                        break;\r\n                      }\r\n                      break;\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          // If language list and keyboard list have not yet been saved as a cookie,\r\n          // initialize to the current (default) language and keyboard, if set by KMW\r\n          let kbName=keymanweb.getActiveKeyboard();\r\n          let lgName=keymanweb.getActiveLanguage();\r\n          if(lgName != '' && kbName != '') {\r\n            var lg = this.languages[lgName];\r\n            if(lg != null) {\r\n              for(var j=0; j<lg.keyboards.length; j++) {\r\n                if(lg.keyboards[j].InternalName == kbName) {\r\n                  this.selectKeyboard(null, lg, lg.keyboards[j], true);\r\n                  window.focus();\r\n                  this.setLastFocus();\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Save the current UI state in the KeymanWeb_Toolbar cookie\r\n       **/\r\n      saveCookie() {\r\n        let vs: ToolbarCookie ={\r\n          region: this.selectedRegion,\r\n          maxrecent: this.listedKeyboards.length\r\n        };\r\n        vs.region = this.selectedRegion;\r\n        vs.maxrecent = this.listedKeyboards.length;\r\n\r\n        for(var i=0; i<this.listedKeyboards.length; i++) {\r\n          vs[`recent${i}`] = this.listedKeyboards[i].lang.id+\",\"+this.listedKeyboards[i].keyboard.InternalName;\r\n        }\r\n\r\n        util.saveCookie<ToolbarCookie>('KeymanWeb_Toolbar',vs);\r\n      }\r\n\r\n    }\r\n\r\n    const ui = keymanweb.ui = new ToolbarUI();\r\n\r\n    keymanweb.addEventListener('keyboardregistered', ui.registerKeyboard);\r\n    keymanweb.addEventListener('controlfocused', ui.focusControlEvent);\r\n    keymanweb.addEventListener('controlblurred', ui.blurControlEvent);\r\n    keymanweb.addEventListener('keyboardchange', ui.changeKeyboardEvent);\r\n\r\n    // Initialize when everything defined (replaces unreliable onload event handler)\r\n    // In case the toolbar script loads a bit later than the main KMW script\r\n    // (may happen in unit testing)\r\n    ui.initialize(); // equivalent to ui.Initialize() from the other UI modules\r\n  } catch(ex){}\r\n}"
  ],
  "mappings": "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",
  "names": [
    "_a",
    "keymanweb",
    "util",
    "_ToolbarUI",
    "Keyboards",
    "n",
    "i",
    "colNode",
    "max",
    "count",
    "languageCode",
    "j",
    "kbdRegion",
    "bcpSubtags",
    "x",
    "langNode",
    "aNode",
    "lang",
    "event",
    "a",
    "b",
    "e",
    "osk",
    "found",
    "region",
    "params",
    "offsetX",
    "offsetY",
    "p",
    "kbName",
    "lgName",
    "lg",
    "oskPosition",
    "tag",
    "id",
    "className",
    "innerHTML",
    "node",
    "tbNode",
    "imgNode",
    "mapNode",
    "areaNode",
    "listNode",
    "itemNode",
    "img",
    "root",
    "kbd",
    "oldestPriority",
    "oldestFound",
    "rk",
    "buttonNode",
    "p1",
    "p2",
    "thisANode",
    "divNode",
    "kbdText",
    "thisLang",
    "thisButtonNode",
    "PName",
    "PLen",
    "updateKeyman",
    "elems",
    "hideOskButton",
    "elem",
    "property",
    "element",
    "callback",
    "currentKeyboard",
    "kc",
    "c",
    "r",
    "k",
    "vs",
    "__name",
    "ToolbarUI",
    "ui",
    "ex"
  ]
}