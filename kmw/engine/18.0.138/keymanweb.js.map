{
  "version": 3,
  "sources": [
    "node_modules/eventemitter3/index.js",
    "common/web/types/src/consts/modifier-key-constants.ts",
    "common/web/types/src/consts/virtual-key-constants.ts",
    "common/web/types/src/keyman-touch-layout/keyman-touch-layout-file.ts",
    "common/web/types/src/util/util.ts",
    "common/web/types/src/keyboard-object.ts",
    "node_modules/eventemitter3/index.mjs",
    "web/src/engine/keyboard/src/codes.ts",
    "web/src/engine/keyboard/src/defaultRules.ts",
    "web/src/engine/keyboard/src/keyEvent.ts",
    "web/src/engine/keyboard/src/keyMapping.ts",
    "web/src/engine/common/web-utils/src/deepCopy.ts",
    "web/src/engine/common/web-utils/src/deviceSpec.ts",
    "common/web/keyman-version/version.inc.ts",
    "web/src/engine/common/web-utils/src/version.ts",
    "web/src/engine/common/web-utils/src/globalObject.ts",
    "web/src/engine/common/web-utils/src/kmwstring.ts",
    "web/src/engine/common/web-utils/src/managedPromise.ts",
    "web/src/engine/common/web-utils/src/timeoutPromise.ts",
    "web/src/engine/keyboard/src/keyboards/defaultLayouts.ts",
    "web/src/engine/keyboard/src/keyboards/activeLayout.ts",
    "web/src/engine/keyboard/src/keyboards/keyboard.ts",
    "web/src/engine/keyboard/src/keyboards/keyboardHarness.ts",
    "web/src/engine/keyboard/src/keyboards/keyboardLoaderBase.ts",
    "web/src/engine/keyboard/src/keyboards/spacebarText.ts",
    "web/src/engine/keyboard/src/keyboards/keyboardProperties.ts",
    "web/src/engine/interfaces/src/pathConfiguration.ts",
    "web/src/engine/interfaces/src/optionSpec.interface.ts",
    "web/src/engine/interfaces/src/prediction/languageProcessor.interface.ts",
    "web/src/engine/interfaces/src/prediction/predictionContext.ts",
    "web/src/engine/main/src/headless/utils/styleConstants.ts",
    "web/src/engine/main/src/headless/deviceDetector.ts",
    "web/src/engine/main/src/engineConfiguration.ts",
    "web/src/engine/main/src/contextManagerBase.ts",
    "web/src/engine/main/src/hardKeyboard.ts",
    "web/src/engine/js-processor/src/stringDivergence.ts",
    "web/src/engine/js-processor/src/deadkeys.ts",
    "web/src/engine/js-processor/src/outputTarget.ts",
    "web/src/engine/js-processor/src/mock.ts",
    "web/src/engine/js-processor/src/ruleBehavior.ts",
    "web/src/engine/js-processor/src/systemStores.ts",
    "web/src/engine/js-processor/src/kbdInterface.ts",
    "web/src/engine/js-processor/src/keyboardProcessor.ts",
    "web/src/engine/keyboard-storage/src/stubAndKeyboardCache.ts",
    "web/src/engine/keyboard-storage/src/keyboardStub.ts",
    "web/src/engine/keyboard-storage/src/cloud/queryEngine.ts",
    "web/src/engine/keyboard-storage/src/keyboardRequisitioner.ts",
    "web/src/engine/keyboard-storage/src/modelCache.ts",
    "web/src/engine/dom-utils/src/arrayFromNodeList.ts",
    "web/src/engine/dom-utils/src/createUnselectableElement.ts",
    "web/src/engine/dom-utils/src/stylesheets.ts",
    "web/src/engine/dom-utils/src/landscapeView.ts",
    "web/src/engine/dom-utils/src/cookieSerializer.ts",
    "web/src/engine/dom-utils/src/getAbsolute.ts",
    "web/src/engine/main/src/variableStoreCookieSerializer.ts",
    "web/src/engine/main/src/keyboardInterface.ts",
    "web/src/engine/keyboard/src/keyboards/loaders/domKeyboardLoader.ts",
    "web/src/engine/main/src/headless/contextWindow.ts",
    "web/src/engine/predictive-text/worker-main/src/promise-store.ts",
    "web/src/engine/predictive-text/worker-main/src/lmlayer.ts",
    "web/src/engine/predictive-text/worker-main/src/unwrap.ts",
    "web/src/engine/predictive-text/worker-thread/build/lib/worker-main.wrapped.min.js",
    "web/src/engine/predictive-text/worker-main/src/web/worker.ts",
    "web/src/engine/main/src/headless/languageProcessor.ts",
    "web/src/engine/main/src/headless/transcriptionCache.ts",
    "web/src/engine/main/src/headless/inputProcessor.ts",
    "web/src/engine/events/src/domEventTracker.ts",
    "web/src/engine/events/src/emitterListenerSpy.ts",
    "web/src/engine/events/src/legacyEventEmitter.ts",
    "web/src/engine/keyboard-storage/src/domCloudRequester.ts",
    "web/src/engine/main/src/keymanEngine.ts",
    "web/src/engine/osk/src/banner/banner.ts",
    "web/src/engine/osk/src/lengthStyle.ts",
    "web/src/engine/osk/src/banner/blankBanner.ts",
    "web/src/engine/osk/src/banner/bannerView.ts",
    "web/src/engine/osk/src/banner/imageBanner.ts",
    "web/src/engine/osk/gesture-processor/src/engine/reportError.ts",
    "web/src/engine/osk/gesture-processor/src/engine/headless/asyncClosureDispatchQueue.ts",
    "web/src/engine/osk/gesture-processor/src/engine/headless/inputSample.ts",
    "web/src/engine/osk/gesture-processor/src/engine/headless/cumulativePathStats.ts",
    "web/src/engine/osk/gesture-processor/src/engine/headless/gestures/specs/gestureModelDefs.ts",
    "web/src/engine/osk/gesture-processor/src/engine/configuration/viewportZoneSource.ts",
    "web/src/engine/osk/gesture-processor/src/engine/configuration/paddedZoneSource.ts",
    "web/src/engine/osk/gesture-processor/src/engine/configuration/gestureRecognizerConfiguration.ts",
    "web/src/engine/osk/gesture-processor/src/engine/headless/gesturePath.ts",
    "web/src/engine/osk/gesture-processor/src/engine/headless/gestureDebugPath.ts",
    "web/src/engine/osk/gesture-processor/src/engine/headless/gestureSource.ts",
    "web/src/engine/osk/gesture-processor/src/engine/headless/gestureDebugSource.ts",
    "web/src/engine/osk/gesture-processor/src/engine/headless/inputEngineBase.ts",
    "web/src/engine/osk/gesture-processor/src/engine/inputEventEngine.ts",
    "web/src/engine/osk/gesture-processor/src/engine/configuration/zoneBoundaryChecker.ts",
    "web/src/engine/osk/gesture-processor/src/engine/mouseEventEngine.ts",
    "web/src/engine/osk/gesture-processor/src/engine/touchEventEngine.ts",
    "web/src/engine/osk/gesture-processor/src/engine/headless/gestures/matchers/pathMatcher.ts",
    "web/src/engine/osk/gesture-processor/src/engine/headless/gestures/matchers/gestureMatcher.ts",
    "web/src/engine/osk/gesture-processor/src/engine/headless/gestures/matchers/matcherSelector.ts",
    "web/src/engine/osk/gesture-processor/src/engine/headless/gestures/matchers/gestureSequence.ts",
    "web/src/engine/osk/gesture-processor/src/engine/headless/touchpointCoordinator.ts",
    "web/src/engine/osk/gesture-processor/src/engine/headless/gestures/specs/index.ts",
    "web/src/engine/osk/gesture-processor/src/engine/gestureRecognizer.ts",
    "web/src/engine/osk/gesture-processor/src/engine/headless/gestures/index.ts",
    "web/src/engine/osk/gesture-processor/src/engine/headless/gestures/matchers/index.ts",
    "web/src/engine/osk/src/corrections.ts",
    "web/src/engine/osk/src/input/gestures/browser/flick.ts",
    "web/src/engine/osk/src/input/gestures/specsForLayout.ts",
    "web/src/engine/osk/src/banner/bannerGestureSet.ts",
    "web/src/engine/osk/src/fontSizeUtils.ts",
    "web/src/engine/osk/src/keyboard-layout/getTextMetrics.ts",
    "web/src/engine/osk/src/banner/bannerScrollState.ts",
    "web/src/engine/osk/src/banner/suggestionBanner.ts",
    "web/src/engine/osk/src/banner/htmlBanner.ts",
    "web/src/engine/osk/src/banner/bannerController.ts",
    "web/src/engine/osk/src/components/emptyView.ts",
    "web/src/engine/osk/src/components/helpPageView.ts",
    "web/src/engine/osk/src/correctionLayout.ts",
    "web/src/engine/osk/src/specialCharacters.ts",
    "web/src/engine/osk/src/buttonClassNames.ts",
    "web/src/engine/osk/src/keyboard-layout/oskKey.ts",
    "web/src/engine/osk/src/keyElement.ts",
    "web/src/engine/osk/src/keyboard-layout/oskBaseKey.ts",
    "web/src/engine/osk/src/keyboard-layout/oskRow.ts",
    "web/src/engine/osk/src/keyboard-layout/oskLayer.ts",
    "web/src/engine/osk/src/keyboard-layout/oskLayerGroup.ts",
    "web/src/engine/osk/src/input/gestures/browser/keytip.ts",
    "web/src/engine/osk/src/input/gestures/browser/tabletPreview.ts",
    "web/src/engine/osk/src/screenUtils.ts",
    "web/src/engine/osk/src/input/gestures/heldRepeater.ts",
    "web/src/engine/osk/src/input/gestures/browser/oskSubKey.ts",
    "web/src/engine/osk/src/input/gestures/browser/subkeyPopup.ts",
    "web/src/engine/osk/src/input/gestures/browser/modipress.ts",
    "web/src/engine/osk/src/input/gestures/browser/multitap.ts",
    "web/src/engine/osk/src/keyboard-layout/gesturePreviewHost.ts",
    "web/src/engine/osk/src/visualKeyboard.ts",
    "web/src/engine/osk/src/views/activator.ts",
    "web/src/engine/osk/src/views/touchEventPromiseMap.ts",
    "web/src/engine/osk/src/views/oskView.ts",
    "web/src/engine/osk/src/components/titleBar.ts",
    "web/src/engine/osk/src/components/resizeBar.ts",
    "web/src/engine/osk/src/input/mouseDragOperation.ts",
    "web/src/engine/osk/src/views/twoStateActivator.ts",
    "web/src/engine/osk/src/views/floatingOskCookie.ts",
    "web/src/engine/osk/src/views/floatingOskView.ts",
    "web/src/engine/osk/src/views/anchoredOskView.ts",
    "web/src/engine/osk/src/views/simpleActivator.ts",
    "web/src/engine/osk/src/views/inlinedOskView.ts",
    "web/src/app/browser/src/viewsAnchorpoint.ts",
    "web/src/engine/element-wrappers/src/outputTarget.ts",
    "web/src/engine/element-wrappers/src/input.ts",
    "web/src/engine/element-wrappers/src/textarea.ts",
    "web/src/engine/element-wrappers/src/designIFrame.ts",
    "web/src/engine/element-wrappers/src/contentEditable.ts",
    "web/src/engine/element-wrappers/src/utils.ts",
    "web/src/engine/element-wrappers/src/wrapElement.ts",
    "web/src/app/browser/src/utils/alertHost.ts",
    "web/src/app/browser/src/utils/documentReady.ts",
    "web/src/app/browser/src/configuration.ts",
    "web/src/engine/attachment/src/attachmentInfo.ts",
    "web/src/engine/attachment/src/outputTargetForElement.ts",
    "web/src/engine/attachment/src/pageContextAttachment.ts",
    "web/src/app/browser/src/context/focusAssistant.ts",
    "web/src/app/browser/src/contextManager.ts",
    "web/src/app/browser/src/defaultBrowserRules.ts",
    "web/src/app/browser/src/hardwareEventKeyboard.ts",
    "web/src/app/browser/src/utils/rotationProcessor.ts",
    "web/src/app/browser/src/context/pageIntegrationHandlers.ts",
    "web/src/app/browser/src/utils/createElement.ts",
    "web/src/app/browser/src/utils/getStyleValue.ts",
    "web/src/app/browser/src/languageMenu.ts",
    "web/src/app/browser/src/oskConfiguration.ts",
    "web/src/app/browser/src/utilApiEndpoint.ts",
    "web/src/app/browser/src/hotkeyManager.ts",
    "web/src/app/browser/src/beepHandler.ts",
    "web/src/app/browser/src/keyboardInterface.ts",
    "web/src/app/browser/src/keymanEngine.ts",
    "web/src/app/browser/src/release-main.ts"
  ],
  "sourceRoot": "https://s.keyman.com/kmw/engine/18.0.138/src",
  "sourcesContent": [
    "'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n",
    "/*\r\n * Keyman is copyright (C) SIL International. MIT License.\r\n *\r\n * Modifier key bit-flags\r\n */\r\n\r\nexport const ModifierKeyConstants = {\r\n  // Define Keyman Developer modifier bit-flags (exposed for use by other modules)\r\n  // Compare against /common/include/kmx_file.h.  CTRL+F \"#define LCTRLFLAG\" to find the secton.\r\n  LCTRLFLAG:      0x0001, // Left Control flag\r\n  RCTRLFLAG:      0x0002, // Right Control flag\r\n  LALTFLAG:       0x0004, // Left Alt flag\r\n  RALTFLAG:       0x0008, // Right Alt flag\r\n  K_SHIFTFLAG:    0x0010, // Either shift flag\r\n  K_CTRLFLAG:     0x0020, // Either ctrl flag\r\n  K_ALTFLAG:      0x0040, // Either alt flag\r\n  K_METAFLAG:     0x0080, // Either Meta-key flag (tentative).  Not usable in keyboard rules;\r\n                          // Used internally (currently, only by KMW) to ensure Meta-key\r\n                          // shortcuts safely bypass rules\r\n                          // Meta key = Command key on macOS, Windows key on Windows/Linux\r\n  CAPITALFLAG:    0x0100, // Caps lock on\r\n  NOTCAPITALFLAG: 0x0200, // Caps lock NOT on\r\n  NUMLOCKFLAG:    0x0400, // Num lock on\r\n  NOTNUMLOCKFLAG: 0x0800, // Num lock NOT on\r\n  SCROLLFLAG:     0x1000, // Scroll lock on\r\n  NOTSCROLLFLAG:  0x2000, // Scroll lock NOT on\r\n  ISVIRTUALKEY:   0x4000, // It is a Virtual Key Sequence\r\n  VIRTUALCHARKEY: 0x8000, // Keyman 6.0: Virtual Key Cap Sequence NOT YET\r\n\r\n  // Note: OTHER_MODIFIER = 0x10000, used by KMX+ for the\r\n  // other modifier flag in layers, > 16 bit so not available here.\r\n  // See keys_mod_other in keyman_core_ldml.ts\r\n}\r\n",
    "\r\n// Define standard keycode numbers (exposed for use by other modules)\r\n\r\n/**\r\n * May include non-US virtual key codes\r\n */\r\nexport const USVirtualKeyCodes = {\r\n  K_BKSP:8,\r\n  K_TAB:9,\r\n  K_ENTER:13,\r\n  K_SHIFT:16,\r\n  K_CONTROL:17,\r\n  K_ALT:18,\r\n  K_PAUSE:19,\r\n  K_CAPS:20,\r\n  K_ESC:27,\r\n  K_SPACE:32,\r\n  K_PGUP:33,\r\n  K_PGDN:34,\r\n  K_END:35,\r\n  K_HOME:36,\r\n  K_LEFT:37,\r\n  K_UP:38,\r\n  K_RIGHT:39,\r\n  K_DOWN:40,\r\n  K_SEL:41,\r\n  K_PRINT:42,\r\n  K_EXEC:43,\r\n  K_INS:45,\r\n  K_DEL:46,\r\n  K_HELP:47,\r\n  K_0:48,\r\n  K_1:49,\r\n  K_2:50,\r\n  K_3:51,\r\n  K_4:52,\r\n  K_5:53,\r\n  K_6:54,\r\n  K_7:55,\r\n  K_8:56,\r\n  K_9:57,\r\n  K_A:65,\r\n  K_B:66,\r\n  K_C:67,\r\n  K_D:68,\r\n  K_E:69,\r\n  K_F:70,\r\n  K_G:71,\r\n  K_H:72,\r\n  K_I:73,\r\n  K_J:74,\r\n  K_K:75,\r\n  K_L:76,\r\n  K_M:77,\r\n  K_N:78,\r\n  K_O:79,\r\n  K_P:80,\r\n  K_Q:81,\r\n  K_R:82,\r\n  K_S:83,\r\n  K_T:84,\r\n  K_U:85,\r\n  K_V:86,\r\n  K_W:87,\r\n  K_X:88,\r\n  K_Y:89,\r\n  K_Z:90,\r\n  K_NP0:96,\r\n  K_NP1:97,\r\n  K_NP2:98,\r\n  K_NP3:99,\r\n  K_NP4:100,\r\n  K_NP5:101,\r\n  K_NP6:102,\r\n  K_NP7:103,\r\n  K_NP8:104,\r\n  K_NP9:105,\r\n  K_NPSTAR:106,\r\n  K_NPPLUS:107,\r\n  K_SEPARATOR:108,\r\n  K_NPMINUS:109,\r\n  K_NPDOT:110,\r\n  K_NPSLASH:111,\r\n  K_F1:112,\r\n  K_F2:113,\r\n  K_F3:114,\r\n  K_F4:115,\r\n  K_F5:116,\r\n  K_F6:117,\r\n  K_F7:118,\r\n  K_F8:119,\r\n  K_F9:120,\r\n  K_F10:121,\r\n  K_F11:122,\r\n  K_F12:123,\r\n  K_NUMLOCK:144,\r\n  K_SCROLL:145,\r\n  K_LSHIFT:160,\r\n  K_RSHIFT:161,\r\n  K_LCONTROL:162,\r\n  K_RCONTROL:163,\r\n  K_LALT:164,\r\n  K_RALT:165,\r\n  K_COLON:186,\r\n  K_EQUAL:187,\r\n  K_COMMA:188,\r\n  K_HYPHEN:189,\r\n  K_PERIOD:190,\r\n  K_SLASH:191,\r\n  K_BKQUOTE:192,\r\n  K_LBRKT:219,\r\n  /**\r\n   * == K_OEM_5, 0xDC\r\n   */\r\n  K_BKSLASH:220,\r\n  K_RBRKT:221,\r\n  K_QUOTE:222,\r\n  /**\r\n   * ISO B00, key to right of left shift, not on US keyboard,\r\n   * 0xE2, K_OEM_102\r\n   */\r\n  K_oE2:226,\r\n  K_OE2:226,\r\n  K_oC1:193,  // ISO B11, ABNT-2 key to left of right shift, not on US keyboard\r\n  K_OC1:193,\r\n  'K_?C1':193,\r\n  'k_?C1':193,\r\n  K_oDF:0xDF,\r\n  K_ODF:0xDF,\r\n  K_LOPT:50001,\r\n  K_ROPT:50002,\r\n  K_NUMERALS:50003,\r\n  K_SYMBOLS:50004,\r\n  K_CURRENCIES:50005,\r\n  K_UPPER:50006,\r\n  K_LOWER:50007,\r\n  K_ALPHA:50008,\r\n  K_SHIFTED:50009,\r\n  K_ALTGR:50010,\r\n  K_TABBACK:50011,\r\n  K_TABFWD:50012\r\n};\r\n\r\nconst k = USVirtualKeyCodes;\r\n\r\n/** Map a CLDR scancode to a US VKey ala USVirtualKeyCodes */\r\nexport const CLDRScanToUSVirtualKeyCodes = {\r\n  0x02: k.K_1,\r\n  0x03: k.K_2,\r\n  0x04: k.K_3,\r\n  0x05: k.K_4,\r\n  0x06: k.K_5,\r\n  0x07: k.K_6,\r\n  0x08: k.K_7,\r\n  0x09: k.K_8,\r\n  0x0A: k.K_9,\r\n  0x0B: k.K_0,\r\n  0x0C: k.K_HYPHEN,\r\n  0x0D: k.K_EQUAL,\r\n\r\n  0x10: k.K_Q,\r\n  0x11: k.K_W,\r\n  0x12: k.K_E,\r\n  0x13: k.K_R,\r\n  0x14: k.K_T,\r\n  0x15: k.K_Y,\r\n  0x16: k.K_U,\r\n  0x17: k.K_I,\r\n  0x18: k.K_O,\r\n  0x19: k.K_P,\r\n  0x1A: k.K_LBRKT,\r\n  0x1B: k.K_RBRKT,\r\n\r\n  0x1E: k.K_A,\r\n  0x1F: k.K_S,\r\n  0x20: k.K_D,\r\n  0x21: k.K_F,\r\n  0x22: k.K_G,\r\n  0x23: k.K_H,\r\n  0x24: k.K_J,\r\n  0x25: k.K_K,\r\n  0x26: k.K_L,\r\n  0x27: k.K_COLON,\r\n  0x28: k.K_QUOTE,\r\n  0x29: k.K_BKQUOTE,\r\n\r\n  0x2B: k.K_BKSLASH,\r\n  0x2C: k.K_Z,\r\n  0x2D: k.K_X,\r\n  0x2E: k.K_C,\r\n  0x2F: k.K_V,\r\n  0x30: k.K_B,\r\n  0x31: k.K_N,\r\n  0x32: k.K_M,\r\n  0x33: k.K_COMMA,\r\n  0x34: k.K_PERIOD,\r\n  0x35: k.K_SLASH,\r\n\r\n  0x39: k.K_SPACE,\r\n\r\n  0x56: k.K_oE2, // << Same as 0x7D; found on iso, abnt2\r\n  0x73: k.K_oC1,\r\n  0x7D: k.K_oE2, // << Same as 0x56; found on jis\r\n\r\n};\r\n\r\nexport type KeyMap = number[][];\r\n\r\n/**\r\n * Convert a scan code numerical KeyMap to VKeys\r\n * @param scans keymap to convert\r\n * @param badScans output: set of not-found scancodes\r\n * @returns\r\n */\r\nexport function CLDRScanToKeyMap(scans: KeyMap, badScans?: Set<number>): KeyMap {\r\n  return scans.map((row) => row.map((scan) => CLDRScanToVkey(scan, badScans)));\r\n}\r\n\r\n/** Convert one scan code to vkey, or undefined */\r\nexport function CLDRScanToVkey(scan: number, badScans?: Set<number>): number {\r\n  /** typescript fun to index the scan table */\r\n  function hasScanCode(key: PropertyKey): key is keyof typeof CLDRScanToUSVirtualKeyCodes {\r\n    return key in CLDRScanToUSVirtualKeyCodes;\r\n  }\r\n  if (hasScanCode(scan)) {\r\n    return CLDRScanToUSVirtualKeyCodes[scan];\r\n  } else {\r\n    badScans?.add(scan);\r\n    return undefined;\r\n  }\r\n}\r\n\r\n",
    "//\r\n// .keyman-touch-layout JSON format\r\n//\r\n// Follows /common/schemas/keyman-touch-layout/keyman-touch-layout.spec.json for\r\n// reading and\r\n// /common/schemas/keyman-touch-layout/keyman-touch-layout.clean.spec.json for\r\n// writing\r\n//\r\n\r\n/**\r\n * On screen keyboard description consisting of specific layouts for tablet, phone,\r\n * and desktop. Despite its name, this format is used for both touch layouts and\r\n * hardware-style layouts.\r\n */\r\nexport interface TouchLayoutFile {\r\n  tablet?: TouchLayoutPlatform;\r\n  phone?: TouchLayoutPlatform;\r\n  desktop?: TouchLayoutPlatform;\r\n};\r\n\r\nexport type TouchLayoutFont = string;\r\nexport type TouchLayoutFontSize = string;\r\nexport type TouchLayoutDefaultHint = \"none\"|\"dot\"|\"longpress\"|\"multitap\"|\"flick\"|\"flick-n\"|\"flick-ne\"|\"flick-e\"|\"flick-se\"|\"flick-s\"|\"flick-sw\"|\"flick-w\"|\"flick-nw\";\r\n\r\n/** touch layout specification for a specific platform like phone or tablet */\r\nexport interface TouchLayoutPlatform {\r\n  font?: TouchLayoutFont;\r\n  fontsize?: TouchLayoutFontSize;\r\n  layer: TouchLayoutLayer[];\r\n  displayUnderlying?: boolean;\r\n  defaultHint: TouchLayoutDefaultHint;\r\n};\r\n\r\nexport type TouchLayoutLayerId = string;  // pattern = /^[a-zA-Z0-9_-]+$/\r\n\r\n/** a layer with rows of keys on a touch layout */\r\nexport interface TouchLayoutLayer {\r\n  id: TouchLayoutLayerId;\r\n  row: TouchLayoutRow[];\r\n};\r\n\r\nexport type TouchLayoutRowId = number;\r\n\r\n/** a row of keys on a touch layout */\r\nexport interface TouchLayoutRow {\r\n  id: TouchLayoutRowId;\r\n  key: TouchLayoutKey[];\r\n};\r\n\r\ntype Key_Type = 'T'|'K'|'U'|'t'|'k'|'u';\r\ntype Key_Id = string;\r\n\r\nexport type TouchLayoutKeyId = `${Key_Type}_${Key_Id}`; // pattern = /^[TKUtku]_[a-zA-Z0-9_]+$/\r\n\r\n/**\r\n * Denotes private-use identifiers that should be considered 'reserved'.\r\n */\r\nexport const PRIVATE_USE_IDS = [\r\n  /**\r\n   * Private-use identifiers used by KeymanWeb for the default multitap-into-caps-layer key\r\n   * for keyboards with a caps layer while not defining multitaps on shift.\r\n   */\r\n  'T_*_MT_SHIFT_TO_SHIFT',\r\n  'T_*_MT_SHIFT_TO_CAPS',\r\n  'T_*_MT_SHIFT_TO_DEFAULT'\r\n] as const;\r\n\r\n/* A map of key field names with values matching the `typeof` the corresponding property\r\n * exists in /web/src/engine/keyboard/src/keyboards/activeLayout.ts.\r\n *\r\n * Make sure that when one is updated, the other also is.  TS types are compile-time only,\r\n * so the run-time-accessible mapping in activeLayout.ts cannot be auto-generated by TS. */\r\n/** defines a key on a touch layout */\r\nexport interface TouchLayoutKey {\r\n  /** key id: used to find key in VKDictionary, or a standard key from the K_ enumeration */\r\n  id?: TouchLayoutKeyId;\r\n  /** text to display on key cap */\r\n  text?: string;\r\n  /**\r\n    * the modifier combination (not layer) that should be used in key events,\r\n    * for this key, overriding the layer that the key is a part of.\r\n    */\r\n  layer?: TouchLayoutLayerId;\r\n  /** the next layer to switch to after this key is pressed */\r\n  nextlayer?: TouchLayoutLayerId;\r\n  /** font */\r\n  font?: TouchLayoutFont;\r\n  /** fontsize */\r\n  fontsize?: TouchLayoutFontSize;\r\n  /** the type of key */\r\n  sp?: TouchLayoutKeySp;\r\n  /** padding */\r\n  pad?: TouchLayoutKeyPad;\r\n  /** width of the key */\r\n  width?: TouchLayoutKeyWidth;\r\n  /** longpress keys, also known as subkeys */\r\n  sk?: TouchLayoutSubKey[];\r\n  /** flicks */\r\n  flick?: TouchLayoutFlick;\r\n  /** multitaps */\r\n  multitap?: TouchLayoutSubKey[];\r\n  /** hint e.g. for longpress */\r\n  hint?: string;\r\n};\r\n\r\n/** key type like regular key, framekeys, deadkeys, blank, etc. */\r\nexport const enum TouchLayoutKeySp {\r\n  normal=0,\r\n  /** A 'frame' key, such as Shift or Enter, which is styled accordingly; uses\r\n   *  the 'KeymanwebOsk' font on KeymanWeb */\r\n  special=1,\r\n  /** A 'frame' key, such as Shift or Enter, which is styled accordingly and is\r\n   *  highlighted to indicate it is active, such as the shift key on a shift\r\n   *  layer; uses the 'KeymanwebOsk' font on KeymanWeb */\r\n  specialActive=2,\r\n  /** **KeymanWeb runtime private use:** a variant of `special` with the\r\n   *  keyboard font rather than 'KeymanwebOsk' font */\r\n  customSpecial=3,\r\n  /** **KeymanWeb runtime private use:** a  variant of `specialActive` with the\r\n   *  keyboard font rather than 'KeymanwebOsk' font. */\r\n  customSpecialActive=4,\r\n  /** A styling signal to indicate that the key may have 'deadkey' type\r\n   *  behaviour. */\r\n  deadkey=8,\r\n  /** A key which is rendered as a blank keycap, blocks any interaction */\r\n  blank=9,\r\n  /** Renders the key only as a gap or spacer, blocks any interaction */\r\n  spacer=10\r\n};\r\n\r\n/** padding for a key */\r\nexport type TouchLayoutKeyPad = number; // 0-100000\r\n/** width of a key */\r\nexport type TouchLayoutKeyWidth = number; // 0-100000\r\n\r\n/** defines a subkey */\r\nexport interface TouchLayoutSubKey {\r\n  /** key id: used to find key in VKDictionary, or a standard key from the K_ enumeration */\r\n  id: TouchLayoutKeyId;\r\n  /** text to display on key cap */\r\n  text?: string;\r\n  /**\r\n    * the modifier combination (not layer) that should be used in key events,\r\n    * for this key, overriding the layer that the key is a part of.\r\n    */\r\n  layer?: TouchLayoutLayerId;\r\n  /** the next layer to switch to after this key is pressed */\r\n  nextlayer?: TouchLayoutLayerId;\r\n  /** font */\r\n  font?: TouchLayoutFont;\r\n  /** fontsize */\r\n  fontsize?: TouchLayoutFontSize;\r\n  /** the type of key */\r\n  sp?: TouchLayoutKeySp;\r\n  /** padding */\r\n  pad?: TouchLayoutKeyPad;\r\n  /** width of the key */\r\n  width?: TouchLayoutKeyWidth;\r\n  /** use this subkey if no other selected */\r\n  default?: boolean;  // Only used for longpress currently\r\n};\r\n\r\n/** defines all possible flicks for a key */\r\nexport interface TouchLayoutFlick {\r\n  /** flick up (north) */\r\n  n?: TouchLayoutSubKey;\r\n  /** flick down (south) */\r\n  s?: TouchLayoutSubKey;\r\n  /** flick right (east) */\r\n  e?: TouchLayoutSubKey;\r\n  /** flick left (west) */\r\n  w?: TouchLayoutSubKey;\r\n  /** flick up-right (north-east) */\r\n  ne?: TouchLayoutSubKey;\r\n  /** flick up-left (north-west) */\r\n  nw?: TouchLayoutSubKey;\r\n  /** flick down-right (south-east) */\r\n  se?: TouchLayoutSubKey;\r\n  /** flick down-left (south-west) */\r\n  sw?: TouchLayoutSubKey;\r\n};\r\n",
    "import { MATCH_HEX_ESCAPE, CONTAINS_QUAD_ESCAPE, MATCH_QUAD_ESCAPE } from './consts.js';\r\nexport { MATCH_HEX_ESCAPE, CONTAINS_QUAD_ESCAPE, MATCH_QUAD_ESCAPE };\r\n\r\n/**\r\n * xml2js will not place single-entry objects into arrays. Easiest way to fix\r\n * this is to box them ourselves as needed. Ensures that o.x is an array.\r\n *\r\n * @param o Object with property to box\r\n * @param x Name of element to box\r\n */\r\nexport function boxXmlArray(o: any, x: string): void {\r\n  if(typeof o == 'object' && !Array.isArray(o[x])) {\r\n    if(o[x] === null || o[x] === undefined) {\r\n      o[x] = [];\r\n    }\r\n    else {\r\n      o[x] = [o[x]];\r\n    }\r\n  }\r\n}\r\n\r\nexport class UnescapeError extends Error {\r\n}\r\n\r\n/**\r\n * Unescape one codepoint\r\n * @param hex one codepoint in hex, such as '0127'\r\n * @returns the unescaped codepoint\r\n */\r\nexport function unescapeOne(hex: string): string {\r\n  const codepoint = Number.parseInt(hex, 16);\r\n  return String.fromCodePoint(codepoint);\r\n}\r\n\r\n/**\r\n * Unescape one single quad string such as \\u0127 / \\U00000000\r\n * Throws exception if the string doesn't match MATCH_QUAD_ESCAPE\r\n * Note this does not attempt to handle or reject surrogates.\r\n * So, `\\\\uD838\\\\uDD09` will work but other combinations may not.\r\n * @param s input string\r\n * @returns output\r\n */\r\nexport function unescapeOneQuadString(s: string): string {\r\n  if (!s || !s.match(MATCH_QUAD_ESCAPE)) {\r\n    throw new UnescapeError(`Not a quad escape: ${s}`);\r\n  }\r\n  function processMatch(str: string, m16: string, m32: string): string {\r\n    return unescapeOne(m16 || m32); // either \\u or \\U\r\n  }\r\n  s = s.replace(MATCH_QUAD_ESCAPE, processMatch);\r\n  return s;\r\n}\r\n\r\n/** unscape multiple occurences of \\u0127 style strings */\r\nexport function unescapeQuadString(s: string): string {\r\n  s = s.replaceAll(MATCH_QUAD_ESCAPE, (quad) => unescapeOneQuadString(quad));\r\n  return s;\r\n}\r\n\r\n\r\n/**\r\n * Unescapes a string according to UTS#18§1.1, see <https://www.unicode.org/reports/tr18/#Hex_notation>\r\n * @param s escaped string\r\n * @returns\r\n */\r\nexport function unescapeString(s: string): string {\r\n  if(!s) {\r\n    return s;\r\n  }\r\n  try {\r\n    /**\r\n     * process one regex match\r\n     * @param str ignored\r\n     * @param matched the entire match such as '0127' or '22 22'\r\n     * @returns the unescaped match\r\n     */\r\n    function processMatch(str: string, matched: string) : string {\r\n      const codepoints = matched.split(' ');\r\n      const unescaped = codepoints.map(unescapeOne);\r\n      return unescaped.join('');\r\n    }\r\n    s = s.replaceAll(MATCH_HEX_ESCAPE, processMatch);\r\n  } catch(e) {\r\n    if (e instanceof RangeError) {\r\n      throw new UnescapeError(`Out of range while unescaping '${s}': ${e.message}`, { cause: e });\r\n      /* c8 ignore next 3 */\r\n    } else {\r\n      throw e; // pass through some other error\r\n    }\r\n  }\r\n  return s;\r\n}\r\n\r\n/** 0000 … FFFF */\r\nexport function hexQuad(n: number): string {\r\n  if (n < 0x0000 || n > 0xFFFF) {\r\n    throw RangeError(`${n} not in [0x0000,0xFFFF]`);\r\n  }\r\n  return n.toString(16).padStart(4, '0');\r\n}\r\n\r\n/** 00000000 … FFFFFFFF */\r\nexport function hexOcts(n: number): string {\r\n  if (n < 0x0000 || n > 0xFFFFFFFF) {\r\n    throw RangeError(`${n} not in [0x00000000,0xFFFFFFFF]`);\r\n  }\r\n  return n.toString(16).padStart(8, '0');\r\n}\r\n\r\n/** escape one char for regex in \\uXXXX form */\r\nexport function escapeRegexChar(ch: string) {\r\n  const code = ch.codePointAt(0);\r\n  if (code <= 0xFFFF) {\r\n    return '\\\\u' + hexQuad(code);\r\n  } else {\r\n    return '\\\\U' + hexOcts(code);\r\n  }\r\n}\r\n\r\n/** chars that must be escaped: syntax, C0 + C1 controls */\r\nconst REGEX_SYNTAX_CHAR = /^[\\u0000-\\u001F\\u007F-\\u009F{}\\[\\]\\\\?|.^$*()/+-]$/;\r\n\r\nfunction escapeRegexCharIfSyntax(ch: string) {\r\n  // escape if syntax or not valid\r\n  if (REGEX_SYNTAX_CHAR.test(ch) || !isValidUnicode(ch.codePointAt(0))) {\r\n    return escapeRegexChar(ch);\r\n  } else {\r\n    return ch; // leave unescaped\r\n  }\r\n}\r\n\r\n/**\r\n * Unescape one codepoint to \\u or \\U format\r\n * @param hex one codepoint in hex, such as '0127'\r\n * @returns the unescaped codepoint\r\n */\r\nfunction regexOne(hex: string): string {\r\n  const unescaped = unescapeOne(hex);\r\n  // re-escape as 16 or 32 bit code units\r\n  return Array.from(unescaped).map(ch => escapeRegexCharIfSyntax(ch)).join('');\r\n}\r\n/**\r\n * Escape a string (\\uxxxx form) if there are any problematic codepoints\r\n */\r\nexport function escapeStringForRegex(s: string) : string {\r\n  return s.split('').map(ch => escapeRegexCharIfSyntax(ch)).join('');\r\n}\r\n\r\n/**\r\n * Unescapes a string according to UTS#18§1.1, see <https://www.unicode.org/reports/tr18/#Hex_notation>\r\n * @param s escaped string\r\n * @returns\r\n */\r\nexport function unescapeStringToRegex(s: string): string {\r\n  if(!s) {\r\n    return s;\r\n  }\r\n  try {\r\n    /**\r\n     * process one regex match\r\n     * @param str ignored\r\n     * @param matched the entire match such as '0127' or '22 22'\r\n     * @returns the unescaped match\r\n     */\r\n    function processMatch(str: string, matched: string) : string {\r\n      const codepoints = matched.split(' ');\r\n      const unescaped = codepoints.map(regexOne);\r\n      return unescaped.join('');\r\n    }\r\n    s = s.replaceAll(MATCH_HEX_ESCAPE, processMatch);\r\n  } catch(e) {\r\n    if (e instanceof RangeError) {\r\n      throw new UnescapeError(`Out of range while unescaping '${s}': ${e.message}`, { cause: e });\r\n      /* c8 ignore next 3 */\r\n    } else {\r\n      throw e; // pass through some other error\r\n    }\r\n  }\r\n  return s;\r\n}\r\n\r\n/** True if this string *could* be a UTF-32 single char */\r\nexport function\r\nisOneChar(value: string) : boolean {\r\n  return [...value].length === 1;\r\n}\r\n\r\nexport function\r\ntoOneChar(value: string) : number {\r\n  if (!isOneChar(value)) {\r\n    throw Error(`Not a single char: ${value}`);\r\n  }\r\n  return value.codePointAt(0);\r\n}\r\n\r\nexport function describeCodepoint(ch : number) : string {\r\n  let s;\r\n  const p = BadStringAnalyzer.getProblem(ch);\r\n  if (p != null) {\r\n    // for example: 'PUA (U+E010)'\r\n    s = p;\r\n  } else {\r\n    // for example: '\"a\" (U+61)'\r\n    s = `\"${String.fromCodePoint(ch)}\"`;\r\n  }\r\n  return `${s} (U+${Number(ch).toString(16).toUpperCase()})`;\r\n}\r\n\r\n\r\nexport enum BadStringType {\r\n  pua = 'PUA',\r\n  unassigned = 'Unassigned',\r\n  illegal = 'Illegal',\r\n  denormalized = \"Denormalized\"\r\n};\r\n\r\n// Following from kmx_xstring.h / .cpp\r\n\r\nconst Uni_LEAD_SURROGATE_START = 0xD800;\r\nconst Uni_LEAD_SURROGATE_END = 0xDBFF;\r\nconst Uni_TRAIL_SURROGATE_START = 0xDC00;\r\nconst Uni_TRAIL_SURROGATE_END = 0xDFFF;\r\nconst Uni_SURROGATE_START = Uni_LEAD_SURROGATE_START;\r\nconst Uni_SURROGATE_END = Uni_TRAIL_SURROGATE_END;\r\nconst Uni_FD_NONCHARACTER_START = 0xFDD0;\r\nconst Uni_FD_NONCHARACTER_END = 0xFDEF;\r\nconst Uni_FFFE_NONCHARACTER = 0xFFFE;\r\nconst Uni_PLANE_MASK = 0x1F0000;\r\nconst Uni_MAX_CODEPOINT = 0x10FFFF;\r\n// plane 0, 15, and 16 PUA\r\nconst Uni_PUA_00_START =   0xE000;\r\nconst Uni_PUA_00_END   =   0xF8FF;\r\nconst Uni_PUA_15_START = 0x0F0000;\r\nconst Uni_PUA_15_END   = 0x0FFFFD;\r\nconst Uni_PUA_16_START = 0x100000;\r\nconst Uni_PUA_16_END   = 0x10FFFD;\r\n\r\n\r\n/**\r\n * @brief True if a lead surrogate\r\n * \\def Uni_IsSurrogate1\r\n */\r\nexport function Uni_IsSurrogate1(ch : number) {\r\n  return ((ch) >= Uni_LEAD_SURROGATE_START && (ch) <= Uni_LEAD_SURROGATE_END);\r\n}\r\n/**\r\n * @brief True if a trail surrogate\r\n * \\def Uni_IsSurrogate2\r\n */\r\nexport function Uni_IsSurrogate2(ch : number) {\r\n  return ((ch) >= Uni_TRAIL_SURROGATE_START && (ch) <= Uni_TRAIL_SURROGATE_END);\r\n}\r\n\r\n/**\r\n * @brief True if any surrogate\r\n * \\def UniIsSurrogate\r\n*/\r\nexport function Uni_IsSurrogate(ch : number) {\r\n  return (Uni_IsSurrogate1(ch) || Uni_IsSurrogate2(ch));\r\n}\r\n\r\nfunction Uni_IsEndOfPlaneNonCharacter(ch : number) {\r\n  return (((ch) & Uni_FFFE_NONCHARACTER) == Uni_FFFE_NONCHARACTER); // matches FFFF or FFFE\r\n}\r\n\r\nfunction Uni_IsNoncharacter(ch : number) {\r\n  return (((ch) >= Uni_FD_NONCHARACTER_START && (ch) <= Uni_FD_NONCHARACTER_END) || Uni_IsEndOfPlaneNonCharacter(ch));\r\n}\r\n\r\nfunction Uni_InCodespace(ch : number) {\r\n  return (ch >= 0 && ch <= Uni_MAX_CODEPOINT);\r\n};\r\n\r\nfunction Uni_IsValid1(ch: number) {\r\n  return (Uni_InCodespace(ch) && !Uni_IsSurrogate(ch) && !Uni_IsNoncharacter(ch));\r\n}\r\n\r\nexport function isValidUnicode(start: number, end?: number) {\r\n  if (!end) {\r\n    // single char\r\n    return Uni_IsValid1(start);\r\n  } else if (!Uni_IsValid1(end) || !Uni_IsValid1(start) || (end < start)) {\r\n    // start or end out of range, or inverted range\r\n    return false;\r\n  } else if ((start <= Uni_SURROGATE_END) && (end >= Uni_SURROGATE_START)) {\r\n    // contains some of the surrogate range\r\n    return false;\r\n  } else if ((start <= Uni_FD_NONCHARACTER_END) && (end >= Uni_FD_NONCHARACTER_START)) {\r\n    // contains some of the noncharacter range\r\n    return false;\r\n  } else if ((start & Uni_PLANE_MASK) != (end & Uni_PLANE_MASK)) {\r\n    // start and end are on different planes, meaning that the U+__FFFE/U+__FFFF noncharacters\r\n    // are contained.\r\n    // As a reminder, we already checked that start/end are themselves valid,\r\n    // so we know that 'end' is not on a noncharacter at end of plane.\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\n\r\nexport function isPUA(ch: number) {\r\n  return ((ch >= Uni_PUA_00_START && ch <= Uni_PUA_00_END) ||\r\n    (ch >= Uni_PUA_15_START && ch <= Uni_PUA_15_END) ||\r\n    (ch >= Uni_PUA_16_START && ch <= Uni_PUA_16_END));\r\n}\r\n\r\nclass BadStringMap extends Map<BadStringType, Set<number>> {\r\n  public toString() : string {\r\n    if (!this.size) {\r\n      return \"{}\";\r\n    }\r\n    return Array.from(this.entries()).map(([t, s]) => `${t}: ${Array.from(s.values()).map(describeCodepoint).join(' ')}`).join(', ');\r\n  }\r\n}\r\n\r\n/** abstract class for analyzing and categorizing strings */\r\nexport abstract class StringAnalyzer {\r\n  /** add a string for analysis */\r\n  public add(s : string) {\r\n    for (const c of [...s]) {\r\n      const ch = c.codePointAt(0);\r\n      const problem = this.analyzeCodePoint(c, ch);\r\n      if (problem) {\r\n        this.addProblem(ch, problem);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * subclass interface\r\n   * @param c single codepoint to analyze (string)\r\n   * @param ch single codepoint to analyze (scalar)\r\n   */\r\n  protected abstract analyzeCodePoint(c: string, ch: number) : BadStringType;\r\n\r\n  /** internal interface for the result of an analysis */\r\n  protected addProblem(ch : number, type : BadStringType) {\r\n    if (!this.m.has(type)) {\r\n      this.m.set(type, new Set<number>());\r\n    }\r\n    this.m.get(type).add(ch);\r\n  }\r\n\r\n  /** get the results of the analysis */\r\n  public analyze() : BadStringMap {\r\n    if (this.m.size == 0) {\r\n      return null;\r\n    } else {\r\n      return this.m;\r\n    }\r\n  }\r\n\r\n  /** internal map */\r\n  private m = new BadStringMap();\r\n}\r\n\r\n/** analyze a string looking for bad unicode */\r\nexport class BadStringAnalyzer extends StringAnalyzer {\r\n  /** analyze one codepoint */\r\n  protected analyzeCodePoint(c: string, ch: number): BadStringType {\r\n    return BadStringAnalyzer.getProblem(ch);\r\n  }\r\n  /** export analyzer function  */\r\n  public static getProblem(ch: number) {\r\n    if (!isValidUnicode(ch)) {\r\n      return BadStringType.illegal;\r\n    } else if(isPUA(ch)) {\r\n      return BadStringType.pua;\r\n    } else { // TODO-LDML: unassigned\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n/** Analyzer that checks if something isn't NFD */\r\nexport class NFDAnalyzer extends StringAnalyzer {\r\n  protected analyzeCodePoint(c: string, ch: number): BadStringType {\r\n    const nfd = c.normalize(\"NFD\");\r\n    if (c !== nfd) {\r\n      return BadStringType.denormalized;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n",
    "/*\r\n * Keyman is copyright (C) SIL Global. MIT License.\r\n */\r\nimport { TouchLayoutPlatform as LayoutFormFactorSpec } from './keyman-touch-layout/keyman-touch-layout-file.js';\r\n\r\nexport type ComplexKeyboardStore = (string | { t: 'd', d: number } | { ['t']: 'b' })[];\r\n\r\n// A stub for KeyEvent which is properly defined in KeymanWeb\r\ntype KeyEventStub = {};\r\n\r\n// A stub for OutputTarget which is properly defined in KeymanWeb\r\ntype OutputTargetStub = {};\r\n\r\nexport interface EncodedVisualKeyboard {\r\n  /** Represents CSS font styling to use for VisualKeyboard text */\r\n  F: string;\r\n  /** Should there be a 102nd key? */\r\n  K102?: boolean,\r\n  /**\r\n   * Keyboard Layer Specification: an object-based map of layer name to the keycaps for its\r\n   * 65 keys.  The 65 keys are ordered from left to right, then top to bottom.\r\n   *\r\n   * The key ID corresponding to each index of the array is specified within `Codes.dfltCodes`.\r\n   * Entries corresponding to `K_*` in `Codes.dfltCodes` are reserved for future use.\r\n   */\r\n  KLS?: { [layerName: string]: string[] },\r\n  /**\r\n   * @deprecated\r\n   * The older form for data in KLS - defines keycaps for 'default' keys, then 'shift' keys,\r\n   * in a single concatenated array.\r\n   */\r\n  BK?: string[];\r\n}\r\n\r\nexport type LayoutSpec = {\r\n  \"desktop\"?: LayoutFormFactorSpec,\r\n  \"phone\"?: LayoutFormFactorSpec,\r\n  \"tablet\"?: LayoutFormFactorSpec\r\n}\r\n\r\nexport type KeyboardObject = {\r\n  /**\r\n   * group-start:  the function triggering processing for the keyboard's\r\n   * \"Unicode\" start group, corresponding to `begin Unicode > use(_____)` in\r\n   * Keyman keyboard language.\r\n   * @param outputTarget  The context to which the keystroke applies\r\n   * @param keystroke     The full, pre-processed keystroke triggering\r\n   * keyboard-rule application.\r\n   */\r\n  gs(outputTarget: OutputTargetStub, keystroke: KeyEventStub): boolean;\r\n\r\n  /**\r\n   * group-newcontext:  the function triggering processing for the keyboard's\r\n   * \"NewContext\" start group, corresponding to `begin NewContext > use(_____)`\r\n   * in Keyman keyboard language.\r\n   * @param outputTarget  The new context to be used with future keystrokes\r\n   * @param keystroke     A 'null' `KeyEvent` providing current modifier + state information.\r\n   */\r\n  gn?(outputTarget: OutputTargetStub, keystroke: KeyEventStub): boolean;\r\n\r\n  /**\r\n   * group-postkeystroke:  the function triggering processing for the keyboard's\r\n   * \"PostKeystroke\" start group, corresponding to `begin PostKeystroke >\r\n   * use(_____)` in Keyman keyboard language.\r\n   * @param outputTarget  The context altered by a recent keystroke.  As a\r\n   * precondition, all changes due to `gs` / `begin Unicode` should already be\r\n   * applied.\r\n   * @param keystroke     A 'null' `KeyEvent` providing current modifier + state information.\r\n   */\r\n  gpk?(outputTarget: OutputTargetStub, keystroke: KeyEventStub): boolean;\r\n\r\n  /**\r\n   * Keyboard ID:  the uniquely-identifying name for this keyboard.  Includes the standard\r\n   * `Keyboard_` prefix.  May be 'namespaced' with a prefix corresponding to a package name\r\n   *  within app/webview.\r\n   */\r\n  KI: string;\r\n  /**\r\n   * Keyboard Name:  the human-readable name of the keyboard.\r\n   */\r\n  KN: string;\r\n  /**\r\n   * Encoded data usable to construct a desktop/hardware-oriented on-screen keyboard.\r\n   */\r\n  KV: EncodedVisualKeyboard;\r\n  /**\r\n   * Keyboard Language Code: set within select keyboards.\r\n   *\r\n   * Currently, it's only used to determine the need for CJK-picker support.  Is missing\r\n   * in most compiled keyboards.\r\n   */\r\n  KLC?: string;\r\n  /**\r\n   * @deprecated\r\n   * Keyboard Language Code: set within select keyboards.\r\n   *\r\n   * Currently, it's only used to determine the need for CJK-picker support.\r\n   * Is (probably) an older name of KLC with the identical purpose.  Is missing\r\n   * in most compiled keyboards.\r\n   */\r\n  LanguageCode?: string;\r\n  /**\r\n   * Keyboard CSS: provides the definition for custom keyboard style sheets\r\n   */\r\n  KCSS?: string;\r\n  /**\r\n   * Keyboard is RTL: a simple flag noting if the keyboard's script is RTL.\r\n   */\r\n  KRTL?: boolean;\r\n  /**\r\n   * Keyboard Modifier BitMask:  a set of bitflags indicating which modifiers\r\n   * the keyboard's rules utilize.  See also: `ModifierKeyConstants`.\r\n   */\r\n  KMBM?: number;\r\n  /**\r\n   * Keyboard Supplementary plane:  set to 1 if the keyboard uses non-BMP Unicode\r\n   * characters.\r\n   */\r\n  KS?: number;\r\n  /**\r\n   * Keyman Visual Keyboard Layout:  defines the touch-layout definitions used for\r\n   * 'phone' and 'tablet' form-factors.\r\n   */\r\n  KVKL?: LayoutSpec;\r\n  /**\r\n   * Keyboard is Mnemonic: set to 1 if the keyboard uses a mnemonic layout.\r\n   */\r\n  KM?: number;\r\n  /**\r\n   * KeyBoard VERsion: the version of this keyboard.\r\n   */\r\n  KBVER?: string;\r\n  /**\r\n   * Keyman VERsion:  the version of Keyman Developer used to compile this keyboard.\r\n   */\r\n  KVER?: string;\r\n  /**\r\n   * Keyman Variable Stores: an array of the names of all variable stores used by the\r\n   * keyboard.\r\n   */\r\n  KVS?: (`s${number}`)[];\r\n  /**\r\n   * Keyboard Help: HTML help text, as specified by either the &kmw_helptext or &kmw_helpfile system stores.\r\n   *\r\n   * Reference: https://help.keyman.com/developer/language/reference/kmw_helptext,\r\n   *            https://help.keyman.com/developer/language/reference/kmw_helpfile\r\n   */\r\n  KH?: string;\r\n  /**\r\n   * Keyboard Virtual Key Dictionary: the Developer-compiled, minified dictionary of virtual-key codes\r\n   */\r\n  KVKD?: string;\r\n  /**\r\n   * Keyboard Display Underlying:  set to 1 if the desktop form of the keyboard\r\n   * should show the US QWERTY underlying keycaps.  These may also appear on\r\n   * touch layouts if set and no touch-layout information is available.\r\n   */\r\n  KDU?: number;\r\n  /**\r\n   * Keyboard Help File: Embedded JS script designed for use with a keyboard's\r\n   * HTML help text.  Always defined within the file referenced by &kmw_embedjs\r\n   * in a keyboard's source, though that file may also contain _other_ script\r\n   * definitions as well.  (`KHF` must be explicitly defined within that file.)\r\n   * @param e  Will be provided with the root element (a <div>) of the On-Screen Keyboard.\r\n   * @returns\r\n   */\r\n  KHF?: (e: any) => string;\r\n\r\n  /**\r\n   * Keyboard Notify Shift:  Provided by CJK-picker keyboards to properly\r\n   * interface them with Keyman Engine for Web.\r\n   * @param       {number}    _PCommand     event code (16,17,18) or 0; 16-18\r\n   * correspond to modifier codes when pressed, while 0 corresponds to loss of focus\r\n   * @param       {Object}    _PTarget      target element\r\n   * @param       {number}    _PData        1 or 0\r\n   * @returns\r\n   */\r\n  KNS?: (_PCommand: number, _PTarget: OutputTargetStub, _PData: number) => void;\r\n} & Record<`s${number}`, string>\r\n\r\n",
    "import EventEmitter from './index.js'\n\nexport { EventEmitter }\nexport default EventEmitter\n",
    "/*\r\n * Keyman is copyright (C) SIL International. MIT License.\r\n *\r\n * Keyboard key codes and modifier bitmasks.\r\n */\r\n\r\nimport { ModifierKeyConstants, USVirtualKeyCodes } from '@keymanapp/common-types';\r\n\r\nconst Codes = {\r\n  modifierCodes: {\r\n    // Debug-mode keyboards compiled before Keyman 18.0 referenced the `ModifierKeyConstants`\r\n    // constants via the names established below.  We must continue to support them, as they're\r\n    // essentially part of the keyboard API now.\r\n    \"LCTRL\":            ModifierKeyConstants.LCTRLFLAG,\r\n    \"RCTRL\":            ModifierKeyConstants.RCTRLFLAG,\r\n    \"LALT\":             ModifierKeyConstants.LALTFLAG,\r\n    \"RALT\":             ModifierKeyConstants.RALTFLAG,\r\n    \"SHIFT\":            ModifierKeyConstants.K_SHIFTFLAG,\r\n    \"CTRL\":             ModifierKeyConstants.K_CTRLFLAG,\r\n    \"ALT\":              ModifierKeyConstants.K_ALTFLAG,\r\n    // TENTATIVE:  Represents command keys, which some OSes use for shortcuts we don't\r\n    // want to block.  No rule will ever target a modifier set with this bit set to 1.\r\n    \"META\":             ModifierKeyConstants.K_METAFLAG,\r\n    \"CAPS\":             ModifierKeyConstants.CAPITALFLAG,\r\n    \"NO_CAPS\":          ModifierKeyConstants.NOTCAPITALFLAG,\r\n    \"NUM_LOCK\":         ModifierKeyConstants.NUMLOCKFLAG,\r\n    \"NO_NUM_LOCK\":      ModifierKeyConstants.NOTNUMLOCKFLAG,\r\n    \"SCROLL_LOCK\":      ModifierKeyConstants.SCROLLFLAG,\r\n    \"NO_SCROLL_LOCK\":   ModifierKeyConstants.NOTSCROLLFLAG,\r\n    \"VIRTUAL_KEY\":      ModifierKeyConstants.ISVIRTUALKEY,\r\n    \"VIRTUAL_CHAR_KEY\": ModifierKeyConstants.VIRTUALCHARKEY // Unused by KMW, but reserved for use by other Keyman engines.\r\n    // Note: keys_mod_other = 0x10000, used by KMX+ for the\r\n    // other modifier flag in layers, > 16 bit so not available here.\r\n    // See keys_mod_other in keyman_core_ldml.ts\r\n  } as {[name: string]: number},\r\n\r\n  modifierBitmasks: {\r\n    \"ALL\":0x007F,\r\n    \"ALT_GR_SIM\": (0x0001 | 0x0004),\r\n    \"CHIRAL\":0x001F,    // The base bitmask for chiral keyboards.  Includes SHIFT, which is non-chiral.\r\n    \"IS_CHIRAL\":0x000F, // Used to test if a bitmask uses a chiral modifier.\r\n    \"NON_CHIRAL\":0x0070, // The default bitmask, for non-chiral keyboards,\r\n    // Represents all modifier codes not supported by KMW 1.0 legacy keyboards.\r\n    \"NON_LEGACY\": 0x006F // ALL, but without the SHIFT bit\r\n  } as {[name: string]: number},\r\n\r\n  stateBitmasks: {\r\n    \"ALL\":0x3F00,\r\n    \"CAPS\":0x0300,\r\n    \"NUM_LOCK\":0x0C00,\r\n    \"SCROLL_LOCK\":0x3000\r\n  } as {[name: string]: number},\r\n\r\n  // Define standard keycode numbers (exposed for use by other modules)\r\n  keyCodes: {\r\n    ...USVirtualKeyCodes,\r\n  } as {[name: string]: number},\r\n\r\n  codesUS: [\r\n    ['0123456789',';=,-./`', '[\\\\]\\''],\r\n    [')!@#$%^&*(',':+<_>?~', '{|}\"']\r\n  ],\r\n\r\n  isFrameKey(keyID: string): boolean {\r\n    switch(keyID) {\r\n      // TODO:  consider adding K_ALT, K_CTRL.\r\n      // Not currently here as they typically don't show up on mobile layouts.\r\n      case 'K_SHIFT':\r\n      case 'K_LOPT':\r\n      case 'K_ROPT':\r\n      case 'K_NUMLOCK':  // Often used for numeric layers.\r\n      case 'K_CAPS':\r\n        return true;\r\n      default:\r\n        // 50000:  start of the range defining key-codes for special frame-key symbols\r\n        // and specialized common layer-switching key IDs.  See .keyCodes above.\r\n        if(Codes.keyCodes[keyID] >= 50000) { // A few are used by `sil_euro_latin`.\r\n          return true; // is a 'K_' key defined for layer shifting or 'control' use.\r\n        }\r\n    }\r\n\r\n    return false;\r\n  },\r\n\r\n\r\n  /**\r\n   * Get modifier key state from layer id\r\n   *\r\n   * @param       {string}      layerId       layer id (e.g. ctrlshift)\r\n   * @return      {number}                    modifier key state (desktop keyboards)\r\n   */\r\n   getModifierState(layerId: string): number {\r\n    var modifier=0;\r\n    if(layerId.indexOf('shift') >= 0) {\r\n      modifier |= ModifierKeyConstants.K_SHIFTFLAG;\r\n    }\r\n\r\n    // The chiral checks must not be directly exclusive due each other to visual OSK feedback.\r\n    var ctrlMatched=false;\r\n    if(layerId.indexOf('leftctrl') >= 0) {\r\n      modifier |= ModifierKeyConstants.LCTRLFLAG;\r\n      ctrlMatched=true;\r\n    }\r\n    if(layerId.indexOf('rightctrl') >= 0) {\r\n      modifier |= ModifierKeyConstants.RCTRLFLAG;\r\n      ctrlMatched=true;\r\n    }\r\n    if(layerId.indexOf('ctrl')  >= 0 && !ctrlMatched) {\r\n      modifier |= ModifierKeyConstants.K_CTRLFLAG;\r\n    }\r\n\r\n    var altMatched=false;\r\n    if(layerId.indexOf('leftalt') >= 0) {\r\n      modifier |= ModifierKeyConstants.LALTFLAG;\r\n      altMatched=true;\r\n    }\r\n    if(layerId.indexOf('rightalt') >= 0) {\r\n      modifier |= ModifierKeyConstants.RALTFLAG;\r\n      altMatched=true;\r\n    }\r\n    if(layerId.indexOf('alt')  >= 0 && !altMatched) {\r\n      modifier |= ModifierKeyConstants.K_ALTFLAG;\r\n    }\r\n\r\n    return modifier;\r\n  },\r\n\r\n  /**\r\n   * Get state key state from layer id\r\n   *\r\n   * @param       {string}      layerId       layer id (e.g. caps)\r\n   * @return      {number}                    modifier key state (desktop keyboards)\r\n   */\r\n  getStateFromLayer(layerId: string): number {\r\n    var modifier=0;\r\n\r\n    if(layerId.indexOf('caps') >= 0) {\r\n      modifier |= ModifierKeyConstants.CAPITALFLAG;\r\n    } else {\r\n      modifier |= ModifierKeyConstants.NOTCAPITALFLAG;\r\n    }\r\n\r\n    return modifier;\r\n  }\r\n}\r\n\r\nexport default Codes;\r\n",
    "/*\r\n * Keyman is copyright (C) SIL International. MIT License.\r\n *\r\n * Implementation of default rules\r\n */\r\n\r\nimport { ModifierKeyConstants } from '@keymanapp/common-types';\r\nimport Codes from './codes.js';\r\nimport type KeyEvent from './keyEvent.js';\r\nimport { type OutputTarget }  from './outputTarget.interface.js';\r\n\r\nexport enum EmulationKeystrokes {\r\n  Enter = '\\n',\r\n  Backspace = '\\b'\r\n}\r\n\r\nexport class LogMessages {\r\n  errorLog?: string;\r\n  warningLog?: string;\r\n}\r\n\r\n/**\r\n * Defines a collection of static library functions that define KeymanWeb's default (implied) keyboard rule behaviors.\r\n */\r\nexport default class DefaultRules {\r\n  codeForEvent(Lkc: KeyEvent) {\r\n    return Codes.keyCodes[Lkc.kName] || Lkc.Lcode;;\r\n  }\r\n\r\n  /**\r\n   * Serves as a default keycode lookup table.  This may be referenced safely by mnemonic handling without fear of side-effects.\r\n   * Also used by Processor.defaultRuleBehavior to generate output after filtering for special cases.\r\n   */\r\n  public forAny(Lkc: KeyEvent, isMnemonic: boolean, logMessages?: LogMessages): string {\r\n    var char = '';\r\n\r\n    // A pretty simple table of lookups, corresponding VERY closely to the original defaultKeyOutput.\r\n    if((char = this.forSpecialEmulation(Lkc)) != null) {\r\n      return char;\r\n    } else if(!isMnemonic && ((char = this.forNumpadKeys(Lkc)) != null)) {\r\n      return char;\r\n    } else if((char = this.forUnicodeKeynames(Lkc, logMessages)) != null) {\r\n      return char;\r\n    } else if((char = this.forBaseKeys(Lkc, logMessages)) != null) {\r\n      return char;\r\n    } else {\r\n      // // For headless and embeddded, we may well allow '\\t'.  It's DOM mode that has other uses.\r\n      // // Not originally defined for text output within defaultKeyOutput.\r\n      // // We can't enable it yet, as it'll cause hardware keystrokes in the DOM to output '\\t' rather\r\n      // // than rely on the browser-default handling.\r\n      let code = this.codeForEvent(Lkc);\r\n      switch(code) {\r\n      //   case Codes.keyCodes['K_TAB']:\r\n      //   case Codes.keyCodes['K_TABBACK']:\r\n      //   case Codes.keyCodes['K_TABFWD']:\r\n      //     return '\\t';\r\n        default:\r\n          return null;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * isCommand - returns a boolean indicating if a non-text event should be triggered by the keystroke.\r\n   */\r\n  public isCommand(Lkc: KeyEvent): boolean {\r\n    let code = this.codeForEvent(Lkc);\r\n\r\n    switch(code) {\r\n      // Should we ever implement them:\r\n      // case Codes.keyCodes['K_LEFT']:  // would not output text, but would alter the caret's position in the context.\r\n      // case Codes.keyCodes['K_RIGHT']:\r\n      //   return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Used when a RuleBehavior represents a non-text \"command\" within the Engine.  This will generally\r\n   * trigger events that require context reset - often by moving the caret or by moving what OutputTarget\r\n   * the caret is in.  However, we let those events perform the actual context reset.\r\n   *\r\n   * Note:  is extended by DOM-aware KeymanWeb code.\r\n   */\r\n  public applyCommand(Lkc: KeyEvent, outputTarget: OutputTarget): void {\r\n    // Notes for potential default-handling extensions:\r\n    //\r\n    // switch(code) {\r\n      // // Problem:  clusters, and doing them right.\r\n      // // The commented-out code below should be a decent starting point, but clusters make it complex.\r\n      // // Mostly based on pre-12.0 code, but the general idea should be relatively clear.\r\n      //\r\n      // case Codes.keyCodes['K_LEFT']:\r\n      //   if(touchAlias) {\r\n      //     var caretPos = keymanweb.getTextCaret(Lelem);\r\n      //     keymanweb.setTextCaret(Lelem, caretPos - 1 >= 0 ? caretPos - 1 : 0);\r\n      //   }\r\n      //   break;\r\n      // case Codes.keyCodes['K_RIGHT']:\r\n      //   if(touchAlias) {\r\n      //     var caretPos = keymanweb.getTextCaret(Lelem);\r\n      //     keymanweb.setTextCaret(Lelem, caretPos + 1);\r\n      //   }\r\n      //   if(code == VisualKeyboard.keyCodes['K_RIGHT']) {\r\n      //     break;\r\n      //   }\r\n    // }\r\n    //\r\n    // Note that these would be useful even outside of a DOM context.\r\n  }\r\n\r\n  /**\r\n   * Codes matched here generally have default implementations when in a browser but require emulation\r\n   * for 'synthetic' `OutputTarget`s like `Mock`s, which have no default text handling.\r\n   */\r\n  public forSpecialEmulation(Lkc: KeyEvent): EmulationKeystrokes {\r\n    let code = this.codeForEvent(Lkc);\r\n\r\n    switch(code) {\r\n      case Codes.keyCodes['K_BKSP']:\r\n        return EmulationKeystrokes.Backspace;\r\n      case Codes.keyCodes['K_ENTER']:\r\n        return EmulationKeystrokes.Enter;\r\n      // case Codes.keyCodes['K_DEL']:\r\n      //   return '\\u007f'; // 127, ASCII / Unicode control code for DEL.\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n\r\n  // Should not be used for mnenomic keyboards.  forAny()'s use of this method checks first.\r\n  public forNumpadKeys(Lkc: KeyEvent) {\r\n    // Translate numpad keystrokes into their non-numpad equivalents\r\n    if(Lkc.Lcode >= Codes.keyCodes[\"K_NP0\"]  &&  Lkc.Lcode <= Codes.keyCodes[\"K_NPSLASH\"]) {\r\n      // Number pad, numlock on\r\n      if(Lkc.Lcode < 106) {\r\n        var Lch = Lkc.Lcode-48;\r\n      } else {\r\n        Lch = Lkc.Lcode-64;\r\n      }\r\n      let ch = String._kmwFromCharCode(Lch); //I3319\r\n      return ch;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Test for fall back to U_xxxxxx key id\r\n  // For this first test, we ignore the keyCode and use the keyName\r\n  public forUnicodeKeynames(Lkc: KeyEvent, logMessages?: LogMessages) {\r\n    const keyName = Lkc.kName;\r\n\r\n    // Test for fall back to U_xxxxxx key id\r\n    // For this first test, we ignore the keyCode and use the keyName\r\n    if(!keyName || keyName.substr(0,2) != 'U_') {\r\n      return null;\r\n    }\r\n\r\n    let result = '';\r\n    const codePoints = keyName.substr(2).split('_');\r\n    for(let codePoint of codePoints) {\r\n      const codePointValue = parseInt(codePoint, 16);\r\n      if (((0x0 <= codePointValue) && (codePointValue <= 0x1F)) || ((0x80 <= codePointValue) && (codePointValue <= 0x9F)) || isNaN(codePointValue)) {\r\n        // Code points [U_0000 - U_001F] and [U_0080 - U_009F] refer to Unicode C0 and C1 control codes.\r\n        // Check the codePoint number and do not allow output of these codes via U_xxxxxx shortcuts.\r\n        // Also handles invalid identifiers (e.g. `U_ghij`) for which parseInt returns NaN\r\n        if(logMessages) {\r\n          logMessages.errorLog = (\"Suppressing Unicode control code in \" + keyName);\r\n        }\r\n        // We'll attempt to add valid chars\r\n        continue;\r\n      } else {\r\n        // String.fromCharCode() is inadequate to handle the entire range of Unicode\r\n        // Someday after upgrading to ES2015, can use String.fromCodePoint()\r\n        result += String.kmwFromCharCode(codePointValue);\r\n      }\r\n    }\r\n    return result ? result : null;\r\n  }\r\n\r\n  // Test for otherwise unimplemented keys on the the base default & shift layers.\r\n  // Those keys must be blocked by keyboard rules if intentionally unimplemented; otherwise, this function will trigger.\r\n  public forBaseKeys(Lkc: KeyEvent, logMessages?: LogMessages) {\r\n    let n = Lkc.Lcode;\r\n    let keyShiftState = Lkc.Lmodifiers;\r\n\r\n    // check if exact match to SHIFT's code.  Only the 'default' and 'shift' layers should have default key outputs.\r\n    // TODO:  Extend to allow AltGr as well - better mnemonic support.\r\n    if (keyShiftState == ModifierKeyConstants.K_SHIFTFLAG) {\r\n      keyShiftState = 1;\r\n    } else if(keyShiftState != 0) {\r\n      if(logMessages) {\r\n        logMessages.warningLog = \"KMW only defines default key output for the 'default' and 'shift' layers!\";\r\n      }\r\n      return null;\r\n    }\r\n\r\n    // Now that keyShiftState is either 0 or 1, we can use the following structure to determine the default output.\r\n    try {\r\n      if(n == Codes.keyCodes['K_SPACE']) {\r\n        return ' ';\r\n      } else if(n >= Codes.keyCodes['K_0'] && n <= Codes.keyCodes['K_9']) { // The number keys.\r\n        return Codes.codesUS[keyShiftState][0][n-Codes.keyCodes['K_0']];\r\n      } else if(n >= Codes.keyCodes['K_A'] && n <= Codes.keyCodes['K_Z']) { // The base letter keys\r\n        return String.fromCharCode(n+(keyShiftState?0:32));  // 32 is the offset from uppercase to lowercase.\r\n      } else if(n >= Codes.keyCodes['K_COLON'] && n <= Codes.keyCodes['K_BKQUOTE']) {\r\n        return Codes.codesUS[keyShiftState][1][n-Codes.keyCodes['K_COLON']];\r\n      } else if(n >= Codes.keyCodes['K_LBRKT'] && n <= Codes.keyCodes['K_QUOTE']) {\r\n        return Codes.codesUS[keyShiftState][2][n-Codes.keyCodes['K_LBRKT']];\r\n      } else if(n == Codes.keyCodes['K_oE2']) {\r\n        return keyShiftState ? '|' : '\\\\';\r\n      }\r\n    } catch (e) {\r\n      if(logMessages) {\r\n        logMessages.errorLog = \"Error detected with default mapping for key:  code = \" + n + \", shift state = \" + (keyShiftState == 1 ? 'shift' : 'default');\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n",
    "// TODO:  Move to separate folder:  'codes'\r\n// We should start splitting off code needed by keyboards even without a KeyboardProcessor active.\r\n// There's an upcoming `/common/web/types` package that 'codes' and 'keyboards' may fit well within.\r\n\r\n// KeyEvent may be a _little_ bit of pollution, but this IS what the Web OSK currently generates to signal\r\n// a key event.  The most straightforward way to integrate Web OSK events on other platforms is to have\r\n// other platforms recognize and utilize this type.\r\n\r\nimport type Keyboard from \"./keyboards/keyboard.js\";\r\nimport { type DeviceSpec } from \"@keymanapp/web-utils\";\r\n\r\nimport Codes from './codes.js';\r\nimport DefaultRules from \"./defaultRules.js\";\r\nimport { ActiveKeyBase } from './keyboards/activeLayout.js';\r\n\r\n// Represents a probability distribution over a keyboard's keys.\r\n// Defined here to avoid compilation issues.\r\nexport type KeyDistribution = { keySpec: ActiveKeyBase, p: number }[];\r\n\r\n/**\r\n * A simple instance of the standard 'default rules' for keystroke processing from the\r\n * DefaultRules base class.\r\n */\r\nconst BASE_DEFAULT_RULES = new DefaultRules();\r\n\r\nexport interface KeyEventSpec {\r\n\r\n  Lcode: number;\r\n  Lstates: number;\r\n  LmodifierChange?: boolean;\r\n  Lmodifiers: number;\r\n  LisVirtualKey?: boolean;\r\n  vkCode?: number;\r\n  kName: string;\r\n  kLayer?: string;   // The key's layer property\r\n  kbdLayer?: string; // The virtual keyboard's active layer\r\n  kNextLayer?: string;\r\n\r\n  /**\r\n   * Marks the active keyboard at the time that this KeyEvent was generated by the user.\r\n   *\r\n   * Note:  this is NOT equivalent to the active keyboard at the time that the event handler begins\r\n   * processing!  It should be set via closure (or similar) on the event handler that can 100%\r\n   * guarantee that the keyboard instance known to the handler has not changed during JS execution\r\n   * since the user's interaction that raised the event.\r\n   */\r\n  srcKeyboard?: Keyboard;\r\n\r\n  // Holds a generated fat-finger distribution (when appropriate)\r\n  keyDistribution?: KeyDistribution;\r\n\r\n  /**\r\n   * The device model for web-core to follow when processing the keystroke.\r\n   */\r\n  device: DeviceSpec;\r\n\r\n  /**\r\n   * `true` if this event was produced by sources other than a DOM-based KeyboardEvent.\r\n   */\r\n  isSynthetic?: boolean;\r\n}\r\n\r\n/**\r\n * This class is defined within its own file so that it can be loaded by code outside of KMW without\r\n * having to actually load the entirety of KMW.\r\n */\r\nexport default class KeyEvent implements KeyEventSpec {\r\n  Lcode: number;\r\n  Lstates: number;\r\n  LmodifierChange?: boolean;\r\n  Lmodifiers: number;\r\n  LisVirtualKey?: boolean;\r\n  vkCode?: number;\r\n  kName: string;\r\n  kLayer?: string;   // The key's layer property\r\n  kbdLayer?: string; // The virtual keyboard's active layer\r\n  kNextLayer?: string;\r\n  baseTranscriptionToken?: number;\r\n\r\n  /**\r\n   * Marks the active keyboard at the time that this KeyEvent was generated by the user.\r\n   *\r\n   * Note:  this is NOT equivalent to the active keyboard at the time that the event handler begins\r\n   * processing!  It should be set via closure (or similar) on the event handler that can 100%\r\n   * guarantee that the keyboard instance known to the handler has not changed during JS execution\r\n   * since the user's interaction that raised the event.\r\n   */\r\n  srcKeyboard?: Keyboard;\r\n\r\n  // Holds relevant event properties leading to construction of this KeyEvent.\r\n  source?: any; // Technically, KeyEvent|MouseEvent|Touch - but those are DOM types that must be kept out of headless mode.\r\n  // Holds a generated fat-finger distribution (when appropriate)\r\n  keyDistribution?: KeyDistribution;\r\n\r\n  /**\r\n   * The device model for web-core to follow when processing the keystroke.\r\n   */\r\n  device: DeviceSpec;\r\n\r\n  /**\r\n   * `true` if this event was produced by sources other than a DOM-based KeyboardEvent.\r\n   */\r\n  isSynthetic: boolean = true;\r\n\r\n  public constructor(keyEventSpec: KeyEventSpec) {\r\n    for(let key in keyEventSpec) {\r\n      // @ts-ignore\r\n      if(keyEventSpec[key] !== undefined) {\r\n        // @ts-ignore\r\n        this[key] = keyEventSpec[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  public static constructNullKeyEvent(device: DeviceSpec): KeyEvent {\r\n    const keyEvent = new KeyEvent({\r\n      Lcode: 0,\r\n      kName: '',\r\n      device: device,\r\n      Lstates: undefined,\r\n      Lmodifiers: undefined,\r\n      vkCode: undefined,\r\n      LisVirtualKey: undefined\r\n    });\r\n    return keyEvent;\r\n  }\r\n\r\n  get isModifier(): boolean {\r\n    switch(this.Lcode) {\r\n      case 16: //\"K_SHIFT\":16,\"K_CONTROL\":17,\"K_ALT\":18\r\n      case 17:\r\n      case 18:\r\n      case 20: //\"K_CAPS\":20, \"K_NUMLOCK\":144,\"K_SCROLL\":145\r\n      case 144:\r\n      case 145:\r\n        return true;\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  // FIXME:  makes some bad assumptions.\r\n  setMnemonicCode(shifted: boolean, capsActive: boolean) {\r\n    // K_SPACE is not handled by defaultKeyOutput for physical keystrokes unless using touch-aliased elements.\r\n    // It's also a \"exception required, March 2013\" for clickKey, so at least they both have this requirement.\r\n    if(this.Lcode != Codes.keyCodes['K_SPACE']) {\r\n      // So long as the key name isn't prefixed with 'U_', we'll get a default mapping based on the Lcode value.\r\n      // We need to determine the mnemonic base character - for example, SHIFT + K_PERIOD needs to map to '>'.\r\n      let mappingEvent: KeyEvent = new KeyEvent(this);\r\n      for(let key in (this as KeyEvent)) {\r\n        // @ts-ignore\r\n        mappingEvent[key as keyof KeyEvent] = this[key];\r\n      }\r\n\r\n      // To facilitate storing relevant commands, we should probably reverse-lookup\r\n      // the actual keyname instead.\r\n      mappingEvent.kName = 'K_xxxx';\r\n      mappingEvent.Lmodifiers = (shifted ? 0x10 : 0);  // mnemonic lookups only exist for default & shift layers.\r\n      var mappedChar: string = BASE_DEFAULT_RULES.forAny(mappingEvent, true);\r\n\r\n      /* First, save a backup of the original code.  This one won't needlessly trigger keyboard\r\n        * rules, but allows us to replicate/emulate commands after rule processing if needed.\r\n        * (Like backspaces)\r\n        */\r\n      this.vkCode = this.Lcode;\r\n      if(mappedChar) {\r\n        // Will return 96 for 'a', which is a keycode corresponding to Codes.keyCodes('K_NP1') - a numpad key.\r\n        // That stated, we're in mnemonic mode - this keyboard's rules are based on the char codes.\r\n        this.Lcode = mappedChar.charCodeAt(0);\r\n      } else {\r\n        // Don't let command-type keys (like K_DEL, which will output '.' otherwise!)\r\n        // trigger keyboard rules.\r\n        //\r\n        // However, DO make sure modifier keys pass through safely.\r\n        // (https://github.com/keymanapp/keyman/issues/3744)\r\n        if(!this.isModifier) {\r\n          delete this.Lcode;\r\n        }\r\n      }\r\n    }\r\n\r\n    if(capsActive) {\r\n      // TODO:  Needs fixing - does not properly mirror physical keystrokes, as Lcode range 96-111 corresponds\r\n      // to numpad keys!  (Physical keyboard section has its own issues here.)\r\n      if((this.Lcode >= 65 && this.Lcode <= 90) /* 'A' - 'Z' */ || (this.Lcode >= 97 && this.Lcode <= 122) /* 'a' - 'z' */) {\r\n        this.Lmodifiers ^= 0x10;  // Flip the 'shifted' bit, so it'll act as the opposite key.\r\n        this.Lcode ^= 0x20; // Flips the 'upper' vs 'lower' bit for the base 'a'-'z' ASCII alphabetics.\r\n      }\r\n    }\r\n  }\r\n};\r\n",
    "/***\r\n   KeymanWeb 11.0\r\n   Copyright 2019 SIL International\r\n***/\r\n\r\nimport type KeyEvent from \"./keyEvent.js\";\r\nimport { KeyEventSpec } from \"./keyEvent.js\";\r\n\r\nclass KeyMap {\r\n  [keycode: string]: number;\r\n}\r\n\r\nclass BrowserKeyMaps {\r\n  FF:     KeyMap = new KeyMap();\r\n  Safari: KeyMap = new KeyMap();\r\n  Opera:  KeyMap = new KeyMap();\r\n\r\n  constructor() {\r\n    // All three have been around since at least May 2014 / FF 29.\r\n    // It'd hard to find precise history, but at least that much has been confirmed.\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode, on Feb 26 2021.\r\n    this.FF['k61'] = 187;  // =   // FF 2.0\r\n    this.FF['k59'] = 186;  // ;\r\n    this.FF['k173'] = 189; // -/_\r\n  }\r\n}\r\n\r\nclass LanguageKeyMaps {\r\n  [languageCode: string]: KeyMap;\r\n\r\n  // // Here are some old legacy definitions that were no longer referenced but are likely related:\r\n  // static _BaseLayoutEuro: {[code: string]: string} = {\r\n  //   'se': '\\u00a71234567890+´~~~QWERTYUIOP\\u00c5\\u00a8\\'~~~ASDFGHJKL\\u00d6\\u00c4~~~~~<ZXCVBNM,.-~~~~~ ',  // Swedish\r\n  //   'uk': '`1234567890-=~~~QWERTYUIOP[]#~~~ASDFGHJKL;\\'~~~~~\\\\ZXCVBNM,./~~~~~ ' // UK\r\n\r\n  constructor() {\r\n    /* I732 START - 13/03/2007 MCD: Swedish: Start mapping of keystroke to US keyboard #2 */\r\n    // Swedish key map\r\n    this['se'] = new KeyMap();\r\n    this['se']['k220'] =  192; // `\r\n    this['se']['k187'] =  189; // -\r\n    this['se']['k219'] =  187; // =\r\n    this['se']['k221'] =  219; // [\r\n    this['se']['k186'] =  221; // ]\r\n    this['se']['k191'] =  220; // \\\r\n    this['se']['k192'] =  186; // ;\r\n    this['se']['k189'] =  191; // /\r\n\r\n    this['uk'] = new KeyMap();  // I1299\r\n    this['uk']['k223'] =  192; // // ` U+00AC (logical not) =>  ` ~\r\n    this['uk']['k192'] =  222; // ' @  =>  ' \"\r\n    this['uk']['k222'] =  226; // # ~  => K_oE2     // I1504 - UK keyboard mixup #, \\\r\n    this['uk']['k220'] =  220; // \\ |  => \\ |       // I1504 - UK keyboard mixup #, \\\r\n  }\r\n}\r\n\r\nexport default class KeyMapping {\r\n  static readonly browserMap: BrowserKeyMaps = new BrowserKeyMaps();\r\n  static readonly languageMap: LanguageKeyMaps = new LanguageKeyMaps();\r\n\r\n  private static _usCharCodes: KeyMap[];\r\n\r\n  private constructor() {\r\n    // Do not construct this class.\r\n  }\r\n\r\n  private static _usCodeInit() {\r\n    var s0=new KeyMap(),s1=new KeyMap();\r\n\r\n    s0['k192'] = 96;\r\n    s0['k49'] = 49;\r\n    s0['k50'] = 50;\r\n    s0['k51'] = 51;\r\n    s0['k52'] = 52;\r\n    s0['k53'] = 53;\r\n    s0['k54'] = 54;\r\n    s0['k55'] = 55;\r\n    s0['k56'] = 56;\r\n    s0['k57'] = 57;\r\n    s0['k48'] = 48;\r\n    s0['k189'] = 45;\r\n    s0['k187'] = 61;\r\n    s0['k81'] = 113;\r\n    s0['k87'] = 119;\r\n    s0['k69'] = 101;\r\n    s0['k82'] = 114;\r\n    s0['k84'] = 116;\r\n    s0['k89'] = 121;\r\n    s0['k85'] = 117;\r\n    s0['k73'] = 105;\r\n    s0['k79'] = 111;\r\n    s0['k80'] = 112;\r\n    s0['k219'] = 91;\r\n    s0['k221'] = 93;\r\n    s0['k220'] = 92;\r\n    s0['k65'] = 97;\r\n    s0['k83'] = 115;\r\n    s0['k68'] = 100;\r\n    s0['k70'] = 102;\r\n    s0['k71'] = 103;\r\n    s0['k72'] = 104;\r\n    s0['k74'] = 106;\r\n    s0['k75'] = 107;\r\n    s0['k76'] = 108;\r\n    s0['k186'] = 59;\r\n    s0['k222'] = 39;\r\n    s0['k90'] = 122;\r\n    s0['k88'] = 120;\r\n    s0['k67'] = 99;\r\n    s0['k86'] = 118;\r\n    s0['k66'] = 98;\r\n    s0['k78'] = 110;\r\n    s0['k77'] = 109;\r\n    s0['k188'] = 44;\r\n    s0['k190'] = 46;\r\n    s0['k191'] = 47;\r\n\r\n    s1['k192'] = 126;\r\n    s1['k49'] = 33;\r\n    s1['k50'] = 64;\r\n    s1['k51'] = 35;\r\n    s1['k52'] = 36;\r\n    s1['k53'] = 37;\r\n    s1['k54'] = 94;\r\n    s1['k55'] = 38;\r\n    s1['k56'] = 42;\r\n    s1['k57'] = 40;\r\n    s1['k48'] = 41;\r\n    s1['k189'] = 95;\r\n    s1['k187'] = 43;\r\n    s1['k81'] = 81;\r\n    s1['k87'] = 87;\r\n    s1['k69'] = 69;\r\n    s1['k82'] = 82;\r\n    s1['k84'] = 84;\r\n    s1['k89'] = 89;\r\n    s1['k85'] = 85;\r\n    s1['k73'] = 73;\r\n    s1['k79'] = 79;\r\n    s1['k80'] = 80;\r\n    s1['k219'] = 123;\r\n    s1['k221'] = 125;\r\n    s1['k220'] = 124;\r\n    s1['k65'] = 65;\r\n    s1['k83'] = 83;\r\n    s1['k68'] = 68;\r\n    s1['k70'] = 70;\r\n    s1['k71'] = 71;\r\n    s1['k72'] = 72;\r\n    s1['k74'] = 74;\r\n    s1['k75'] = 75;\r\n    s1['k76'] = 76;\r\n    s1['k186'] = 58;\r\n    s1['k222'] = 34;\r\n    s1['k90'] = 90;\r\n    s1['k88'] = 88;\r\n    s1['k67'] = 67;\r\n    s1['k86'] = 86;\r\n    s1['k66'] = 66;\r\n    s1['k78'] = 78;\r\n    s1['k77'] = 77;\r\n    s1['k188'] = 60;\r\n    s1['k190'] = 62;\r\n    s1['k191'] = 63;\r\n\r\n    KeyMapping._usCharCodes = [s0,s1];\r\n  }\r\n\r\n  /**\r\n   * Function     _USKeyCodeToCharCode\r\n   * Scope        Private\r\n   * @param       {Event}     Levent      KMW event object\r\n   * @return      {number}                Character code\r\n   * Description Translate keyboard codes to standard US layout codes\r\n   */\r\n  static _USKeyCodeToCharCode(Levent: KeyEvent | KeyEventSpec) {\r\n    return KeyMapping.usCharCodes[Levent.Lmodifiers & 0x10 ? 1 : 0]['k'+Levent.Lcode];\r\n  };\r\n\r\n  public static get usCharCodes() {\r\n    if(!KeyMapping._usCharCodes) {\r\n      KeyMapping._usCodeInit();\r\n    }\r\n\r\n    return KeyMapping._usCharCodes;\r\n  }\r\n}",
    "/**\r\n * Function     deepCopy\r\n * Scope        Private\r\n * @param       {Object}      p           object to copy\r\n * @return      {Object}                  clone ('deep copy') of object\r\n * Description  Makes an actual copy (not a reference) of an object, copying simple members,\r\n *              arrays and member objects but not functions, so use with care!\r\n */\r\nexport default function deepCopy<T extends ({[key: string | number | symbol]: any} | Array<any>)>(p:T): T {\r\n  // typeof undefined == 'undefined', ![] == false, !{} == false\r\n  if(typeof p != 'object' || !p) {\r\n    return p;\r\n  } else {\r\n    const clone = Array.isArray(p) ? [] : {};\r\n    // For arrays, skips over sparse entries.  Not that we use sparse arrays, but still.\r\n    const keys = Object.keys(p);\r\n\r\n    for(let key of keys) {\r\n      // @ts-ignore\r\n      if(p[key] !== undefined) {\r\n        // @ts-ignore\r\n        clone[key] = deepCopy(p[key]);\r\n      }\r\n    }\r\n    return clone as T;\r\n  }\r\n}",
    "/**\r\n * This class provides an abstract version of com.keyman.Device that is core-friendly,\r\n * containing only the information needed by web-core for text processing use, devoid\r\n * of any direct references to the DOM.\r\n */\r\nexport class DeviceSpec {\r\n  readonly browser: DeviceSpec.Browser;\r\n  readonly formFactor: DeviceSpec.FormFactor;\r\n  readonly OS: DeviceSpec.OperatingSystem;\r\n  readonly touchable: boolean;\r\n\r\n  constructor(browser: string, formFactor: string, OS: string, touchable: boolean) {\r\n    switch(browser.toLowerCase() as DeviceSpec.Browser) {\r\n      case DeviceSpec.Browser.Chrome:\r\n      case DeviceSpec.Browser.Edge:\r\n      case DeviceSpec.Browser.Firefox:\r\n      case DeviceSpec.Browser.Native:\r\n      case DeviceSpec.Browser.Opera:\r\n      case DeviceSpec.Browser.Safari:\r\n        this.browser = browser.toLowerCase() as DeviceSpec.Browser;\r\n        break;\r\n      default:\r\n        this.browser = DeviceSpec.Browser.Other;\r\n    }\r\n\r\n    switch(formFactor.toLowerCase() as DeviceSpec.FormFactor) {\r\n      case DeviceSpec.FormFactor.Desktop:\r\n      case DeviceSpec.FormFactor.Phone:\r\n      case DeviceSpec.FormFactor.Tablet:\r\n        this.formFactor = formFactor.toLowerCase() as DeviceSpec.FormFactor;\r\n        break;\r\n      default:\r\n        throw (\"Invalid form factor specified for device: \" + formFactor);\r\n    }\r\n\r\n    switch(OS.toLowerCase() as DeviceSpec.OperatingSystem) {\r\n      case DeviceSpec.OperatingSystem.Windows.toLowerCase():\r\n      case DeviceSpec.OperatingSystem.macOS.toLowerCase():\r\n      case DeviceSpec.OperatingSystem.Linux.toLowerCase():\r\n      case DeviceSpec.OperatingSystem.Android.toLowerCase():\r\n      case DeviceSpec.OperatingSystem.iOS.toLowerCase():\r\n        this.OS = OS.toLowerCase() as DeviceSpec.OperatingSystem;\r\n        break;\r\n      default:\r\n        this.OS = DeviceSpec.OperatingSystem.Other;\r\n    }\r\n\r\n    this.touchable = touchable;\r\n  }\r\n}\r\n\r\n// Namespaces these under DeviceSpec, as each is primarily used with it.\r\nexport namespace DeviceSpec {\r\n  export enum Browser {\r\n    Chrome = 'chrome',\r\n    Edge = 'edge',\r\n    Firefox = 'firefox',\r\n    Native = 'native', // Used by embedded mode\r\n    Opera = 'opera',\r\n    Safari = 'safari',\r\n    Other = 'other'\r\n  }\r\n\r\n  export enum OperatingSystem {\r\n    Windows = 'windows',\r\n    macOS = 'macosx',\r\n    Linux = 'linux',\r\n    Android = 'android',\r\n    iOS = 'ios',\r\n    Other = 'other'\r\n  }\r\n\r\n  export enum FormFactor {\r\n    Desktop = 'desktop',\r\n    Phone = 'phone',\r\n    Tablet = 'tablet'\r\n  }\r\n}\r\n\r\nexport function physicalKeyDeviceAlias(device: DeviceSpec) {\r\n  return new DeviceSpec(device.browser, DeviceSpec.FormFactor.Desktop, device.OS, false);\r\n}\r\n\r\nexport default DeviceSpec;",
    "\n// Generated by common/web/keyman-version/build.sh\n//\n// Note:  does not use the 'default' keyword so that the export name is\n// correct when converted to a CommonJS module with `esbuild`.\nexport class KEYMAN_VERSION {\n  static readonly VERSION = \"18.0.138\";\n  static readonly VERSION_RELEASE =\"18.0\";\n  static readonly VERSION_MAJOR = \"18\";\n  static readonly VERSION_MINOR = \"0\";\n  static readonly VERSION_PATCH = \"138\";\n  static readonly TIER =\"alpha\";\n  static readonly VERSION_TAG = \"-alpha\";\n  static readonly VERSION_WITH_TAG = \"18.0.138-alpha\";\n  static readonly VERSION_ENVIRONMENT = \"alpha\";\n  static readonly VERSION_GIT_TAG = \"release@18.0.138-alpha\";\n}\n\n// Also provides it as a 'default' export.\nexport default KEYMAN_VERSION;\n  \n",
    "import KEYMAN_VERSION from \"@keymanapp/keyman-version\";\r\n\r\n// Dotted-decimal version\r\nexport default class Version {\r\n  public static readonly CURRENT = new Version(KEYMAN_VERSION.VERSION_RELEASE);\r\n\r\n  // Represents a default version value for keyboards compiled before this was compiled into keyboards.\r\n  // The exact version is unknown at this point, but the value is \"good enough\" for what we need.\r\n  public static readonly DEVELOPER_VERSION_FALLBACK = new Version([9, 0, 0]);\r\n\r\n  // For 12.0, the old default behavior of adding missing keycaps to the default layers was removed,\r\n  // as it results in unexpected, bug-like behavior for keyboard designers when it is unwanted.\r\n  public static readonly NO_DEFAULT_KEYCAPS = new Version([12, 0]);\r\n\r\n  public static readonly MAC_POSSIBLE_IPAD_ALIAS = new Version([10, 15]);\r\n\r\n  private readonly components: number[]\r\n\r\n  /**\r\n   * Parses version information, preparing it for use in comparisons.\r\n   * @param text Either a string representing a version number (ex: \"9.0.0\") or an array representing\r\n   *             its components (ex: [9, 0, 0]).\r\n   */\r\n  constructor(text: String | number[]) {\r\n    // If a keyboard doesn't specify a version, use the DEVELOPER_VERSION_FALLBACK values.\r\n    if(text === undefined || text === null) {\r\n      this.components = [].concat(Version.DEVELOPER_VERSION_FALLBACK.components);\r\n      return;\r\n    }\r\n\r\n    if(Array.isArray(text)) {\r\n      let components = text as number[];\r\n      if(components.length < 2) {\r\n        throw new Error(\"Version string must have at least a major and minor component!\");\r\n      } else {\r\n        this.components = [].concat(components);\r\n        return;\r\n      }\r\n    }\r\n\r\n    // else, standard constructor path.\r\n    let parts = text.split('.');\r\n    let componentArray: number[] = [];\r\n\r\n    if(parts.length < 2) {\r\n      throw new Error(\"Version string must have at least a major and minor component!\");\r\n    }\r\n\r\n    for(let i=0; i < parts.length; i++) {\r\n      let value = parseInt(parts[i], 10);\r\n      if(isNaN(value)) {\r\n        throw new Error(\"Version string components must be numerical!\");\r\n      }\r\n\r\n      componentArray.push(value);\r\n    }\r\n\r\n    this.components = componentArray;\r\n  }\r\n\r\n  get major(): number {\r\n    return this.components[0];\r\n  }\r\n\r\n  get minor(): number {\r\n    return this.components[1];\r\n  }\r\n\r\n  toString(): string {\r\n    return this.components.join('.');\r\n  }\r\n\r\n  toJSON(): string {\r\n    return this.toString();\r\n  }\r\n\r\n  equals(other: Version): boolean {\r\n    return this.compareTo(other) == 0;\r\n  }\r\n\r\n  precedes(other: Version): boolean {\r\n    return this.compareTo(other) < 0;\r\n  }\r\n\r\n  compareTo(other: Version): number {\r\n    // If the version info depth differs, we need a flag to indicate which instance is shorter.\r\n    var isShorter: boolean = this.components.length < other.components.length;\r\n    var maxDepth: number = (this.components.length < other.components.length) ? this.components.length : other.components.length;\r\n\r\n    var i: number;\r\n    for(i = 0; i < maxDepth; i++) {\r\n      let delta = this.components[i] - other.components[i];\r\n      if(delta != 0) {\r\n        return delta;\r\n      }\r\n    }\r\n\r\n    var longList = isShorter ? other.components : this.components;\r\n    do {\r\n      if(longList[i] > 0) {\r\n        return isShorter ? -1 : 1;\r\n      }\r\n      i++;\r\n    } while (i < longList.length);\r\n\r\n    // Equal.\r\n    return 0;\r\n  }\r\n}",
    "/**\r\n * Returns the base global object available to the current JS platform.\r\n * - In browsers, returns `window`.\r\n * - In WebWorkers, returns `self`.\r\n * - In Node, returns `global`.\r\n */\r\nexport default function getGlobalObject(): typeof globalThis {\r\n  // Evergreen browsers have started defining 'globalThis'.\r\n  // Refer to https://devblogs.microsoft.com/typescript/announcing-typescript-3-4/#type-checking-for-globalthis\r\n  // and its referenced polyfill.  Said polyfill is very complex, so we opt for this far leaner variant.\r\n  if(typeof globalThis != 'undefined') {\r\n    return globalThis;  // Not available in IE or older Edge versions\r\n    // @ts-ignore (TS will throw errors for whatever platform we're not compiling for.)\r\n  } else if(typeof window != 'undefined') {\r\n    // @ts-ignore\r\n    return window; // The browser-based classic\r\n    // @ts-ignore\r\n  } else if(typeof self != 'undefined') {\r\n    // @ts-ignore\r\n    return self; // WebWorker global\r\n  } else {\r\n    // Assumption - if neither of the above exist, we're in Node, for unit-testing.\r\n    // Node doesn't have as many methods and properties as the other two, but what\r\n    // matters for us is that it's the base global.\r\n    //\r\n    // Some other headless JS solutions use 'this' instead, but Node's enough for our needs.\r\n    // @ts-ignore\r\n    return (global as any) as typeof globalThis;\r\n  }\r\n}",
    "/***\r\n   KeymanWeb 14.0\r\n   Copyright 2020 SIL International\r\n***/\r\n\r\n\r\n/*\r\n * TODO:  Remove this file as part of addressing https://github.com/keymanapp/keyman/issues/2492.\r\n */\r\n\r\ndeclare global {\r\n  interface StringConstructor {\r\n    kmwFromCharCode(cp0: number): string,\r\n    _kmwFromCharCode(cp0: number): string,\r\n    kmwEnableSupplementaryPlane(bEnable: boolean): void\r\n  }\r\n\r\n  interface String {\r\n    kmwCharCodeAt(codePointIndex: number): number,\r\n    kmwCharAt(codePointIndex: number) : string,\r\n    kmwIndexOf(searchValue: string, fromIndex?: number) : number,\r\n    kmwLastIndexOf(searchValue: string, fromIndex?: number) : number,\r\n    kmwSlice(beginSlice: number, endSlice: number) : string,\r\n    kmwSubstring(start: number, length: number) : string,\r\n    kmwSubstr(start: number, length?: number) : string,\r\n    kmwBMPSubstr(start: number, length?: number) : string,\r\n    kmwLength(): number,\r\n    kmwBMPLength(): number,\r\n    kmwNextChar(codeUnitIndex: number): number,\r\n    kmwBMPNextChar(codeUnitIndex: number): number,\r\n    kmwPrevChar(codeUnitIndex: number): number,\r\n    kmwBMPPrevChar(codeUnitIndex: number): number,\r\n    kmwCodePointToCodeUnit(codePointIndex: number) : number,\r\n    kmwBMPCodePointToCodeUnit(codePointIndex: number) : number,\r\n    kmwCodeUnitToCodePoint(codeUnitIndex: number) : number,\r\n    kmwBMPCodeUnitToCodePoint(codeUnitIndex: number) : number,\r\n    _kmwCharCodeAt(codePointIndex: number): number,\r\n    _kmwCharAt(codePointIndex: number) : string,\r\n    _kmwIndexOf(searchValue: string, fromIndex?: number) : number,\r\n    _kmwLastIndexOf(searchValue: string, fromIndex?: number) : number,\r\n    _kmwSlice(beginSlice: number, endSlice: number) : string,\r\n    _kmwSubstring(start: number, length?: number) : string,\r\n    _kmwSubstr(start: number, length?: number) : string,\r\n    _kmwLength(): number,\r\n    _kmwNextChar(codeUnitIndex: number): number,\r\n    _kmwPrevChar(codeUnitIndex: number): number,\r\n    _kmwCodePointToCodeUnit(codePointIndex: number) : number,\r\n    _kmwCodeUnitToCodePoint(codeUnitIndex: number) : number\r\n  }\r\n}\r\n\r\nexport default function extendString() {\r\n  /**\r\n   * Constructs a string from one or more Unicode character codepoint values\r\n   * passed as integer parameters.\r\n   *\r\n   * @param  {number} cp0,...   1 or more Unicode codepoints, e.g. 0x0065, 0x10000\r\n   * @return {string|null}      The new String object.\r\n   */\r\n  String.kmwFromCharCode = function(cp0) {\r\n    var chars = [], i;\r\n    for (i = 0; i < arguments.length; i++) {\r\n      var c = Number(arguments[i]);\r\n      if (!isFinite(c) || c < 0 || c > 0x10FFFF || Math.floor(c) !== c) {\r\n        throw new RangeError(\"Invalid code point \" + c);\r\n      }\r\n      if (c < 0x10000) {\r\n        chars.push(c);\r\n      } else {\r\n        c -= 0x10000;\r\n        chars.push((c >> 10) + 0xD800);\r\n        chars.push((c % 0x400) + 0xDC00);\r\n      }\r\n    }\r\n    return String.fromCharCode.apply(undefined, chars);\r\n  }\r\n\r\n  /**\r\n   * Returns a number indicating the Unicode value of the character at the given\r\n   * code point index, with support for supplementary plane characters.\r\n   *\r\n   * @param  {number}  codePointIndex  The code point index into the string (not\r\n                                       the code unit index) to return\r\n  * @return {number}                  The Unicode character value\r\n  */\r\n  String.prototype.kmwCharCodeAt = function(codePointIndex) {\r\n    var str = String(this);\r\n    var codeUnitIndex = 0;\r\n\r\n    if (codePointIndex < 0 || codePointIndex  >= str.length) {\r\n      return NaN;\r\n    }\r\n\r\n    for(var i = 0; i < codePointIndex; i++) {\r\n      codeUnitIndex = str.kmwNextChar(codeUnitIndex);\r\n      if(codeUnitIndex === null) return NaN;\r\n    }\r\n\r\n    var first = str.charCodeAt(codeUnitIndex);\r\n    if (first >= 0xD800 && first <= 0xDBFF && str.length > codeUnitIndex + 1) {\r\n      var second = str.charCodeAt(codeUnitIndex + 1);\r\n      if (second >= 0xDC00 && second <= 0xDFFF) {\r\n        return ((first - 0xD800) << 10) + (second - 0xDC00) + 0x10000;\r\n      }\r\n    }\r\n    return first;\r\n  }\r\n\r\n  /**\r\n   * Returns the code point index within the calling String object of the first occurrence\r\n   * of the specified value, or -1 if not found.\r\n   *\r\n   * @param  {string}  searchValue    The value to search for\r\n   * @param  {number}  [fromIndex]    Optional code point index to start searching from\r\n   * @return {number}                 The code point index of the specified search value\r\n   */\r\n  String.prototype.kmwIndexOf = function(searchValue, fromIndex) {\r\n    var str = String(this);\r\n    var codeUnitIndex = str.indexOf(searchValue, fromIndex);\r\n\r\n    if(codeUnitIndex < 0) {\r\n      return codeUnitIndex;\r\n    }\r\n\r\n    var codePointIndex = 0;\r\n    for(var i = 0; i !== null && i < codeUnitIndex; i = str.kmwNextChar(i)) codePointIndex++;\r\n    return codePointIndex;\r\n  }\r\n\r\n  /**\r\n   * Returns the code point index within the calling String object of the last occurrence\r\n   * of the specified value, or -1 if not found.\r\n   *\r\n   * @param  {string}  searchValue    The value to search for\r\n   * @param  {number}  fromIndex      Optional code point index to start searching from\r\n   * @return {number}                 The code point index of the specified search value\r\n   */\r\n  String.prototype.kmwLastIndexOf = function(searchValue, fromIndex)\r\n  {\r\n    var str = String(this);\r\n    var codeUnitIndex = str.lastIndexOf(searchValue, fromIndex);\r\n\r\n    if(codeUnitIndex < 0) {\r\n      return codeUnitIndex;\r\n    }\r\n\r\n    var codePointIndex = 0;\r\n    for(var i = 0; i !== null && i < codeUnitIndex; i = str.kmwNextChar(i)) codePointIndex++;\r\n    return codePointIndex;\r\n  }\r\n\r\n  /**\r\n   * Returns the length of the string in code points, as opposed to code units.\r\n   *\r\n   * @return {number}                 The length of the string in code points\r\n   */\r\n  String.prototype.kmwLength = function() {\r\n    var str = String(this);\r\n\r\n    if(str.length == 0) return 0;\r\n\r\n    for(var i = 0, codeUnitIndex = 0; codeUnitIndex !== null; i++)\r\n      codeUnitIndex = str.kmwNextChar(codeUnitIndex);\r\n    return i;\r\n  }\r\n\r\n  /**\r\n   * Extracts a section of a string and returns a new string.\r\n   *\r\n   * @param  {number}  beginSlice    The start code point index in the string to\r\n   *                                 extract from\r\n   * @param  {number}  endSlice      Optional end code point index in the string\r\n   *                                 to extract to\r\n   * @return {string}                The substring as selected by beginSlice and\r\n   *                                 endSlice\r\n   */\r\n  String.prototype.kmwSlice = function(beginSlice, endSlice) {\r\n    var str = String(this);\r\n    var beginSliceCodeUnit = str.kmwCodePointToCodeUnit(beginSlice);\r\n    var endSliceCodeUnit = str.kmwCodePointToCodeUnit(endSlice);\r\n    if(beginSliceCodeUnit === null || endSliceCodeUnit === null)\r\n      return '';\r\n    else\r\n      return str.slice(beginSliceCodeUnit, endSliceCodeUnit);\r\n  }\r\n\r\n  /**\r\n   * Returns the characters in a string beginning at the specified location through\r\n   * the specified number of characters.\r\n   *\r\n   * @param  {number}  start         The start code point index in the string to\r\n   *                                 extract from\r\n   * @param  {number=}  length        Optional length to extract\r\n   * @return {string}                The substring as selected by start and length\r\n   */\r\n  String.prototype.kmwSubstr = function(start, length?)\r\n  {\r\n    var str = String(this);\r\n    if(start < 0)\r\n    {\r\n      start = str.kmwLength() + start;\r\n    }\r\n    if(start < 0) start = 0;\r\n    var startCodeUnit = str.kmwCodePointToCodeUnit(start);\r\n    var endCodeUnit = startCodeUnit;\r\n\r\n    if(startCodeUnit === null) return '';\r\n\r\n    if(arguments.length < 2) {\r\n      endCodeUnit = str.length;\r\n    } else {\r\n      for(var i = 0; i < length; i++) endCodeUnit = str.kmwNextChar(endCodeUnit);\r\n    }\r\n    if(endCodeUnit === null)\r\n      return str.substring(startCodeUnit);\r\n    else\r\n      return str.substring(startCodeUnit, endCodeUnit);\r\n  }\r\n\r\n  /**\r\n   * Returns the characters in a string between two indexes into the string.\r\n   *\r\n   * @param  {number}  indexA        The start code point index in the string to\r\n   *                                 extract from\r\n   * @param  {number}  indexB        The end code point index in the string to\r\n   *                                 extract to\r\n   * @return {string}                The substring as selected by indexA and indexB\r\n   */\r\n  String.prototype.kmwSubstring = function(indexA, indexB)\r\n  {\r\n    var str = String(this),indexACodeUnit,indexBCodeUnit;\r\n\r\n    if(typeof(indexB) == 'undefined')\r\n    {\r\n      indexACodeUnit = str.kmwCodePointToCodeUnit(indexA);\r\n      indexBCodeUnit =  str.length;\r\n    }\r\n    else\r\n    {\r\n      if(indexA > indexB) { var c = indexA; indexA = indexB; indexB = c; }\r\n\r\n      indexACodeUnit = str.kmwCodePointToCodeUnit(indexA);\r\n      indexBCodeUnit = str.kmwCodePointToCodeUnit(indexB);\r\n    }\r\n    if(isNaN(indexACodeUnit) || indexACodeUnit === null) indexACodeUnit = 0;\r\n    if(isNaN(indexBCodeUnit) || indexBCodeUnit === null) indexBCodeUnit = str.length;\r\n\r\n    return str.substring(indexACodeUnit, indexBCodeUnit);\r\n  }\r\n\r\n  /*\r\n    Helper functions\r\n  */\r\n\r\n  /**\r\n   * Returns the code unit index for the next code point in the string, accounting for\r\n   * supplementary pairs\r\n   *\r\n   * @param  {number|null}  codeUnitIndex  The code unit position to increment\r\n   * @return {number|null}                 The index of the next code point in the string,\r\n   *                                       in code units\r\n   */\r\n  String.prototype.kmwNextChar = function(codeUnitIndex) {\r\n    var str = String(this);\r\n\r\n    if(codeUnitIndex === null || codeUnitIndex < 0 || codeUnitIndex >= str.length - 1) {\r\n      return null;\r\n    }\r\n\r\n    var first = str.charCodeAt(codeUnitIndex);\r\n    if (first >= 0xD800 && first <= 0xDBFF && str.length > codeUnitIndex + 1) {\r\n      var second = str.charCodeAt(codeUnitIndex + 1);\r\n      if (second >= 0xDC00 && second <= 0xDFFF) {\r\n        if(codeUnitIndex == str.length - 2) {\r\n          return null;\r\n        }\r\n        return codeUnitIndex + 2;\r\n      }\r\n    }\r\n    return codeUnitIndex + 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the code unit index for the previous code point in the string, accounting\r\n   * for supplementary pairs\r\n   *\r\n   * @param  {number|null}  codeUnitIndex  The code unit position to decrement\r\n   * @return {number|null}                 The index of the previous code point in the\r\n   *                                       string, in code units\r\n  */\r\n  String.prototype.kmwPrevChar = function(codeUnitIndex) {\r\n    var str = String(this);\r\n\r\n    if(codeUnitIndex == null || codeUnitIndex <= 0 || codeUnitIndex > str.length) {\r\n      return null;\r\n    }\r\n\r\n    var second = str.charCodeAt(codeUnitIndex - 1);\r\n    if (second >= 0xDC00 && second <= 0xDFFF && codeUnitIndex > 1) {\r\n      var first = str.charCodeAt(codeUnitIndex - 2);\r\n      if(first >= 0xD800 && first <= 0xDBFF) {\r\n        return codeUnitIndex - 2;\r\n      }\r\n    }\r\n    return codeUnitIndex - 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the corresponding code unit index to the code point index passed\r\n   *\r\n   * @param  {number|null} codePointIndex  A code point index in the string\r\n   * @return {number|null}                 The corresponding code unit index\r\n   */\r\n  String.prototype.kmwCodePointToCodeUnit = function(codePointIndex) {\r\n\r\n    if(codePointIndex === null) return null;\r\n\r\n    var str = String(this);\r\n    var codeUnitIndex = 0;\r\n\r\n    if(codePointIndex < 0) {\r\n      codeUnitIndex = str.length;\r\n      for(var i = 0; i > codePointIndex; i--)\r\n        codeUnitIndex = str.kmwPrevChar(codeUnitIndex);\r\n      return codeUnitIndex;\r\n    }\r\n\r\n    if(codePointIndex == str.kmwLength()) return str.length;\r\n\r\n    for(var i = 0; i < codePointIndex; i++)\r\n      codeUnitIndex = str.kmwNextChar(codeUnitIndex);\r\n    return codeUnitIndex;\r\n  }\r\n\r\n  /**\r\n   * Returns the corresponding code point index to the code unit index passed\r\n   *\r\n   * @param  {number|null}  codeUnitIndex  A code unit index in the string\r\n   * @return {number|null}                 The corresponding code point index\r\n   */\r\n  String.prototype.kmwCodeUnitToCodePoint = function(codeUnitIndex) {\r\n    var str = String(this);\r\n\r\n    if(codeUnitIndex === null)\r\n      return null;\r\n    else if(codeUnitIndex == 0)\r\n      return 0;\r\n    else if(codeUnitIndex < 0)\r\n      return str.substr(codeUnitIndex).kmwLength();\r\n    else\r\n      return str.substr(0,codeUnitIndex).kmwLength();\r\n  }\r\n\r\n  /**\r\n   * Returns the character at a the code point index passed\r\n   *\r\n   * @param  {number}  codePointIndex  A code point index in the string\r\n   * @return {string}                  The corresponding character\r\n   */\r\n  String.prototype.kmwCharAt = function(codePointIndex) {\r\n    var str = String(this);\r\n\r\n    if(codePointIndex >= 0) return str.kmwSubstr(codePointIndex,1); else return '';\r\n  }\r\n\r\n  /**\r\n   * String prototype library extensions for basic plane characters,\r\n   * to simplify enabling or disabling supplementary plane functionality (I3319)\r\n   */\r\n\r\n  /**\r\n   * Returns the code unit index for the next code point in the string\r\n   *\r\n   * @param  {number}  codeUnitIndex    A code point index in the string\r\n   * @return {number|null}                   The corresponding character\r\n   */\r\n  String.prototype.kmwBMPNextChar = function(codeUnitIndex)\r\n  {\r\n    var str = String(this);\r\n    if(codeUnitIndex < 0 || codeUnitIndex >= str.length - 1) {\r\n      return null;\r\n    }\r\n    return codeUnitIndex + 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the code unit index for the previous code point in the string\r\n   *\r\n   * @param  {number}  codeUnitIndex    A code unit index in the string\r\n   * @return {number|null}                   The corresponding character\r\n   */\r\n  String.prototype.kmwBMPPrevChar = function(codeUnitIndex)\r\n  {\r\n    var str = String(this);\r\n\r\n    if(codeUnitIndex <= 0 || codeUnitIndex > str.length) {\r\n      return null;\r\n    }\r\n    return codeUnitIndex - 1;\r\n  }\r\n\r\n  /**\r\n   * Returns the code unit index for a code point index\r\n   *\r\n   * @param  {number}  codePointIndex   A code point index in the string\r\n   * @return {number}                   The corresponding character\r\n   */\r\n  String.prototype.kmwBMPCodePointToCodeUnit = function(codePointIndex)\r\n  {\r\n    return codePointIndex;\r\n  }\r\n\r\n  /**\r\n   * Returns the code point index for a code unit index\r\n   *\r\n   * @param  {number}  codeUnitIndex    A code point index in the string\r\n   * @return {number}                   The corresponding character\r\n   */\r\n  String.prototype.kmwBMPCodeUnitToCodePoint = function(codeUnitIndex)\r\n  {\r\n    return codeUnitIndex;\r\n  }\r\n\r\n  /**\r\n   * Returns the length of a BMP string\r\n   *\r\n   * @return {number}                   The length in code points\r\n   */\r\n  String.prototype.kmwBMPLength = function()\r\n  {\r\n    var str = String(this);\r\n    return str.length;\r\n  }\r\n\r\n  /**\r\n   * Returns a substring\r\n   *\r\n   * @param  {number}  n\r\n   * @param  {number=}  ln\r\n   * @return {string}\r\n   */\r\n  String.prototype.kmwBMPSubstr = function(n,ln?)\r\n  {\r\n    var str=String(this);\r\n    if(n > -1)\r\n      return str.substr(n,ln);\r\n    else\r\n      return str.substr(str.length+n,-n);\r\n  }\r\n\r\n  /**\r\n   * Enable or disable supplementary plane string handling\r\n   *\r\n   * @param  {boolean}  bEnable\r\n   */\r\n  String.kmwEnableSupplementaryPlane = function(bEnable)\r\n  {\r\n    var p=String.prototype;\r\n    String._kmwFromCharCode = bEnable ? String.kmwFromCharCode : String.fromCharCode;\r\n    p._kmwCharAt = bEnable ? p.kmwCharAt : p.charAt;\r\n    p._kmwCharCodeAt = bEnable ? p.kmwCharCodeAt : p.charCodeAt;\r\n    p._kmwIndexOf = bEnable ? p.kmwIndexOf :p.indexOf;\r\n    p._kmwLastIndexOf = bEnable ? p.kmwLastIndexOf : p.lastIndexOf ;\r\n    p._kmwSlice = bEnable ? p.kmwSlice : p.slice;\r\n    p._kmwSubstring = bEnable ? p.kmwSubstring : p.substring;\r\n    p._kmwSubstr = bEnable ? p.kmwSubstr : p.kmwBMPSubstr;\r\n    p._kmwLength = bEnable ? p.kmwLength : p.kmwBMPLength;\r\n    p._kmwNextChar = bEnable ? p.kmwNextChar : p.kmwBMPNextChar;\r\n    p._kmwPrevChar = bEnable ? p.kmwPrevChar : p.kmwBMPPrevChar;\r\n    p._kmwCodePointToCodeUnit = bEnable ? p.kmwCodePointToCodeUnit : p.kmwBMPCodePointToCodeUnit;\r\n    p._kmwCodeUnitToCodePoint = bEnable ? p.kmwCodeUnitToCodePoint : p.kmwBMPCodeUnitToCodePoint;\r\n  }\r\n\r\n  // Ensure that _all_ String extensions are established, even if disabled by default.\r\n  if(!String._kmwFromCharCode) {\r\n    String.kmwEnableSupplementaryPlane(false);\r\n  }\r\n}\r\n\r\n// For side-effect imports:\r\nextendString();",
    "type ResolveSignature<Type> = (value: Type | PromiseLike<Type>) => void;\r\ntype RejectSignature = (reason?: any) => void;\r\n\r\nexport default class ManagedPromise<Type = void> {\r\n  /**\r\n   * Calling this function will fulfill the Promise represented by this class.\r\n   */\r\n  public get resolve(): ResolveSignature<Type> {\r\n    return this._resolve;\r\n  }\r\n\r\n  /**\r\n   * Calling this function will reject the Promise represented by this class.\r\n   */\r\n  public get reject(): RejectSignature {\r\n    return this._reject;\r\n  }\r\n\r\n  protected _resolve: ResolveSignature<Type>;\r\n  protected _reject: RejectSignature;\r\n\r\n  private _isFulfilled: boolean = false;\r\n  private _isRejected: boolean = false;\r\n\r\n  /**\r\n   * Indicates that the promise has been fulfilled; the underlying `resolve` function has\r\n   * already been called and \"locked in\".\r\n   */\r\n  public get isFulfilled(): boolean {\r\n    return this._isFulfilled;\r\n  }\r\n\r\n  /**\r\n   * Indicates that the promise has been rejected; the underlying `reject` function has\r\n   * already been called and \"locked in\".\r\n   */\r\n  public get isRejected(): boolean {\r\n    return this._isRejected;\r\n  }\r\n\r\n  /**\r\n   * Indicates that the promise itself has either been resolved or rejected.  It may not be fully\r\n   * settled if resolved or rejected with a \"thenable\" that has not yet fully resolved itself.\r\n   */\r\n  public get isResolved(): boolean {\r\n    return this.isFulfilled || this.isRejected;\r\n  }\r\n\r\n  private _promise: Promise<Type>;\r\n\r\n  constructor();\r\n  constructor(executor: (resolve: ResolveSignature<Type>, reject: RejectSignature) => void);\r\n  constructor(executor?: (resolve: ResolveSignature<Type>, reject: RejectSignature) => void) {\r\n    this._promise = new Promise<Type>((resolve, reject) => {\r\n      this._resolve = (value) => {\r\n        this._isFulfilled = true;\r\n        resolve(value);\r\n      };\r\n\r\n      this._reject = (reason) => {\r\n        this._isRejected = true;\r\n        reject(reason);\r\n      };\r\n\r\n      if(executor) {\r\n        executor(this._resolve, this._reject);\r\n      }\r\n    });\r\n  }\r\n\r\n  // Cannot actually extend the Promise class in ES5; attempt to use it will throw errors.\r\n  // So, we just implement a Promise-like interface.\r\n\r\n  then<TResult1 = Type, TResult2 = never>(onfulfilled?: ((value: Type) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2> {\r\n    return this._promise.then(onfulfilled, onrejected);\r\n  }\r\n\r\n  catch<TResult1>(onrejected?: (reason: any) => TResult1 | PromiseLike<TResult1>): Promise<Type | TResult1> {\r\n    return this._promise.catch(onrejected);\r\n  }\r\n\r\n  finally(onfinally?: () => void): Promise<Type> {\r\n    return this._promise.finally(onfinally);\r\n  }\r\n\r\n  // And for things that actually need to provide something typed to Promise... well...\r\n  get corePromise(): Promise<Type> {\r\n    return this._promise;\r\n  }\r\n}",
    "import ManagedPromise from \"./managedPromise.js\";\r\n\r\n/**\r\n * This class represents a cancelable timeout, wrapped in Promise form.\r\n *\r\n * It will resolve to `true` when the timer completes unless `resolve` or\r\n * `reject` is called earlier.  Call `.resolve(false)` for early cancellation\r\n * or `.resolve(true)` to cancel the timer while resolving the Promise early.\r\n */\r\nexport default class TimeoutPromise extends ManagedPromise<Boolean> {\r\n  private timerHandle: number | NodeJS.Timeout;\r\n  constructor(timeoutInMillis: number) {\r\n    // Helps marshal the internal timer handle to its member field despite being\r\n    // initialized in a closure passed to `super`, which cannot access `this`.\r\n    let timerHandleCapture: (number | NodeJS.Timeout) = null;\r\n\r\n    super((resolve) => {\r\n      const timerId = setTimeout(() => {\r\n        if(!this.isResolved) {\r\n          resolve(true)\r\n        }\r\n      }, timeoutInMillis);\r\n\r\n      // Forwards the timer handle outside of the closure.\r\n      timerHandleCapture = timerId;\r\n    });\r\n\r\n    // \"Lands\" the timer handle in its final destination.\r\n    this.timerHandle = timerHandleCapture;\r\n\r\n    const resolve = this._resolve;\r\n    this._resolve = (val) => {\r\n      // b/c of the mismatch between the return types of DOM's window.setTimeout & Node's version\r\n      clearTimeout(this.timerHandle as any);\r\n      resolve(val);\r\n    }\r\n\r\n    // Not a standard use-case; it's just here to ensure that the timeout resource is cleaned up\r\n    // even if `reject` gets used for whatever reason.\r\n    /* c8 ignore next 6 */\r\n    const reject = this._reject;\r\n    this._reject = (val) => {\r\n      // b/c of the mismatch between the return types of DOM's window.setTimeout & Node's version\r\n      clearTimeout(this.timerHandle as any);\r\n      reject(val);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * A simplified, but non-cancelable, version of `TimeoutPromise`.  Returns a simple,\r\n * Promise that resolves after the specified timeout duration.\r\n */\r\nexport const timedPromise = (time: number) => {\r\n  const promise = new TimeoutPromise(time);\r\n  return promise.corePromise;\r\n}",
    "/***\r\n   KeymanWeb 10.0\r\n   Copyright 2017 SIL International\r\n***/\r\n\r\nimport { Version, deepCopy } from \"@keymanapp/web-utils\";\r\nimport { KeymanWebKeyboard, ModifierKeyConstants, TouchLayout } from \"@keymanapp/common-types\";\r\n\r\nimport EncodedVisualKeyboard = KeymanWebKeyboard.EncodedVisualKeyboard;\r\nimport LayoutSpec = KeymanWebKeyboard.LayoutSpec;\r\n\r\nimport LayoutFormFactorSpec = TouchLayout.TouchLayoutPlatform;\r\nimport LayoutLayerBase = TouchLayout.TouchLayoutLayer;\r\nexport type LayoutRow = TouchLayout.TouchLayoutRow;\r\nexport type LayoutKey = TouchLayout.TouchLayoutKey;\r\nexport type LayoutSubKey = TouchLayout.TouchLayoutSubKey;\r\n\r\nimport ButtonClasses = TouchLayout.TouchLayoutKeySp;\r\n\r\nexport { ButtonClasses };\r\n\r\nimport Codes from \"../codes.js\";\r\nimport type Keyboard from \"./keyboard.js\";\r\n\r\n// The following types provide type definitions for the full JSON format we use for visual keyboard definitions.\r\nexport type ButtonClass       =  0 | 1 | 2 | 3 | 4 | /*5 | 6 | 7 |*/ 8 | 9 | 10;\r\n\r\nexport interface LayoutLayer extends LayoutLayerBase {\r\n  // Post-processing elements.\r\n  shiftKey?: LayoutKey,\r\n  capsKey?: LayoutKey,\r\n  numKey?: LayoutKey,\r\n  scrollKey?: LayoutKey,\r\n  aligned?: boolean,\r\n  nextlayer?: string\r\n};\r\nexport interface LayoutFormFactor extends LayoutFormFactorSpec {\r\n  // To facilitate those post-processing elements.\r\n  layer: LayoutLayer[]\r\n};\r\n\r\nconst KEY_102_WIDTH = 200;\r\n\r\n// This class manages default layout construction for consumption by OSKs without a specified layout.\r\nexport class Layouts {\r\n  static readonly dfltCodes: ReadonlyArray<string> = [\r\n    \"K_BKQUOTE\",\"K_1\",\"K_2\",\"K_3\",\"K_4\",\"K_5\",\"K_6\",\"K_7\",\"K_8\",\"K_9\",\"K_0\",\r\n    \"K_HYPHEN\",\"K_EQUAL\",\"K_*\",\"K_*\",\"K_*\",\"K_Q\",\"K_W\",\"K_E\",\"K_R\",\"K_T\",\r\n    \"K_Y\",\"K_U\",\"K_I\",\"K_O\",\"K_P\",\"K_LBRKT\",\"K_RBRKT\",\"K_BKSLASH\",\"K_*\",\r\n    \"K_*\",\"K_*\",\"K_A\",\"K_S\",\"K_D\",\"K_F\",\"K_G\",\"K_H\",\"K_J\",\"K_K\",\"K_L\",\r\n    \"K_COLON\",\"K_QUOTE\",\"K_*\",\"K_*\",\"K_*\",\"K_*\",\"K_*\",\"K_oE2\",\r\n    \"K_Z\",\"K_X\",\"K_C\",\"K_V\",\"K_B\",\"K_N\",\"K_M\",\"K_COMMA\",\"K_PERIOD\",\r\n    \"K_SLASH\",\"K_*\",\"K_*\",\"K_*\",\"K_*\",\"K_*\",\"K_SPACE\"\r\n  ];\r\n\r\n  static readonly dfltText='`1234567890-=\\xA7~~qwertyuiop[]\\\\~~~asdfghjkl;\\'~~~~~?zxcvbnm,./~~~~~ '\r\n    +'~!@#$%^&*()_+\\xA7~~QWERTYUIOP{}\\\\~~~ASDFGHJKL:\"~~~~~?ZXCVBNM<>?~~~~~ ';\r\n\r\n  // The function baked into keyboards by the current Web compiler creates an\r\n  // array of single-char strings for BK. Refer to\r\n  // developer/src/kmc-kmn/src/kmw-compiler/visual-keyboard-compiler.ts.\r\n  static readonly DEFAULT_RAW_SPEC = {'F':'Tahoma', 'BK': Layouts.dfltText.split('')} as const;\r\n\r\n  static modifierSpecials = {\r\n    'leftalt': '*LAlt*',\r\n    'rightalt': '*RAlt*',\r\n    'alt': '*Alt*',\r\n    'leftctrl': '*LCtrl*',\r\n    'rightctrl': '*RCtrl*',\r\n    'ctrl': '*Ctrl*',\r\n    'ctrl-alt': '*AltGr*',\r\n    'leftctrl-leftalt': '*LAltCtrl*',\r\n    'rightctrl-rightalt': '*RAltCtrl*',\r\n    'leftctrl-leftalt-shift': '*LAltCtrlShift*',\r\n    'rightctrl-rightalt-shift': '*RAltCtrlShift*',\r\n    'shift': '*Shift*',\r\n    'shift-alt': '*AltShift*',\r\n    'shift-ctrl': '*CtrlShift*',\r\n    'shift-ctrl-alt': '*AltCtrlShift*',\r\n    'leftalt-shift': '*LAltShift*',\r\n    'rightalt-shift': '*RAltShift*',\r\n    'leftctrl-shift': '*LCtrlShift*',\r\n    'rightctrl-shift': '*RCtrlShift*'\r\n  } as const;\r\n\r\n  /**\r\n  * Build a default layout for keyboards with no explicit layout\r\n  *\r\n  * @param   {Object}  PVK         raw specifications\r\n  * @param   {Keyboard} keyboard   keyboard object (as loaded)\r\n  * @param   {string} formFactor   (really utils.FormFactor)\r\n  * @return  {LayoutFormFactor}\r\n  */\r\n  static buildDefaultLayout(PVK: EncodedVisualKeyboard, keyboard: Keyboard, formFactor: string): LayoutFormFactor {\r\n    // Build a layout using the default for the device\r\n    let layoutType = formFactor as keyof TouchLayout.TouchLayoutFile;\r\n\r\n    if(typeof Layouts.dfltLayout[layoutType] != 'object') {\r\n      layoutType = 'desktop';\r\n    }\r\n\r\n    let kbdBitmask = Codes.modifierBitmasks['NON_CHIRAL'];\r\n    // An unfortunate dependency there.  Should probably also set a version within web-core for use.\r\n    let kbdDevVersion = Version.CURRENT;\r\n    if(keyboard) {\r\n      kbdBitmask = keyboard.modifierBitmask;\r\n      kbdDevVersion = keyboard.compilerVersion;\r\n    }\r\n\r\n    if(!PVK) {\r\n      PVK = this.DEFAULT_RAW_SPEC;\r\n    }\r\n\r\n    // Clone the default layout object for this device\r\n    var layout: LayoutFormFactorSpec = deepCopy(Layouts.dfltLayout[layoutType]);\r\n\r\n    var n,layers=layout['layer'] as LayoutLayer[], keyLabels: EncodedVisualKeyboard['KLS'] = PVK['KLS'], key102=PVK['K102'];\r\n    var i, j, k, rows: LayoutRow[], key: LayoutKey, keys: LayoutKey[];\r\n    var chiral: boolean = (kbdBitmask & Codes.modifierBitmasks.IS_CHIRAL) != 0;\r\n\r\n    if(PVK['F']) {\r\n      // The KeymanWeb compiler generates a string of the format `[italic ][bold ] 1em \"<font>\"`\r\n      // We will ignore the bold, italic and font size spec\r\n      let legacyFontSpec = /^(?:(?:italic|bold) )* *[0-9.eE-]+(?:[a-z]+) \"(.+)\"$/.exec(PVK['F']);\r\n      if(legacyFontSpec) {\r\n        layout.font = legacyFontSpec[1];\r\n      }\r\n    }\r\n\r\n    var kmw10Plus = !(typeof keyLabels == 'undefined' || !keyLabels);\r\n    if(!kmw10Plus) {\r\n      // Save the processed key label information to the keyboard's general data.\r\n      // Makes things more efficient elsewhere and for reloading after keyboard swaps.\r\n      keyLabels = PVK['KLS'] = Layouts.processLegacyDefinitions(PVK['BK']);\r\n    }\r\n\r\n    // *** Step 1:  instantiate the layer objects. ***\r\n\r\n    // Get the list of valid layers, enforcing that the 'default' layer must be the first one processed.\r\n    var validIdList = Object.getOwnPropertyNames(keyLabels), invalidIdList: string[] = [];\r\n    validIdList.splice(validIdList.indexOf('default'), 1);\r\n    validIdList = [ 'default' ].concat(validIdList);\r\n\r\n    // Automatic AltGr emulation if the 'leftctrl-leftalt' layer is otherwise undefined.\r\n    if(keyboard && keyboard.emulatesAltGr) {\r\n      // We insert only the layers that need to be emulated.\r\n      if((validIdList.indexOf('leftctrl-leftalt') == -1) && validIdList.indexOf('rightalt') != -1) {\r\n        validIdList.push('leftctrl-leftalt');\r\n        keyLabels['leftctrl-leftalt'] = keyLabels['rightalt'];\r\n      }\r\n\r\n      if((validIdList.indexOf('leftctrl-leftalt-shift') == -1) && validIdList.indexOf('rightalt-shift') != -1) {\r\n        validIdList.push('leftctrl-leftalt-shift');\r\n        keyLabels['leftctrl-leftalt-shift'] = keyLabels['rightalt-shift'];\r\n      }\r\n    }\r\n\r\n    // If there is no predefined layout, even touch layouts will follow the desktop's\r\n    // setting for the displayUnderlying flag.  As the desktop layout uses a different\r\n    // format for its layout spec, that's found at the field referenced below.\r\n    layout[\"displayUnderlying\"] = keyboard ? !!keyboard.scriptObject['KDU'] : false;\r\n\r\n    // For desktop devices, we must create all layers, even if invalid.\r\n    if(formFactor == 'desktop') {\r\n      invalidIdList = Layouts.generateLayerIds(chiral);\r\n\r\n      // Filter out all ids considered valid.  (We also don't want duplicates in the following list...)\r\n      for(n=0; n<invalidIdList.length; n++) {\r\n        if(validIdList.indexOf(invalidIdList[n]) != -1) {\r\n          invalidIdList.splice(n--, 1);\r\n        }\r\n      }\r\n    }\r\n\r\n    // This ensures all 'valid' layers are at the front of the layer array and managed by the main loop below.\r\n    // 'invalid' layers aren't handled by the loop and thus remain blank after it.\r\n    var idList = validIdList.concat(invalidIdList);\r\n\r\n    if(kmw10Plus && formFactor != 'desktop') { // KLS exists, so we know the exact layer set.\r\n      // Find the SHIFT key...\r\n      var shiftKey: LayoutKey = null;\r\n\r\n      rows = layers[0]['row'];\r\n      for(var r=0; r < rows.length; r++) {\r\n        keys = rows[r]['key'];\r\n        for(var c=0; c < keys.length; c++) {\r\n          key = keys[c];\r\n          if(key['id'] == 'K_SHIFT') {\r\n            shiftKey = key;\r\n          }\r\n        }\r\n      }\r\n\r\n      if(shiftKey) {\r\n        // Erase the legacy shifted subkey array.\r\n        shiftKey['sk'] = [];\r\n\r\n        for(let layerID in keyLabels) {\r\n          if(layerID == 'default' || layerID == 'shift') {\r\n            // These two are accessible from the layer without subkeys.\r\n            continue;\r\n          }\r\n\r\n          // Create a new subkey for the specified layer so that it will be accessible via OSK.\r\n          var specialChar = Layouts.modifierSpecials[(layerID as keyof typeof Layouts.modifierSpecials)];\r\n          let subkey: LayoutSubKey = {\r\n            id: `K_${specialChar}`,\r\n            text: specialChar,\r\n            sp: 1,\r\n            nextlayer: layerID\r\n          }\r\n          shiftKey['sk'].push(subkey);\r\n        }\r\n      } else {\r\n        // Seriously, this should never happen.  It's here for the debugging log only.\r\n        console.warn(\"Error in default layout - cannot find default Shift key!\");\r\n      }\r\n    }\r\n\r\n    for(n=0; n<idList.length; n++) {\r\n      // Populate non-default (shifted) keygroups\r\n      if(n > 0) {\r\n        layers[n]=deepCopy(layers[0]);\r\n      }\r\n      layers[n]['id']=idList[n];\r\n      layers[n]['nextlayer']=idList[n]; // This would only be different for a dynamic keyboard\r\n\r\n      // Extraced into a helper method to improve readability.\r\n      Layouts.formatDefaultLayer(layers[n], chiral, formFactor, !!key102);\r\n    }\r\n\r\n    // *** Step 2: Layer objects now exist; time to fill them with the appropriate key labels and key styles ***\r\n    for(n=0; n<layers.length; n++) {\r\n      var layer=layers[n] as LayoutLayer, kx, shiftKey: LayoutKey = null;\r\n      var capsKey: LayoutKey = null, numKey: LayoutKey = null, scrollKey: LayoutKey = null;  // null if not in the OSK layout.\r\n      var layerSpec = keyLabels[layer['id']];\r\n      var isShift = layer['id'] == 'shift' ? 1 : 0;\r\n      var isDefault = layer['id'] == 'default' || isShift ? 1 : 0;\r\n\r\n      rows=layer['row'];\r\n      for(i=0; i<rows.length; i++) {\r\n        keys=rows[i]['key'];\r\n        for(j=0; j<keys.length; j++) {\r\n          key=keys[j];\r\n          kx=Layouts.dfltCodes.indexOf(key['id']);\r\n\r\n          // Only create keys for defined layers.  ('default' and 'shift' are always defined.)\r\n          if(layerSpec || isDefault) {\r\n            // Get keycap text from visual keyboard array, if defined in keyboard\r\n            if(layerSpec) {\r\n              if(kx >= 0 && kx < layerSpec.length) key['text']=layerSpec[kx];\r\n            }\r\n\r\n            // Legacy (pre 12.0) behavior:  fall back to US English keycap text as default for the base two layers\r\n            // if a key cap is not otherwise defined. (Any intentional 'ghost' keys must be explicitly defined.)\r\n            if(isDefault && kbdDevVersion.precedes(Version.NO_DEFAULT_KEYCAPS)) {\r\n              if(key['id'] != 'K_SPACE' && kx+65 * isShift < Layouts.dfltText.length && key['text'] !== null) {\r\n                key['text'] = key['text'] || Layouts.dfltText[kx+65*isShift];\r\n              }\r\n            }\r\n          }\r\n\r\n          // Leave any unmarked key caps as null strings\r\n          if(key['text'] !== null) {\r\n            key['text'] = key['text'] || '';\r\n          }\r\n\r\n          // Detect important tracking keys.\r\n          switch(key['id']) {\r\n            case \"K_SHIFT\":\r\n              shiftKey=key;\r\n              break;\r\n            case \"K_CAPS\":\r\n              capsKey=key;\r\n              break;\r\n            case \"K_NUMLOCK\":\r\n              numKey=key;\r\n              break;\r\n            case \"K_SCROLL\":\r\n              scrollKey=key;\r\n              break;\r\n          }\r\n\r\n          // Remove pop-up shift keys referencing invalid layers (Build 349)\r\n          if(key['sk'] != null) {\r\n            for(k=0; k<key['sk'].length; k++) {\r\n              if(validIdList.indexOf(key['sk'][k]['nextlayer']) == -1) {\r\n                key['sk'].splice(k--, 1);\r\n              }\r\n            }\r\n\r\n            if(key['sk'].length == 0) {\r\n              key['sk']=null;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      // We're done with the layer keys initialization pass.  Time to do post-analysis layer-level init where necessary.\r\n      layer.shiftKey=shiftKey;\r\n      layer.capsKey=capsKey;\r\n      layer.numKey=numKey;\r\n      layer.scrollKey=scrollKey;\r\n\r\n      const layerId = layers[n].id as keyof typeof Layouts.modifierSpecials;\r\n\r\n      // Set modifier key appearance and behaviour for non-desktop devices using the default layout\r\n      if(formFactor != 'desktop') {\r\n        if(n > 0 && shiftKey != null) {\r\n          shiftKey['sp']=ButtonClasses.specialActive;\r\n          shiftKey['sk']=null;\r\n          shiftKey['text'] = Layouts.modifierSpecials[layerId] ?? \"*Shift*\";\r\n        }\r\n      }\r\n    }\r\n\r\n    return layout;\r\n  }\r\n\r\n      /**\r\n   * Function     getLayerId\r\n   * Scope        Private\r\n   * @param       {number}      m     shift modifier code\r\n   * @return      {string}            layer string from shift modifier code (desktop keyboards)\r\n   * Description  Get name of layer from code, where the modifer order is determined by ascending bit-flag value.\r\n   */\r\n  static getLayerId(m: number): string {\r\n    var s='';\r\n    if(m == 0) {\r\n      return 'default';\r\n    } else {\r\n      if(m & ModifierKeyConstants.LCTRLFLAG) {\r\n        s = (s.length > 0 ? s + '-' : '') + 'leftctrl';\r\n      }\r\n      if(m & ModifierKeyConstants.RCTRLFLAG) {\r\n        s = (s.length > 0 ? s + '-' : '') + 'rightctrl';\r\n      }\r\n      if(m & ModifierKeyConstants.LALTFLAG) {\r\n        s = (s.length > 0 ? s + '-' : '') + 'leftalt';\r\n      }\r\n      if(m & ModifierKeyConstants.RALTFLAG) {\r\n        s = (s.length > 0 ? s + '-' : '') + 'rightalt';\r\n      }\r\n      if(m & ModifierKeyConstants.K_SHIFTFLAG) {\r\n        s = (s.length > 0 ? s + '-' : '') + 'shift';\r\n      }\r\n      if(m & ModifierKeyConstants.K_CTRLFLAG) {\r\n        s = (s.length > 0 ? s + '-' : '') + 'ctrl';\r\n      }\r\n      if(m & ModifierKeyConstants.K_ALTFLAG) {\r\n        s = (s.length > 0 ? s + '-' : '') + 'alt';\r\n      }\r\n      return s;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates a list of potential layer ids for the specified chirality mode.\r\n   *\r\n   * @param   {boolean}   chiral    // Does the keyboard use chiral modifiers or not?\r\n   */\r\n  static generateLayerIds(chiral: boolean): string[] {\r\n    var layerCnt, offset;\r\n\r\n    if(chiral) {\r\n      layerCnt=32;\r\n      offset=0x01;\r\n    } else {\r\n      layerCnt=8;\r\n      offset=0x10;\r\n    }\r\n\r\n    var layerIds = [];\r\n\r\n    for(var i=0; i < layerCnt; i++) {\r\n      layerIds.push(Layouts.getLayerId(i * offset));\r\n    }\r\n\r\n    return layerIds;\r\n  }\r\n\r\n  /**\r\n   * Sets a formatting property for the modifier keys when constructing a default layout for a keyboard.\r\n   *\r\n   * @param   {Object}    layer   // One layer specification\r\n   * @param   {boolean}   chiral  // Whether or not the keyboard uses chiral modifier information.\r\n   * @param   {string}    formFactor  // The form factor of the device the layout is being constructed for.\r\n   * @param   {boolean}   key102      // Whether or not the extended key 102 should be hidden.\r\n   */\r\n  static formatDefaultLayer(layer: LayoutLayer, chiral: boolean, formFactor: string, key102: boolean) {\r\n    var layerId = layer['id'];\r\n\r\n    // Correct appearance of state-dependent modifier keys according to group\r\n    for(var i=0; i<layer['row'].length; i++) {\r\n      var row=layer['row'][i];\r\n      var keys=row['key'];\r\n      for(var j=0; j<keys.length; j++) {\r\n        var key=keys[j];\r\n        switch(key['id']) {\r\n          case 'K_SHIFT':\r\n          case 'K_LSHIFT':\r\n          case 'K_RSHIFT':\r\n            if(layerId.indexOf('shift') != -1) {\r\n              key['sp'] = ButtonClasses.specialActive;\r\n            }\r\n            if(formFactor != 'desktop') {\r\n              if(layerId != 'default') {\r\n                key['nextlayer']='default';\r\n              } else {\r\n                key['nextlayer']='shift';\r\n              }\r\n            }\r\n            break;\r\n          case 'K_LCTRL':\r\n          case 'K_LCONTROL':\r\n            if(chiral) {\r\n              if(layerId.indexOf('leftctrl') != -1) {\r\n                key['sp'] = ButtonClasses.specialActive;\r\n              }\r\n              break;\r\n            }\r\n          case 'K_RCTRL':\r\n          case 'K_RCONTROL':\r\n            if(chiral) {\r\n              if(layerId.indexOf('rightctrl') != -1) {\r\n                key['sp'] = ButtonClasses.specialActive;\r\n              }\r\n              break;\r\n            }\r\n          case 'K_CONTROL':\r\n            if(layerId.indexOf('ctrl') != -1) {\r\n              if(!chiral || (layerId.indexOf('leftctrl') != -1 && layerId.indexOf('rightctrl') != -1)) {\r\n                key['sp'] = ButtonClasses.specialActive;\r\n              }\r\n            }\r\n            break;\r\n          case 'K_LALT':\r\n            if(chiral) {\r\n              if(layerId.indexOf('leftalt') != -1) {\r\n                key['sp'] = ButtonClasses.specialActive;\r\n              }\r\n              break;\r\n            }\r\n          case 'K_RALT':\r\n            if(chiral) {\r\n              if(layerId.indexOf('rightalt') != -1) {\r\n                key['sp'] = ButtonClasses.specialActive;\r\n              }\r\n              break;\r\n            }\r\n          case 'K_ALT':\r\n            if(layerId.indexOf('alt') != -1) {\r\n              if(!chiral || (layerId.indexOf('leftalt') != -1 && layerId.indexOf('rightalt') != -1)) {\r\n                key['sp'] = ButtonClasses.specialActive;\r\n              }\r\n            }\r\n            break;\r\n          case 'K_oE2':\r\n            if(typeof key102 == 'undefined' || !key102) {\r\n              if(formFactor == 'desktop') {\r\n                keys.splice(j--, 1);\r\n                keys[0]['width']=KEY_102_WIDTH;\r\n              } else {\r\n                keys[j]['sp']=ButtonClasses.spacer;\r\n              }\r\n            }\r\n            break;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts the legacy BK property from pre 10.0 into the KLS keyboard layer spec format,\r\n   * sparsifying it as possible to pre-emptively check invalid layers.\r\n   *\r\n   * @param   {Array}   BK      keyboard object (as loaded)\r\n   * @return  {Object}\r\n   */\r\n  static processLegacyDefinitions(BK: string[]): EncodedVisualKeyboard['KLS'] {\r\n    //['default','shift','ctrl','shiftctrl','alt','shiftalt','ctrlalt','shiftctrlalt'];\r\n    var idList=Layouts.generateLayerIds(false); // Non-chiral.\r\n\r\n    var KLS: EncodedVisualKeyboard['KLS'] = {};\r\n\r\n    // The old default:  eight auto-managed layers...\r\n    for(var n=0; n<idList.length; n++) {\r\n      var id = idList[n], arr = [], valid = false;\r\n\r\n      // ... with keycode mappings in blocks of 65.\r\n      for(var k=0; k < 65; k++) {\r\n        var index = k + 65 * n;\r\n        arr.push(BK[index]);\r\n\r\n        // The entry for K_SPACE's keycode tends to hold ' ' instead of '', which causes\r\n        // the whole layer to be treated as 'valid' if not included in the conditional.\r\n        if(index < BK.length && BK[index] != '' && k != Layouts.dfltCodes.indexOf('K_SPACE')) {\r\n          valid = true;\r\n        }\r\n      }\r\n\r\n      if(valid) {\r\n        KLS[id] = arr;\r\n      }\r\n    }\r\n\r\n    // There must always be at least a plain 'default' layer.  Array(65).fill('') would be preferable but isn't supported on IE,\r\n    // but buildDefaultLayer will set the defaults for these layers if no entry exists for them in the array due to length.\r\n    if(typeof KLS['default'] == 'undefined' || ! KLS['default']) {\r\n      KLS['default'] = [''];\r\n    }\r\n\r\n    // There must always be at least a plain 'shift' layer.\r\n    if(typeof KLS['shift'] == 'undefined' || ! KLS['shift']) {\r\n      KLS['shift'] = [''];\r\n    }\r\n\r\n    return KLS;\r\n  }\r\n\r\n  static dfltShiftToCaps: LayoutSubKey = {\r\n    // Needs to be something special and unique.  Typing restricts us from\r\n    // using a reserved key-id prefix, though.\r\n    id: \"T_*_MT_SHIFT_TO_CAPS\",\r\n    text: '*ShiftLock*',\r\n    sp: 1,\r\n    nextlayer: 'caps'\r\n  }\r\n\r\n  static dfltShiftToDefault: LayoutSubKey = {\r\n    // Needs to be something special and unique.  Typing restricts us from\r\n    // using a reserved key-id prefix, though.\r\n    id: \"T_*_MT_SHIFT_TO_DEFAULT\",\r\n    text: '*Shift*',\r\n    sp: 1,\r\n    nextlayer: 'default'\r\n  }\r\n\r\n  static dfltShiftToShift: LayoutSubKey = {\r\n    id: \"T_*_MT_SHIFT_TO_SHIFT\",\r\n    text: '*Shift*',\r\n    sp: 1,\r\n    nextlayer: 'shift'\r\n  }\r\n\r\n  // Defines the default visual layout for a keyboard.\r\n  /* c8 ignore start */\r\n  static dfltLayout: LayoutSpec = {\r\n      \"desktop\":\r\n      {\r\n          \"defaultHint\": 'dot',\r\n          \"font\": \"Tahoma,Helvetica\",\r\n          \"layer\": [\r\n              {\r\n                  \"id\": \"default\",\r\n                  \"row\": [\r\n                      {\r\n                          \"id\": 1,\r\n                          \"key\": [\r\n                              { \"id\": \"K_BKQUOTE\" },\r\n                              { \"id\": \"K_1\" },\r\n                              { \"id\": \"K_2\" },\r\n                              { \"id\": \"K_3\" },\r\n                              { \"id\": \"K_4\" },\r\n                              { \"id\": \"K_5\" },\r\n                              { \"id\": \"K_6\" },\r\n                              { \"id\": \"K_7\" },\r\n                              { \"id\": \"K_8\" },\r\n                              { \"id\": \"K_9\" },\r\n                              { \"id\": \"K_0\" },\r\n                              { \"id\": \"K_HYPHEN\" },\r\n                              { \"id\": \"K_EQUAL\" },\r\n                              { \"id\": \"K_BKSP\", \"text\": \"*BkSp*\", \"sp\": 1, \"width\": 130 }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": 2,\r\n                          \"key\": [\r\n                              { \"id\": \"K_TAB\", \"text\": \"*Tab*\", \"sp\": 1, \"width\": 130 },\r\n                              { \"id\": \"K_Q\" },\r\n                              { \"id\": \"K_W\" },\r\n                              { \"id\": \"K_E\" },\r\n                              { \"id\": \"K_R\" },\r\n                              { \"id\": \"K_T\" },\r\n                              { \"id\": \"K_Y\" },\r\n                              { \"id\": \"K_U\" },\r\n                              { \"id\": \"K_I\" },\r\n                              { \"id\": \"K_O\" },\r\n                              { \"id\": \"K_P\" },\r\n                              { \"id\": \"K_LBRKT\" },\r\n                              { \"id\": \"K_RBRKT\" },\r\n                              { \"id\": \"K_BKSLASH\" }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": 3,\r\n                          \"key\": [\r\n                              { \"id\": \"K_CAPS\", \"text\": \"*Caps*\", \"sp\": 1, \"width\": 165 },\r\n                              { \"id\": \"K_A\" },\r\n                              { \"id\": \"K_S\" },\r\n                              { \"id\": \"K_D\" },\r\n                              { \"id\": \"K_F\" },\r\n                              { \"id\": \"K_G\" },\r\n                              { \"id\": \"K_H\" },\r\n                              { \"id\": \"K_J\" },\r\n                              { \"id\": \"K_K\" },\r\n                              { \"id\": \"K_L\" },\r\n                              { \"id\": \"K_COLON\" },\r\n                              { \"id\": \"K_QUOTE\" },\r\n                              { \"id\": \"K_ENTER\", \"text\": \"*Enter*\", \"sp\": 1, \"width\": 165 }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": 4,\r\n                          \"key\": [\r\n                              { \"id\": \"K_SHIFT\", \"text\": \"*Shift*\", \"sp\": 1, \"width\": 130 },\r\n                              { \"id\": \"K_oE2\" },\r\n                              { \"id\": \"K_Z\" },\r\n                              { \"id\": \"K_X\" },\r\n                              { \"id\": \"K_C\" },\r\n                              { \"id\": \"K_V\" },\r\n                              { \"id\": \"K_B\" },\r\n                              { \"id\": \"K_N\" },\r\n                              { \"id\": \"K_M\" },\r\n                              { \"id\": \"K_COMMA\" },\r\n                              { \"id\": \"K_PERIOD\" },\r\n                              { \"id\": \"K_SLASH\" },\r\n                              { \"id\": \"K_RSHIFT\", \"text\": \"*Shift*\", \"sp\": 1, \"width\": 130 }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": 5,\r\n                          \"key\": [\r\n                              { \"id\": \"K_LCONTROL\", \"text\": \"*Ctrl*\", \"sp\": 1, \"width\": 170 },\r\n                              { \"id\": \"K_LALT\", \"text\": \"*Alt*\", \"sp\": 1, \"width\": 160 },\r\n                              { \"id\": \"K_SPACE\", \"text\": \"\", \"width\": 770 },\r\n                              { \"id\": \"K_RALT\", \"text\": \"*Alt*\", \"sp\": 1, \"width\": 160 },\r\n                              { \"id\": \"K_RCONTROL\", \"text\": \"*Ctrl*\", \"sp\": 1, \"width\": 170 }\r\n                          ]\r\n                      }\r\n                  ]\r\n              }\r\n          ]\r\n      },\r\n      \"tablet\":\r\n      {\r\n          \"defaultHint\": 'dot',\r\n          \"font\": \"Tahoma,Helvetica\",\r\n          \"layer\": [\r\n              {\r\n                  \"id\": \"default\",\r\n                  \"row\": [\r\n                      {\r\n                          \"id\": 0,\r\n                          \"key\": [\r\n                              { \"id\": \"K_1\" },\r\n                              { \"id\": \"K_2\" },\r\n                              { \"id\": \"K_3\" },\r\n                              { \"id\": \"K_4\" },\r\n                              { \"id\": \"K_5\" },\r\n                              { \"id\": \"K_6\" },\r\n                              { \"id\": \"K_7\" },\r\n                              { \"id\": \"K_8\" },\r\n                              { \"id\": \"K_9\" },\r\n                              { \"id\": \"K_0\" },\r\n                              { \"id\": \"K_HYPHEN\" },\r\n                              { \"id\": \"K_EQUAL\" },\r\n                              { \"sp\": 10, \"width\": 1 }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": 1,\r\n                          \"key\": [\r\n                              { \"id\": \"K_Q\", \"pad\": 25 },\r\n                              { \"id\": \"K_W\" },\r\n                              { \"id\": \"K_E\" },\r\n                              { \"id\": \"K_R\" },\r\n                              { \"id\": \"K_T\" },\r\n                              { \"id\": \"K_Y\" },\r\n                              { \"id\": \"K_U\" },\r\n                              { \"id\": \"K_I\" },\r\n                              { \"id\": \"K_O\" },\r\n                              { \"id\": \"K_P\" },\r\n                              { \"id\": \"K_LBRKT\" },\r\n                              { \"id\": \"K_RBRKT\" },\r\n                              { \"sp\": 10, \"width\": 1 }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": 2,\r\n                          \"key\": [\r\n                              { \"id\": \"K_A\", \"pad\": 50 },\r\n                              { \"id\": \"K_S\" },\r\n                              { \"id\": \"K_D\" },\r\n                              { \"id\": \"K_F\" },\r\n                              { \"id\": \"K_G\" },\r\n                              { \"id\": \"K_H\" },\r\n                              { \"id\": \"K_J\" },\r\n                              { \"id\": \"K_K\" },\r\n                              { \"id\": \"K_L\" },\r\n                              { \"id\": \"K_COLON\" },\r\n                              { \"id\": \"K_QUOTE\" },\r\n                              { \"id\": \"K_BKSLASH\", \"width\": 90 }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": 3,\r\n                          \"key\": [\r\n                              { \"id\": \"K_oE2\", \"width\": 90 },\r\n                              { \"id\": \"K_Z\" },\r\n                              { \"id\": \"K_X\" },\r\n                              { \"id\": \"K_C\" },\r\n                              { \"id\": \"K_V\" },\r\n                              { \"id\": \"K_B\" },\r\n                              { \"id\": \"K_N\" },\r\n                              { \"id\": \"K_M\" },\r\n                              { \"id\": \"K_COMMA\" },\r\n                              { \"id\": \"K_PERIOD\" },\r\n                              { \"id\": \"K_SLASH\" },\r\n                              { \"id\": \"K_BKQUOTE\" },\r\n                              { \"sp\": 10, \"width\": 1 }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": 4,\r\n                          \"key\": [\r\n                              {\r\n                                  \"id\": \"K_SHIFT\", \"text\": \"*Shift*\", \"sp\": 1, \"width\": 200, \"sk\": [\r\n                                      { \"id\": \"K_LCONTROL\", \"text\": \"*Ctrl*\", \"sp\": 1, \"width\": 50, \"nextlayer\": \"ctrl\" },\r\n                                      { \"id\": \"K_LCONTROL\", \"text\": \"*LCtrl*\", \"sp\": 1, \"width\": 50, \"nextlayer\": \"leftctrl\" },\r\n                                      { \"id\": \"K_RCONTROL\", \"text\": \"*RCtrl*\", \"sp\": 1, \"width\": 50, \"nextlayer\": \"rightctrl\" },\r\n                                      { \"id\": \"K_LALT\", \"text\": \"*Alt*\", \"sp\": 1, \"width\": 50, \"nextlayer\": \"alt\" },\r\n                                      { \"id\": \"K_LALT\", \"text\": \"*LAlt*\", \"sp\": 1, \"width\": 50, \"nextlayer\": \"leftalt\" },\r\n                                      { \"id\": \"K_RALT\", \"text\": \"*RAlt*\", \"sp\": 1, \"width\": 50, \"nextlayer\": \"rightalt\" },\r\n                                      { \"id\": \"K_ALTGR\", \"text\": \"*AltGr*\", \"sp\": 1, \"width\": 50, \"nextlayer\": \"ctrl-alt\" }]\r\n                              },\r\n                              { \"id\": \"K_LOPT\", \"text\": \"*Menu*\", \"sp\": 1, \"width\": 150 },\r\n                              { \"id\": \"K_SPACE\", \"text\": \"\", \"width\": 570 },\r\n                              { \"id\": \"K_BKSP\", \"text\": \"*BkSp*\", \"sp\": 1, \"width\": 150 },\r\n                              { \"id\": \"K_ENTER\", \"text\": \"*Enter*\", \"sp\": 1, \"width\": 200 }\r\n                          ]\r\n                      }\r\n                  ]\r\n              }\r\n          ]\r\n      },\r\n      \"phone\":\r\n      {\r\n          \"defaultHint\": 'dot',\r\n          \"font\": \"Tahoma,Helvetica\",\r\n          \"layer\": [\r\n              {\r\n                  \"id\": \"default\",\r\n                  \"row\": [\r\n                      {\r\n                          \"id\": 0,\r\n                          \"key\": [\r\n                              { \"id\": \"K_1\" },\r\n                              { \"id\": \"K_2\" },\r\n                              { \"id\": \"K_3\" },\r\n                              { \"id\": \"K_4\" },\r\n                              { \"id\": \"K_5\" },\r\n                              { \"id\": \"K_6\" },\r\n                              { \"id\": \"K_7\" },\r\n                              { \"id\": \"K_8\" },\r\n                              { \"id\": \"K_9\" },\r\n                              { \"id\": \"K_0\" },\r\n                              { \"id\": \"K_HYPHEN\" },\r\n                              { \"id\": \"K_EQUAL\" },\r\n                              { \"sp\": 10, \"width\": 1 }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": 1,\r\n                          \"key\": [\r\n                              { \"id\": \"K_Q\", \"pad\": 25 },\r\n                              { \"id\": \"K_W\" },\r\n                              { \"id\": \"K_E\" },\r\n                              { \"id\": \"K_R\" },\r\n                              { \"id\": \"K_T\" },\r\n                              { \"id\": \"K_Y\" },\r\n                              { \"id\": \"K_U\" },\r\n                              { \"id\": \"K_I\" },\r\n                              { \"id\": \"K_O\" },\r\n                              { \"id\": \"K_P\" },\r\n                              { \"id\": \"K_LBRKT\" },\r\n                              { \"id\": \"K_RBRKT\" },\r\n                              { \"sp\": 10, \"width\": 1 }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": 2,\r\n                          \"key\": [\r\n                              { \"id\": \"K_A\", \"pad\": 50 },\r\n                              { \"id\": \"K_S\" },\r\n                              { \"id\": \"K_D\" },\r\n                              { \"id\": \"K_F\" },\r\n                              { \"id\": \"K_G\" },\r\n                              { \"id\": \"K_H\" },\r\n                              { \"id\": \"K_J\" },\r\n                              { \"id\": \"K_K\" },\r\n                              { \"id\": \"K_L\" },\r\n                              { \"id\": \"K_COLON\" },\r\n                              { \"id\": \"K_QUOTE\" },\r\n                              { \"id\": \"K_BKSLASH\", \"width\": 90 }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": 3,\r\n                          \"key\": [\r\n                              { \"id\": \"K_oE2\", \"width\": 90 },\r\n                              { \"id\": \"K_Z\" },\r\n                              { \"id\": \"K_X\" },\r\n                              { \"id\": \"K_C\" },\r\n                              { \"id\": \"K_V\" },\r\n                              { \"id\": \"K_B\" },\r\n                              { \"id\": \"K_N\" },\r\n                              { \"id\": \"K_M\" },\r\n                              { \"id\": \"K_COMMA\" },\r\n                              { \"id\": \"K_PERIOD\" },\r\n                              { \"id\": \"K_SLASH\" },\r\n                              { \"id\": \"K_BKQUOTE\" },\r\n                              { \"sp\": 10, \"width\": 1 }\r\n                          ]\r\n                      },\r\n                      {\r\n                          \"id\": 4,\r\n                          \"key\": [\r\n                              {\r\n                                  \"id\": \"K_SHIFT\", \"text\": \"*Shift*\", \"sp\": 1, \"width\": 200, \"sk\": [\r\n                                      { \"id\": \"K_LCONTROL\", \"text\": \"*Ctrl*\", \"sp\": 1, \"width\": 50, \"nextlayer\": \"ctrl\" },\r\n                                      { \"id\": \"K_LCONTROL\", \"text\": \"*LCtrl*\", \"sp\": 1, \"width\": 50, \"nextlayer\": \"leftctrl\" },\r\n                                      { \"id\": \"K_RCONTROL\", \"text\": \"*RCtrl*\", \"sp\": 1, \"width\": 50, \"nextlayer\": \"rightctrl\" },\r\n                                      { \"id\": \"K_LALT\", \"text\": \"*Alt*\", \"sp\": 1, \"width\": 50, \"nextlayer\": \"alt\" },\r\n                                      { \"id\": \"K_LALT\", \"text\": \"*LAlt*\", \"sp\": 1, \"width\": 50, \"nextlayer\": \"leftalt\" },\r\n                                      { \"id\": \"K_RALT\", \"text\": \"*RAlt*\", \"sp\": 1, \"width\": 50, \"nextlayer\": \"rightalt\" },\r\n                                      { \"id\": \"K_ALTGR\", \"text\": \"*AltGr*\", \"sp\": 1, \"width\": 50, \"nextlayer\": \"ctrl-alt\" }]\r\n                              },\r\n                              { \"id\": \"K_LOPT\", \"text\": \"*Menu*\", \"width\": 150, \"sp\": 1 },\r\n                              { \"id\": \"K_SPACE\", \"width\": 570, \"text\": \"\" },\r\n                              { \"id\": \"K_BKSP\", \"text\": \"*BkSp*\", \"width\": 150, \"sp\": 1 },\r\n                              { \"id\": \"K_ENTER\", \"text\": \"*Enter*\", \"width\": 200, \"sp\": 1 }\r\n                          ]\r\n                      }\r\n                  ]\r\n              }\r\n          ]\r\n      }\r\n  } as TouchLayout.TouchLayoutFile;\r\n  /* c8 ignore end */\r\n}\r\n",
    "import Codes from \"../codes.js\";\r\nimport KeyEvent, { KeyEventSpec } from \"../keyEvent.js\";\r\nimport KeyMapping from \"../keyMapping.js\";\r\nimport { ButtonClasses, Layouts } from \"./defaultLayouts.js\";\r\nimport type { LayoutKey, LayoutSubKey, LayoutRow, LayoutLayer, LayoutFormFactor, ButtonClass } from \"./defaultLayouts.js\";\r\nimport type Keyboard from \"./keyboard.js\";\r\n\r\nimport { TouchLayout } from \"@keymanapp/common-types\";\r\nimport TouchLayoutDefaultHint = TouchLayout.TouchLayoutDefaultHint;\r\nimport TouchLayoutFlick = TouchLayout.TouchLayoutFlick;\r\nimport TouchLayoutSpec = TouchLayout.TouchLayoutPlatform;\r\nimport TouchLayerSpec = TouchLayout.TouchLayoutLayer;\r\nimport TouchLayoutKeySp = TouchLayout.TouchLayoutKeySp;\r\nimport { type DeviceSpec } from \"@keymanapp/web-utils\";\r\n\r\n// TS 3.9 changed behavior of getters to make them\r\n// non-enumerable by default. This broke our 'polyfill'\r\n// functions which depended on enumeration to copy the\r\n// relevant props over.\r\n// https://github.com/microsoft/TypeScript/pull/32264#issuecomment-677718191\r\nfunction Enumerable(\r\n  target: unknown,\r\n  propertyKey: string,\r\n  descriptor: PropertyDescriptor\r\n) {\r\n    descriptor.enumerable = true;\r\n};\r\n\r\n/**\r\n * Designed for use by call-by-reference objects during keyboard-load preprocessing\r\n * to note properties of a keyboard that are only specified at lower levels of the\r\n * layout object.\r\n */\r\ninterface AnalysisMetadata {\r\n  hasFlicks: boolean;\r\n  hasMultitaps: boolean;\r\n  hasLongpresses: boolean;\r\n}\r\n\r\n/** A map of key field names with values matching the `typeof` the corresponding property\r\n * seen in keyman-touch-layout-file.ts from common/web/types.\r\n *\r\n * Make sure that when one is updated, the other also is.  TS types are compile-time only,\r\n * so this run-time-accessible mapping cannot be auto-generated by TS. */\r\nconst KeyTypesOfKeyMap = {\r\n  id: 'string',\r\n  text: 'string',\r\n  layer: 'string',\r\n  nextlayer: 'string',\r\n  font: 'string',\r\n  fontsize: 'string',\r\n  sp: 'number',\r\n  pad: 'number',\r\n  width: 'number',\r\n  sk: 'subkeys',\r\n  flick: 'flicks',\r\n  multitap: 'subkeys',\r\n  hint: 'string',\r\n  default: 'boolean'\r\n} as const;\r\n\r\n// Keep in this specific order: it's the ordering of priority for default hint selection when\r\n// based on available hints.  (i.e., `layout.defaultHint == 'flick'`)\r\nconst KeyTypesOfFlickList = ['n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw'] as const;\r\n\r\n/**\r\n * Copies non-computed properties and enumerable scomputed property definitions\r\n * for any properties not yet defined on the target object.\r\n * @param rawObj\r\n * @param defaults\r\n */\r\nfunction assignDefaultsWithPropDefs<RawType, Type extends RawType>(rawObj: RawType, defaults: Type) {\r\n  const proto = Object.getPrototypeOf(defaults);\r\n\r\n  for(let prop in defaults) {\r\n    if(!rawObj.hasOwnProperty(prop)) {\r\n      let descriptor = Object.getOwnPropertyDescriptor(proto, prop);\r\n      if(descriptor) {\r\n        // It's a computed property!  Copy the descriptor onto the key's object.\r\n        Object.defineProperty(rawObj, prop, descriptor);\r\n      } else {\r\n        // Type 'Extract<keyof Type, string>' cannot be used to index type\r\n        // 'RawType'. (ts2536)\r\n        // @ts-ignore\r\n        // the whole point of this function is to polyfill `rawObj` so that it's\r\n        // duck-typable to `Type`.\r\n        rawObj[prop] = defaults[prop];\r\n      }\r\n    }\r\n  }\r\n\r\n  return rawObj as Type;\r\n}\r\n\r\nexport class ActiveKeyBase {\r\n  static readonly DEFAULT_PAD=15;          // Padding to left of key, in virtual units\r\n  static readonly DEFAULT_RIGHT_MARGIN=15; // Padding to right of right-most key, in virtual units\r\n  static readonly DEFAULT_KEY_WIDTH=100;   // Width of a key, if not specified, in virtual units\r\n\r\n  // Defines key defaults\r\n  static readonly DEFAULT_KEY = {\r\n    text: '',\r\n    width: ActiveKeyBase.DEFAULT_KEY_WIDTH,\r\n    sp: ButtonClasses.normal,\r\n    pad: ActiveKeyBase.DEFAULT_PAD\r\n  };\r\n\r\n  /** WARNING - DO NOT USE DIRECTLY outside of keyman/engine/keyboard! */\r\n  id: TouchLayout.TouchLayoutKeyId;\r\n  text: string;\r\n  hint?: string;\r\n  hintSrc?: TouchLayout.TouchLayoutSubKey | TouchLayout.TouchLayoutKey;\r\n\r\n  font?: string;\r\n  fontsize?: string;\r\n\r\n  // These are fine.\r\n  width?: number;\r\n  pad?: number;\r\n\r\n  layer: string;\r\n  displayLayer: string;\r\n  nextlayer: string;\r\n  sp?: TouchLayoutKeySp;\r\n\r\n  private _baseKeyEvent: KeyEvent | (() => KeyEvent);\r\n  isMnemonic: boolean = false;\r\n\r\n  /**\r\n   * Only available on subkeys, but we don't distinguish between base keys and subkeys\r\n   * at this level yet in KMW.\r\n   */\r\n  default?: boolean;\r\n\r\n  proportionalPad: number;\r\n  proportionalX: number;\r\n  proportionalWidth: number;\r\n\r\n  // While they're only valid on ActiveKey, spec'ing them here makes references more concise within the OSK.\r\n  sk?: ActiveSubKey[];\r\n  multitap?: ActiveSubKey[];\r\n  flick?: TouchLayout.TouchLayoutFlick;\r\n\r\n  // Keeping things simple here, as this was added LATE in 14.0 beta.\r\n  // Could definitely extend in the future to instead return an object\r\n  // that denotes the 'nature' of the key.\r\n  // - isUnicode\r\n  // - isHardwareKey\r\n  // - etc.\r\n\r\n  // Reference for the terminology in the comments below:\r\n  // https://help.keyman.com/developer/current-version/guides/develop/creating-a-touch-keyboard-layout-for-amharic-the-nitty-gritty\r\n\r\n  /**\r\n   * Matches the key code as set within Keyman Developer for the layout.\r\n   * For example, K_R or U_0020.  Denotes either physical keys or virtual keys with custom output,\r\n   * with no additional metadata like layer or active modifiers.\r\n   *\r\n   * Is used to determine the keycode for input events, rule-matching, and keystroke processing.\r\n   */\r\n  @Enumerable\r\n  public get baseKeyID(): string {\r\n    if(typeof this.id === 'undefined') {\r\n      return undefined;\r\n    }\r\n\r\n    return this.id;\r\n  }\r\n\r\n  @Enumerable\r\n  public get isPadding(): boolean {\r\n    // Does not include 9 (class:  blank) as that may be an intentional 'catch' for misplaced\r\n    // keystrokes.\r\n    return this.sp == ButtonClasses.spacer; // Button class: hidden.\r\n  }\r\n\r\n  /**\r\n   * A unique identifier based on both the key ID & the 'desktop layer' to be used for the key.\r\n   *\r\n   * Allows diambiguation of scenarios where the same key ID is used twice within a layer, but\r\n   * with different innate modifiers.  (Refer to https://github.com/keymanapp/keyman/issues/4617)\r\n   * The 'desktop layer' may be omitted if it matches the key's display layer.\r\n   *\r\n   * Examples, given a 'default' display layer, matching keys to Keyman keyboard language:\r\n   *\r\n   * ```\r\n   * \"K_Q\"\r\n   * + [K_Q]\r\n   * \"K_Q+shift\"\r\n   * + [K_Q SHIFT]\r\n   * ```\r\n   *\r\n   * Useful when the active layer of an input-event is already known.\r\n   */\r\n  @Enumerable\r\n  public get coreID(): string {\r\n    if(typeof this.id === 'undefined') {\r\n      return undefined;\r\n    }\r\n\r\n    let baseID = this.id || '';\r\n\r\n    if(this.displayLayer != this.layer) {\r\n      baseID = baseID + '+' + this.layer;\r\n    }\r\n\r\n    return baseID;\r\n  }\r\n\r\n  /**\r\n   * A keyboard-unique identifier to be used for any display elements representing this key\r\n   * in user interfaces and/or on-screen keyboards.\r\n   *\r\n   * Distinguishes between otherwise-identical keys on different layers of an OSK.\r\n   * Includes identifying information about the key's display layer.\r\n   *\r\n   * Examples, given a 'default' display layer, matching keys to Keyman keyboard language:\r\n   *\r\n   * ```\r\n   * \"default-K_Q\"\r\n   * + [K_Q]\r\n   * \"default-K_Q+shift\"\r\n   * + [K_Q SHIFT]\r\n   * ```\r\n   *\r\n   * Useful when only the active keyboard is known about an input event.\r\n   */\r\n  @Enumerable\r\n  public get elementID(): string {\r\n    if(typeof this.id === 'undefined') {\r\n      return undefined;\r\n    }\r\n\r\n    return this.displayLayer + '-' + this.coreID;\r\n  }\r\n\r\n  @Enumerable\r\n  public get baseKeyEvent(): KeyEvent {\r\n    let val = this._baseKeyEvent;\r\n    if(typeof val == 'function') {\r\n      val = val();\r\n    }\r\n    return new KeyEvent(val);\r\n  }\r\n\r\n  constructor();\r\n  constructor(spec: LayoutKey | LayoutSubKey, layout: ActiveLayout, displayLayer: string);\r\n  constructor(spec?: LayoutKey | LayoutSubKey, layout?: ActiveLayout, displayLayer?: string) {\r\n    // First things first:  this class's fields are designed to match that of the spec.\r\n    Object.assign(this, spec);\r\n\r\n    if(!this.text && typeof this.id == 'string') {\r\n      this.text = ActiveKey.unicodeIDToText(this.id);\r\n    }\r\n\r\n    this.displayLayer = displayLayer;\r\n    this.layer = this.layer || displayLayer;\r\n\r\n    // Compute the key's base KeyEvent properties for use in future event generation\r\n    // It's actually somewhat expensive to do this at the start, so we do a lazy-init.\r\n    this._baseKeyEvent = () => this.constructBaseKeyEvent(layout, displayLayer);\r\n  }\r\n\r\n  /**\r\n   * Converts key IDs of the U_* form to their corresponding UTF-16 text.\r\n   * If an ID not matching the pattern is received, returns null.\r\n   * @param id\r\n   * @returns\r\n   */\r\n  static unicodeIDToText(id: string, errorCallback?: (codeAsString: string) => void) {\r\n    if(!id || id.substring(0,2) != 'U_') {\r\n      return null;\r\n    }\r\n\r\n    let result = '';\r\n    const codePoints = id.substring(2).split('_');\r\n    for(let codePoint of codePoints) {\r\n      const codePointValue = parseInt(codePoint, 16);\r\n      if (((0x0 <= codePointValue) && (codePointValue <= 0x1F)) ||\r\n          ((0x80 <= codePointValue) && (codePointValue <= 0x9F)) ||\r\n          isNaN(codePointValue)) {\r\n        if(errorCallback) {\r\n          errorCallback(codePoint);\r\n        }\r\n        continue;\r\n      } else {\r\n        // String.fromCharCode() is inadequate to handle the entire range of Unicode\r\n        // Someday after upgrading to ES2015, can use String.fromCodePoint()\r\n        result += String.kmwFromCharCode(codePointValue);\r\n      }\r\n    }\r\n    return result ? result : null;\r\n  }\r\n\r\n  static sanitize(rawKey: LayoutKey) {\r\n    // In older versions of KeymanWeb, we specified these three properties as strings...\r\n    // despite them holding a numerical value.\r\n    if(typeof rawKey.width == 'string') {\r\n      rawKey.width = parseInt(rawKey.width, 10);\r\n    }\r\n    // Handles NaN cases as well as 'set to 0' cases; both are intentional here.\r\n    rawKey.width ||= ActiveKey.DEFAULT_KEY_WIDTH;\r\n\r\n    if(typeof rawKey.pad == 'string') {\r\n      rawKey.pad = parseInt(rawKey.pad, 10);\r\n    }\r\n    rawKey.pad ||= ActiveKey.DEFAULT_PAD;\r\n\r\n    if(typeof rawKey.sp == 'string') {\r\n      rawKey.sp = Number.parseInt(rawKey.sp, 10) as ButtonClass;\r\n    }\r\n    rawKey.sp ||= ActiveKey.DEFAULT_KEY.sp; // The default button class.\r\n\r\n    // And now for generalized type validation. -----------------------------------------\r\n\r\n    // WARNING:  Object.values and Object.entries is NOT polyfilled by es6-shim and thus\r\n    // is NOT available within the Android app in extremely early APIs.\r\n    // Object.entries requires Android 54.\r\n\r\n    for(const key of Object.keys(KeyTypesOfKeyMap)) {\r\n      const value = KeyTypesOfKeyMap[key as keyof typeof KeyTypesOfKeyMap];\r\n      switch(value) {\r\n        case 'subkeys':\r\n          const arr = rawKey[key as 'sk' | 'multitap'] as LayoutSubKey[];\r\n          if(arr === undefined) {\r\n            // `delete` has a small yet significant performance cost; bypass it.\r\n            break;\r\n          } else if(!Array.isArray(arr)) {\r\n            delete rawKey[key as 'sk' | 'multitap'];\r\n          } else {\r\n            for(let i=0; i < arr.length; i++) {\r\n              const sk = arr[i];\r\n              if(typeof sk != 'object') {\r\n                arr.splice(i--, 1);\r\n              } else {\r\n                ActiveKey.sanitize(sk);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        case 'flicks':\r\n          const flickObj = rawKey[key as 'flick'];\r\n          if(flickObj === undefined) {\r\n            // `delete` has a small yet significant performance cost; bypass it.\r\n            break;\r\n          } else if(typeof flickObj != 'object') {\r\n            delete rawKey[key as 'flick'];\r\n          } else {\r\n            for(const flickKey of KeyTypesOfFlickList) {\r\n              const sk = flickObj[flickKey];\r\n              if(sk === undefined) {\r\n                break;\r\n              } else if(typeof sk != 'object') {\r\n                delete flickObj[flickKey];\r\n              } else {\r\n                ActiveKey.sanitize(sk);\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        default:\r\n          const prop = rawKey[key as keyof (LayoutKey | LayoutSubKey)];\r\n          if(prop !== undefined && typeof prop != value) {\r\n            delete rawKey[key as keyof (LayoutKey | LayoutSubKey)];\r\n          }\r\n      }\r\n    }\r\n\r\n    rawKey.text ||= ActiveKey.DEFAULT_KEY.text;\r\n  }\r\n\r\n  @Enumerable\r\n  private constructBaseKeyEvent(layout: ActiveLayout, displayLayer: string) {\r\n    // Get key name and keyboard shift state (needed only for default layouts and physical keyboard handling)\r\n    // Note - virtual keys should be treated case-insensitive, so we force uppercasing here.\r\n    let layer = this.layer || displayLayer || '';\r\n    let keyName= this.id ? this.id.toUpperCase() : null;\r\n\r\n    // Start:  mirrors _GetKeyEventProperties\r\n\r\n    // First check the virtual key, and process shift, control, alt or function keys\r\n    let props: KeyEventSpec = {\r\n      // Override key shift state if specified for key in layout (corrected for popup keys KMEW-93)\r\n      Lmodifiers: Codes.getModifierState(layer),\r\n      Lstates: Codes.getStateFromLayer(layer),\r\n      Lcode: keyName ? Codes.keyCodes[keyName] : 0,\r\n      LisVirtualKey: true,\r\n      vkCode: 0,\r\n      kName: keyName,\r\n      kLayer: layer,\r\n      kbdLayer: displayLayer,\r\n      kNextLayer: this.nextlayer,\r\n      device: null,\r\n      isSynthetic: true\r\n    };\r\n\r\n    let Lkc: KeyEvent = new KeyEvent(props);\r\n\r\n    if(layout.keyboard) {\r\n      let keyboard = layout.keyboard;\r\n\r\n      // Include *limited* support for mnemonic keyboards (Sept 2012)\r\n      // If a touch layout has been defined for a mnemonic keyout, do not perform mnemonic mapping for rules on touch devices.\r\n      if(keyboard.isMnemonic && !(layout.isDefault && layout.formFactor != 'desktop')) {\r\n        if(Lkc.Lcode != Codes.keyCodes['K_SPACE']) { // exception required, March 2013\r\n          // Jan 2019 - interesting that 'K_SPACE' also affects the caps-state check...\r\n          Lkc.vkCode = Lkc.Lcode;\r\n          this.isMnemonic = true;\r\n        }\r\n      } else {\r\n        Lkc.vkCode=Lkc.Lcode;\r\n      }\r\n\r\n      // Support version 1.0 KeymanWeb keyboards that do not define positional vs mnemonic\r\n      if(!keyboard.definesPositionalOrMnemonic) {\r\n        Lkc.Lcode = KeyMapping._USKeyCodeToCharCode(Lkc);\r\n        Lkc.LisVirtualKey=false;\r\n      }\r\n    }\r\n\r\n    return Lkc;\r\n  }\r\n}\r\n\r\nexport class ActiveKey extends ActiveKeyBase implements LayoutKey {\r\n  public getSubkey(coreID: string): ActiveSubKey {\r\n    if(this.sk) {\r\n      for(let key of this.sk) {\r\n        if(key.coreID == coreID) {\r\n          return key;\r\n        }\r\n      }\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  constructor();\r\n  constructor(spec: LayoutKey, layout: ActiveLayout, displayLayer: string);\r\n  constructor(spec?: LayoutKey, layout?: ActiveLayout, displayLayer?: string) {\r\n    super(spec, layout, displayLayer);\r\n\r\n    // Ensure subkeys are also properly extended.\r\n    const sk = this.sk;\r\n    if(sk) {\r\n      for(let i=0; i < sk.length; i++) {\r\n        sk[i] = new ActiveSubKey(sk[i], layout, displayLayer);\r\n      }\r\n    }\r\n\r\n    // Also multitap keys.\r\n    const multitap = this.multitap;\r\n    if(multitap) {\r\n      for(let i=0; i < multitap.length; i++) {\r\n        multitap[i] = new ActiveSubKey(multitap[i], layout, displayLayer);\r\n      }\r\n    }\r\n\r\n    const flick = this.flick;\r\n    if(flick) {\r\n      for(let flickKey in flick) {\r\n        flick[flickKey as keyof TouchLayoutFlick] = new ActiveSubKey(flick[flickKey as keyof TouchLayoutFlick], layout, displayLayer);\r\n      }\r\n    }\r\n\r\n    ActiveKey.determineHint(this, layout.defaultHint);\r\n  }\r\n\r\n  private static determineHint(spec: ActiveKey, defaultHint: TouchLayout.TouchLayoutDefaultHint): void {\r\n    // If a hint was directly specified, don't override it.\r\n    if(spec.hint) {\r\n      spec.hintSrc = spec;\r\n      return;\r\n    }\r\n\r\n    // Is more compact than writing 8 separate cases.\r\n    if(defaultHint?.includes('flick-')) {\r\n      if(spec.flick) {\r\n        // 6 = length of 'flick-'\r\n        const dir = defaultHint.substring(6) as keyof TouchLayoutFlick;\r\n\r\n        if(spec.flick[dir]?.text) {\r\n          spec.hintSrc = spec.flick[dir];\r\n        }\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    switch(defaultHint) {\r\n      case 'none':\r\n        return;\r\n      case 'multitap':\r\n        if(spec.multitap) {\r\n          spec.hintSrc = spec.multitap[0];\r\n        }\r\n        return;\r\n      case 'flick':\r\n        if(spec.flick) {\r\n          for(const key of KeyTypesOfFlickList) {\r\n            if(spec.flick[key]) {\r\n              spec.hintSrc = spec.flick[key];\r\n              return;\r\n            }\r\n          }\r\n        }\r\n        return;\r\n      case 'longpress':\r\n        if(spec.sk) {\r\n          spec.hintSrc = spec.sk[0];\r\n        }\r\n        return;\r\n      case 'dot':\r\n      default:\r\n        if(spec.sk) {\r\n          spec.hint = '\\u2022';\r\n          spec.hintSrc = spec;\r\n        }\r\n        return;\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport class ActiveSubKey extends ActiveKeyBase implements LayoutSubKey {\r\n  //\r\n}\r\n\r\nexport class ActiveRow implements LayoutRow {\r\n  // Identify key labels (e.g. *Shift*) that require the special OSK font\r\n  static readonly SPECIAL_LABEL=/\\*\\w+\\*/;\r\n\r\n  id: number;\r\n  key: ActiveKey[];\r\n\r\n  /**\r\n   * Used for calculating fat-fingering offsets.\r\n   */\r\n  proportionalY: number;\r\n\r\n  private constructor() {\r\n\r\n  }\r\n\r\n  static sanitize(rawRow: LayoutRow) {\r\n    for(const key of rawRow.key) {\r\n      // Test for a trailing comma included in spec, added as null object by IE\r\n      // It has only ever appeared at the end of a row's spec.\r\n      if(key == null) {\r\n        rawRow.key.length = rawRow.key.length-1;\r\n      } else {\r\n        ActiveKey.sanitize(key);\r\n      }\r\n    }\r\n\r\n    if(typeof rawRow.id == 'string') {\r\n      rawRow.id = Number.parseInt(rawRow.id, 10);\r\n    }\r\n  }\r\n\r\n  static polyfill(\r\n    row: LayoutRow,\r\n    layout: ActiveLayout,\r\n    displayLayer: string,\r\n    totalWidth: number,\r\n    proportionalY: number\r\n  ) {\r\n    // Apply defaults, setting the width and other undefined properties for each key\r\n    let keys=row['key'];\r\n    const DEFAULT_KEY = ActiveKeyBase.DEFAULT_KEY;\r\n    for(let j=0; j<keys.length; j++) {\r\n      let key=keys[j];\r\n      let keySet = Object.keys(DEFAULT_KEY);\r\n      for(let tp of keySet) {\r\n        const typedKey = tp as keyof typeof DEFAULT_KEY;\r\n        if(typeof key[typedKey] != 'string' && typeof key[typedKey] != 'number') {\r\n          // We detected a value of the wrong type.\r\n          // @ts-ignore  // Type 'string' is not assignable to type 'never'. (ts2322)\r\n          key[typedKey]=DEFAULT_KEY[typedKey];\r\n        }\r\n      }\r\n\r\n      // Modify the key type for special keys with non-standard labels\r\n      // to allow the keyboard font to overide the SpecialOSK font.\r\n      // Blank keys are no longer reclassed - can use before/after CSS to add text\r\n      switch(key['sp']) {\r\n        case ButtonClasses.special:\r\n          if(!ActiveRow.SPECIAL_LABEL.test(key['text']) && key['text'] != '') {\r\n            key.sp=ButtonClasses.customSpecial;\r\n          }\r\n          break;\r\n        case ButtonClasses.specialActive:\r\n          if(!ActiveRow.SPECIAL_LABEL.test(key['text']) && key['text'] != '') {\r\n            key.sp=ButtonClasses.customSpecialActive;\r\n          }\r\n          break;\r\n      }\r\n\r\n      const processedKey = new ActiveKey(key, layout, displayLayer);\r\n      keys[j] = processedKey;\r\n    }\r\n\r\n    /* The calculations here are effectively 'virtualized'.  When used with the OSK, the VisualKeyboard\r\n      * will overwrite these values with their true runtime geometry.\r\n      *\r\n      * These calculations approximate those of the actual OSK (without fitting to a specific resolution)\r\n      * and are intended for use with layout testing (while headless) in the future.\r\n      */\r\n\r\n    let setProportions = function(key: ActiveKey, padPc: number, keyPc: number, totalPc: number) {\r\n      key.proportionalPad   = padPc;\r\n      key.proportionalWidth = keyPc;\r\n      key.proportionalX     = (totalPc + padPc + (keyPc/2));\r\n    }\r\n\r\n    // Calculate percentage-based scalings by summing defined widths and scaling each key to %.\r\n    // Save each percentage key width as a separate member (do *not* overwrite layout specified width!)\r\n    let totalPercent=0;\r\n    for(let j=0; j<keys.length-1; j++) {\r\n      const key = keys[j] as ActiveKey; // already 'polyfilled' in prior loop\r\n\r\n      // compute center's default x-coord (used in headless modes), assign 'proportional' props\r\n      setProportions(key, key.pad/totalWidth, key.width/totalWidth, totalPercent);\r\n\r\n      // These values are set on the key as part of the prior call.\r\n      totalPercent += key.proportionalPad;\r\n      totalPercent += key.proportionalWidth;\r\n    }\r\n\r\n    // Allow for right OSK margin (15 layout units)\r\n    let rightMargin = ActiveKey.DEFAULT_RIGHT_MARGIN/totalWidth;\r\n\r\n    if(keys.length > 0) {\r\n      const finalKey = keys[keys.length-1] as ActiveKey;\r\n\r\n      // If a single key, and padding is negative, add padding to right align the key\r\n      if(keys.length == 1 && finalKey.pad < 0) {\r\n        const keyPercent = finalKey.width/totalWidth;\r\n        const padPercent = 1-(totalPercent + keyPercent + rightMargin);\r\n\r\n        // compute center's default x-coord (used in headless modes)\r\n        setProportions(finalKey, padPercent, keyPercent, totalPercent);\r\n      } else {\r\n        const padPercent = finalKey.pad/totalWidth;\r\n        const keyPercent = 1-(totalPercent + padPercent + rightMargin);\r\n\r\n        // compute center's default x-coord (used in headless modes)\r\n        setProportions(finalKey, padPercent, keyPercent, totalPercent);\r\n      }\r\n    }\r\n\r\n    assignDefaultsWithPropDefs(row, new ActiveRow());\r\n\r\n    let aRow = row as ActiveRow;\r\n    aRow.proportionalY = proportionalY;\r\n  }\r\n\r\n  @Enumerable\r\n  populateKeyMap(map: {[keyId: string]: ActiveKey}) {\r\n    this.key.forEach(function(key: ActiveKey) {\r\n      if(key.coreID) {\r\n        map[key.coreID] = key;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport class ActiveLayer implements LayoutLayer {\r\n  row: ActiveRow[];\r\n  id: string;\r\n\r\n  // These already exist on the objects, pre-polyfill...\r\n  // but they still need to be proactively declared on this type.\r\n  capsKey?: ActiveKey;\r\n  numKey?: ActiveKey;\r\n  scrollKey?: ActiveKey;\r\n\r\n  totalWidth: number;\r\n\r\n  defaultKeyProportionalWidth: number;\r\n  rowProportionalHeight: number;\r\n\r\n  /**\r\n   * Facilitates mapping key id strings to their specification objects.\r\n   */\r\n  keyMap: {[keyId: string]: ActiveKey};\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  static sanitize(rawLayer: LayoutLayer) {\r\n    for(const row of rawLayer.row) {\r\n      ActiveRow.sanitize(row);\r\n    }\r\n  }\r\n\r\n  static polyfill(layer: LayoutLayer, layout: ActiveLayout) {\r\n    layer.aligned=false;\r\n\r\n    // Create a DIV for each row of the group\r\n    let rows=layer['row'];\r\n\r\n    // Calculate the maximum row width (in layout units)\r\n    let totalWidth=0;\r\n    for(const row of rows) {\r\n      let width=0;\r\n      const keys=row['key'];\r\n\r\n      for(const key of keys) {\r\n        // So long as `sanitize` is called first, these coercions are safe.\r\n        width += (key.width as number) + (key.pad as number);\r\n      }\r\n\r\n      if(width > totalWidth) {\r\n        totalWidth = width;\r\n      }\r\n    }\r\n\r\n    // Add default right margin\r\n    if(layout.formFactor == 'desktop') {\r\n      totalWidth += 5; // TODO: resolve difference between touch and desktop; why don't we use ActiveKey.DEFAULT_RIGHT_MARGIN?\r\n    } else {\r\n      totalWidth += ActiveKey.DEFAULT_RIGHT_MARGIN;\r\n    }\r\n\r\n    let rowCount = layer.row.length;\r\n    for(let i=0; i<rowCount; i++) {\r\n      // Calculate proportional y-coord of row.  0 is at top with highest y-coord.\r\n      let rowProportionalY = (i + 0.5) / rowCount;\r\n      ActiveRow.polyfill(layer.row[i], layout, layer.id, totalWidth, rowProportionalY);\r\n    }\r\n\r\n    assignDefaultsWithPropDefs(layer, new ActiveLayer());\r\n\r\n    let aLayer = layer as ActiveLayer;\r\n    aLayer.totalWidth = totalWidth;\r\n    aLayer.defaultKeyProportionalWidth = ActiveKey.DEFAULT_KEY.width / totalWidth;\r\n    aLayer.rowProportionalHeight = 1.0 / rowCount;\r\n    aLayer.keyMap = aLayer.constructKeyMap();\r\n  }\r\n\r\n  @Enumerable\r\n  private constructKeyMap(): {[keyId: string]: ActiveKey} {\r\n    let map: {[keyId: string]: ActiveKey} = {};\r\n    this.row.forEach(function(row: ActiveRow) {\r\n      row.populateKeyMap(map);\r\n    });\r\n\r\n    return map;\r\n  }\r\n\r\n  @Enumerable\r\n  getKey(keyId: string) {\r\n    // Keys usually are specified in a \"long form\" prefixed with their layer's ID.\r\n    if(keyId.indexOf(this.id + '-') == 0) {\r\n      keyId = keyId.replace(this.id + '-', '');\r\n    }\r\n\r\n    let idComponents = keyId.split('::');\r\n    if(idComponents.length > 1) {\r\n      let baseKey = this.keyMap[idComponents[0]];\r\n      return baseKey.getSubkey(idComponents[1]);\r\n    } else {\r\n      return this.keyMap[keyId];\r\n    }\r\n  }\r\n}\r\n\r\nexport class ActiveLayout implements LayoutFormFactor{\r\n  /**\r\n   * Holds all layer specifications for the layout.  There is no guarantee that they\r\n   * have been fully preprocessed.\r\n   */\r\n  layer: TouchLayerSpec[];\r\n  font: string;\r\n  keyLabels: boolean;\r\n  isDefault?: boolean;\r\n  keyboard: Keyboard;\r\n  formFactor: DeviceSpec.FormFactor;\r\n  defaultHint: TouchLayoutDefaultHint;\r\n  displayUnderlying?: boolean;\r\n  fontsize?: string;\r\n\r\n  hasFlicks: boolean = false;\r\n  hasLongpresses: boolean = false;\r\n  hasMultitaps: boolean = false;\r\n\r\n  /**\r\n   * Facilitates mapping layer id strings to their specification objects.\r\n   */\r\n  private layerMap: {[layerId: string]: ActiveLayer};\r\n\r\n  private constructor() {\r\n\r\n  }\r\n\r\n  /**\r\n   * Returns a fully preprocessed version of the specified layer spec.\r\n   * @param layerId\r\n   * @returns\r\n   */\r\n  @Enumerable\r\n  getLayer(layerId: string): ActiveLayer {\r\n    if(!this.layerMap[layerId]) {\r\n      const spec = this.layer.find((layerSpec) => layerSpec.id == layerId);\r\n      if(!spec) {\r\n        return null;\r\n      }\r\n\r\n      // Prepare the layer-spec for actual use.\r\n      ActiveLayer.sanitize(spec);\r\n      ActiveLayer.polyfill(spec, this);\r\n      this.layerMap[layerId] = spec as ActiveLayer;\r\n    }\r\n\r\n    return this.layerMap[layerId];\r\n  }\r\n\r\n  /**\r\n   * Refer to https://github.com/keymanapp/keyman/issues/254, which mentions\r\n   * KD-11 from a prior issue-tracking system from the closed-source days that\r\n   * resulted in an unintended extra empty row.\r\n   *\r\n   * It'll be pretty rare to see a keyboard affected by the bug, but we don't\r\n   * 100% control all keyboards out there, so it's best we make sure the edge\r\n   * case is covered.\r\n   *\r\n   * @param layers The layer group to be loaded for the form factor.  Will be\r\n   *               mutated by this operation.\r\n   */\r\n  static correctLayerEmptyRowBug(layers: LayoutLayer[]) {\r\n    for(let n=0; n<layers.length; n++) {\r\n      let layer=layers[n];\r\n      let rows=layer.row;\r\n      let i: number;\r\n      for(i=rows.length-1; i>=0; i--) {\r\n        if(!Array.isArray(rows[i].key) || rows[i].key.length == 0) {\r\n          rows.splice(i, 1)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  static sanitize(rawLayout: TouchLayoutSpec) {\r\n    ActiveLayout.correctLayerEmptyRowBug(rawLayout.layer);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param layout\r\n   * @param formFactor\r\n   */\r\n  static polyfill(layout: TouchLayoutSpec, keyboard: Keyboard, formFactor: DeviceSpec.FormFactor): ActiveLayout {\r\n    /* c8 ignore start */\r\n    if(layout == null) {\r\n      throw new Error(\"Cannot build an ActiveLayout for a null specification.\");\r\n    }\r\n    /* c8 ignore end */\r\n\r\n    const analysisMetadata: AnalysisMetadata = {\r\n      hasFlicks: false,\r\n      hasLongpresses: false,\r\n      hasMultitaps: false\r\n    };\r\n\r\n    /* Standardize the layout object's data types.\r\n      *\r\n      * In older versions of KMW, some numeric properties were long represented as strings instead,\r\n      * and that lives on within a _lot_ of keyboards.  The data should be sanitized before it\r\n      * is processed by this method.\r\n      */\r\n    this.sanitize(layout);\r\n\r\n    // This bit of preprocessing is a must; we need to know what gestures are available\r\n    // across all layers, \"out of the gate\".\r\n    for(let layer of layout.layer) {\r\n      for(let row of layer.row) {\r\n        for(let key of row.key) {\r\n          analysisMetadata.hasLongpresses ||= !!key.sk;\r\n          analysisMetadata.hasFlicks      ||= !!key.flick;\r\n          analysisMetadata.hasMultitaps   ||= !!key.multitap;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Create a separate OSK div for each OSK layer, only one of which will ever be visible\r\n    let layerMap: {[layerId: string]: ActiveLayer} = {};\r\n\r\n    // Add class functions to the existing layout object, allowing it to act as an ActiveLayout.\r\n    assignDefaultsWithPropDefs(layout, new ActiveLayout());\r\n\r\n    let aLayout = layout as unknown as ActiveLayout;\r\n    aLayout.keyboard = keyboard;\r\n    aLayout.formFactor = formFactor;\r\n    aLayout.layerMap = layerMap;\r\n\r\n    // The default-layer shift key & shift-layer shift key on mobile platforms should have a\r\n    //  default multitap re: a 'caps' layer under select conditions.\r\n    //\r\n    // Note:  whether or not any other keys have multitaps doesn't matter here.  Just THESE.\r\n    if(formFactor != 'desktop' && !!layout.layer.find((entry) => entry.id == 'caps')) {\r\n      // Triggers preprocessing for both default and shift layers.  They're the\r\n      // most-frequently referenced, at least.\r\n      const defaultLayer = aLayout.getLayer('default') as ActiveLayer;\r\n      const shiftLayer   = aLayout.getLayer('shift') as ActiveLayer;\r\n\r\n      const defaultShift = defaultLayer.getKey('K_SHIFT');\r\n      const shiftShift   = shiftLayer ?.getKey('K_SHIFT');\r\n\r\n      // If BOTH default & shift layer SHIFT keys lack multitaps & longpresses, proceed.\r\n      if(defaultShift && shiftShift && // doesn't make much sense if there's no shift layer or SHIFT on either\r\n        !defaultShift.multitap && !shiftShift.multitap &&\r\n        !defaultShift.sk       && !shiftShift.sk\r\n      ) {\r\n        // May cause the layout to gain its first multitaps, which does matter for the next lines after the block.\r\n        analysisMetadata.hasMultitaps = true;\r\n\r\n        defaultShift.multitap = [{...Layouts.dfltShiftToCaps}, {...Layouts.dfltShiftToDefault}] as ActiveSubKey[];\r\n        shiftShift.multitap   = [{...Layouts.dfltShiftToCaps}, {...Layouts.dfltShiftToShift}] as ActiveSubKey[];\r\n\r\n        defaultShift.multitap.forEach((sk, index) => defaultShift.multitap[index] = new ActiveSubKey(sk, aLayout, 'default'));\r\n        shiftShift  .multitap.forEach((sk, index) => shiftShift.multitap[index]   = new ActiveSubKey(sk, aLayout, 'shift'));\r\n      } // else no default shift -> caps multitaps.\r\n    }\r\n\r\n    aLayout.hasFlicks = analysisMetadata.hasFlicks;\r\n    aLayout.hasLongpresses = analysisMetadata.hasLongpresses;\r\n    aLayout.hasMultitaps = analysisMetadata.hasMultitaps;\r\n\r\n    // All layers are lazy-processed, with the usual processing applied when first referenced.\r\n\r\n    return aLayout;\r\n  }\r\n}\r\n",
    "import Codes from \"../codes.js\";\r\nimport { Layouts } from \"./defaultLayouts.js\";\r\nimport { ActiveKey, ActiveLayout, ActiveSubKey } from \"./activeLayout.js\";\r\nimport KeyEvent from \"../keyEvent.js\";\r\nimport { type OutputTarget } from \"../outputTarget.interface.js\";\r\nimport { KeymanWebKeyboard, ModifierKeyConstants, TouchLayout } from \"@keymanapp/common-types\";\r\n\r\nimport ComplexKeyboardStore = KeymanWebKeyboard.ComplexKeyboardStore;\r\nimport KeyboardObject = KeymanWebKeyboard.KeyboardObject;\r\nimport LayoutSpec = KeymanWebKeyboard.LayoutSpec;\r\n\r\ntype TouchLayoutSpec = TouchLayout.TouchLayoutPlatform & { isDefault?: boolean};\r\n\r\nimport { Version, DeviceSpec } from \"@keymanapp/web-utils\";\r\nimport StateKeyMap from \"./stateKeyMap.js\";\r\n\r\n/**\r\n * Stores preprocessed properties of a keyboard for quick retrieval later.\r\n */\r\nclass CacheTag {\r\n  stores: { [storeName: string]: ComplexKeyboardStore };\r\n\r\n  constructor() {\r\n    this.stores = {};\r\n  }\r\n}\r\n\r\nexport enum LayoutState {\r\n  NOT_LOADED = undefined,\r\n  POLYFILLED = 1,\r\n  CALIBRATED = 2\r\n}\r\n\r\nexport interface VariableStoreDictionary {\r\n  [name: string]: string;\r\n};\r\n\r\ntype KmwKeyboardObject = KeyboardObject & {\r\n  /**\r\n   * Used internally by Keyman Engine for Web to hold preprocessed stores.\r\n   */\r\n  _kmw?: CacheTag;\r\n  /**\r\n   * Virtual Key Dictionary: the engine pre-processed, unminified dictionary.  This is built within\r\n   * Keyman Engine for Web at runtime as needed based on the definitions in `KVKD`.\r\n   */\r\n  VKDictionary?: Record<string, number>,\r\n};\r\n\r\n/**\r\n * Acts as a wrapper class for Keyman keyboards compiled to JS, providing type information\r\n * and keyboard-centered functionality in an object-oriented way without modifying the\r\n * wrapped keyboard itself.\r\n */\r\nexport default class Keyboard {\r\n  public static DEFAULT_SCRIPT_OBJECT: KmwKeyboardObject = {\r\n    'gs': function(outputTarget: OutputTarget, keystroke: KeyEvent) { return false; }, // no matching rules; rely on defaultRuleOutput entirely\r\n    'KI': '', // The currently-existing default keyboard ID; we already have checks that focus against this.\r\n    'KN': '',\r\n    'KV': Layouts.DEFAULT_RAW_SPEC,\r\n    'KM': 0 // May not be the best default, but this matches current behavior when there is no activeKeyboard.\r\n  }\r\n\r\n  /**\r\n   * This is the object provided to KeyboardInterface.registerKeyboard - that is, the keyboard\r\n   * being wrapped.\r\n   *\r\n   * TODO:  Make this private instead.  But there are a LOT of references that must be rooted out first.\r\n   */\r\n  public readonly scriptObject: KmwKeyboardObject;\r\n  private layoutStates: {[layout: string]: LayoutState};\r\n\r\n  constructor(keyboardScript: any) {\r\n    if(keyboardScript) {\r\n      this.scriptObject = keyboardScript;\r\n    } else {\r\n      this.scriptObject = Keyboard.DEFAULT_SCRIPT_OBJECT;\r\n    }\r\n    this.layoutStates = {};\r\n  }\r\n\r\n  /**\r\n   * Calls the keyboard's `gs` function, which represents the keyboard source's begin Unicode group.\r\n   */\r\n  process(outputTarget: OutputTarget, keystroke: KeyEvent): boolean {\r\n    return this.scriptObject['gs'](outputTarget, keystroke);\r\n  }\r\n\r\n  /**\r\n   * Calls the keyboard's `gn` function, which represents the keyboard source's begin newContext group.\r\n   */\r\n  processNewContextEvent(outputTarget: OutputTarget, keystroke: KeyEvent): boolean {\r\n    return this.scriptObject['gn'] ? this.scriptObject['gn'](outputTarget, keystroke) : false;\r\n  }\r\n\r\n  /**\r\n   * Calls the keyboard's `gpk` function, which represents the keyboard source's begin postKeystroke group.\r\n   */\r\n  processPostKeystroke(outputTarget: OutputTarget, keystroke: KeyEvent): boolean {\r\n    return this.scriptObject['gpk'] ? this.scriptObject['gpk'](outputTarget, keystroke) : false;\r\n  }\r\n\r\n  get isHollow(): boolean {\r\n    return this.scriptObject == Keyboard.DEFAULT_SCRIPT_OBJECT;\r\n  }\r\n\r\n  get id(): string {\r\n    return this.scriptObject['KI'];\r\n  }\r\n\r\n  get name(): string {\r\n    return this.scriptObject['KN'];\r\n  }\r\n\r\n  /**\r\n   * Cache variable store values\r\n   *\r\n   * Primarily used for predictive text to prevent variable store\r\n   * values from being changed in 'fat finger' processing.\r\n   *\r\n   * KVS is available in keyboards compiled with Keyman Developer 15\r\n   * and later versions. See #2924.\r\n   *\r\n   * @returns an object with each property referencing a variable store\r\n   */\r\n  get variableStores(): VariableStoreDictionary {\r\n    const storeNames = this.scriptObject['KVS'];\r\n    let values: VariableStoreDictionary = {};\r\n    if(Array.isArray(storeNames)) {\r\n      for(let store of storeNames) {\r\n        values[store] = this.scriptObject[store];\r\n      }\r\n    }\r\n    return values;\r\n  }\r\n\r\n  /**\r\n   * Restore variable store values from cache\r\n   *\r\n   * KVS is available in keyboards compiled with Keyman Developer 15\r\n   * and later versions. See #2924.\r\n   *\r\n   * @param values  name-value pairs for each store value\r\n   */\r\n  set variableStores(values: VariableStoreDictionary) {\r\n    const storeNames = this.scriptObject['KVS'];\r\n    if(Array.isArray(storeNames)) {\r\n      for(let store of storeNames) {\r\n        // If the value is not present in the cache, don't overwrite it;\r\n        // while this is not used in initial implementation, we could use\r\n        // it in future to update a single variable store value rather than\r\n        // the whole cache.\r\n        if(typeof values[store] == 'string') {\r\n          this.scriptObject[store] = values[store];\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  private get _legacyLayoutSpec() {\r\n    return this.scriptObject['KV'];  // used with buildDefaultLayout; layout must be constructed at runtime.\r\n  }\r\n\r\n  // May return null if no layouts exist or have been initialized.\r\n  private get _layouts(): LayoutSpec {\r\n    return this.scriptObject['KVKL'];  // This one is compiled by Developer's visual keyboard layout editor.\r\n  }\r\n\r\n  private set _layouts(value: LayoutSpec) {\r\n    this.scriptObject['KVKL'] = value;\r\n  }\r\n\r\n  get compilerVersion(): Version {\r\n    return new Version(this.scriptObject['KVER']);\r\n  }\r\n\r\n  get isMnemonic(): boolean {\r\n    return !!this.scriptObject['KM'];\r\n  }\r\n\r\n  get definesPositionalOrMnemonic(): boolean {\r\n    return typeof this.scriptObject['KM'] != 'undefined';\r\n  }\r\n\r\n  /**\r\n   * HTML help text, as specified by either the &kmw_helptext or &kmw_helpfile system stores.\r\n   *\r\n   * Reference: https://help.keyman.com/developer/language/reference/kmw_helptext,\r\n   *            https://help.keyman.com/developer/language/reference/kmw_helpfile\r\n   */\r\n  get helpText(): string {\r\n    return this.scriptObject['KH'];\r\n  }\r\n\r\n  /**\r\n   * Embedded JS script designed for use with a keyboard's HTML help text.  Always defined\r\n   * within the file referenced by &kmw_embedjs in a keyboard's source, though that file\r\n   * may also contain _other_ script definitions as well.  (`KHF` must be explicitly defined\r\n   * within that file.)\r\n   */\r\n  get hasScript(): boolean {\r\n    return !!this.scriptObject['KHF'];\r\n  }\r\n\r\n  /**\r\n   * Embeds a custom script for use by the OSK, which may be interactive (like with sil_euro_latin).\r\n   * Note:  this must be called AFTER any contents of `helpText` have been inserted into the DOM.\r\n   * (See sil_euro_latin's source -> sil_euro_latin_js.txt)\r\n   *\r\n   * Reference: https://help.keyman.com/developer/language/reference/kmw_embedjs\r\n   */\r\n  embedScript(e: any) {\r\n    // e:  Expects the OSKManager's _Box element.  We don't add type info here b/c it would\r\n    //     reference the DOM.\r\n    this.scriptObject['KHF'](e);\r\n  }\r\n\r\n  get oskStyling(): string {\r\n    return this.scriptObject['KCSS'];\r\n  }\r\n\r\n  /**\r\n   * true if this keyboard uses a (legacy) pick list (Chinese, Japanese, Korean, etc.)\r\n   *\r\n   * TODO:  Make a property on keyboards (say, `isPickList` / `KPL`) to signal this when we\r\n   *        get around to better, generalized picker-list support.\r\n   */\r\n  get isCJK(): boolean { // I3363 (Build 301)\r\n    var lg: string;\r\n    if(typeof(this.scriptObject['KLC']) != 'undefined') {\r\n      lg = this.scriptObject['KLC'];\r\n    } else if(typeof(this.scriptObject['LanguageCode']) != 'undefined') {\r\n      lg = this.scriptObject['LanguageCode'];\r\n    }\r\n\r\n    // While some of these aren't proper BCP-47 language codes, the CJK keyboards predate our use of BCP-47.\r\n    // So, we preserve the old ISO 639-3 codes, as that's what the keyboards are matching against.\r\n    return ((lg == 'cmn') || (lg == 'jpn') || (lg == 'kor'));\r\n  }\r\n\r\n  get isRTL(): boolean {\r\n    return !!this.scriptObject['KRTL'];\r\n  }\r\n\r\n  /**\r\n   * Obtains the currently-active modifier bitmask for the active keyboard.\r\n   */\r\n  get modifierBitmask(): number {\r\n    // NON_CHIRAL is the default bitmask if KMBM is not defined.\r\n    // We always need a bitmask to compare against, as seen in `isChiral`.\r\n    return this.scriptObject['KMBM'] || Codes.modifierBitmasks['NON_CHIRAL'];\r\n  }\r\n\r\n  get isChiral(): boolean {\r\n    return !!(this.modifierBitmask & Codes.modifierBitmasks['IS_CHIRAL']);\r\n  }\r\n\r\n  get desktopFont(): string {\r\n    if(this.scriptObject['KV']) {\r\n      return this.scriptObject['KV']['F'];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private get cacheTag(): CacheTag {\r\n    let tag = this.scriptObject['_kmw'];\r\n\r\n    if(!tag) {\r\n      tag = new CacheTag();\r\n      this.scriptObject['_kmw'] = tag;\r\n    }\r\n\r\n    return tag;\r\n  }\r\n\r\n  get explodedStores(): {[storeName: string]: ComplexKeyboardStore} {\r\n    return this.cacheTag.stores;\r\n  }\r\n\r\n  /**\r\n   * Signifies whether or not a layout or OSK should include AltGr / Right-alt emulation for this keyboard.\r\n   * @param   {Object=}   keyLabels\r\n   * @return  {boolean}\r\n   */\r\n  get emulatesAltGr(): boolean {\r\n    // If we're not chiral, we're not emulating.\r\n    if(!this.isChiral) {\r\n      return false;\r\n    }\r\n\r\n    if(this._legacyLayoutSpec == null) {\r\n      return false;\r\n    }\r\n\r\n    // Only exists in KMW 10.0+, but before that Web had no chirality support, so... return false.\r\n    let layers = this._legacyLayoutSpec['KLS'];\r\n    if(!layers) {\r\n      return false;\r\n    }\r\n\r\n    var emulationMask = ModifierKeyConstants.LCTRLFLAG | ModifierKeyConstants.LALTFLAG;\r\n    var unshiftedEmulationLayer = layers[Layouts.getLayerId(emulationMask)];\r\n    var shiftedEmulationLayer = layers[Layouts.getLayerId(ModifierKeyConstants.K_SHIFTFLAG | emulationMask)];\r\n\r\n    // buildDefaultLayout ensures that these are aliased to the original modifier set being emulated.\r\n    // As a result, we can directly test for reference equality.\r\n    //\r\n    // This allows us to still return `true` after creating the layers for emulation; during keyboard\r\n    // construction, the two layers should be null for AltGr emulation to succeed.\r\n    if(unshiftedEmulationLayer != null &&\r\n        unshiftedEmulationLayer != layers[Layouts.getLayerId(ModifierKeyConstants.RALTFLAG)]) {\r\n      return false;\r\n    }\r\n\r\n    if(shiftedEmulationLayer != null &&\r\n        shiftedEmulationLayer != layers[Layouts.getLayerId(ModifierKeyConstants.RALTFLAG | ModifierKeyConstants.K_SHIFTFLAG)]) {\r\n      return false;\r\n    }\r\n\r\n    // It's technically possible for the OSK to not specify anything while allowing chiral input.  A last-ditch catch:\r\n    var bitmask = this.modifierBitmask;\r\n    if((bitmask & emulationMask) != emulationMask) {\r\n      // At least one of the emulation modifiers is never used by the keyboard!  We can confirm everything's safe.\r\n      return true;\r\n    }\r\n\r\n    if(unshiftedEmulationLayer == null && shiftedEmulationLayer == null) {\r\n      // We've run out of things to go on; we can't detect if chiral AltGr emulation is intended or not.\r\n      // TODO:  handle this again!\r\n      // if(!osk.altGrWarning) {\r\n      //   console.warn(\"Could not detect if AltGr emulation is safe, but defaulting to active emulation!\")\r\n      //   // Avoid spamming the console with warnings on every call of the method.\r\n      //   osk.altGrWarning = true;\r\n      // }\r\n      return true;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  get usesSupplementaryPlaneChars(): boolean {\r\n    let kbd = this.scriptObject;\r\n    // I3319 - SMP extension, I3363 (Build 301)\r\n    return kbd && ((kbd['KS'] && kbd['KS'] == 1) || kbd['KN'] == 'Hieroglyphic');\r\n  }\r\n\r\n  get version(): string {\r\n    return this.scriptObject['KBVER'] || '';\r\n  }\r\n\r\n  usesDesktopLayoutOnDevice(device: DeviceSpec) {\r\n    if(this.scriptObject['KVKL']) {\r\n      // A custom mobile layout is defined... but are we using it?\r\n      return device.formFactor == DeviceSpec.FormFactor.Desktop;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param       {number}    _PCommand     event code (16,17,18) or 0\r\n   * @param       {Object}    _PTarget      target element\r\n   * @param       {number}    _PData        1 or 0\r\n   * Notifies keyboard of keystroke or other event\r\n   */\r\n  notify(_PCommand: number, _PTarget: OutputTarget, _PData: number) { // I2187\r\n    // Good example use case - the Japanese CJK-picker keyboard\r\n    if(typeof(this.scriptObject['KNS']) == 'function') {\r\n      this.scriptObject['KNS'](_PCommand, _PTarget, _PData);\r\n    }\r\n  }\r\n\r\n  private findOrConstructLayout(formFactor: DeviceSpec.FormFactor): TouchLayoutSpec {\r\n    if(this._layouts) {\r\n      // Search for viable layouts.  `null` is allowed for desktop form factors when help text is available,\r\n      // so we check explicitly against `undefined`.\r\n      if(this._layouts[formFactor] !== undefined) {\r\n        return this._layouts[formFactor];\r\n      } else if(formFactor == DeviceSpec.FormFactor.Phone && this._layouts[DeviceSpec.FormFactor.Tablet]) {\r\n        return this._layouts[DeviceSpec.FormFactor.Phone] = this._layouts[DeviceSpec.FormFactor.Tablet];\r\n      } else if(formFactor == DeviceSpec.FormFactor.Tablet && this._layouts[DeviceSpec.FormFactor.Phone]) {\r\n        return this._layouts[DeviceSpec.FormFactor.Tablet] = this._layouts[DeviceSpec.FormFactor.Phone];\r\n      }\r\n    }\r\n\r\n    // No pre-built layout available; time to start constructing it via defaults.\r\n    // First, if we have non-default keys specified by the ['BK'] array, we've got\r\n    // enough to work with to build a default layout.\r\n    let rawSpecifications: any = null;  // TODO:  better typing, same type as this._legacyLayoutSpec.\r\n    if(this._legacyLayoutSpec != null && this._legacyLayoutSpec['KLS']) { // KLS is only specified whenever there are non-default keys.\r\n      rawSpecifications = this._legacyLayoutSpec;\r\n    } else if(this._legacyLayoutSpec != null && this._legacyLayoutSpec['BK'] != null) {\r\n      var keyCaps=this._legacyLayoutSpec['BK'];\r\n      for(var i=0; i<keyCaps.length; i++) {\r\n        if(keyCaps[i].length > 0) {\r\n          rawSpecifications = this._legacyLayoutSpec;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // If we don't have key definitions to use for a layout but also lack help text or are a touch-based layout,\r\n    // we make a default layout anyway.  We have to show display something usable.\r\n    if(!rawSpecifications && (this.helpText == '' || formFactor != DeviceSpec.FormFactor.Desktop)) {\r\n      rawSpecifications = {'F':'Tahoma', 'BK': Layouts.dfltText};\r\n    }\r\n\r\n    // Regardless of success, we'll want to initialize the field that backs the property;\r\n    // may as well cache the default layout we just built, or a 'null' if it shouldn't exist..\r\n    if(!this._layouts) {\r\n      this._layouts = {};\r\n    }\r\n\r\n    // Final check - do we construct a layout, or is this a case where helpText / insertHelpHTML should take over?\r\n    if(rawSpecifications) {\r\n      // Now to generate a layout from our raw specifications.\r\n      let layout: TouchLayoutSpec = this._layouts[formFactor] = Layouts.buildDefaultLayout(rawSpecifications, this, formFactor);\r\n      layout.isDefault = true;\r\n      return layout;\r\n    } else {\r\n      // The fact that it doesn't exist will indicate that help text/HTML should be inserted instead.\r\n      this._layouts[formFactor] = null; // provides a cached value for the check at the top of this method.\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns an ActiveLayout object representing the keyboard's layout for this form factor.  May return null if a custom desktop \"help\" OSK is defined, as with sil_euro_latin.\r\n   *\r\n   * In such cases, please use either `helpText` or `insertHelpHTML` instead.\r\n   * @param formFactor {string} The desired form factor for the layout.\r\n   */\r\n  public layout(formFactor: DeviceSpec.FormFactor): ActiveLayout {\r\n    let rawLayout = this.findOrConstructLayout(formFactor);\r\n\r\n    if(rawLayout) {\r\n      // Prevents accidentally reprocessing layouts; it's a simple enough check.\r\n      if(this.layoutStates[formFactor] == LayoutState.NOT_LOADED) {\r\n        const layout = ActiveLayout.polyfill(rawLayout, this, formFactor);\r\n        this.layoutStates[formFactor] = LayoutState.POLYFILLED;\r\n        return layout;\r\n      } else {\r\n        return rawLayout as unknown as ActiveLayout;\r\n      }\r\n\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public refreshLayouts() {\r\n    let formFactors = [ DeviceSpec.FormFactor.Desktop, DeviceSpec.FormFactor.Phone, DeviceSpec.FormFactor.Tablet ];\r\n\r\n    let _this = this;\r\n\r\n    formFactors.forEach(function(form) {\r\n      // Currently doesn't work if we reset it to POLYFILLED, likely due to how 'calibration'\r\n      // currently works.\r\n      _this.layoutStates[form] = LayoutState.NOT_LOADED;\r\n    });\r\n  }\r\n\r\n  public markLayoutCalibrated(formFactor: DeviceSpec.FormFactor) {\r\n    if(this.layoutStates[formFactor] != LayoutState.NOT_LOADED) {\r\n      this.layoutStates[formFactor] = LayoutState.CALIBRATED;\r\n    }\r\n  }\r\n\r\n  public getLayoutState(formFactor: DeviceSpec.FormFactor) {\r\n    return this.layoutStates[formFactor];\r\n  }\r\n\r\n\r\n  constructNullKeyEvent(device: DeviceSpec, stateKeys?: StateKeyMap): KeyEvent {\r\n    stateKeys = stateKeys || {\r\n      K_CAPS: false,\r\n      K_NUMLOCK: false,\r\n      K_SCROLL: false\r\n    }\r\n\r\n    const keyEvent = KeyEvent.constructNullKeyEvent(device);\r\n    this.setSyntheticEventDefaults(keyEvent, stateKeys);\r\n    return keyEvent;\r\n  }\r\n\r\n  constructKeyEvent(key: ActiveKey | ActiveSubKey, device: DeviceSpec, stateKeys: StateKeyMap): KeyEvent {\r\n    // Make a deep copy of our preconstructed key event, filling it out from there.\r\n    const Lkc = key.baseKeyEvent;\r\n    Lkc.device = device;\r\n\r\n    if(this.isMnemonic) {\r\n      Lkc.setMnemonicCode(key.layer.indexOf('shift') != -1, stateKeys['K_CAPS']);\r\n    }\r\n\r\n    // Performs common pre-analysis for both 'native' and 'embedded' OSK key & subkey input events.\r\n    // This part depends on the keyboard processor's active state.\r\n    this.setSyntheticEventDefaults(Lkc, stateKeys);\r\n\r\n    // If it's a state key modifier, trigger its effects as part of the\r\n    // keystroke.\r\n    const bitmap = {\r\n      'K_CAPS': Codes.stateBitmasks.CAPS,\r\n      'K_NUMLOCK': Codes.stateBitmasks.NUM_LOCK,\r\n      'K_SCROLL': Codes.stateBitmasks.SCROLL_LOCK\r\n    };\r\n    const bitmask = bitmap[Lkc.kName as keyof typeof bitmap];\r\n\r\n    if(bitmask) {\r\n      Lkc.Lstates ^= bitmask;\r\n      Lkc.LmodifierChange = true;\r\n    }\r\n\r\n    return Lkc;\r\n  }\r\n\r\n  setSyntheticEventDefaults(Lkc: KeyEvent, stateKeys: StateKeyMap) {\r\n    // Set the flags for the state keys - for desktop devices. For touch\r\n    // devices, the only state key in use currently is Caps Lock, which is set\r\n    // when the 'caps' layer is active in ActiveKey::constructBaseKeyEvent.\r\n    if(!Lkc.device.touchable) {\r\n      /*\r\n       * For desktop-style keyboards, start from a blank slate.  They have a 'default'\r\n       * (implicit 'NO_CAPS') layer but not a 'caps' layer.  With caps set, it just\r\n       * highlights the key on the 'default' layer instead.\r\n       *\r\n       * We should never set both `CAPS` and `NO_CAPS` at the same time, and\r\n       * same for the other modifiers.\r\n       */\r\n      Lkc.Lstates = 0;\r\n      Lkc.Lstates |= stateKeys['K_CAPS']    ? ModifierKeyConstants.CAPITALFLAG : ModifierKeyConstants.NOTCAPITALFLAG;\r\n      Lkc.Lstates |= stateKeys['K_NUMLOCK'] ? ModifierKeyConstants.NUMLOCKFLAG : ModifierKeyConstants.NOTNUMLOCKFLAG;\r\n      Lkc.Lstates |= stateKeys['K_SCROLL']  ? ModifierKeyConstants.SCROLLFLAG : ModifierKeyConstants.NOTSCROLLFLAG;\r\n    }\r\n\r\n    // Set LisVirtualKey to false to ensure that nomatch rule does fire for U_xxxx keys\r\n    if(Lkc.kName && Lkc.kName.substr(0,2) == 'U_') {\r\n      Lkc.LisVirtualKey=false;\r\n    }\r\n\r\n    // Get code for non-physical keys (T_KOKAI, U_05AB etc)\r\n    if(typeof Lkc.Lcode == 'undefined') {\r\n      Lkc.Lcode = this.getVKDictionaryCode(Lkc.kName);// Updated for Build 347\r\n      if(!Lkc.Lcode) {\r\n        // Special case for U_xxxx keys. This vk code will never be used\r\n        // in a keyboard, so we use this to ensure that keystroke processing\r\n        // occurs for the key.\r\n        Lkc.Lcode = 1;\r\n      }\r\n    }\r\n\r\n    // Handles modifier states when the OSK is emulating rightalt through the leftctrl-leftalt layer.\r\n    if((Lkc.Lmodifiers & Codes.modifierBitmasks['ALT_GR_SIM']) == Codes.modifierBitmasks['ALT_GR_SIM'] && this.emulatesAltGr) {\r\n      Lkc.Lmodifiers &= ~Codes.modifierBitmasks['ALT_GR_SIM'];\r\n      Lkc.Lmodifiers |= ModifierKeyConstants.RALTFLAG;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @summary Look up a custom virtual key code in the virtual key code dictionary KVKD.\r\n   * On first run, will build the dictionary.\r\n   *\r\n   * `VKDictionary` is constructed from the keyboard's `KVKD` member. This list is constructed\r\n   * at compile-time and is a list of 'additional' virtual key codes, starting at 256 (i.e.\r\n   * outside the range of standard virtual key codes). These additional codes are both\r\n   * `[T_xxx]` and `[U_xxxx]` custom key codes from the Keyman keyboard language. However,\r\n   * `[U_xxxx]` keys only generate an entry in `KVKD` if there is a corresponding rule that\r\n   * is associated with them in the keyboard rules. If the `[U_xxxx]` key code is only\r\n   * referenced as the id of a key in the touch layout, then it does not get an entry in\r\n   * the `KVKD` property.\r\n   *\r\n   * @private\r\n   * @param       {string}      keyName   custom virtual key code to lookup in the dictionary\r\n   * @return      {number}                key code > 255 on success, or 0 if not found\r\n   */\r\n  getVKDictionaryCode(keyName: string) {\r\n    const dict = this.scriptObject['VKDictionary'] || {} as KmwKeyboardObject['VKDictionary'];\r\n    if(!this.scriptObject['VKDictionary']) {\r\n      if(typeof this.scriptObject['KVKD'] == 'string') {\r\n        // Build the VK dictionary\r\n        // TODO: Move the dictionary build into the compiler -- so compiler generates code such as following.\r\n        // Makes the VKDictionary member unnecessary.\r\n        //       this.KVKD={\"K_ABC\":256,\"K_DEF\":257,...};\r\n        const s=this.scriptObject['KVKD'].split(' ');\r\n        for(var i=0; i<s.length; i++) {\r\n          dict[s[i].toUpperCase()]=i+256; // We force upper-case since virtual keys should be case-insensitive.\r\n        }\r\n      }\r\n      this.scriptObject['VKDictionary']=dict;\r\n    }\r\n\r\n    const res=dict[keyName.toUpperCase()];\r\n    return res ? res : 0;\r\n  }\r\n}\r\n",
    "import Keyboard from \"./keyboard.js\";\r\nimport Codes from \"../codes.js\";\r\nimport { DeviceSpec } from '@keymanapp/web-utils';\r\n\r\n/**\r\n * Defines members of the top-level `keyman` global object necessary to guarantee\r\n * successful loading of a keyboard.\r\n */\r\nexport interface KeyboardKeymanGlobal {\r\n  // Omitting this will prevent debug-compiled keyboards from loading.\r\n  readonly osk: MinimalCodesInterface;\r\n}\r\n\r\n/**\r\n * Defines any public API points used by debug-compiled keyboards for human-readable\r\n * nomenclature in rules within a Keyman keyboard's script for keyboard rules.\r\n *\r\n * Refer to TCompileKeymanWeb.JavaScript_SetupDebug.\r\n */\r\nexport interface MinimalCodesInterface {\r\n  readonly modifierCodes: typeof Codes.modifierCodes;\r\n  readonly keyCodes: typeof Codes.keyCodes;\r\n  readonly modifierBitmasks: typeof Codes.modifierBitmasks;\r\n  readonly stateBitmasks: typeof Codes.stateBitmasks;\r\n}\r\n\r\nexport const MinimalKeymanGlobal: KeyboardKeymanGlobal = {\r\n  // While this CERTAINLY isn't polymorphic with an actual OSK, it's \"enough\" to\r\n  // facilitate loading of debug-compiled Keyman keyboards that rely on constants\r\n  // defined within Codes at relevant legacy endpoints.\r\n  osk: Codes\r\n}\r\n\r\n/**\r\n * Defines the minimum interface needed to ensure successful loading of Keyman\r\n * keyboards of _any_ type.\r\n *\r\n * This interface is minimal; note that critical functions needed for the evaluation\r\n * of keyboard rules are not included.\r\n */\r\nexport class KeyboardHarness {\r\n  public readonly _jsGlobal: any;\r\n  public readonly keymanGlobal: KeyboardKeymanGlobal;\r\n  activeDevice: DeviceSpec;\r\n\r\n\r\n  /**\r\n   * Constructs and configures a harness for receiving dynamically-loaded Keyman keyboards.\r\n   *\r\n   * @param _jsGlobal The object that the keyboard script will perceive as the top-level global\r\n   *                  with the name `KeymanWeb`.\r\n   * - In the DOM, as a member of `window` (which may be that of an iframe)\r\n   * - In a WebWorker, as a member of `self`\r\n   * - In Node, as a member of `global` (or of a context object supplied to `vm`)\r\n   * @param keymanGlobal An object to stand-in as the `keyman` global variable within _jsGlobal.\r\n   */\r\n  public constructor(_jsGlobal: any, keymanGlobal: KeyboardKeymanGlobal) {\r\n    this._jsGlobal = _jsGlobal;\r\n    this.keymanGlobal = keymanGlobal;\r\n\r\n    this.install();\r\n  }\r\n\r\n  /**\r\n   * This field serves as the receptacle for a successfully-loaded Keyboard.\r\n   */\r\n  public loadedKeyboard: Keyboard = null;\r\n\r\n  /**\r\n   * Keyman keyboards register themselves into the Keyman Engine for Web by directly\r\n   * calling `KeymanWeb.KR` - the function provided here after \"installation\" of the harness.\r\n   *\r\n   * Note that the resulting Keyboard's internal rule scripting has its global object bound via\r\n   * closure/capture; that global object must have a rule-compatible harness set in order to\r\n   * facilitate keyboard-rule evaluation.  Note that the mechanism for keyboard loading in\r\n   * Node (for headless unit tests) supplies a unique global per load if not supplied to the\r\n   * constructor that is not accessible for manipulation after the load!\r\n   *\r\n   * If the supplied global's accessible keyboard harness does not supply keyboard rule API\r\n   * functions, attempts to process keyboard rules will throw `Error`s instead.\r\n   * @param scriptObject\r\n   */\r\n  public KR(scriptObject: any) {\r\n    if(this.loadedKeyboard) {\r\n      throw new Error(\"Unexpected state:  the most-recently loaded keyboard field was not properly reset.\");\r\n    }\r\n    this.loadedKeyboard = new Keyboard(scriptObject);\r\n  }\r\n\r\n  // Is evaluated on script-load for some keyboards using variable stores.\r\n  // Example:  sil_ipa - store(option_key)\r\n  public KLOAD(kbdName: string, storeName: string, dfltValue: string) {\r\n    return dfltValue;\r\n  }\r\n\r\n  /**\r\n   * Installs this harness instance into the object that the keyboard script will perceive\r\n   * as the top-level global with the name `KeymanWeb`.\r\n   * - In the DOM, as a member of `window` (which may be that of an iframe)\r\n   * - In a WebWorker, as a member of `self`\r\n   * - In Node, as a member of `global` (or of a context object supplied to `vm`)\r\n   *\r\n   * In doing so, the following properties will have endpoints within the global:\r\n   * - `KeymanWeb` - this harness instance\r\n   * - `keyman` - the `minKeymanGlobal` constructor argument.\r\n   */\r\n  public install() {\r\n    this._jsGlobal.KeymanWeb = this;\r\n    this._jsGlobal.keyman = this.keymanGlobal;\r\n  }\r\n\r\n  public uninstall() {\r\n    if(this._jsGlobal.KeymanWeb == this) {\r\n      delete this._jsGlobal.KeymanWeb;\r\n    }\r\n\r\n    if(this._jsGlobal.keyman == this.keymanGlobal) {\r\n      delete this._jsGlobal.keyman;\r\n    }\r\n  }\r\n}\r\n\r\n",
    "import Keyboard from \"./keyboard.js\";\r\nimport { KeyboardHarness } from \"./keyboardHarness.js\";\r\nimport KeyboardProperties from \"./keyboardProperties.js\";\r\n\r\ntype KeyboardStub = KeyboardProperties & { filename: string };\r\n\r\nexport interface KeyboardLoadErrorBuilder {\r\n  scriptError(err?: Error): void;\r\n  missingError(err: Error): void;\r\n}\r\n\r\nexport class KeyboardScriptError extends Error {\r\n  public readonly cause;\r\n\r\n  constructor(msg: string, cause?: Error) {\r\n    super(msg);\r\n    this.cause = cause;\r\n  }\r\n}\r\n\r\nexport class KeyboardMissingError extends Error {\r\n  public readonly cause;\r\n\r\n  constructor(msg: string, cause?: Error) {\r\n    super(msg);\r\n    this.cause = cause;\r\n  }\r\n}\r\n\r\nclass UriBasedErrorBuilder implements KeyboardLoadErrorBuilder {\r\n  readonly uri: string;\r\n\r\n  constructor(uri: string) {\r\n    this.uri = uri;\r\n  }\r\n\r\n  missingError(err: Error) {\r\n    const msg = `Cannot find the keyboard at ${this.uri}.`;\r\n    return new KeyboardMissingError(msg, err);\r\n  }\r\n\r\n  scriptError(err: Error) {\r\n    const msg = `Error registering the keyboard script at ${this.uri}; it may contain an error.`;\r\n    return new KeyboardScriptError(msg, err);\r\n  }\r\n}\r\n\r\nclass StubBasedErrorBuilder implements KeyboardLoadErrorBuilder {\r\n  readonly stub: KeyboardStub;\r\n\r\n  constructor(stub: KeyboardStub) {\r\n    this.stub = stub;\r\n  }\r\n\r\n  missingError(err: Error) {\r\n    const stub = this.stub;\r\n    const msg = `Cannot find the ${stub.name} keyboard for ${stub.langName} at ${stub.filename}.`;\r\n    return new KeyboardMissingError(msg, err);\r\n  }\r\n\r\n  scriptError(err: Error) {\r\n    const stub = this.stub;\r\n    const msg = `Error registering the ${stub.name} keyboard for ${stub.langName}; keyboard script at ${stub.filename} may contain an error.`;\r\n    return new KeyboardScriptError(msg, err);\r\n  }\r\n}\r\n\r\nexport default abstract class KeyboardLoaderBase {\r\n  private _harness: KeyboardHarness;\r\n\r\n  public get harness(): KeyboardHarness {\r\n    return this._harness;\r\n  }\r\n\r\n  constructor(harness: KeyboardHarness) {\r\n    this._harness = harness;\r\n  }\r\n\r\n  public loadKeyboardFromPath(uri: string): Promise<Keyboard> {\r\n    this.harness.install();\r\n    const promise = this.loadKeyboardInternal(uri, new UriBasedErrorBuilder(uri));\r\n\r\n    return promise;\r\n  }\r\n\r\n  public loadKeyboardFromStub(stub: KeyboardStub) {\r\n    this.harness.install();\r\n    let promise = this.loadKeyboardInternal(stub.filename, new StubBasedErrorBuilder(stub), stub.id);\r\n\r\n    return promise;\r\n  }\r\n\r\n  protected abstract loadKeyboardInternal(\r\n    uri: string,\r\n    errorBuilder: KeyboardLoadErrorBuilder,\r\n    id?: string\r\n  ): Promise<Keyboard>;\r\n}",
    "// Compiles completely out if `const enum`, making it unavailable in JS-based unit tests.\r\nenum SpacebarText {\r\n  KEYBOARD = 'keyboard',\r\n  LANGUAGE = 'language',\r\n  LANGUAGE_KEYBOARD = 'languageKeyboard',\r\n  BLANK = 'blank'\r\n};\r\n\r\nexport default SpacebarText;",
    "import SpacebarText from './spacebarText.js';\r\n\r\nexport interface InternalKeyboardFont {\r\n  family: string;\r\n  filename?: never;\r\n  files: string | string[];  // internal\r\n  source?: never;\r\n  path: string;\r\n}\r\n\r\ninterface CloudKeyboardFont1 {\r\n  family: string;\r\n  filename: string | string[];\r\n  files?: never;\r\n  source?: never;\r\n}\r\n\r\ninterface CloudKeyboardFont2 {\r\n  family: string;\r\n  filename?: never;\r\n  files?: never;\r\n  source: string | string[];\r\n}\r\n\r\nexport type CloudKeyboardFont = CloudKeyboardFont1 | CloudKeyboardFont2;\r\n\r\n/**\r\n * Converts one of three public-facing font-specification formats into a consistent structure\r\n * used generally among the Keyman JS/TS modules.\r\n * @param fontObj\r\n * @param fontPath\r\n * @returns\r\n */\r\nexport function internalizeFont(fontObj: CloudKeyboardFont, fontPath: string): InternalKeyboardFont {\r\n  if(!fontObj) {\r\n    return undefined;\r\n  } else {\r\n    return {\r\n      family: fontObj.family,\r\n      path: fontPath,\r\n      files: fontObj.filename || fontObj.source\r\n    }\r\n  }\r\n}\r\n\r\nexport type KeyboardFont = CloudKeyboardFont | InternalKeyboardFont;\r\n\r\n// Filename properties are deliberately omitted here; we can add that at higher-levels where it matters\r\n// via 'mix-in'.\r\n//\r\n// For example, the OSK module doesn't care about the filename of a loaded keyboard.  It doesn't do\r\n// keyboard loading on its own whatsoever.\r\n\r\n// Corresponds to Keyman Engine for Web's internal \"keyboard stub\" format.\r\n// Also referred to by KMW 2.0-era loaders:  https://help.keyman.com/developer/8.0/docs/reference_kmw20_example\r\nexport interface KeyboardInternalPropertySpec {\r\n  KI: string,\r\n  KFont: InternalKeyboardFont,\r\n  KOskFont: InternalKeyboardFont,\r\n  displayName?: string,\r\n  KN?: string,\r\n  KL?: string,\r\n  KLC?: string\r\n};\r\n\r\nexport type LanguageAPIPropertySpec = {\r\n  id: string,\r\n  name: string,\r\n  font: CloudKeyboardFont,\r\n  oskFont: CloudKeyboardFont,\r\n  region?: number|string\r\n}\r\n\r\n/**\r\n * Corresponds to the documented API for the Web engine's `addKeyboards` function\r\n * when a single language object is specified - not an array.\r\n *\r\n * See https://help.keyman.com/developer/engine/web/15.0/reference/core/addKeyboards,\r\n * \"Using an `object`\".\r\n */\r\nexport type KeyboardAPIPropertySpec = {\r\n  id: string,\r\n  name: string,\r\n\r\n  /**\r\n   * @deprecated Replaced with `languages`.\r\n   */\r\n  language?: LanguageAPIPropertySpec;\r\n  languages: LanguageAPIPropertySpec;\r\n}\r\n\r\n/**\r\n * Corresponds to the documented API for the Web engine's `addKeyboards` function\r\n * when a language array is specified for the object.\r\n *\r\n * See https://help.keyman.com/developer/engine/web/15.0/reference/core/addKeyboards,\r\n * \"Using an `object`\".\r\n */\r\nexport type KeyboardAPIPropertyMultilangSpec = {\r\n  id: string,\r\n  name: string,\r\n\r\n  /**\r\n   * @deprecated Replaced with `languages`.\r\n   */\r\n  language?: LanguageAPIPropertySpec[];\r\n  languages: LanguageAPIPropertySpec[];\r\n}\r\n\r\nexport type MetadataObj = KeyboardInternalPropertySpec | KeyboardAPIPropertySpec | KeyboardAPIPropertyMultilangSpec;\r\n\r\nexport default class KeyboardProperties implements KeyboardInternalPropertySpec {\r\n  KI: string;\r\n  KN: string;\r\n  KL: string;\r\n  KLC: string;\r\n  KFont: InternalKeyboardFont;\r\n  KOskFont: InternalKeyboardFont;\r\n  _displayName?: string;\r\n\r\n  private static spacebarTextModeSrc: SpacebarText | (() => SpacebarText) = SpacebarText.KEYBOARD;\r\n\r\n  public static get spacebarTextMode(): SpacebarText {\r\n    if(typeof this.spacebarTextModeSrc == 'string') {\r\n      return this.spacebarTextModeSrc;\r\n    } else {\r\n      return this.spacebarTextModeSrc();\r\n    }\r\n  }\r\n\r\n  public static set spacebarTextMode(source: typeof KeyboardProperties.spacebarTextModeSrc) {\r\n    this.spacebarTextModeSrc = source;\r\n  }\r\n\r\n  public constructor(metadataObj: MetadataObj, fontPath?: string);\r\n  public constructor(keyboardId: string, languageCode: string);\r\n  public constructor(arg1: MetadataObj | string, arg2?: string) {\r\n    if(!(typeof arg1 == 'string')) {\r\n      // @ts-ignore\r\n      if(arg1['KI'] || arg1['KL'] || arg1['KLC'] || arg1['KFont'] || arg1['KOskFont']) {\r\n        const other = arg1 as KeyboardInternalPropertySpec;\r\n        this.KI = other.KI;\r\n        this.KN = other.KN;\r\n        this.KL = other.KL;\r\n        this.KLC = other.KLC;\r\n        // Do NOT apply fontPath here; the mobile apps will have font issues if you do!\r\n        this.KFont = other.KFont;\r\n        this.KOskFont = other.KOskFont;\r\n        this._displayName = (other instanceof KeyboardProperties) ? other._displayName : other.displayName;\r\n      } else {\r\n        let apiStub = arg1 as KeyboardAPIPropertySpec; // TODO:  could be an array, as currently specified.  :(\r\n\r\n        apiStub.languages ||= apiStub.language;\r\n\r\n        this.KI = apiStub.id,\r\n        this.KN = apiStub.name,\r\n        this.KL = apiStub.languages.name,\r\n        this.KLC = apiStub.languages.id,\r\n        this.KFont = internalizeFont(apiStub.languages.font, arg2),\r\n        this.KOskFont = internalizeFont(apiStub.languages.oskFont, arg2)\r\n      }\r\n    } else {\r\n      this.KI = arg1;\r\n      this.KLC = arg2;\r\n    }\r\n  }\r\n\r\n  public static fromMultilanguageAPIStub(apiStub: KeyboardAPIPropertyMultilangSpec): KeyboardProperties[] {\r\n    let stubs: KeyboardProperties[] = [];\r\n\r\n    apiStub.languages ||= apiStub.language;\r\n\r\n    for(let langSpec of apiStub.languages) {\r\n      let stub: KeyboardAPIPropertySpec = {\r\n        id: apiStub.id,\r\n        name: apiStub.name,\r\n        languages: langSpec\r\n      };\r\n\r\n      stubs.push(new KeyboardProperties(stub));\r\n    }\r\n\r\n    return stubs;\r\n  }\r\n\r\n  public get id(): string {\r\n    return this.KI;\r\n  }\r\n\r\n  public get name(): string {\r\n    return this.KN;\r\n  }\r\n\r\n  public get langId(): string {\r\n    return this.KLC;\r\n  }\r\n\r\n  public get langName(): string {\r\n    return this.KL;\r\n  }\r\n\r\n  public get displayName(): string {\r\n    if(this._displayName) {\r\n      return this._displayName;\r\n    }\r\n\r\n    // else, construct it.\r\n    const kbdName = this.KN;\r\n    const lgName = this.KL;\r\n\r\n    switch (KeyboardProperties.spacebarTextMode) {\r\n      case SpacebarText.KEYBOARD:\r\n        return kbdName;\r\n      case SpacebarText.LANGUAGE:\r\n        return lgName;\r\n      case SpacebarText.LANGUAGE_KEYBOARD:\r\n        return (kbdName == lgName) ? lgName : lgName + ' - ' + kbdName;\r\n      case SpacebarText.BLANK:\r\n        return '';\r\n      default:\r\n        return kbdName;\r\n    }\r\n  }\r\n\r\n  public set displayName(name: string) {\r\n    this._displayName = name;\r\n  }\r\n\r\n  public get textFont() {\r\n    return this.KFont;\r\n  }\r\n\r\n  public get oskFont() {\r\n    return this.KOskFont;\r\n  }\r\n\r\n  /**\r\n   * Generates an error for objects with specification levels insufficient for use in the on-screen-keyboard\r\n   * module, complete with a message about one or more details in need of correction.\r\n   * @returns A preconstructed `Error` instance that may be thrown by the caller.\r\n   */\r\n  public validateForOSK(): Error {\r\n    if(!this.KLC) {\r\n      if(this.KI || this.KN) {\r\n        return new Error(`No language code was specified for use with the ${this.KI || this.KN} keyboard`);\r\n      } else {\r\n        return new Error(\"No language code was specified for use with the corresponding keyboard\")\r\n      }\r\n    }\r\n\r\n    if(this.displayName === undefined || (KeyboardProperties.spacebarTextMode != SpacebarText.BLANK && !this.displayName)) {\r\n      return new Error(\"A display name is missing for this keyboard and cannot be generated under current settings.\")\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  public validateForCustomKeyboard(): Error {\r\n    if(!this.KI || !this.KN || !this.KL || !this.KLC) {\r\n      return new Error(\"To use a custom keyboard, you must specify keyboard id, keyboard name, language and language code.\");\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}",
    "import { PathOptionSpec } from \"./optionSpec.interface.js\";\r\nimport { OSKResourcePathConfiguration } from './oskResourcePathConfiguration.interface.js';\r\n\r\nconst addDelimiter = (p: string) => {\r\n  // Add delimiter if missing\r\n  if(p.substring(p.length-1) != '/') {\r\n    return p + '/';\r\n  } else {\r\n    return p;\r\n  }\r\n}\r\n\r\nexport default class PathConfiguration implements OSKResourcePathConfiguration {\r\n  private readonly sourcePath: string;\r\n  private _root: string;\r\n  private _resources: string;\r\n  private _keyboards: string;\r\n\r\n  // May get its initial value from the Keyman Cloud API after a query if not\r\n  // otherwise specified.\r\n  private _fonts: string;\r\n  readonly protocol: string;\r\n\r\n  /*\r\n   * Pre-modularization code corresponding to `sourcePath`:\r\n  ```\r\n   // Determine path and protocol of executing script, setting them as\r\n   // construction defaults.\r\n   //\r\n   // This can only be done during load when the active script will be the\r\n   // last script loaded.  Otherwise the script must be identified by name.\r\n\r\n   var scripts = document.getElementsByTagName('script');\r\n   var ss = scripts[scripts.length-1].src;\r\n   var sPath = ss.substr(0,ss.lastIndexOf('/')+1);\r\n   ```\r\n   */\r\n  constructor(pathSpec: Required<PathOptionSpec>, sourcePath: string) {\r\n    sourcePath = addDelimiter(sourcePath);\r\n    this.sourcePath = sourcePath;\r\n    this.protocol = sourcePath.replace(/(.{3,5}:)(.*)/,'$1');\r\n\r\n    this.updateFromOptions(pathSpec);\r\n  }\r\n\r\n  updateFromOptions(pathSpec: Required<PathOptionSpec>) {\r\n    const _rootPath = this.sourcePath.replace(/(https?:\\/\\/)([^\\/]*)(.*)/,'$1$2/');\r\n\r\n    // Get default paths and device options\r\n    this._root = _rootPath;\r\n    if(pathSpec.root != '') {\r\n      this._root = this.fixPath(pathSpec.root);\r\n    } else {\r\n      this._root = this.fixPath(_rootPath);\r\n    }\r\n\r\n    // Resources are located with respect to the engine by default\r\n    let resources = pathSpec.resources; // avoid mutating the parameter!\r\n    if(resources == '') {\r\n      resources = this.sourcePath;\r\n    }\r\n\r\n    // Convert resource, keyboard and font paths to absolute URLs\r\n    this._resources = this.fixPath(resources);\r\n    this._keyboards = this.fixPath(pathSpec.keyboards);\r\n    this._fonts = this.fixPath(pathSpec.fonts);\r\n  }\r\n\r\n  // Local function to convert relative to absolute URLs\r\n  // with respect to the source path, server root and protocol\r\n  fixPath(p: string) {\r\n    if(p.length == 0) {\r\n      return p;\r\n    }\r\n\r\n    p = addDelimiter(p);\r\n\r\n    // Absolute\r\n    if((p.replace(/^(http)s?:.*/,'$1') == 'http') || (p.replace(/^(file):.*/,'$1') == 'file')) {\r\n      return p;\r\n    }\r\n\r\n    // Absolute (except for protocol)\r\n    if(p.substring(0,2) == '//') {\r\n      return this.protocol + p;\r\n    }\r\n\r\n    // Relative to server root\r\n    if(p.substring(0,1) == '/') {\r\n      return this.root + p.substring(1);\r\n    }\r\n\r\n    // Otherwise, assume relative to source path\r\n    return this.sourcePath + p;\r\n  }\r\n\r\n  get fonts(): string {\r\n    return this._fonts;\r\n  }\r\n\r\n  updateFontPath(path: string) {\r\n    this._fonts = this.fixPath(path);\r\n  }\r\n\r\n  get root(): string {\r\n    return this._root;\r\n  }\r\n\r\n  get resources(): string {\r\n    return this._resources;\r\n  }\r\n\r\n  get keyboards(): string {\r\n    return this._keyboards;\r\n  }\r\n}",
    "export interface PathOptionSpec {\r\n  /**\r\n   * If defined, specifies the root path of the default location hosting KMW resources.\r\n   * Is typically just the protocol + domain name.\r\n   */\r\n  root?: string;\r\n\r\n  /**\r\n   * The base path to prepend on relative paths for other types of resources.\r\n   */\r\n  resources?: string;\r\n\r\n  /**\r\n   * The base path to prepend on relative paths when loading keyboards.\r\n   */\r\n  keyboards?: string;\r\n\r\n  /**\r\n   * The base path to prepend on relative paths when loading fonts.\r\n   */\r\n  fonts?: string;\r\n}\r\n\r\nexport const PathOptionDefaults: Required<PathOptionSpec> = {\r\n  root: '',\r\n  resources: '',\r\n  keyboards: '',\r\n  fonts: ''\r\n}",
    "import { Suggestion, Reversion } from '@keymanapp/common-types';\r\nimport { EventEmitter } from \"eventemitter3\";\r\nimport { OutputTarget } from \"keyman/engine/keyboard\";\r\n\r\nexport class ReadySuggestions {\r\n  suggestions: Suggestion[];\r\n  transcriptionID: number;\r\n\r\n  constructor(suggestions: Suggestion[], id: number) {\r\n    this.suggestions = suggestions;\r\n    this.transcriptionID = id;\r\n  }\r\n}\r\n\r\n/**\r\n * Corresponds to the 'suggestionsready' LanguageProcessor event.\r\n */\r\nexport type ReadySuggestionsHandler = (prediction: ReadySuggestions) => boolean;\r\n\r\nexport type InvalidateSourceEnum = 'new' | 'context';\r\n\r\n/**\r\n * Corresponds to the 'invalidatesuggestions' LanguageProcessor event.\r\n */\r\nexport type InvalidateSuggestionsHandler = (source: InvalidateSourceEnum) => boolean;\r\n\r\nexport type StateChangeEnum = 'active' | 'configured' | 'inactive';\r\n/**\r\n * Corresponds to the 'statechange' LanguageProcessor event.\r\n */\r\nexport type StateChangeHandler = (state: StateChangeEnum) => any;\r\n\r\n/**\r\n * Covers 'tryaccept' events.\r\n */\r\nexport type TryUIHandler = (source: string, returnObj: { shouldSwallow: boolean }) => boolean;\r\n\r\nexport interface LanguageProcessorEventMap {\r\n  'suggestionsready': ReadySuggestionsHandler,\r\n  'invalidatesuggestions': InvalidateSuggestionsHandler,\r\n  'statechange': StateChangeHandler,\r\n  'tryaccept': TryUIHandler,\r\n  'tryrevert': () => void,\r\n\r\n  /**\r\n   * Is called synchronously once suggestion application is successful and the context has been updated.\r\n   *\r\n   * @param outputTarget The `OutputTarget` representation of the context the suggestion was applied to.\r\n   * @returns\r\n   */\r\n  'suggestionapplied': (outputTarget: OutputTarget) => boolean\r\n}\r\n\r\n\r\nexport interface LanguageProcessorSpec extends EventEmitter<LanguageProcessorEventMap> {\r\n\r\n  get state(): StateChangeEnum;\r\n\r\n  invalidateContext(outputTarget: OutputTarget, layerId: string): Promise<Suggestion[]>;\r\n\r\n  /**\r\n   *\r\n   * @param suggestion\r\n   * @param outputTarget\r\n   * @param getLayerId      a function that returns the current layerId,\r\n   *                        required because layerid can be changed by PostKeystroke\r\n   * @returns\r\n   */\r\n  applySuggestion(suggestion: Suggestion, outputTarget: OutputTarget, getLayerId: () => string): Promise<Reversion>;\r\n\r\n  applyReversion(reversion: Reversion, outputTarget: OutputTarget): Promise<Suggestion[]>;\r\n\r\n  get wordbreaksAfterSuggestions(): boolean;\r\n}\r\n",
    "import { EventEmitter } from \"eventemitter3\";\r\nimport { Keep, Reversion, Suggestion } from '@keymanapp/common-types';\r\nimport { type LanguageProcessorSpec , ReadySuggestions, type InvalidateSourceEnum, StateChangeHandler } from './languageProcessor.interface.js';\r\nimport { type OutputTarget } from \"keyman/engine/keyboard\";\r\n\r\ninterface PredictionContextEventMap {\r\n  update: (suggestions: Suggestion[]) => void;\r\n}\r\n\r\n/**\r\n * Maintains predictive-text state information corresponding to the current context.\r\n */\r\nexport default class PredictionContext extends EventEmitter<PredictionContextEventMap> {\r\n  // Historical note:  before 17.0, this code was intertwined with /web/source/osk/banner.ts's\r\n  // SuggestionBanner class.  This class serves as the main implementation of the banner's core logic.\r\n\r\n  // Designed for use with auto-correct behavior\r\n  selected: Suggestion;\r\n\r\n  private initNewContext: boolean = true;\r\n\r\n  private _currentSuggestions: Suggestion[] = [];\r\n  private keepSuggestion: Keep;\r\n  private revertSuggestion: Reversion;\r\n\r\n  // Set to null/undefined if there was no recent acceptance.\r\n  private recentAcceptCause: 'key' | 'banner';\r\n  private revertAcceptancePromise: Promise<Reversion>;\r\n\r\n  private swallowPrediction: boolean = false;\r\n\r\n  private doRevert: boolean = false;\r\n  private recentRevert: boolean = false;\r\n\r\n  private langProcessor: LanguageProcessorSpec;\r\n  private getLayerId: () => string;\r\n\r\n  /**\r\n   * Represents the active context used when requesting and applying predictive-text operations.\r\n   */\r\n  private _currentTarget: OutputTarget;\r\n\r\n  public get currentTarget(): OutputTarget {\r\n    return this._currentTarget;\r\n  }\r\n\r\n  public setCurrentTarget(target: OutputTarget): Promise<Suggestion[]> {\r\n    const originalTarget = this._currentTarget;\r\n    this._currentTarget = target;\r\n\r\n    if(originalTarget != target) {\r\n      // Note:  should be triggered after the corresponding new-context event rule has been processed,\r\n      // as that may affect the value of layerId here.\r\n      return this.resetContext();\r\n    } else {\r\n      return Promise.resolve([]);\r\n    }\r\n  }\r\n\r\n  private readonly suggestionApplier: (suggestion: Suggestion) => Promise<Reversion>;\r\n  private readonly suggestionReverter: (reversion: Reversion) => void;\r\n\r\n  public constructor(langProcessor: LanguageProcessorSpec, getLayerId: () => string) {\r\n    super();\r\n\r\n    this.langProcessor = langProcessor;\r\n    this.getLayerId = getLayerId;\r\n\r\n    const validSuggestionState: () => boolean = () =>\r\n      this.currentTarget && langProcessor.state == 'configured';\r\n\r\n    this.suggestionApplier = (suggestion) => {\r\n      if(validSuggestionState()) {\r\n        return langProcessor.applySuggestion(suggestion, this.currentTarget, getLayerId);\r\n      } else {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    this.suggestionReverter = async (reversion) => {\r\n      if(validSuggestionState()) {\r\n        let suggestions = await langProcessor.applyReversion(reversion, this.currentTarget);\r\n        // We want to avoid altering flags that indicate our post-reversion state.\r\n        this.swallowPrediction = true;\r\n        this.updateSuggestions(new ReadySuggestions(suggestions, reversion.id ? -reversion.id : undefined));\r\n      }\r\n    }\r\n\r\n    this.connect();\r\n  }\r\n\r\n  private connect() {\r\n    this.langProcessor.addListener('invalidatesuggestions', this.invalidateSuggestions);\r\n    this.langProcessor.addListener('suggestionsready', this.updateSuggestions);\r\n    this.langProcessor.addListener('tryaccept', this.doTryAccept);\r\n    this.langProcessor.addListener('tryrevert', this.doTryRevert);\r\n    this.langProcessor.addListener('statechange', this.onModelStateChange);\r\n  }\r\n\r\n  public disconnect() {\r\n    this.langProcessor.removeListener('invalidatesuggestions', this.invalidateSuggestions);\r\n    this.langProcessor.removeListener('suggestionsready', this.updateSuggestions);\r\n    this.langProcessor.removeListener('tryaccept', this.doTryAccept);\r\n    this.langProcessor.removeListener('tryrevert', this.doTryRevert);\r\n    this.langProcessor.removeListener('statechange', this.onModelStateChange);\r\n    this.clearSuggestions();\r\n  }\r\n\r\n  public get currentSuggestions(): Suggestion[] {\r\n    let suggestions: Suggestion[] = [];\r\n    // Insert 'current text' if/when valid as the leading option.\r\n    // Since we don't yet do auto-corrections, we only show 'keep' whenever it's\r\n    // a valid word (according to the model).\r\n    const mayShowKeep = this.activateKeep() && this.keepSuggestion;\r\n\r\n    // If there is an auto-select option that doesn't match the current context,\r\n    // we need to present the user a way to preserve the current context instead.\r\n    const keepNeeded = this.selected && (this.keepSuggestion != this.selected);\r\n\r\n    if(mayShowKeep && (keepNeeded || this.keepSuggestion.matchesModel)) {\r\n      suggestions.push(this.keepSuggestion);\r\n    } else if(this.doRevert) {\r\n      suggestions.push(this.revertSuggestion);\r\n    }\r\n\r\n    return suggestions.concat(this._currentSuggestions);\r\n  }\r\n\r\n  /**\r\n   * Function apply\r\n   * Description  Applies the predictive `Suggestion` represented by this `BannerSuggestion`.\r\n   */\r\n  private acceptInternal(suggestion: Suggestion): Promise<Reversion> {\r\n    if(!suggestion) {\r\n      return null;\r\n    }\r\n\r\n    // Should be safe to convert into an event handled externally.\r\n    // layerID can be obtained by whoever/whatever holds the InputProcessor instance.\r\n    if(suggestion.tag == 'revert') {\r\n      this.suggestionReverter(suggestion as Reversion);\r\n      return null;\r\n    } else {\r\n      return this.suggestionApplier(suggestion);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies predictive-text suggestions and post-acceptance reversions to the current\r\n   * prediction context.\r\n   *\r\n   * Note that both cases will additionally trigger a new asynchronous `predict` operation,\r\n   * though no corresponding Promise is returned by this function.  As such, the current\r\n   * suggestions should be considered outdated after calling this method, pending replacement\r\n   * upon the completed async `predict`.\r\n   *\r\n   * @param suggestion Either a `Suggestion` or `Reversion`.\r\n   * @returns if `suggestion` is a `Suggestion`, will return a `Promise<Reversion>`; else, `null`.\r\n   */\r\n  public accept(suggestion: Suggestion): Promise<Reversion> | Promise<null> {\r\n    let _this = this;\r\n\r\n    // Selecting a suggestion or a reversion should both clear selection\r\n    // and clear the reversion-displaying state of the banner.\r\n    this.selected = null;\r\n    this.doRevert = false;\r\n\r\n    this.revertAcceptancePromise = this.acceptInternal(suggestion);\r\n    if(!this.revertAcceptancePromise) {\r\n      // We get here either if suggestion acceptance fails or if it was a reversion.\r\n      if(suggestion && suggestion.tag == 'revert') {\r\n        // Reversion state management\r\n        this.recentAcceptCause = null;\r\n        this.recentRevert = true;\r\n      }\r\n\r\n      return Promise.resolve(null);\r\n    }\r\n\r\n    this.revertAcceptancePromise.then(function(suggestion) {\r\n      // Always null-check!\r\n      if(suggestion) {\r\n        _this.revertSuggestion = suggestion;\r\n      }\r\n    });\r\n\r\n    // By default, we assume we were triggered by the banner.\r\n    // Acceptance by keystroke will overwrite this later (in `tryAccept`)\r\n    this.recentAcceptCause = 'banner';\r\n    this.recentRevert = false;\r\n\r\n    this.swallowPrediction = true;\r\n\r\n    return this.revertAcceptancePromise;\r\n  }\r\n\r\n  private showRevert() {\r\n    // Construct a 'revert suggestion' to facilitate a reversion UI component.\r\n    this.doRevert = true;\r\n    this.sendUpdateEvent();\r\n  }\r\n\r\n  /**\r\n   * Receives messages from the keyboard that the 'accept' keystroke has been entered.\r\n   * Should return 'false' if the current state allows accepting a suggestion and act accordingly.\r\n   * Otherwise, return true.\r\n   */\r\n  private doTryAccept = (source: string, returnObj: {shouldSwallow: boolean}): void => {\r\n    const recentAcceptCause = this.recentAcceptCause;\r\n\r\n    if(!recentAcceptCause && this.selected) {\r\n      this.accept(this.selected);\r\n      // If there is right-context, DO emit the space instead of swallowing it.\r\n      // It's not auto-added by the predictive-text worker for such cases.\r\n      returnObj.shouldSwallow = !this.currentTarget.getTextAfterCaret();\r\n\r\n      // doTryAccept is the path for keystroke-based auto-acceptance.\r\n      // Overwrite the cause to reflect this.\r\n      this.recentAcceptCause = 'key';\r\n    } else if(recentAcceptCause && source == 'space') {\r\n      this.recentAcceptCause = null;\r\n      if(recentAcceptCause == 'key') {\r\n        // No need to swallow the keystroke's whitespace; we triggered the prior acceptance\r\n        // FROM a space, so we've already aliased the suggestion's built-in space.\r\n        returnObj.shouldSwallow = false;\r\n        return;\r\n      }\r\n\r\n      // Standard whitespace applications from the banner, those we DO want to\r\n      // swallow the first time.\r\n      //\r\n      // If the model doesn't insert wordbreaks, there's no space to alias, so\r\n      // don't swallow the space.  If it does, we consider that insertion to be\r\n      // the results of the first post-accept space.\r\n      returnObj.shouldSwallow = !!this.langProcessor.wordbreaksAfterSuggestions && !this.currentTarget.getTextAfterCaret();; // can be handed outside\r\n    } else {\r\n      returnObj.shouldSwallow = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Receives messages from the keyboard that the 'revert' keystroke has been entered.\r\n   * Should return 'false' if the current state allows reverting a recently-applied suggestion and act accordingly.\r\n   * Otherwise, return true.\r\n   */\r\n  private doTryRevert = (/*returnObj: {shouldSwallow: boolean}*/): void => {\r\n    // Has the revert keystroke (BKSP) already been sent once since the last accept?\r\n    if(this.doRevert) {\r\n      // If so, clear the 'revert' option and start doing normal predictions again.\r\n      this.doRevert = false;\r\n      this.recentAcceptCause = null;\r\n      // Otherwise, did we just accept something before the revert signal was received?\r\n    } else if(this.recentAcceptCause) {\r\n      this.showRevert();\r\n      this.swallowPrediction = true;\r\n    }\r\n\r\n    // // We don't yet actually do key-based reversions.\r\n    // returnObj.shouldSwallow = false;\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Function invalidateSuggestions\r\n   * Scope        Public\r\n   * Description  Clears the suggestions in the suggestion banner\r\n   */\r\n  private invalidateSuggestions = (source: InvalidateSourceEnum): void => {\r\n    // By default, we assume that the context is the same until we notice otherwise.\r\n    this.initNewContext = false;\r\n    this.selected = null;\r\n\r\n    if(!this.swallowPrediction || source == 'context') {\r\n      this.recentAcceptCause = null;\r\n      this.doRevert = false;\r\n      this.recentRevert = false;\r\n\r\n      if(source == 'context') {\r\n        this.swallowPrediction = false;\r\n        this.initNewContext = true;\r\n      }\r\n    }\r\n\r\n    // Not checking this can result in a perceptible 'flash' of sorts due to the suggestion-update delay.\r\n    if(source != 'new') {\r\n      this.clearSuggestions();\r\n      // this.options.forEach((option: BannerSuggestion) => {\r\n      //   option.update(null);\r\n      // });\r\n    }\r\n  }\r\n\r\n  private clearSuggestions() {\r\n    this.updateSuggestions({\r\n      suggestions: [],\r\n      transcriptionID: 0\r\n    });\r\n  }\r\n\r\n  private activateKeep(): boolean {\r\n    return !this.recentAcceptCause && !this.recentRevert && !this.initNewContext;\r\n  }\r\n\r\n  /**\r\n   * Function updateSuggestions\r\n   * Scope       Public\r\n   * @param {Suggestion[]}  suggestions   Array of suggestions from the lexical model.\r\n   * Description    Update the displayed suggestions in the SuggestionBanner\r\n   */\r\n  private updateSuggestions = (prediction: ReadySuggestions): void => {\r\n    let suggestions = prediction.suggestions;\r\n\r\n    this._currentSuggestions = suggestions;\r\n    this.selected = null;\r\n\r\n    // Do we have a keep suggestion?  If so, remove it from the list so that we can control its display position\r\n    // and prevent it from being hidden after reversion operations.\r\n    this.keepSuggestion = null;\r\n    for (let s of suggestions) {\r\n      if(s.tag == 'keep') {\r\n        this.keepSuggestion = s as Keep;\r\n      }\r\n\r\n      if(s.autoAccept && !this.selected) {\r\n        this.selected = s;\r\n      }\r\n    }\r\n\r\n    if(this.keepSuggestion) {\r\n      this._currentSuggestions.splice(this._currentSuggestions.indexOf(this.keepSuggestion), 1);\r\n    }\r\n\r\n    // If we've gotten an update request like this, it's almost always user-triggered and means the context has shifted.\r\n    if(!this.swallowPrediction) {\r\n      this.recentAcceptCause = null;\r\n      this.doRevert = false;\r\n      this.recentRevert = false;\r\n    } else { // This prediction was triggered by a recent 'accept.'  Now that it's fulfilled, we clear the flag.\r\n      this.swallowPrediction = false;\r\n    }\r\n\r\n    // The rest is the same, whether from input or from \"self-updating\" after a reversion to provide new suggestions.\r\n    this.sendUpdateEvent();\r\n  }\r\n\r\n  public sendUpdateEvent() {\r\n    this.emit('update', this.currentSuggestions);\r\n  }\r\n\r\n  public resetContext(): Promise<Suggestion[]> {\r\n    const target = this.currentTarget;\r\n\r\n    if(target) {\r\n      // Note:  should be triggered after the corresponding new-context event rule has been processed,\r\n      // as that may affect the value of layerId here.\r\n      return this.langProcessor.invalidateContext(target, this.getLayerId());\r\n    } else {\r\n      return Promise.resolve([]);\r\n    }\r\n  }\r\n\r\n  private onModelStateChange: StateChangeHandler = (state) => {\r\n    // Either way, the model has changed; either state marks the completion of such a transition.\r\n    // The 'active' state displays the banner while a model loads... but its predictions are\r\n    // only possible once fully 'configured'.  They may appear to 'blink on' after a small delay\r\n    // as a result.\r\n    if(state == 'configured' || state == 'inactive') {\r\n      this.resetContext();\r\n    }\r\n  }\r\n}",
    "import { DeviceSpec } from \"@keymanapp/web-utils\";\r\n\r\n/*\r\n * This file is intended for CSS-styling constants that see use with the OSK.\r\n */\r\n\r\n/**\r\n * Defines device-level constants used for CSS styling.\r\n */\r\nexport default class StyleConstants {\r\n  constructor(device: DeviceSpec) {\r\n    // popupCanvasBackgroundColor\r\n    if(device.OS == DeviceSpec.OperatingSystem.Android) {\r\n      this.popupCanvasBackgroundColor = '#999';\r\n    } else {\r\n      this.popupCanvasBackgroundColor = StyleConstants.prefersDarkMode() ? '#0f1319' : '#ffffff';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks is a user's browser is in dark mode, if the feature is supported.  Returns false otherwise.\r\n   *\r\n   * Thanks to https://stackoverflow.com/a/57795518 for this code.\r\n   */\r\n    static prefersDarkMode(): boolean {\r\n    // Ensure the detector exists (otherwise, returns false)\r\n    return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n  }\r\n\r\n  public readonly popupCanvasBackgroundColor: string;\r\n}",
    "/*\r\n * Keyman is copyright (C) SIL International. MIT License.\r\n *\r\n * Detect the user's device.\r\n */\r\nimport StyleConstants from './utils/styleConstants.js';\r\nimport { DeviceSpec, Version } from \"@keymanapp/web-utils\";\r\n\r\nexport class DeviceDetector {\r\n  // These correspond directly to the properties & parameters for `DeviceSpec`.\r\n  touchable: boolean;\r\n  OS: string;\r\n  formFactor: string;\r\n  browser: string;\r\n\r\n  // These components aren't needed for key events.  All but `version` could be a sort\r\n  // of `DeviceStyle`.\r\n  dyPortrait: number;   // Its value is only referenced by an unused method.\r\n  dyLandscape: number;  // Its value is only referenced by an unused method.\r\n  orientation: string|number; // Appears to be unused as well?\r\n  colorScheme: 'light' | 'dark';  // Also unused?\r\n  version: string;  // As in, device version; only really persisted for Android.\r\n                    // No real sign of actual use, though.\r\n\r\n  // Generates a default Device value.\r\n  constructor() {\r\n    this.touchable = !!('ontouchstart' in window);\r\n    this.OS = '';\r\n    this.formFactor='desktop';\r\n    this.browser='';\r\n\r\n    this.dyPortrait=0;\r\n    this.dyLandscape=0;\r\n    this.version='0';\r\n    this.orientation=window.orientation;\r\n  }\r\n\r\n  /**\r\n   * Get device horizontal DPI for touch devices, to set actual size of active regions\r\n   * Note that the actual physical DPI may be somewhat different.\r\n   *\r\n   * @return      {number}\r\n   */\r\n  getDPI(): number {\r\n    var t=document.createElement('DIV') ,s=t.style,dpi=96;\r\n    if(document.readyState !== 'complete') {\r\n      return dpi;\r\n    }\r\n\r\n    t.id='calculateDPI';\r\n    s.position='absolute'; s.display='block';s.visibility='hidden';\r\n    s.left='10px'; s.top='10px'; s.width='1in'; s.height='10px';\r\n    document.body.appendChild(t);\r\n    dpi=(typeof window.devicePixelRatio == 'undefined') ? t.offsetWidth : t.offsetWidth * window.devicePixelRatio;\r\n    document.body.removeChild(t);\r\n    return dpi;\r\n  }\r\n\r\n  detect() : DeviceSpec {\r\n    var possMacSpoof = false;\r\n\r\n    if(navigator && navigator.userAgent) {\r\n      var agent=navigator.userAgent;\r\n\r\n      if(agent.indexOf('iPad') >= 0) {\r\n        this.OS='iOS';\r\n        this.formFactor='tablet';\r\n        this.dyPortrait=this.dyLandscape=0;\r\n      } else if(agent.indexOf('iPhone') >= 0) {\r\n        this.OS='iOS';\r\n        this.formFactor='phone';\r\n        this.dyPortrait=this.dyLandscape=25;\r\n      } else if(agent.indexOf('Android') >= 0) {\r\n        this.OS='Android';\r\n        this.formFactor='phone';    // form factor may be redefined on initialization\r\n        this.dyPortrait=75;\r\n        this.dyLandscape=25;\r\n        try {\r\n          var rx=new RegExp(\"(?:Android\\\\s+)(\\\\d+\\\\.\\\\d+\\\\.\\\\d+)\");\r\n          this.version=agent.match(rx)[1];\r\n        } catch(ex) {}\r\n      } else if(agent.indexOf('Linux') >= 0) {\r\n        this.OS='Linux';\r\n      } else if(agent.indexOf('Macintosh') >= 0) {\r\n        // Starting with 13.1, \"Macintosh\" can reflect iPads (by default) or iPhones\r\n        // (by user setting); a new \"Request Desktop Website\" setting for Safari will\r\n        // change the user agent string to match a desktop Mac.\r\n        //\r\n        // Firefox uses '.' between version components, while Chrome and Safari use\r\n        // '_' instead.  So, we have to check for both.  Yay.\r\n        let regex = /Intel Mac OS X (\\d+(?:[_\\.]\\d+)+)/i;\r\n        let results = regex.exec(agent);\r\n\r\n        // Match result:  a version string with components separated by underscores.\r\n        if(!results) {\r\n          console.warn(\"KMW could not properly parse the user agent string.\"\r\n            + \"A suboptimal keyboard layout may result.\");\r\n          this.OS='MacOSX';\r\n        } else if(results.length > 1 && results[1]) {\r\n          // Convert version string into a usable form.\r\n          let versionString = results[1].replace('_', '.');\r\n          let version = new Version(versionString);\r\n\r\n          possMacSpoof = Version.MAC_POSSIBLE_IPAD_ALIAS.compareTo(version) <= 0;\r\n          this.OS='MacOSX';\r\n        }\r\n      } else if(agent.indexOf('Windows NT') >= 0) {\r\n        this.OS='Windows';\r\n        if(agent.indexOf('Touch') >= 0) {\r\n          this.formFactor='phone';   // will be redefined as tablet if resolution high enough\r\n        }\r\n\r\n        // Windows Phone and Tablet PC\r\n        if(typeof (<any>navigator).msMaxTouchPoints == 'number' && (<any>navigator).msMaxTouchPoints > 0) {\r\n          this.touchable=true;\r\n        }\r\n      }\r\n    }\r\n\r\n    // We look at the screen resolution for Android, because we can't tell from\r\n    // the user agent string whether or not this is supposed to be a tablet.\r\n    // It seems that there are a handful of older phones out there that report a\r\n    // higher resolution than 700px*___px, but it is proving hard to test these,\r\n    // and the majority have an aspect ratio <= 0.5625 anyway.\r\n    // But we trust what iOS tells us for phone vs tablet.\r\n\r\n    const dimMin = Math.min(screen.width,screen.height), dimMax = Math.max(screen.width,screen.height);\r\n    const aspect = dimMin / dimMax;\r\n\r\n    if(this.OS != 'iOS' &&\r\n        this.formFactor == 'phone' &&\r\n        ((dimMin >= 600 && aspect > 0.5625) || // 0.5625 -> 1920x1080 is common phone res\r\n        (aspect >= 0.625)) // all reported devices with aspect >= 0.625 are tablets per https://screensiz.es/\r\n      ) {\r\n      this.formFactor='tablet';\r\n    }\r\n\r\n    // Test for potential Chrome emulation on Windows or macOS X (used only in next if-check)\r\n    let possibleChromeEmulation = navigator.platform == 'Win32' || navigator.platform == 'MacIntel'\r\n\r\n    //                           alert(sxx+'->'+device.formFactor);\r\n    // Check for phony iOS devices (but don't undo for Chrome emulation used during development)\r\n    if(this.OS == 'iOS' && !('ongesturestart' in window) && !possibleChromeEmulation) {\r\n      this.OS='Android';\r\n    }\r\n\r\n    // Determine application or browser\r\n    this.browser='web';\r\n    if(this.OS == 'iOS' || this.OS.toLowerCase() == 'macosx') {\r\n      this.browser='safari';\r\n    }\r\n\r\n    var bMatch=/Firefox|Chrome|OPR|Safari|Edge/;\r\n    if(bMatch.test(navigator.userAgent)) {\r\n      if((navigator.userAgent.indexOf('Firefox') >= 0) && ('onmozorientationchange' in screen)) {\r\n        this.browser='firefox';\r\n      } else if(navigator.userAgent.indexOf('OPR') >= 0) {\r\n        this.browser='opera';\r\n      } else if(navigator.userAgent.indexOf(' Edge/') >= 0) {\r\n        // Edge is too common a word, so test for Edge/ :)\r\n        // Must come before Chrome and Safari test because\r\n        // Edge pretends to be both\r\n        this.browser='edge';\r\n      } else if(navigator.userAgent.indexOf('Chrome') >= 0) {\r\n        // This test must come before Safari test because on macOS,\r\n        // Chrome also reports \"Safari\"\r\n        this.browser='chrome';\r\n      } else if(navigator.userAgent.indexOf('Safari') >= 0) {\r\n        this.browser='safari';\r\n      }\r\n    }\r\n\r\n    if(possMacSpoof && this.browser == 'safari') {\r\n      // Indistinguishable user agent string!  We need a different test; fortunately, true macOS\r\n      // Safari doesn't support TouchEvents.  (Chrome does, though!  Hence the filter above.)\r\n      if(window['TouchEvent']) {\r\n        this.OS='iOS';\r\n        this.formFactor='tablet';\r\n        this.dyPortrait=this.dyLandscape=0;\r\n\r\n        // It's currently impossible to differentiate between iPhone and iPad here\r\n        // except for by screen dimensions.\r\n        let aspectRatio = screen.height / screen.width;\r\n        if(aspectRatio < 1) {\r\n          aspectRatio = 1 / aspectRatio;\r\n        }\r\n\r\n        // iPhones usually have a ratio of 16:9 (or 1.778) or higher, while iPads use 4:3 (or 1.333)\r\n        if(aspectRatio > 1.6) {\r\n          // Override - we'll treat this device as an iPhone.\r\n          this.formFactor = 'phone';\r\n          this.dyPortrait=this.dyLandscape=25;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.colorScheme = StyleConstants.prefersDarkMode() ? 'dark' : 'light';\r\n\r\n    return this.coreSpec;\r\n  }\r\n\r\n  /**\r\n   * Returns a slimmer, web-core compatible version of this object.\r\n   */\r\n  public get coreSpec(): DeviceSpec {\r\n    return new DeviceSpec(this.browser, this.formFactor, this.OS, this.touchable);\r\n  }\r\n}\r\n",
    "import { EventEmitter } from \"eventemitter3\";\r\n\r\nimport { DeviceSpec, KeyboardProperties, ManagedPromise, physicalKeyDeviceAlias, SpacebarText } from \"keyman/engine/keyboard\";\r\nimport { OutputTarget, RuleBehavior } from 'keyman/engine/js-processor';\r\nimport { PathConfiguration, PathOptionDefaults, PathOptionSpec } from \"keyman/engine/interfaces\";\r\nimport { DeviceDetector } from \"./headless/deviceDetector.js\";\r\nimport { KeyboardStub } from \"keyman/engine/keyboard-storage\";\r\n\r\ninterface EventMap {\r\n  'spacebartext': (mode: SpacebarText) => void;\r\n}\r\n\r\nexport class EngineConfiguration extends EventEmitter<EventMap> {\r\n  // The app/webview path replaces this during init, but we expect to have something set for this\r\n  // during engine construction, which occurs earlier.  So no `readonly`, sadly.\r\n  //\r\n  // May also be manipulated by Developer's debug-host?\r\n  public hostDevice: DeviceSpec;\r\n  readonly sourcePath: string;\r\n  readonly deferForInitialization: ManagedPromise<void>;\r\n\r\n  private _paths: PathConfiguration;\r\n  public activateFirstKeyboard: boolean;\r\n  private _spacebarText: SpacebarText;\r\n  private _stubNamespacer?: (stub: KeyboardStub) => void;\r\n\r\n  public applyCacheBusting: boolean = false;\r\n\r\n  // sourcePath:  see `var sPath =` in kmwbase.ts.  It is not obtainable headlessly.\r\n  constructor(sourcePath: string, device?: DeviceSpec) {\r\n    super();\r\n\r\n    if(!device) {\r\n      const deviceDetector = new DeviceDetector();\r\n      deviceDetector.detect();\r\n\r\n      device = deviceDetector.coreSpec;\r\n    }\r\n\r\n    this.sourcePath = sourcePath;\r\n    this.hostDevice = device;\r\n    this.deferForInitialization = new ManagedPromise<void>();\r\n  }\r\n\r\n  initialize(options: Required<InitOptionSpec>) {\r\n    if(!this._paths) {\r\n      this._paths = new PathConfiguration(options, this.sourcePath);\r\n    } else {\r\n      this._paths.updateFromOptions(options);\r\n    }\r\n\r\n    if(typeof options.setActiveOnRegister == 'boolean') {\r\n      this.activateFirstKeyboard = options.setActiveOnRegister;\r\n    } else {\r\n      this.activateFirstKeyboard = true;\r\n    }\r\n\r\n    this._spacebarText = options.spacebarText;\r\n\r\n    // Make sure this is accessible to stubs for use in generating display names!\r\n    KeyboardProperties.spacebarTextMode = () => this.spacebarText;\r\n  }\r\n\r\n  finalizeInit() {\r\n    this.deferForInitialization.resolve();\r\n  }\r\n\r\n  get paths() {\r\n    return this._paths;\r\n  }\r\n\r\n  get spacebarText() {\r\n    return this._spacebarText;\r\n  }\r\n\r\n  set spacebarText(value: SpacebarText) {\r\n    if(this._spacebarText != value) {\r\n      this._spacebarText = value;\r\n      this.emit('spacebartext', value);\r\n    }\r\n  }\r\n\r\n  get softDevice(): DeviceSpec {\r\n    return this.hostDevice;\r\n  }\r\n\r\n  get hardDevice(): DeviceSpec {\r\n    return physicalKeyDeviceAlias(this.hostDevice);\r\n  }\r\n\r\n  get stubNamespacer() {\r\n    return this._stubNamespacer;\r\n  }\r\n\r\n  set stubNamespacer(functor: (stub: KeyboardStub) => void) {\r\n    this._stubNamespacer = functor;\r\n  }\r\n\r\n  debugReport(): Record<string, any> {\r\n    return {\r\n      hostDevice: this.hostDevice,\r\n      initialized: this.deferForInitialization.isResolved\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Facilitates implementation of additional functionality for finalized keystroke-event rules\r\n   * after postKeystroke takes effect.  Any behaviors defined here should be considered 'readonly' in\r\n   * terms of context and should instead facilitate integration with the engine's host platform.\r\n   * @param ruleBehavior  The full effects of keystroke + postkeystroke rules from a processed keystroke.\r\n   * @param outputTarget  The engine's current source for context\r\n   */\r\n  onRuleFinalization(ruleBehavior: RuleBehavior, outputTarget: OutputTarget) {};\r\n}\r\n\r\nexport interface InitOptionSpec extends PathOptionSpec {\r\n  /**\r\n   * If set to true || \"true\" or if left undefined, the engine will automatically select the first available\r\n   * keyboard for activation.\r\n   *\r\n   * Note that keyboards specified locally are synchronously loaded while cloud keyboards are async; as a\r\n   * result, a locally-specified keyboard will generally be available \"sooner\", even if added \"later\".\r\n   */\r\n  setActiveOnRegister?: boolean;\r\n\r\n  /**\r\n   * Determines the default text shown on the spacebar.  If undefined, uses `LANGUAGE_KEYBOARD`\r\n   */\r\n  spacebarText?: SpacebarText;\r\n}\r\n\r\nexport const InitOptionDefaults: Required<InitOptionSpec> = {\r\n  setActiveOnRegister: true,  // only needed for browser?\r\n  spacebarText: SpacebarText.LANGUAGE_KEYBOARD,  // useful in both, for OSK config.\r\n  ...PathOptionDefaults\r\n}",
    "import { EventEmitter } from 'eventemitter3';\r\nimport { ManagedPromise, type Keyboard } from 'keyman/engine/keyboard';\r\nimport { type KeyboardInterface, type OutputTarget } from 'keyman/engine/js-processor';\r\nimport { StubAndKeyboardCache, type KeyboardStub } from 'keyman/engine/keyboard-storage';\r\nimport { PredictionContext } from 'keyman/engine/interfaces';\r\nimport { EngineConfiguration } from './engineConfiguration.js';\r\n\r\ninterface EventMap {\r\n  // target, then keyboard.\r\n  'targetchange': (target: OutputTarget) => boolean;\r\n\r\n  /**\r\n   * This event is raised whenever a keyboard change is requested.\r\n   *\r\n   * Note that if the keyboard has not been previously loaded, this event will be raised twice.\r\n   * 1. Before the keyboard is loaded into Keyman Engine for Web.\r\n   * 2. Once the keyboard is loaded, but before it is activated.\r\n   * @param metadata     The to-be-activated keyboard's properties\r\n   * @returns\r\n   */\r\n  'beforekeyboardchange': (metadata: KeyboardStub) => void;\r\n\r\n  /**\r\n   * This event is raised whenever an activating keyboard is being loaded into Keyman Engine for\r\n   * the first time in the user's current session, which is an asynchronous operation.  It is called\r\n   * once the async request is initiated.\r\n   * @param metadata  The registered properties for the keyboard being asynchronously loaded\r\n   * @param onload    A Promise that resolves with `null` when loading successfully completes or\r\n   *                  with an `error` if it fails.\r\n   * @returns\r\n   */\r\n  'keyboardasyncload': (metadata: KeyboardStub, onload: Promise<Error>) => void;\r\n\r\n  /**\r\n   * This event is raised whenever a keyboard is fully activated and set as the current active\r\n   * keyboard within Keyman Engine for Web.\r\n   * @param kbd\r\n   * @returns\r\n   */\r\n  'keyboardchange': (kbd: {keyboard: Keyboard, metadata: KeyboardStub}) => void;\r\n}\r\n\r\nexport interface ContextManagerConfiguration {\r\n  /**\r\n   * A function that resets any state-dependent keyboard key-state information such as\r\n   * emulated modifier state and layer id.  Also purges the context cache.\r\n   * If an `outputTarget` is specified, it will also trigger new-context rule processing.\r\n   *\r\n   * Does not reset option-stores, variable-stores, etc.\r\n   */\r\n  readonly resetContext: (outputTarget?: OutputTarget) => void;\r\n\r\n  /**\r\n   * A predictive-state management object that interfaces the predictive-text banner\r\n   * with the active context.\r\n   */\r\n  readonly predictionContext: PredictionContext;\r\n\r\n  /**\r\n   * The stub & keyboard curation cache holding preloaded keyboards and metadata useable\r\n   * to load those not yet loaded.\r\n   */\r\n  readonly keyboardCache: StubAndKeyboardCache;\r\n}\r\n\r\ninterface PendingActivation {\r\n  target: OutputTarget,\r\n  keyboard: Promise<Keyboard>,\r\n  stub: KeyboardStub;\r\n}\r\n\r\nexport abstract class ContextManagerBase<MainConfig extends EngineConfiguration> extends EventEmitter<EventMap> {\r\n  public static readonly TIMEOUT_THRESHOLD = 10000;\r\n\r\n  abstract initialize(): void;\r\n\r\n  abstract get activeTarget(): OutputTarget;\r\n\r\n  private _predictionContext: PredictionContext;\r\n  protected keyboardCache: StubAndKeyboardCache;\r\n  private _resetContext: (outputTarget?: OutputTarget) => void;\r\n\r\n  private pendingActivations: PendingActivation[] = [];\r\n  protected engineConfig: MainConfig;\r\n\r\n  get predictionContext(): PredictionContext {\r\n    return this._predictionContext;\r\n  }\r\n\r\n  constructor(engineConfig: MainConfig) {\r\n    super();\r\n\r\n    this.engineConfig = engineConfig;\r\n  }\r\n\r\n  configure(config: ContextManagerConfiguration) {\r\n    this._resetContext = config.resetContext;\r\n    this._predictionContext = config.predictionContext;\r\n    this.keyboardCache = config.keyboardCache;\r\n  }\r\n\r\n  insertText(kbdInterface: KeyboardInterface, Ptext: string, PdeadKey: number) {\r\n    // Find the correct output target to manipulate.\r\n    const outputTarget = this.activeTarget;\r\n\r\n    if(outputTarget != null) {\r\n      if(Ptext != null) {\r\n        kbdInterface.output(0, outputTarget, Ptext);\r\n      }\r\n\r\n      if((typeof(PdeadKey)!=='undefined') && (PdeadKey !== null)) {\r\n        kbdInterface.deadkeyOutput(0, outputTarget, PdeadKey);\r\n      }\r\n\r\n      outputTarget.invalidateSelection();\r\n\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  resetContext() {\r\n    this._resetContext(this.activeTarget);\r\n    this.predictionContext.resetContext();\r\n  }\r\n\r\n  abstract get activeKeyboard(): {keyboard: Keyboard, metadata: KeyboardStub};\r\n\r\n  /**\r\n   * Determines the 'target' currently used to determine which keyboard should be active.\r\n   * When `null`, keyboard-activation operations will affect the global default; otherwise,\r\n   * such operations affect only the specified `target`.\r\n   *\r\n   * This method exists to facilitate independent-keyboard mode operations for specific\r\n   * attached elements within the app/browser target.  For `app/webview`, this should\r\n   * always return a consistent value - likely, `null`.\r\n   */\r\n  protected abstract currentKeyboardSrcTarget(): OutputTarget;\r\n\r\n  /**\r\n   * Ensures that newly activated keyboards are set correctly within managed context, possibly\r\n   * against inactive output targets.\r\n   * @param kbd\r\n   * @param target\r\n   */\r\n  protected abstract activateKeyboardForTarget(kbd: {keyboard: Keyboard, metadata: KeyboardStub}, target: OutputTarget): void;\r\n\r\n  /**\r\n   * Checks the pending keyboard-activation array for an entry corresponding to the specified\r\n   * OutputTarget.  If found, also removes the entry for bookkeeping purposes.\r\n   * @param target  The specific OutputTarget affected by the pending Keyboard activation.\r\n   *                May be `null`, which corresponds to the global default Keyboard.\r\n   * @returns `true` if pending activation is still valid, `false` otherwise.\r\n   */\r\n  private findAndPopActivation(target: OutputTarget): PendingActivation {\r\n    // Array.findIndex requires Chrome 45+. :(\r\n    let activationIndex;\r\n    for(activationIndex = 0; activationIndex < this.pendingActivations.length; activationIndex++) {\r\n      if(this.pendingActivations[activationIndex].target == target) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if(activationIndex == this.pendingActivations.length) {\r\n      return null;\r\n    }\r\n\r\n    return this.pendingActivations.splice(activationIndex, 1)[0];\r\n  }\r\n\r\n  /**\r\n   * Internally registers a pending keyboard-activation's properties, only resolving to a non-null\r\n   * activation if it is still the most recent keyboard-activation request that would affect the\r\n   * corresponding context.\r\n   * @param kbdPromise\r\n   * @param metadata\r\n   * @param target\r\n   * @returns\r\n   */\r\n  protected async deferredKeyboardActivation(\r\n    kbdPromise: Promise<Keyboard>,\r\n    metadata: KeyboardStub,\r\n    target: OutputTarget\r\n  ): Promise<PendingActivation> {\r\n    const activation: PendingActivation = {\r\n      target: target,\r\n      keyboard: kbdPromise,\r\n      stub: metadata\r\n    };\r\n\r\n    // Invalidate existing requests for the specified target.\r\n    this.findAndPopActivation(target);\r\n    this.pendingActivations.push(activation);\r\n    await kbdPromise;\r\n\r\n    // The keyboard-load is complete; is the activation still desired?\r\n    const activationAfterAwait = this.findAndPopActivation(target);\r\n    if(activationAfterAwait == activation) {\r\n      return activation;\r\n    } else if(activationAfterAwait) {\r\n      // Restore the popped element; it doesn't match the current activation attempt.\r\n      this.pendingActivations.push(activationAfterAwait);\r\n      return null;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Specifies the keyboard id and the language code to use when a 'default' keyboard\r\n   * must be selected by the engine for fallback behaviors.\r\n   */\r\n  protected abstract getFallbackStubKey(): {\r\n    id: string,\r\n    langId: string\r\n  };\r\n\r\n  /**\r\n   * Change active keyboard to keyboard selected by (internal) name and language code\r\n   *\r\n   * Test if selected keyboard already loaded, and simply update active stub if so.\r\n   * Otherwise, insert a script to download and insert the keyboard from the repository\r\n   * or user-indicated file location.\r\n   *\r\n   * @param keyboardId\r\n   * @param languageCode\r\n   * @param saveCookie\r\n   * @returns\r\n   */\r\n  public async activateKeyboard(keyboardId: string, languageCode?: string, saveCookie?: boolean): Promise<boolean> {\r\n    // TODO:  relocate default keyboard behavior here once we can also move core error handling for\r\n    // unfound stubs here.\r\n    const wasNull = !this.activeKeyboard;\r\n\r\n    // If there was a previous activation attempt set and still active for the specified keyboard target,\r\n    // cancel it.  For exmaple, if the user selects a preloaded keyboard after having tried to select one\r\n    // still async-loading, we should go with the later setting - the preloaded one.\r\n    this.findAndPopActivation(this.currentKeyboardSrcTarget());\r\n\r\n    const activatingKeyboard = this.prepareKeyboardForActivation(keyboardId, languageCode);\r\n\r\n    const originalKeyboardTarget = this.currentKeyboardSrcTarget();\r\n\r\n    const keyboard = await activatingKeyboard.keyboard;\r\n    if(keyboard == null && activatingKeyboard.metadata) {\r\n      // The activation was async and was cancelled - either by `beforeKeyboardChange` first-pass\r\n      // cancellation or because a different keyboard was requested before completion of the async load.\r\n      return false;\r\n    }\r\n\r\n    /*\r\n     * Triggers `beforeKeyboardChange` event if the current context at the time when activation is possible\r\n     * would be affected by the requested keyboard change.\r\n     * - if a keyboard was asynchronously loaded for this...\r\n     *   - it is possible for the context (in app/browser) to have changed to a page element in\r\n     *     \"independent keyboard\" mode (or away from one)\r\n     *   - This is the \"second\" `beforeKeyboardChange` call - a loaded keyboard may now be activated.\r\n     *\r\n     * If the now-current context would be unaffected by the keyboard change, we do not raise the corresponding\r\n     * event.\r\n     */\r\n    if(this.currentKeyboardSrcTarget() == originalKeyboardTarget) {\r\n      this.emit('beforekeyboardchange', activatingKeyboard.metadata);\r\n    }\r\n\r\n    let kbdStubPair: { keyboard: Keyboard, metadata: KeyboardStub } = null;\r\n    if(keyboard) {\r\n      kbdStubPair = {\r\n        keyboard: keyboard,\r\n        metadata: activatingKeyboard.metadata\r\n      };\r\n    }\r\n\r\n    this.activateKeyboardForTarget(kbdStubPair, originalKeyboardTarget);\r\n\r\n    // Only trigger `keyboardchange` events when they will affect the active context.\r\n    // (!wasNull || !!keyboard) - blocks events for `null` -> `null` transitions.\r\n    // (keyman/keymanweb.com#96)\r\n    if(this.currentKeyboardSrcTarget() == originalKeyboardTarget && (!wasNull || !!keyboard)) {\r\n      // Will trigger KeymanEngine handler that passes keyboard to the OSK, displays it.\r\n      this.emit('keyboardchange', this.activeKeyboard);\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Based on the provided keyboard id and language code, selects and (if necessary) loads the\r\n   * corresponding keyboard but does not activate it.\r\n   *\r\n   * This acts as a helper to `activateKeyboard`, helping to centralize and DRY out the actual\r\n   * activation of the requested keyboard.  Note that it is a synchronous method and should stay\r\n   * that way, though it should return a `Promise` for the activating keyboard.\r\n   * @param keyboardId\r\n   * @param languageCode\r\n   * @returns\r\n   */\r\n  protected prepareKeyboardForActivation(\r\n    keyboardId: string,\r\n    languageCode?: string\r\n  ): {keyboard: Promise<Keyboard>, metadata: KeyboardStub} {\r\n    // Set default language code\r\n    languageCode ||= '';\r\n\r\n    // Check that the saved keyboard is currently registered\r\n    let requestedStub: KeyboardStub = null;\r\n    if(keyboardId) {\r\n      requestedStub = this.keyboardCache.getStub(keyboardId, languageCode);\r\n    } else {\r\n      languageCode == '';\r\n    }\r\n\r\n    if(!requestedStub) {\r\n      if(keyboardId) {\r\n        throw new Error(\"No matching stub has been registered.\");\r\n      } else {\r\n        return {\r\n          keyboard: Promise.resolve(null),\r\n          metadata: null\r\n        }\r\n      }\r\n    }\r\n\r\n    // Check if current keyboard matches requested keyboard, but not (necessarily) stub\r\n    if(this.activeKeyboard?.metadata && keyboardId == this.activeKeyboard.metadata.id) {\r\n      const keyboard = this.activeKeyboard.keyboard;\r\n      // In this case, the keyboard is loaded; just update the stub.\r\n\r\n      return {\r\n        keyboard: Promise.resolve(keyboard),\r\n        metadata: requestedStub\r\n      };\r\n    }\r\n\r\n    // Determine if the keyboard was previously loaded but is not active; use the cached, pre-loaded version if so.\r\n    let keyboard: Keyboard;\r\n    if(keyboard = this.keyboardCache.getKeyboardForStub(requestedStub)) {\r\n      return {\r\n        keyboard: Promise.resolve(keyboard),\r\n        metadata: requestedStub\r\n      };\r\n    } else {\r\n      // It's async time - the keyboard is not preloaded within the cache.  Use the stub's data to load it.\r\n\r\n      // `beforeKeyboardChange` - first call\r\n      this.emit('beforekeyboardchange', requestedStub);\r\n\r\n      const defermentPromise = this.engineConfig.deferForInitialization.then(() => {\r\n        // Provide a Promise for completion of the async load process.\r\n        const completionPromise = new ManagedPromise<Error>();\r\n        this.emit('keyboardasyncload', requestedStub, completionPromise.corePromise);\r\n\r\n        let keyboardPromise = this.keyboardCache.fetchKeyboardForStub(requestedStub);\r\n        let timeoutPromise = new Promise<Keyboard>((resolve, reject) => {\r\n          const timeoutMsg = `Sorry, the ${requestedStub.name} keyboard for ${requestedStub.langName} is not currently available.`;\r\n          window.setTimeout(() => reject(new Error(timeoutMsg)), ContextManagerBase.TIMEOUT_THRESHOLD);\r\n        });\r\n\r\n        let combinedPromise = Promise.race([keyboardPromise, timeoutPromise]);\r\n\r\n        // Ensure the async-load Promise completes properly.\r\n        combinedPromise.then(() => {\r\n          completionPromise.resolve(null);\r\n          // Prevent any 'unhandled Promise rejection' events that may otherwise occur from the timeout promise.\r\n          timeoutPromise.catch(() => {});\r\n        });\r\n        combinedPromise.catch((err) => {\r\n          completionPromise.resolve(err);\r\n          throw err;\r\n        });\r\n\r\n        return combinedPromise;\r\n      });\r\n\r\n      // Now the fun part:  note the original call's parameters as a pending activation.\r\n      let promise = this.deferredKeyboardActivation(defermentPromise, requestedStub, this.currentKeyboardSrcTarget());\r\n      return {\r\n        keyboard: promise.then(async (activation) => {\r\n          // Is the activation we requested still pending, or was it cancelled in favor of a\r\n          // different activation in some manner?\r\n          if(!activation) {\r\n            // If the user chose to load a different keyboard afterward that would affect the same\r\n            // output target, the activation is no longer valid.\r\n            return Promise.resolve(null);\r\n          } else {\r\n            return defermentPromise;\r\n          }\r\n        }),\r\n        metadata: requestedStub\r\n      }\r\n    }\r\n  }\r\n}",
    "import { EventEmitter } from \"eventemitter3\";\r\nimport { Keyboard, KeyMapping, KeyEvent, Codes } from \"keyman/engine/keyboard\";\r\nimport { type RuleBehavior } from 'keyman/engine/js-processor';\r\nimport { KeyEventSourceInterface } from 'keyman/engine/osk';\r\nimport { ModifierKeyConstants } from '@keymanapp/common-types';\r\n\r\ninterface EventMap {\r\n  /**\r\n   * Designed to pass key events off to any consuming modules/libraries.\r\n   */\r\n  'keyevent': (event: KeyEvent, callback?: (result: RuleBehavior, error?: Error) => void) => void\r\n}\r\n\r\nexport default class HardKeyboard extends EventEmitter<EventMap> implements KeyEventSourceInterface<EventMap> { }\r\n\r\nexport function processForMnemonicsAndLegacy(s: KeyEvent, activeKeyboard: Keyboard, baseLayout: string): KeyEvent {\r\n  // Mnemonic handling.\r\n  if(activeKeyboard && activeKeyboard.isMnemonic) {\r\n    // The following will never set a code corresponding to a modifier key, so it's fine to do this,\r\n    // which may change the value of Lcode, here.\r\n\r\n    s.setMnemonicCode(!!(s.Lmodifiers & ModifierKeyConstants.K_SHIFTFLAG), !!(s.Lmodifiers & ModifierKeyConstants.CAPITALFLAG));\r\n  }\r\n\r\n  // Other minor physical-keyboard adjustments\r\n  if(activeKeyboard && !activeKeyboard.isMnemonic) {\r\n    // Positional Layout\r\n\r\n    /* 13/03/2007 MCD: Swedish: Start mapping of keystroke to US keyboard */\r\n    var Lbase = KeyMapping.languageMap[baseLayout];\r\n    if(Lbase && Lbase['k'+s.Lcode]) {\r\n      s.Lcode=Lbase['k'+s.Lcode];\r\n    }\r\n    /* 13/03/2007 MCD: Swedish: End mapping of keystroke to US keyboard */\r\n\r\n    // The second conditional component (re 0x60):  if CTRL or ALT is held down...\r\n    // Do not remap for legacy keyboard compatibility, do not pass Go, do not collect $200.\r\n    // This effectively only permits `default` and `shift` for legacy keyboards.\r\n    //\r\n    // Third:  DO, however, track direct presses of any main modifier key.  The OSK should\r\n    // reflect the current modifier state even for legacy keyboards.\r\n    if(!activeKeyboard.definesPositionalOrMnemonic &&\r\n       !(s.Lmodifiers & Codes.modifierBitmasks.NON_LEGACY) &&\r\n       !s.isModifier) {\r\n      // Support version 1.0 KeymanWeb keyboards that do not define positional vs mnemonic\r\n      s = new KeyEvent({\r\n        Lcode: KeyMapping._USKeyCodeToCharCode(s),\r\n        Lmodifiers: 0,\r\n        LisVirtualKey: false,\r\n        vkCode: s.Lcode, // Helps to merge OSK and physical keystroke control paths.\r\n        Lstates: s.Lstates,\r\n        kName: '',\r\n        device: s.device,\r\n        isSynthetic: false\r\n      });\r\n    }\r\n  }\r\n\r\n  return s;\r\n}\r\n// Intended design:\r\n// - KeyEventKeyboard:  website-integrated handler for hardware-keystroke input; interprets DOM events.\r\n//   - app/web\r\n// - AppPassthroughKeyboard:  WebView-hosted forwarding of hardware key events through to the Web engine.\r\n//   - app/embed",
    "import { Uni_IsSurrogate1, Uni_IsSurrogate2 } from '@keymanapp/common-types';\r\n\r\n/**\r\n * Returns the index for the code point divergence point between two strings, as measured in code\r\n * unit coordinates.\r\n * @param str1\r\n * @param str2\r\n * @param commonSuffix If false, asserts a common prefix to the strings.  If true, asserts a common suffix.\r\n * @returns The code unit index within `str1` for the start of the code point not common to both.\r\n *\r\n * Follows the convention of (start, end) substring parameterizations having 'end' be exclusive.\r\n */\r\nexport function findCommonSubstringEndIndex(str1: string, str2: string, commonSuffix: boolean): number {\r\n  /**\r\n   * The maximum number of iterations to consider; exceeding this would go past a string boundary.\r\n   */\r\n  const maxInterval = Math.min(str1.length, str2.length);\r\n\r\n  /**\r\n   * The first valid index within the string.\r\n   */\r\n  let start: number;\r\n\r\n  /**\r\n   * The current index within the string under consideration as the divergence point.\r\n   */\r\n  let index: number;\r\n\r\n  /**\r\n   * The index at which to terminate the search for a divergence point.\r\n   */\r\n  let end: number;\r\n\r\n  /**\r\n   * Index shift per loop iteration.\r\n   */\r\n  let inc: number;\r\n\r\n  /**\r\n   * Difference in index for comparison between strings.\r\n   * Mostly matters when assuming a common right-hand side.\r\n   */\r\n  let offset: number;\r\n\r\n  if(commonSuffix) {\r\n    start = index = str1.length - 1; // e.g. str.length == 10 => start = 9.\r\n    end = index - maxInterval;       // e.g. maxInterval 8, start 9 => iterate from 9 to 2, end at 1.\r\n    inc = -1;\r\n    offset = str2.length - str1.length;\r\n  } else {\r\n    start = index = 0;\r\n    end = maxInterval; // last valid index: - 1.  e.g. maxInterval 8 => iterate from 0 to 7, end at 8.\r\n    inc = 1;\r\n    offset = 0;\r\n  }\r\n\r\n  // Step 1: Find the index for the first code unit different between the strings.\r\n  for(; index != end; index += inc) {\r\n    if(str1.charAt(index) != str2.charAt(index + offset)) {\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Step 2:  Ensure that we're not splitting a surrogate pair.\r\n\r\n  // `index` corresponds to the first char that is different _in the direction indicated by inc_.\r\n  // If it's the start position, it can't split a (completed) surrogate pair.\r\n  if(index != start && index != end) {\r\n    // if commonLeft, high surrogate; if commonRight, low surrogate.\r\n    const commonPotentialSurrogate = str1.charCodeAt(index - inc);\r\n    // Opposite surrogate type from the previous variable.\r\n    const divergentChar1 = str1.charCodeAt(index);\r\n    const divergentChar2 = str2.charCodeAt(index + offset);\r\n\r\n    const commonSurrogateChecker = commonSuffix ? Uni_IsSurrogate2 : Uni_IsSurrogate1;\r\n    const divergentSurrogateChecker = commonSuffix ? Uni_IsSurrogate1 : Uni_IsSurrogate2;\r\n\r\n    // If the last common character if of the direction-appropriate surrogate type (for\r\n    // comprising a potential split surrogate pair representing a non-BMP char)...\r\n    if(commonSurrogateChecker(commonPotentialSurrogate)) {\r\n      // And one of the two divergent chars is a qualifying match - a surrogate\r\n      // of the opposite type...\r\n      if(divergentSurrogateChecker(divergentChar1) || divergentSurrogateChecker(divergentChar2)) {\r\n        // Our current index would split a surrogate pair; decrement the index to\r\n        // preserve the pair.\r\n        return index - inc;\r\n      }\r\n    }\r\n  }\r\n\r\n  return index;\r\n}\r\n",
    "// Defines the base Deadkey-tracking object.\r\nexport class Deadkey {\r\n  p: number;  // Position of deadkey\r\n  d: number;  // Numerical id of the deadkey\r\n  o: number;  // Ordinal value of the deadkey (resolves same-place conflicts)\r\n  matched: number;\r\n\r\n  static ordinalSeed: number = 0;\r\n\r\n  constructor(pos: number, id: number) {\r\n    this.p = pos;\r\n    this.d = id;\r\n    this.o = Deadkey.ordinalSeed++;\r\n  }\r\n\r\n  match(p: number, d: number): boolean {\r\n    var result:boolean = (this.p == p && this.d == d);\r\n\r\n    return result;\r\n  }\r\n\r\n  set(): void {\r\n    this.matched = 1;\r\n  }\r\n\r\n  reset(): void {\r\n    this.matched = 0;\r\n  }\r\n\r\n  before(other: Deadkey): boolean {\r\n    return this.o < other.o;\r\n  }\r\n\r\n  clone(): Deadkey {\r\n    let dk = new Deadkey(this.p, this.d);\r\n    dk.o = this.o;\r\n\r\n    return dk;\r\n  }\r\n\r\n  equal(other: Deadkey) {\r\n    return this.d == other.d && this.p == other.d && this.o == other.o;\r\n  }\r\n\r\n  /**\r\n   * Sorts the deadkeys in reverse order.\r\n   */\r\n  static sortFunc = function(a: Deadkey, b: Deadkey) {\r\n    // We want descending order, so we want 'later' deadkeys first.\r\n    if(a.p != b.p) {\r\n      return b.p - a.p;\r\n    } else {\r\n      return b.o - a.o;\r\n    }\r\n  };\r\n}\r\n\r\n// Object-orients deadkey management.\r\nexport class DeadkeyTracker {\r\n  dks: Deadkey[] = [];\r\n\r\n  toSortedArray(): Deadkey[] {\r\n    this.dks = this.dks.sort(Deadkey.sortFunc);\r\n    return [].concat(this.dks);\r\n  }\r\n\r\n  clone(): DeadkeyTracker {\r\n    let dkt = new DeadkeyTracker();\r\n    let dks = this.toSortedArray();\r\n\r\n    // Make sure to clone the deadkeys themselves - the Deadkey object is mutable.\r\n    dkt.dks = [];\r\n    dks.forEach(function(value: Deadkey) {\r\n      dkt.dks.push(value.clone());\r\n    });\r\n\r\n    return dkt;\r\n  }\r\n\r\n  /**\r\n   * Function     isMatch\r\n   * Scope        Public\r\n   * @param       {number}      caretPos  current cursor position\r\n   * @param       {number}      n         expected offset of deadkey from cursor\r\n   * @param       {number}      d         deadkey\r\n   * @return      {boolean}               True if deadkey found selected context matches val\r\n   * Description  Match deadkey at current cursor position\r\n   */\r\n  isMatch(caretPos: number, n: number, d: number): boolean {\r\n    if(this.dks.length == 0) {\r\n      return false; // I3318\r\n    }\r\n\r\n    var sp=caretPos;\r\n    n = sp - n;\r\n    for(var i = 0; i < this.dks.length; i++) {\r\n      // Don't re-match an already-matched deadkey.  It's possible to have two identical\r\n      // entries, and they should be kept separately.\r\n      if(this.dks[i].match(n, d) && !this.dks[i].matched) {\r\n        this.dks[i].set();\r\n        // Assumption:  since we match the first possible entry in the array, we\r\n        // match the entry with the lower ordinal - the 'first' deadkey in the position.\r\n        return true; // I3318\r\n      }\r\n    }\r\n\r\n    this.resetMatched(); // I3318\r\n\r\n    return false;\r\n  }\r\n\r\n  add(dk: Deadkey) {\r\n    this.dks = this.dks.concat(dk);\r\n  }\r\n\r\n  remove(dk: Deadkey) {\r\n    var index = this.dks.indexOf(dk);\r\n    this.dks.splice(index, 1);\r\n  }\r\n\r\n  clear() {\r\n    this.dks = [];\r\n  }\r\n\r\n  resetMatched() {\r\n    for(let dk of this.dks) {\r\n      dk.reset();\r\n    }\r\n  }\r\n\r\n  deleteMatched(): void {\r\n    for(var Li = 0; Li < this.dks.length; Li++) {\r\n      if(this.dks[Li].matched) {\r\n        this.dks.splice(Li--, 1); // Don't forget to decrement!\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     adjustPositions (formerly _DeadkeyAdjustPos)\r\n   * Scope        Private\r\n   * @param       {number}      Lstart      start position in context\r\n   * @param       {number}      Ldelta      characters to adjust by\r\n   * Description  Adjust saved positions of deadkeys in context\r\n   */\r\n  adjustPositions(Lstart: number, Ldelta: number): void {\r\n    if(Ldelta == 0) {\r\n      return;\r\n    }\r\n\r\n    for(let dk of this.dks) {\r\n      if(dk.p > Lstart) {\r\n        dk.p += Ldelta;\r\n      }\r\n    }\r\n  }\r\n\r\n  equal(other: DeadkeyTracker) {\r\n    if(this.dks.length != other.dks.length) {\r\n      return false;\r\n    }\r\n\r\n    const otherDks = other.dks;\r\n    const matchedDks: Deadkey[] = [];\r\n\r\n    for(let dk of this.dks) {\r\n      const match = otherDks.find((otherDk) => dk.equal(otherDk));\r\n      if(!match) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return matchedDks.length == otherDks.length;\r\n  }\r\n\r\n  count(): number {\r\n    return this.dks.length;\r\n  }\r\n}",
    "import { extendString } from \"@keymanapp/web-utils\";\r\nimport { findCommonSubstringEndIndex } from \"./stringDivergence.js\";\r\nimport { Mock } from \"./mock.js\";\r\nimport { OutputTarget as OutputTargetInterface } from 'keyman/engine/keyboard';\r\n\r\nextendString();\r\n\r\n// Defines deadkey management in a manner attachable to each element interface.\r\nimport { type KeyEvent } from 'keyman/engine/keyboard';\r\nimport { Deadkey, DeadkeyTracker } from \"./deadkeys.js\";\r\nimport { ProbabilityMass, Transform } from '@keymanapp/common-types';\r\n\r\n// Also relies on string-extensions provided by the web-utils package.\r\n\r\nexport function isEmptyTransform(transform: Transform) {\r\n  if(!transform) {\r\n    return true;\r\n  }\r\n  return transform.insert === '' && transform.deleteLeft === 0 && (transform.deleteRight ?? 0) === 0;\r\n}\r\n\r\nexport class TextTransform implements Transform {\r\n  readonly insert: string;\r\n  readonly deleteLeft: number;\r\n  readonly deleteRight: number;\r\n  readonly erasedSelection: boolean;\r\n  id: number;\r\n\r\n  constructor(insert: string, deleteLeft: number, deleteRight: number, erasedSelection: boolean) {\r\n    this.insert = insert;\r\n    this.deleteLeft = deleteLeft;\r\n    this.deleteRight = deleteRight;\r\n    this.erasedSelection = erasedSelection;\r\n  }\r\n\r\n  public static readonly nil = new TextTransform('', 0, 0, false);\r\n}\r\n\r\nexport class Transcription {\r\n  readonly token: number;\r\n  readonly keystroke: KeyEvent;\r\n  readonly transform: TextTransform;\r\n  alternates: Alternate[]; // constructed after the rest of the transcription.\r\n  readonly preInput: Mock;\r\n\r\n  private static tokenSeed: number = 0;\r\n\r\n  constructor(keystroke: KeyEvent, transform: TextTransform, preInput: Mock, alternates?: Alternate[]/*, removedDks: Deadkey[], insertedDks: Deadkey[]*/) {\r\n    let token = this.token = Transcription.tokenSeed++;\r\n\r\n    this.keystroke = keystroke;\r\n    this.transform = transform;\r\n    this.alternates = alternates;\r\n    this.preInput = preInput;\r\n\r\n    this.transform.id = this.token;\r\n\r\n    // Assign the ID to each alternate, as well.\r\n    if(alternates) {\r\n      alternates.forEach(function(alt) {\r\n        alt.sample.id = token;\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport type Alternate = ProbabilityMass<Transform>;\r\n\r\nexport default abstract class OutputTarget implements OutputTargetInterface {\r\n  private _dks: DeadkeyTracker;\r\n\r\n  constructor() {\r\n    this._dks = new DeadkeyTracker();\r\n  }\r\n\r\n  /**\r\n   * Signifies that this OutputTarget has no default key processing behaviors.  This should be false\r\n   * for OutputTargets backed by web elements like HTMLInputElement or HTMLTextAreaElement.\r\n   */\r\n  get isSynthetic(): boolean {\r\n    return true;\r\n  }\r\n\r\n  resetContext(): void {\r\n    this.deadkeys().clear();\r\n  }\r\n\r\n  deadkeys(): DeadkeyTracker {\r\n    return this._dks;\r\n  }\r\n\r\n  hasDeadkeyMatch(n: number, d: number): boolean {\r\n    return this.deadkeys().isMatch(this.getDeadkeyCaret(), n, d);\r\n  }\r\n\r\n  insertDeadkeyBeforeCaret(d: number) {\r\n    var dk: Deadkey = new Deadkey(this.getDeadkeyCaret(), d);\r\n    this.deadkeys().add(dk);\r\n  }\r\n\r\n  /**\r\n   * Should be called by each output target immediately before text mutation operations occur.\r\n   *\r\n   * Maintains solutions to old issues:  I3318,I3319\r\n   * @param {number} delta  Use negative values if characters were deleted, positive if characters were added.\r\n   */\r\n  protected adjustDeadkeys(delta: number) {\r\n    this.deadkeys().adjustPositions(this.getDeadkeyCaret(), delta);\r\n  }\r\n\r\n  /**\r\n   * Needed to properly clone deadkeys for use with Mock element interfaces toward predictive text purposes.\r\n   * @param {object}  dks   An existing set of deadkeys to deep-copy for use by this element interface.\r\n   */\r\n  protected setDeadkeys(dks: DeadkeyTracker) {\r\n    this._dks = dks.clone();\r\n  }\r\n\r\n  /**\r\n   * Determines the basic operations needed to reconstruct the current OutputTarget's text from the prior state specified\r\n   * by another OutputTarget based on their text and caret positions.\r\n   *\r\n   * This is designed for use as a \"before and after\" comparison to determine the effect of a single keyboard rule at a time.\r\n   * As such, it assumes that the caret is immediately after any inserted text.\r\n   * @param from An output target (preferably a Mock) representing the prior state of the input/output system.\r\n   */\r\n  buildTransformFrom(original: OutputTarget): TextTransform {\r\n    const toLeft = this.getTextBeforeCaret();\r\n    const fromLeft = original.getTextBeforeCaret();\r\n\r\n    const leftDivergenceIndex = findCommonSubstringEndIndex(fromLeft, toLeft, false);\r\n    const deletedLeft = fromLeft.substring(leftDivergenceIndex)._kmwLength();\r\n    // No need for our specialized variant here.\r\n    const insertedText = toLeft.substring(leftDivergenceIndex);\r\n\r\n    const toRight = this.getTextAfterCaret();\r\n    const fromRight = original.getTextAfterCaret();\r\n    const rightDivergenceIndex = findCommonSubstringEndIndex(fromRight, toRight, true);\r\n\r\n    // Right insertions aren't supported, but right deletions will matter in some scenarios.\r\n    // In particular, once we allow right-deletion for pred-text suggestions applied with the\r\n    // caret mid-word..\r\n    const deletedRight = fromRight.substring(0, rightDivergenceIndex + 1)._kmwLength();\r\n\r\n    return new TextTransform(insertedText, deletedLeft, deletedRight, original.getSelectedText() && !this.getSelectedText());\r\n  }\r\n\r\n  buildTranscriptionFrom(original: OutputTarget, keyEvent: KeyEvent, readonly: boolean, alternates?: Alternate[]): Transcription {\r\n    let transform = this.buildTransformFrom(original);\r\n\r\n    // If we ever decide to re-add deadkey tracking, this is the place for it.\r\n\r\n    return new Transcription(keyEvent, transform, Mock.from(original, readonly), alternates);\r\n  }\r\n\r\n  /**\r\n   * Restores the `OutputTarget` to the indicated state.  Designed for use with `Transcription.preInput`.\r\n   * @param original An `OutputTarget` (usually a `Mock`).\r\n   */\r\n  restoreTo(original: OutputTarget) {\r\n    this.clearSelection();\r\n    // We currently do not restore selected text; the mechanism isn't supported at present for\r\n    // all output target types - especially in regard to re-selecting the text if restored.\r\n    //\r\n    // I believe this would mostly matter if/when reverting predictions based upon selected text.\r\n    // That pattern isn't well-supported yet, though.\r\n\r\n    //\r\n    this.setTextBeforeCaret(original.getTextBeforeCaret());\r\n    this.setTextAfterCaret(original.getTextAfterCaret());\r\n\r\n    // Also, restore the deadkeys!\r\n    this._dks = original._dks.clone();\r\n  }\r\n\r\n  apply(transform: Transform) {\r\n    // Selected text should disappear on any text edit; application of a transform\r\n    // certainly qualifies.\r\n    this.clearSelection();\r\n\r\n    if(transform.deleteRight) {\r\n      this.setTextAfterCaret(this.getTextAfterCaret()._kmwSubstr(transform.deleteRight));\r\n    }\r\n\r\n    if(transform.deleteLeft) {\r\n      this.deleteCharsBeforeCaret(transform.deleteLeft);\r\n    }\r\n\r\n    if(transform.insert) {\r\n      this.insertTextBeforeCaret(transform.insert);\r\n    }\r\n\r\n    // We assume that all deadkeys are invalidated after applying a Transform, since\r\n    // prediction implies we'll be completing a word, post-deadkeys.\r\n    this._dks.clear();\r\n  }\r\n\r\n  /**\r\n   * Helper to `restoreTo` - allows directly setting the 'before' context to that of another\r\n   * `OutputTarget`.\r\n   * @param s\r\n   */\r\n  protected setTextBeforeCaret(s: string): void {\r\n    // This one's easy enough to provide a default implementation for.\r\n    this.deleteCharsBeforeCaret(this.getTextBeforeCaret()._kmwLength());\r\n    this.insertTextBeforeCaret(s);\r\n  }\r\n\r\n  /**\r\n   * Helper to `restoreTo` - allows directly setting the 'after' context to that of another\r\n   * `OutputTarget`.\r\n   * @param s\r\n   */\r\n  protected abstract setTextAfterCaret(s: string): void;\r\n\r\n  /**\r\n   * Clears any selected text within the wrapper's element(s).\r\n   * Silently does nothing if no such text exists.\r\n   */\r\n  abstract clearSelection(): void;\r\n\r\n  /**\r\n   * Clears any cached selection-related state values.\r\n   */\r\n  abstract invalidateSelection(): void;\r\n\r\n  /**\r\n   * Indicates whether or not the underlying element has its own selection (input, textarea)\r\n   * or is part of (or possesses) the DOM's active selection. Don't confuse with isSelectionEmpty().\r\n   *\r\n   * TODO: rename to supportsOwnSelection\r\n   */\r\n  abstract hasSelection(): boolean;\r\n\r\n  /**\r\n   * Returns true if there is no current selection -- that is, the selection range is empty\r\n   */\r\n  abstract isSelectionEmpty(): boolean;\r\n\r\n  /**\r\n   * Returns an index corresponding to the caret's position for use with deadkeys.\r\n   */\r\n  abstract getDeadkeyCaret(): number;\r\n\r\n  /**\r\n   * Relative to the caret, gets the current context within the wrapper's element.\r\n   */\r\n  abstract getTextBeforeCaret(): string;\r\n\r\n  /**\r\n   * Gets the element's-currently selected text.\r\n   */\r\n  abstract getSelectedText(): string;\r\n\r\n  /**\r\n   * Relative to the caret (and/or active selection), gets the element's text after the caret,\r\n   * excluding any actively selected text that would be immediately replaced upon text entry.\r\n   */\r\n  abstract getTextAfterCaret(): string;\r\n\r\n  /**\r\n   * Gets the element's full text, including any text that is actively selected.\r\n   */\r\n  abstract getText(): string;\r\n\r\n  /**\r\n   * Performs context deletions (from the left of the caret) as needed by the KeymanWeb engine and\r\n   * corrects the location of any affected deadkeys.\r\n   *\r\n   * Does not delete deadkeys (b/c KMW 1 & 2 behavior maintenance).\r\n   * @param dn The number of characters to delete.  If negative, context will be left unchanged.\r\n   */\r\n  abstract deleteCharsBeforeCaret(dn: number): void;\r\n\r\n  /**\r\n   * Inserts text immediately before the caret's current position, moving the caret after the\r\n   * newly inserted text in the process along with any affected deadkeys.\r\n   *\r\n   * @param s Text to insert before the caret's current position.\r\n   */\r\n  abstract insertTextBeforeCaret(s: string): void;\r\n\r\n  /**\r\n   * Allows element-specific handling for ENTER key inputs.  Conceptually, this should usually\r\n   * correspond to `insertTextBeforeCaret('\\n'), but actual implementation will vary greatly among\r\n   * elements.\r\n   */\r\n  abstract handleNewlineAtCaret(): void;\r\n\r\n  /**\r\n   * Saves element-specific state properties prone to mutation, enabling restoration after\r\n   * text-output operations.\r\n   */\r\n  saveProperties() {\r\n    // Most element interfaces won't need anything here.\r\n  }\r\n\r\n  /**\r\n   * Restores previously-saved element-specific state properties.  Designed for use after text-output\r\n   * ops to facilitate more-seamless web-dev and user interactions.\r\n   */\r\n  restoreProperties(){\r\n    // Most element interfaces won't need anything here.\r\n  }\r\n\r\n  /**\r\n   * Generates a synthetic event on the underlying element, signalling that its value has changed.\r\n   */\r\n  abstract doInputEvent(): void;\r\n}\r\n",
    "import OutputTarget from './outputTarget.js';\r\n\r\nexport class Mock extends OutputTarget {\r\n  text: string;\r\n\r\n  selStart: number;\r\n  selEnd: number;\r\n  selForward: boolean = true;\r\n\r\n  constructor(text?: string, caretPos?: number);\r\n  constructor(text?: string, selStart?: number, selEnd?: number);\r\n  constructor(text?: string, selStart?: number, selEnd?: number) {\r\n    super();\r\n\r\n    this.text = text ? text : \"\";\r\n    var defaultLength = this.text._kmwLength();\r\n\r\n    // Ensures that `caretPos == 0` is handled correctly.\r\n    this.selStart = typeof selStart == \"number\" ? selStart : defaultLength;\r\n\r\n    // If no selection-end is set, selection length is implied to be 0.\r\n    this.selEnd = typeof selEnd == \"number\" ? selEnd : this.selStart;\r\n\r\n    this.selForward = this.selEnd >= this.selStart;\r\n  }\r\n\r\n  // Clones the state of an existing EditableElement, creating a Mock version of its state.\r\n  static from(outputTarget: OutputTarget, readonly?: boolean) {\r\n    let clone: Mock;\r\n\r\n    if (outputTarget instanceof Mock) {\r\n      // Avoids the need to run expensive kmwstring.ts / `_kmwLength()`\r\n      // calculations when deep-copying Mock instances.\r\n      let priorMock = outputTarget as Mock;\r\n      clone = new Mock(priorMock.text, priorMock.selStart, priorMock.selEnd);\r\n    } else {\r\n      const text = outputTarget.getText();\r\n      const textLen = text._kmwLength();\r\n\r\n      // If !hasSelection()\r\n      let selectionStart: number = textLen;\r\n      let selectionEnd: number = 0;\r\n\r\n      if (outputTarget.hasSelection()) {\r\n        let beforeText = outputTarget.getTextBeforeCaret();\r\n        let afterText = outputTarget.getTextAfterCaret();\r\n        selectionStart = beforeText._kmwLength();\r\n        selectionEnd = textLen - afterText._kmwLength();\r\n      }\r\n\r\n      // readonly group or not, the returned Mock remains the same.\r\n      // New-context events should act as if the caret were at the earlier-in-context\r\n      // side of the selection, same as standard keyboard rules.\r\n      clone = new Mock(text, selectionStart, selectionEnd);\r\n    }\r\n\r\n    // Also duplicate deadkey state!  (Needed for fat-finger ops.)\r\n    clone.setDeadkeys(outputTarget.deadkeys());\r\n\r\n    return clone;\r\n  }\r\n\r\n  clearSelection(): void {\r\n    this.text = this.getTextBeforeCaret() + this.getTextAfterCaret();\r\n    this.selEnd = this.selStart;\r\n    this.selForward = true;\r\n  }\r\n\r\n  invalidateSelection(): void {\r\n    return;\r\n  }\r\n\r\n  isSelectionEmpty(): boolean {\r\n    return this.selStart == this.selEnd;\r\n  }\r\n\r\n  hasSelection(): boolean {\r\n    return true;\r\n  }\r\n\r\n  getDeadkeyCaret(): number {\r\n    return this.selStart;\r\n  }\r\n\r\n  setSelection(start: number, end?: number) {\r\n    this.selStart = start;\r\n    this.selEnd = typeof end == 'number' ? end : start;\r\n\r\n    this.selForward = end >= start;\r\n    if (!this.selForward) {\r\n      let temp = this.selStart;\r\n      this.selStart = this.selEnd;\r\n      this.selEnd = temp;\r\n    }\r\n  }\r\n\r\n  getTextBeforeCaret(): string {\r\n    return this.text.kmwSubstr(0, this.selStart);\r\n  }\r\n\r\n  getSelectedText(): string {\r\n    return this.text.kmwSubstr(this.selStart, this.selEnd - this.selStart);\r\n  }\r\n\r\n  getTextAfterCaret(): string {\r\n    return this.text.kmwSubstr(this.selEnd);\r\n  }\r\n\r\n  getText(): string {\r\n    return this.text;\r\n  }\r\n\r\n  deleteCharsBeforeCaret(dn: number): void {\r\n    if (dn >= 0) {\r\n      if (dn > this.selStart) {\r\n        dn = this.selStart;\r\n      }\r\n      this.adjustDeadkeys(-dn);\r\n      this.text = this.text.kmwSubstr(0, this.selStart - dn) + this.text.kmwSubstr(this.selStart);\r\n      this.selStart -= dn;\r\n      this.selEnd -= dn;\r\n    }\r\n  }\r\n\r\n  insertTextBeforeCaret(s: string): void {\r\n    this.adjustDeadkeys(s._kmwLength());\r\n    this.text = this.getTextBeforeCaret() + s + this.text.kmwSubstr(this.selStart);\r\n    this.selStart += s.kmwLength();\r\n    this.selEnd += s.kmwLength();\r\n  }\r\n\r\n  handleNewlineAtCaret(): void {\r\n    this.insertTextBeforeCaret('\\n');\r\n  }\r\n\r\n  protected setTextAfterCaret(s: string): void {\r\n    this.text = this.getTextBeforeCaret() + s;\r\n  }\r\n\r\n  /**\r\n   * Indicates if this Mock represents an identical context to that of another Mock.\r\n   * @param other\r\n   * @returns\r\n   */\r\n  isEqual(other: Mock) {\r\n    return this.text == other.text\r\n      && this.selStart == other.selStart\r\n      && this.selEnd == other.selEnd\r\n      && this.deadkeys().equal(other.deadkeys());\r\n  }\r\n\r\n  doInputEvent() {\r\n    // Mock isn't backed by an element, so it won't have any event listeners.\r\n  }\r\n}\r\n",
    "import KeyboardProcessor from \"./keyboardProcessor.js\";\r\nimport { VariableStoreDictionary } from \"keyman/engine/keyboard\";\r\nimport OutputTarget, { type Transcription } from './outputTarget.js';\r\nimport { Mock } from \"./mock.js\";\r\nimport { type VariableStore } from \"./systemStores.js\";\r\nimport { Suggestion } from '@keymanapp/common-types';\r\n\r\n/**\r\n * Represents the commands and state changes that result from a matched keyboard rule.\r\n */\r\nexport default class RuleBehavior {\r\n  /**\r\n   * The before-and-after Transform from matching a keyboard rule.  May be `null`\r\n   * if no keyboard rules were matched for the keystroke.\r\n   */\r\n  transcription: Transcription = null;\r\n\r\n  /**\r\n   * Indicates whether or not a BEEP command was issued by the matched keyboard rule.\r\n   */\r\n  beep?: boolean;\r\n\r\n  /**\r\n   * A set of changed store values triggered by the matched keyboard rule.\r\n   */\r\n  setStore: {[id: number]: string} = {};\r\n\r\n  /**\r\n   * A set of variable stores with save requests triggered by the matched keyboard rule\r\n   */\r\n  saveStore: {[name: string]: VariableStore} = {};\r\n\r\n  /**\r\n   * A set of variable stores with possible changes to be applied during finalization.\r\n   */\r\n    variableStores: VariableStoreDictionary = {};\r\n\r\n  /**\r\n   * Denotes a non-output default behavior; this should be evaluated later, against the true keystroke.\r\n   */\r\n  triggersDefaultCommand: boolean = false;\r\n\r\n  /**\r\n   * Denotes error log messages generated when attempting to generate this behavior.\r\n   */\r\n  errorLog?: string;\r\n\r\n  /**\r\n   * Denotes warning log messages generated when attempting to generate this behavior.\r\n   */\r\n  warningLog?: string;\r\n\r\n  /**\r\n   * If predictive text is active, contains a Promise returning predictive Suggestions.\r\n   */\r\n  predictionPromise?: Promise<Suggestion[]>;\r\n\r\n  /**\r\n   * In reference to https://github.com/keymanapp/keyman/pull/4350#issuecomment-768753852:\r\n   *\r\n   * If the final group processed is a context and keystroke group (using keys),\r\n   * and there is no nomatch rule, and the keystroke is not matched in the group,\r\n   * the keystroke's default behavior should trigger, regardless of whether or not any\r\n   * rules in prior groups matched.\r\n   */\r\n  triggerKeyDefault?: boolean;\r\n\r\n  finalize(processor: KeyboardProcessor, outputTarget: OutputTarget, readonly: boolean) {\r\n    if(!this.transcription) {\r\n      throw \"Cannot finalize a RuleBehavior with no transcription.\";\r\n    }\r\n\r\n    if(processor.beepHandler && this.beep) {\r\n      processor.beepHandler(outputTarget);\r\n    }\r\n\r\n    for(let storeID in this.setStore) {\r\n      let sysStore = processor.keyboardInterface.systemStores[storeID];\r\n      if(sysStore) {\r\n        try {\r\n          sysStore.set(this.setStore[storeID]);\r\n        } catch (error) {\r\n          if(processor.errorLogger) {\r\n            processor.errorLogger(\"Rule attempted to perform illegal operation - 'platform' may not be changed.\");\r\n          }\r\n        }\r\n      } else if(processor.warningLogger) {\r\n        processor.warningLogger(\"Unknown store affected by keyboard rule: \" + storeID);\r\n      }\r\n    }\r\n\r\n    processor.keyboardInterface.applyVariableStores(this.variableStores);\r\n\r\n    if(processor.keyboardInterface.variableStoreSerializer) {\r\n      for(let storeID in this.saveStore) {\r\n        processor.keyboardInterface.variableStoreSerializer.saveStore(processor.activeKeyboard.id, storeID, this.saveStore[storeID]);\r\n      }\r\n    }\r\n\r\n    if(this.triggersDefaultCommand) {\r\n      let keyEvent = this.transcription.keystroke;\r\n      processor.defaultRules.applyCommand(keyEvent, outputTarget);\r\n    }\r\n\r\n    if(processor.warningLogger && this.warningLog) {\r\n      processor.warningLogger(this.warningLog);\r\n    } else if(processor.errorLogger && this.errorLog) {\r\n      processor.errorLogger(this.errorLog);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Merges default-related behaviors from another RuleBehavior into this one.  Assumes that the current instance\r\n   * \"came first\" chronologically.  Both RuleBehaviors must be sourced from the same keystroke.\r\n   *\r\n   * Intended use:  merging rule-based behavior with default key behavior during scenarios like those described\r\n   * at https://github.com/keymanapp/keyman/pull/4350#issuecomment-768753852.\r\n   *\r\n   * This function does not attempt a \"complete\" merge for two fully-constructed RuleBehaviors!  Things\r\n   * WILL break for unintended uses.\r\n   * @param other\r\n   */\r\n  mergeInDefaults(other: RuleBehavior) {\r\n    let keystroke = this.transcription.keystroke;\r\n    let keyFromOther = other.transcription.keystroke;\r\n    if(keystroke.Lcode != keyFromOther.Lcode || keystroke.Lmodifiers != keyFromOther.Lmodifiers) {\r\n      throw \"RuleBehavior default-merge not supported unless keystrokes are identical!\";\r\n    }\r\n\r\n    this.triggersDefaultCommand = this.triggersDefaultCommand || other.triggersDefaultCommand;\r\n\r\n    let mergingMock = Mock.from(this.transcription.preInput, false);\r\n    mergingMock.apply(this.transcription.transform);\r\n    mergingMock.apply(other.transcription.transform);\r\n\r\n    this.transcription = mergingMock.buildTranscriptionFrom(this.transcription.preInput, keystroke, false, this.transcription.alternates);\r\n  }\r\n}",
    "import { type KeyboardHarness } from 'keyman/engine/keyboard';\r\nimport { StoreNonCharEntry } from './kbdInterface.js';\r\n\r\nexport enum SystemStoreIDs {\r\n  TSS_LAYER = 33,\r\n  TSS_PLATFORM = 31,\r\n  TSS_NEWLAYER = 42,\r\n  TSS_OLDLAYER = 43\r\n}\r\n\r\n/*\r\n* Type alias definitions to reflect the parameters of the fullContextMatch() callback (KMW 10+).\r\n* No constructors or methods since keyboards will not utilize the same backing prototype, and\r\n* property names are shorthanded to promote minification.\r\n*/\r\ntype PlainKeyboardStore = string;\r\n\r\nexport type KeyboardStoreElement = (string | StoreNonCharEntry);\r\nexport type ComplexKeyboardStore = KeyboardStoreElement[];\r\n\r\nexport type KeyboardStore = PlainKeyboardStore | ComplexKeyboardStore;\r\n\r\nexport type VariableStore = { [name: string]: string };\r\n\r\nexport interface VariableStoreSerializer {\r\n  loadStore(keyboardID: string, storeName: string): VariableStore;\r\n  saveStore(keyboardID: string, storeName: string, storeMap: VariableStore): void;\r\n}\r\n\r\n/**\r\n * Defines common behaviors associated with system stores.\r\n */\r\nexport abstract class SystemStore {\r\n  public readonly id: number;\r\n\r\n  constructor(id: number) {\r\n    this.id = id;\r\n  }\r\n\r\n  abstract matches(value: string): boolean;\r\n\r\n  set(value: string): void {\r\n    throw new Error(\"System store with ID \" + this.id + \" may not be directly set.\");\r\n  }\r\n}\r\n\r\n/**\r\n * A handler designed to receive feedback whenever a system store's value is changed.\r\n * @param source    The system store being mutated, before the value change occurs.\r\n * @param newValue  The new value being set\r\n * @returns         `false` / `undefined` to allow the change, `true` to block the change.\r\n */\r\nexport type SystemStoreMutationHandler = (source: MutableSystemStore, newValue: string) => boolean;\r\n\r\nexport class MutableSystemStore extends SystemStore {\r\n  private _value: string;\r\n  handler?: SystemStoreMutationHandler = null;\r\n\r\n  constructor(id: number, defaultValue: string) {\r\n    super(id);\r\n    this._value = defaultValue;\r\n  }\r\n\r\n  get value() {\r\n    return this._value;\r\n  }\r\n\r\n  matches(value: string) {\r\n    return this._value == value;\r\n  }\r\n\r\n  set(value: string) {\r\n    // Even if things stay the same, we should still signal this.\r\n    // It's important for tracking if a rule directly set the layer\r\n    // versus if it passively remained.\r\n    if(this.handler) {\r\n      if(this.handler(this, value)) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    this._value = value;\r\n  }\r\n}\r\n\r\n/**\r\n * Handles checks against the current platform.\r\n */\r\nexport class PlatformSystemStore extends SystemStore {\r\n  private readonly kbdInterface: KeyboardHarness;\r\n\r\n  constructor(keyboardInterface: KeyboardHarness) {\r\n    super(SystemStoreIDs.TSS_PLATFORM);\r\n\r\n    this.kbdInterface = keyboardInterface;\r\n  }\r\n\r\n  matches(value: string) {\r\n    var i,constraint,constraints=value.split(' ');\r\n    let device = this.kbdInterface.activeDevice;\r\n\r\n    for(i=0; i<constraints.length; i++) {\r\n      constraint=constraints[i].toLowerCase();\r\n      switch(constraint) {\r\n        case 'touch':\r\n        case 'hardware':\r\n          if(device.touchable != (constraint == 'touch')) {\r\n            return false;\r\n          }\r\n          break;\r\n\r\n        case 'macos':\r\n        case 'mac':\r\n          constraint = 'macosx';\r\n          // fall through\r\n        case 'macosx':\r\n        case 'windows':\r\n        case 'android':\r\n        case 'ios':\r\n        case 'linux':\r\n          if(device.OS != constraint) {\r\n            return false;\r\n          }\r\n          break;\r\n\r\n        case 'tablet':\r\n        case 'phone':\r\n        case 'desktop':\r\n          if(device.formFactor != constraint) {\r\n            return false;\r\n          }\r\n          break;\r\n\r\n        case 'web':\r\n          if(device.browser == 'native') {\r\n            return false; // web matches anything other than 'native'\r\n          }\r\n          break;\r\n\r\n        case 'native':\r\n          // This will return true for embedded KeymanWeb\r\n        case 'chrome':\r\n        case 'firefox':\r\n        case 'safari':\r\n        case 'edge':\r\n        case 'opera':\r\n          if(device.browser != constraint) {\r\n            return false;\r\n          }\r\n          break;\r\n\r\n        default:\r\n          return false;\r\n      }\r\n    }\r\n\r\n    // Everything we checked against was valid and had matches - it's a match!\r\n    return true;\r\n  }\r\n}\r\n",
    "/***\r\n   KeymanWeb 11.0\r\n   Copyright 2019 SIL International\r\n***/\r\n\r\n//#region Imports\r\n\r\nimport { type DeviceSpec } from \"@keymanapp/web-utils\";\r\nimport { ModifierKeyConstants } from '@keymanapp/common-types';\r\nimport { Codes, type KeyEvent, KeyMapping, Keyboard, KeyboardHarness, KeyboardKeymanGlobal, VariableStoreDictionary } from \"keyman/engine/keyboard\";\r\nimport type OutputTarget from './outputTarget.js';\r\nimport { type Deadkey } from './deadkeys.js';\r\nimport { Mock } from \"./mock.js\";\r\nimport RuleBehavior from \"./ruleBehavior.js\";\r\nimport { ComplexKeyboardStore, type KeyboardStore, KeyboardStoreElement, SystemStoreIDs, SystemStore, MutableSystemStore, PlatformSystemStore, VariableStore, VariableStoreSerializer } from \"./systemStores.js\";\r\n\r\n//#endregion\r\n\r\n//#region Helper type definitions\r\n\r\nexport class KeyInformation {\r\n  vk: boolean;\r\n  code: number;\r\n  modifiers: number;\r\n}\r\n\r\ntype RuleChar = string;\r\n\r\nclass RuleDeadkey {\r\n  /** Discriminant field - 'd' for Deadkey.\r\n   */\r\n  t: 'd';\r\n\r\n  /**\r\n   * Value:  the deadkey's ID.\r\n   */\r\n  d: number; // For 'd'eadkey; also reflects the Deadkey class's 'd' property.\r\n}\r\n\r\nclass ContextAny {\r\n  /** Discriminant field - 'a' for `any()`.\r\n   */\r\n  ['t']: 'a';\r\n\r\n  /**\r\n   * Value:  the store to search.\r\n   */\r\n  ['a']: KeyboardStore; // For 'a'ny statement.\r\n\r\n  /**\r\n   * If set to true, negates the 'any'.\r\n   */\r\n  ['n']: boolean | 0 | 1;\r\n}\r\n\r\nclass RuleIndex {\r\n  /** Discriminant field - 'i' for `index()`.\r\n   */\r\n  ['t']: 'i';\r\n\r\n  /**\r\n   * Value: the Store from which to output\r\n   */\r\n  ['i']: KeyboardStore;\r\n\r\n  /**\r\n   * Offset: the offset in context for the corresponding `any()`.\r\n   */\r\n  ['o']: number;\r\n}\r\n\r\nclass ContextEx {\r\n  /** Discriminant field - 'c' for `context()`.\r\n   */\r\n  ['t']: 'c';\r\n\r\n  /**\r\n   * Value:  The offset into the current rule's context to be matched.\r\n   */\r\n  ['c']: number; // For 'c'ontext statement.\r\n}\r\n\r\nclass ContextNul {\r\n  /** Discriminant field - 'n' for `nul`\r\n   */\r\n  ['t']: 'n';\r\n}\r\n\r\nclass StoreBeep {\r\n  /** Discriminant field - 'b' for `beep`\r\n   */\r\n  ['t']: 'b';\r\n}\r\n\r\ntype ContextNonCharEntry = RuleDeadkey | ContextAny | RuleIndex | ContextEx | ContextNul;\r\ntype ContextEntry = RuleChar | ContextNonCharEntry;\r\n\r\nexport type StoreNonCharEntry = RuleDeadkey | StoreBeep;\r\n\r\n/**\r\n * Cache of context storing and retrieving return values from KC\r\n * Must be reset prior to each keystroke and after any text changes\r\n * MCD 3/1/14\r\n **/\r\nclass CachedContext {\r\n  _cache: string[][];\r\n\r\n  reset(): void {\r\n    this._cache = [];\r\n  }\r\n\r\n  get(n: number, ln: number): string {\r\n    // return null; // uncomment this line to disable context caching\r\n    if(typeof this._cache[n] == 'undefined') {\r\n      return null;\r\n    } else if(typeof this._cache[n][ln] == 'undefined') {\r\n      return null;\r\n    }\r\n    return this._cache[n][ln];\r\n  }\r\n\r\n  set(n: number, ln: number, val: string): void {\r\n    if(typeof this._cache[n] == 'undefined') {\r\n      this._cache[n] = [];\r\n    }\r\n    this._cache[n][ln] = val;\r\n  }\r\n};\r\n\r\ntype CachedExEntry = {valContext: (string|number)[], deadContext: Deadkey[]};\r\n/**\r\n * An extended version of cached context storing designed to work with\r\n * `fullContextMatch` and its helper functions.\r\n */\r\nclass CachedContextEx {\r\n  _cache: CachedExEntry[][];\r\n\r\n  reset(): void {\r\n    this._cache = [];\r\n  }\r\n\r\n  get(n: number, ln: number): CachedExEntry {\r\n    // return null; // uncomment this line to disable context caching\r\n    if(typeof this._cache[n] == 'undefined') {\r\n      return null;\r\n    } else if(typeof this._cache[n][ln] == 'undefined') {\r\n      return null;\r\n    }\r\n    return this._cache[n][ln];\r\n  }\r\n\r\n  set(n: number, ln: number, val: CachedExEntry): void {\r\n    if(typeof this._cache[n] == 'undefined') {\r\n      this._cache[n] = [];\r\n    }\r\n    this._cache[n][ln] = val;\r\n  }\r\n\r\n  clone(): CachedContextEx {\r\n    let r = new CachedContextEx();\r\n    r._cache = this._cache;\r\n    return r;\r\n  }\r\n};\r\n\r\n//#endregion\r\n\r\nexport default class KeyboardInterface extends KeyboardHarness {\r\n  static readonly GLOBAL_NAME = 'KeymanWeb';\r\n\r\n  cachedContext: CachedContext = new CachedContext();\r\n  cachedContextEx: CachedContextEx = new CachedContextEx();\r\n  ruleContextEx: CachedContextEx;\r\n\r\n  activeTargetOutput: OutputTarget;\r\n  ruleBehavior: RuleBehavior;\r\n\r\n  systemStores: {[storeID: number]: SystemStore};\r\n\r\n  _AnyIndices:  number[] = [];    // AnyIndex - array of any/index match indices\r\n\r\n  // Must be accessible to some of the keyboard API methods.\r\n  activeKeyboard: Keyboard;\r\n  activeDevice: DeviceSpec;\r\n\r\n  variableStoreSerializer?: VariableStoreSerializer;\r\n\r\n  // A 'reference point' that debug keyboards may use to access KMW's code constants.\r\n  public get Codes(): typeof Codes {\r\n    return Codes;\r\n  }\r\n\r\n  constructor(_jsGlobal: any, keymanGlobal: KeyboardKeymanGlobal, variableStoreSerializer: VariableStoreSerializer = null) {\r\n    super(_jsGlobal, keymanGlobal);\r\n\r\n    this.systemStores = {};\r\n\r\n    this.systemStores[SystemStoreIDs.TSS_PLATFORM] = new PlatformSystemStore(this);\r\n    this.systemStores[SystemStoreIDs.TSS_LAYER] = new MutableSystemStore(SystemStoreIDs.TSS_LAYER, 'default');\r\n    this.systemStores[SystemStoreIDs.TSS_NEWLAYER] = new MutableSystemStore(SystemStoreIDs.TSS_NEWLAYER, '');\r\n    this.systemStores[SystemStoreIDs.TSS_OLDLAYER] = new MutableSystemStore(SystemStoreIDs.TSS_OLDLAYER, '');\r\n\r\n    this.variableStoreSerializer = variableStoreSerializer;\r\n  }\r\n\r\n  /**\r\n   * Function     KSF\r\n   * Scope        Public\r\n   *\r\n   * Saves the document's current focus settings on behalf of the keyboard.  Often paired with insertText.\r\n   */\r\n  saveFocus(): void { }\r\n\r\n  /**\r\n   * A text-insertion method used by custom OSKs for helpHTML interaction, like with sil_euro_latin.\r\n   *\r\n   * This function currently bypasses web-core's standard text handling control path and all predictive text processing.\r\n   * It also has DOM-dependencies that help ensure KMW's active OutputTarget retains focus during use.\r\n   */\r\n  insertText?: (Ptext: string, PdeadKey: number) => void;\r\n\r\n  /**\r\n   * Function     registerKeyboard  KR\r\n   * Scope        Public\r\n   * @param       {Object}      Pk      Keyboard  object\r\n   * Description  Registers a keyboard with KeymanWeb once its script has fully loaded.\r\n   *\r\n   *              In web-core, this also activates the keyboard; in other modules, this method\r\n   *              may be replaced with other implementations.\r\n   */\r\n  registerKeyboard(Pk: any): void {\r\n    // NOTE:  This implementation is web-core specific and is intentionally replaced, whole-sale,\r\n    //        by DOM-aware code.\r\n    let keyboard = new Keyboard(Pk);\r\n    this.loadedKeyboard = keyboard;\r\n  }\r\n\r\n  /**\r\n   * Get *cached or uncached* keyboard context for a specified range, relative to caret\r\n   *\r\n   * @param       {number}      n       Number of characters to move back from caret\r\n   * @param       {number}      ln      Number of characters to return\r\n   * @param       {Object}      Pelem   Element to work with (must be currently focused element)\r\n   * @return      {string}              Context string\r\n   *\r\n   * Example     [abcdef|ghi] as INPUT, with the caret position marked by |:\r\n   *             KC(2,1,Pelem) == \"e\"\r\n   *             KC(3,3,Pelem) == \"def\"\r\n   *             KC(10,10,Pelem) == \"abcdef\"  i.e. return as much as possible of the requested string\r\n   */\r\n\r\n  context(n: number, ln: number, outputTarget: OutputTarget): string {\r\n    var v = this.cachedContext.get(n, ln);\r\n    if(v !== null) {\r\n      return v;\r\n    }\r\n\r\n    var r = this.KC_(n, ln, outputTarget);\r\n    this.cachedContext.set(n, ln, r);\r\n    return r;\r\n  }\r\n\r\n  /**\r\n   * Get (uncached) keyboard context for a specified range, relative to caret\r\n   *\r\n   * @param       {number}      n       Number of characters to move back from caret\r\n   * @param       {number}      ln      Number of characters to return\r\n   * @param       {Object}      Pelem   Element to work with (must be currently focused element)\r\n   * @return      {string}              Context string\r\n   *\r\n   * Example     [abcdef|ghi] as INPUT, with the caret position marked by |:\r\n   *             KC(2,1,Pelem) == \"e\"\r\n   *             KC(3,3,Pelem) == \"def\"\r\n   *             KC(10,10,Pelem) == \"XXXXabcdef\"  i.e. return as much as possible of the requested string, where X = \\uFFFE\r\n   */\r\n  private KC_(n: number, ln: number, outputTarget: OutputTarget): string {\r\n    var tempContext = '';\r\n\r\n    // If we have a selection, we have an empty context\r\n    tempContext = outputTarget.isSelectionEmpty() ? outputTarget.getTextBeforeCaret() : \"\";\r\n\r\n    if(tempContext._kmwLength() < n) {\r\n      tempContext = Array(n-tempContext._kmwLength()+1).join(\"\\uFFFE\") + tempContext;\r\n    }\r\n\r\n    return tempContext._kmwSubstr(-n)._kmwSubstr(0,ln);\r\n  }\r\n\r\n  /**\r\n   * Function     nul           KN\r\n   * Scope        Public\r\n   * @param       {number}      n       Length of context to check\r\n   * @param       {Object}      Ptarg   Element to work with (must be currently focused element)\r\n   * @return      {boolean}             True if length of context is less than or equal to n\r\n   * Description  Test length of context, return true if the length of the context is less than or equal to n\r\n   *\r\n   * Example     [abc|def] as INPUT, with the caret position marked by |:\r\n   *             KN(3,Pelem) == TRUE\r\n   *             KN(2,Pelem) == FALSE\r\n   *             KN(4,Pelem) == TRUE\r\n   */\r\n  nul(n: number, outputTarget: OutputTarget): boolean {\r\n    var cx=this.context(n+1, 1, outputTarget);\r\n\r\n    // With #31, the result will be a replacement character if context is empty.\r\n    return cx === \"\\uFFFE\";\r\n  }\r\n\r\n  /**\r\n   * Function     contextMatch  KCM\r\n   * Scope        Public\r\n   * @param       {number}      n       Number of characters to move back from caret\r\n   * @param       {Object}      Ptarg   Focused element\r\n   * @param       {string}      val     String to match\r\n   * @param       {number}      ln      Number of characters to return\r\n   * @return      {boolean}             True if selected context matches val\r\n   * Description  Test keyboard context for match\r\n   */\r\n  contextMatch(n: number, outputTarget: OutputTarget, val: string, ln: number): boolean {\r\n    var cx=this.context(n, ln, outputTarget);\r\n    if(cx === val) {\r\n      return true; // I3318\r\n    }\r\n    outputTarget.deadkeys().resetMatched(); // I3318\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Builds the *cached or uncached* keyboard context for a specified range, relative to caret\r\n   *\r\n   * @param       {number}      n       Number of characters to move back from caret\r\n   * @param       {number}      ln      Number of characters to return\r\n   * @param       {Object}      Pelem   Element to work with (must be currently focused element)\r\n   * @return      {Array}               Context array (of strings and numbers)\r\n   */\r\n  private _BuildExtendedContext(n: number, ln: number, outputTarget: OutputTarget): CachedExEntry {\r\n    var cache: CachedExEntry = this.cachedContextEx.get(n, ln);\r\n    if(cache !== null) {\r\n      return cache;\r\n    } else {\r\n      // By far the easiest way to correctly build what we want is to start from the right and work to what we need.\r\n      // We may have done it for a similar cursor position before.\r\n      cache = this.cachedContextEx.get(n, n);\r\n      if(cache === null) {\r\n        // First, let's make sure we have a cloned, sorted copy of the deadkey array.\r\n        let unmatchedDeadkeys = outputTarget.deadkeys().toSortedArray(); // Is reverse-order sorted for us already.\r\n\r\n        // Time to build from scratch!\r\n        var index = 0;\r\n        cache = { valContext: [], deadContext: []};\r\n        while(cache.valContext.length < n) {\r\n          // As adapted from `deadkeyMatch`.\r\n          var sp = outputTarget.getDeadkeyCaret();\r\n          var deadPos = sp - index;\r\n          if(unmatchedDeadkeys.length > 0 && unmatchedDeadkeys[0].p > deadPos) {\r\n            // We have deadkeys at the right-hand side of the caret!  They don't belong in the context, so pop 'em off.\r\n            unmatchedDeadkeys.splice(0, 1);\r\n            continue;\r\n          } else if(unmatchedDeadkeys.length > 0 && unmatchedDeadkeys[0].p == deadPos) {\r\n            // Take the deadkey.\r\n            cache.deadContext[n-cache.valContext.length-1] = unmatchedDeadkeys[0];\r\n            cache.valContext = ([unmatchedDeadkeys[0].d] as (string|number)[]).concat(cache.valContext);\r\n            unmatchedDeadkeys.splice(0, 1);\r\n          } else {\r\n            // Take the character.  We get \"\\ufffe\" if it doesn't exist.\r\n            var kc = this.context(++index, 1, outputTarget);\r\n            cache.valContext = ([kc] as (string|number)[]).concat(cache.valContext);\r\n          }\r\n        }\r\n        this.cachedContextEx.set(n, n, cache);\r\n      }\r\n\r\n      // Now that we have the cache...\r\n      var subCache = cache;\r\n      subCache.valContext = subCache.valContext.slice(0, ln);\r\n      for(var i=0; i < subCache.valContext.length; i++) {\r\n        if(subCache.valContext[i] == '\\ufffe') {\r\n          subCache.valContext.splice(0, 1);\r\n          subCache.deadContext.splice(0, 1);\r\n        }\r\n      }\r\n\r\n      if(subCache.valContext.length == 0) {\r\n        subCache.valContext = ['\\ufffe'];\r\n        subCache.deadContext = [];\r\n      }\r\n\r\n      this.cachedContextEx.set(n, ln, subCache);\r\n\r\n      return subCache;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function       fullContextMatch    KFCM\r\n   * Scope          Private\r\n   * @param         {number}    n       Number of characters to move back from caret\r\n   * @param         {Object}    Ptarg   Focused element\r\n   * @param         {Array}     rule    An array of ContextEntries to match.\r\n   * @return        {boolean}           True if the fully-specified rule context matches the current KMW state.\r\n   *\r\n   * A KMW 10+ function designed to bring KMW closer to Keyman Desktop functionality,\r\n   * near-directly modeling (externally) the compiled form of Desktop rules' context section.\r\n   */\r\n  fullContextMatch(n: number, outputTarget: OutputTarget, rule: ContextEntry[]): boolean {\r\n    // Stage one:  build the context index map.\r\n    var fullContext = this._BuildExtendedContext(n, rule.length, outputTarget);\r\n    this.ruleContextEx = this.cachedContextEx.clone();\r\n    var context = fullContext.valContext;\r\n    var deadContext = fullContext.deadContext;\r\n\r\n    var mismatch = false;\r\n\r\n    // This symbol internally indicates lack of context in a position.  (See KC_)\r\n    const NUL_CONTEXT = \"\\uFFFE\";\r\n\r\n    var assertNever = function(x: never): never {\r\n      // Could be accessed by improperly handwritten calls to `fullContextMatch`.\r\n      throw new Error(\"Unexpected object in fullContextMatch specification: \" + x);\r\n    }\r\n\r\n    // Stage two:  time to match against the rule specified.\r\n    for(var i=0; i < rule.length; i++) {\r\n      if(typeof rule[i] == 'string') {\r\n        var str = rule[i] as string;\r\n        if(str !== context[i]) {\r\n          mismatch = true;\r\n          break;\r\n        }\r\n      } else {\r\n        // TypeScript needs a cast to this intermediate type to do its discriminated union magic.\r\n        var r = rule[i] as ContextNonCharEntry;\r\n        switch(r.t) {\r\n          case 'd':\r\n            // We still need to set a flag here;\r\n            if(r['d'] !== context[i]) {\r\n              mismatch = true;\r\n            } else {\r\n              deadContext[i].set();\r\n            }\r\n            break;\r\n          case 'a':\r\n            var lookup: KeyboardStoreElement;\r\n\r\n            if(typeof context[i] == 'string') {\r\n              lookup = context[i] as string;\r\n            } else {\r\n              lookup = {'t': 'd', 'd': context[i] as number};\r\n            }\r\n\r\n            var result = this.any(i, lookup, r.a);\r\n\r\n            if(!r.n) { // If it's a standard 'any'...\r\n              if(!result) {\r\n                mismatch = true;\r\n              } else if(deadContext[i] !== undefined) {\r\n                // It's a deadkey match, so indicate that.\r\n                deadContext[i].set();\r\n              }\r\n              // 'n' for 'notany'.\r\n              // - if `result === true`, `any` would match:  this should thus fail.\r\n              // - if `context[i] === NUL_CONTEXT`, `notany` should not match.\r\n            } else if(r.n && (result || context[i] === NUL_CONTEXT)) {\r\n              mismatch = true;\r\n            }\r\n            break;\r\n          case 'i':\r\n            // The context will never hold a 'beep.'\r\n            var ch = this._Index(r.i, r.o) as string | RuleDeadkey;\r\n\r\n            if(ch !== undefined && (typeof(ch) == 'string' ? ch : ch.d) !== context[i]) {\r\n              mismatch = true;\r\n            } else if(deadContext[i] !== undefined) {\r\n              deadContext[i].set();\r\n            }\r\n            break;\r\n          case 'c':\r\n            if(context[r.c - 1] !== context[i]) {\r\n              mismatch = true;\r\n            } else if(deadContext[i] !== undefined) {\r\n              deadContext[i].set();\r\n            }\r\n            break;\r\n          case 'n':\r\n            // \\uFFFE is the internal 'no context here sentinel'.\r\n            if(context[i] != NUL_CONTEXT) {\r\n              mismatch = true;\r\n            }\r\n            break;\r\n          default:\r\n            assertNever(r);\r\n        }\r\n      }\r\n    }\r\n\r\n    if(mismatch) {\r\n      // Reset the matched 'any' indices, if any.\r\n      outputTarget.deadkeys().resetMatched();\r\n      this._AnyIndices = [];\r\n    }\r\n\r\n    return !mismatch;\r\n  }\r\n\r\n  /**\r\n   * Function     KIK\r\n   * Scope        Public\r\n   * @param       {Object}  e   keystroke event\r\n   * @return      {boolean}     true if keypress event\r\n   * Description  Test if event as a keypress event\r\n   */\r\n  isKeypress(e: KeyEvent): boolean {\r\n    if(this.activeKeyboard.isMnemonic) {   // I1380 - support KIK for positional layouts\r\n      return !e.LisVirtualKey;             // will now return true for U_xxxx keys, but not for T_xxxx keys\r\n    } else {\r\n      return KeyMapping._USKeyCodeToCharCode(e) ? true : false; // I1380 - support KIK for positional layouts\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Maps a KeyEvent's modifiers to their appropriate value for key-rule evaluation\r\n   * based on the rule's specified target modifier set.\r\n   *\r\n   * Mostly used to correct chiral OSK-keys targeting non-chiral rules.\r\n   * @param e The source KeyEvent\r\n   * @returns\r\n   */\r\n  private static matchModifiersToRuleChirality(eventModifiers: number, targetModifierMask: number): number {\r\n    const CHIRAL_ALT  = ModifierKeyConstants.LALTFLAG  | ModifierKeyConstants.RALTFLAG;\r\n    const CHIRAL_CTRL = ModifierKeyConstants.LCTRLFLAG | ModifierKeyConstants.RCTRLFLAG;\r\n\r\n    let modifiers = eventModifiers;\r\n\r\n    // If the target rule does not use chiral alt...\r\n    if(!(targetModifierMask & CHIRAL_ALT)) {\r\n      const altIntersection  = modifiers & CHIRAL_ALT;\r\n\r\n      if(altIntersection) {\r\n        // Undo the chiral part         and replace with non-chiral.\r\n        modifiers ^= altIntersection  | ModifierKeyConstants.K_ALTFLAG;\r\n      }\r\n    }\r\n\r\n    // If the target rule does not use chiral ctrl...\r\n    if(!(targetModifierMask & CHIRAL_CTRL)) {\r\n      const ctrlIntersection = modifiers & CHIRAL_CTRL;\r\n\r\n      if(ctrlIntersection) {\r\n        // Undo the chiral part         and replace with non-chiral.\r\n        modifiers ^= ctrlIntersection | ModifierKeyConstants.K_CTRLFLAG;\r\n      }\r\n    }\r\n\r\n    return modifiers;\r\n  }\r\n\r\n  /**\r\n   * Function     keyMatch      KKM\r\n   * Scope        Public\r\n   * @param       {Object}      e           keystroke event\r\n   * @param       {number}      Lruleshift\r\n   * @param       {number}      Lrulekey\r\n   * @return      {boolean}                 True if key matches rule\r\n   * Description  Test keystroke with modifiers against rule\r\n   */\r\n  keyMatch(e: KeyEvent, Lruleshift:number, Lrulekey:number): boolean {\r\n    var retVal = false; // I3318\r\n    var keyCode = (e.Lcode == 173 ? 189 : e.Lcode);  //I3555 (Firefox hyphen issue)\r\n\r\n    let bitmask = this.activeKeyboard.modifierBitmask;\r\n    var modifierBitmask = bitmask & Codes.modifierBitmasks[\"ALL\"];\r\n    var stateBitmask = bitmask & Codes.stateBitmasks[\"ALL\"];\r\n\r\n    const eventModifiers = KeyboardInterface.matchModifiersToRuleChirality(e.Lmodifiers, Lruleshift);\r\n\r\n    if(e.vkCode > 255) {\r\n      keyCode = e.vkCode; // added to support extended (touch-hold) keys for mnemonic layouts\r\n    }\r\n\r\n    if(e.LisVirtualKey || keyCode > 255) {\r\n      if((Lruleshift & 0x4000) == 0x4000 || (keyCode > 255)) { // added keyCode test to support extended keys\r\n        retVal = ((Lrulekey == keyCode) && ((Lruleshift & modifierBitmask) == eventModifiers)); //I3318, I3555\r\n        retVal = retVal && this.stateMatch(e, Lruleshift & stateBitmask);\r\n      }\r\n    } else if((Lruleshift & 0x4000) == 0) {\r\n      retVal = (keyCode == Lrulekey); // I3318, I3555\r\n    }\r\n    if(!retVal) {\r\n      this.activeTargetOutput.deadkeys().resetMatched();  // I3318\r\n    }\r\n    return retVal; // I3318\r\n  };\r\n\r\n  /**\r\n   * Function     stateMatch    KSM\r\n   * Scope        Public\r\n   * @param       {Object}      e       keystroke event\r\n   * @param       {number}      Lstate\r\n   * Description  Test keystroke against state key rules\r\n   */\r\n  stateMatch(e: KeyEvent, Lstate: number) {\r\n    return ((Lstate & e.Lstates) == Lstate);\r\n  }\r\n\r\n  /**\r\n   * Function     keyInformation  KKI\r\n   * Scope        Public\r\n   * @param       {Object}      e\r\n   * @return      {Object}              Object with event's virtual key flag, key code, and modifiers\r\n   * Description  Get object with extended key event information\r\n   */\r\n  keyInformation(e: KeyEvent): KeyInformation {\r\n    var ei = new KeyInformation();\r\n    ei['vk'] = e.LisVirtualKey;\r\n    ei['code'] = e.Lcode;\r\n    ei['modifiers'] = e.Lmodifiers;\r\n    return ei;\r\n  };\r\n\r\n  /**\r\n   * Function     deadkeyMatch  KDM\r\n   * Scope        Public\r\n   * @param       {number}      n       offset from current cursor position\r\n   * @param       {Object}      Ptarg   target element\r\n   * @param       {number}      d       deadkey\r\n   * @return      {boolean}             True if deadkey found selected context matches val\r\n   * Description  Match deadkey at current cursor position\r\n   */\r\n  deadkeyMatch(n: number, outputTarget: OutputTarget, d: number): boolean {\r\n    return outputTarget.hasDeadkeyMatch(n, d);\r\n  }\r\n\r\n  /**\r\n   * Function     beep          KB\r\n   * Scope        Public\r\n   * @param       {Object}      Pelem     element to flash\r\n   * Description  Flash body as substitute for audible beep; notify embedded device to vibrate\r\n   */\r\n  beep(outputTarget: OutputTarget): void {\r\n    this.resetContextCache();\r\n\r\n    // Denote as part of the matched rule's behavior.\r\n    this.ruleBehavior.beep = true;\r\n  }\r\n\r\n  _ExplodeStore(store: KeyboardStore): ComplexKeyboardStore {\r\n    if(typeof(store) == 'string') {\r\n      let cachedStores = this.activeKeyboard.explodedStores;\r\n\r\n      // Is the result cached?\r\n      if(cachedStores[store]) {\r\n        return cachedStores[store];\r\n      }\r\n\r\n      // Nope, so let's build its cache.\r\n      var result: ComplexKeyboardStore = [];\r\n      for(var i=0; i < store._kmwLength(); i++) {\r\n        result.push(store._kmwCharAt(i));\r\n      }\r\n\r\n      // Cache the result for later!\r\n      cachedStores[store] = result;\r\n      return result;\r\n    } else {\r\n      return store;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     any           KA\r\n   * Scope        Public\r\n   * @param       {number}      n     character position (index)\r\n   * @param       {string}      ch    character to find in string\r\n   * @param       {string}      s     'any' string\r\n   * @return      {boolean}           True if character found in 'any' string, sets index accordingly\r\n   * Description  Test for character matching\r\n   */\r\n  any(n: number, ch: KeyboardStoreElement, s: KeyboardStore): boolean {\r\n    if(ch == '') {\r\n      return false;\r\n    }\r\n\r\n    s = this._ExplodeStore(s);\r\n    var Lix = -1;\r\n    for(var i=0; i < s.length; i++) {\r\n      const entry = s[i];\r\n      if(typeof(entry) == 'string') {\r\n        if(s[i] == ch) {\r\n          Lix = i;\r\n          break;\r\n        }\r\n        // @ts-ignore // Needs to test against .t for automatic inference, but it's not actually there.\r\n      } else if(entry.d === (ch as RuleDeadkey).d) {\r\n        Lix = i;\r\n        break;\r\n      }\r\n    }\r\n    this._AnyIndices[n] = Lix;\r\n    return Lix >= 0;\r\n  }\r\n\r\n  /**\r\n   * Function     _Index\r\n   * Scope        Public\r\n   * @param       {string}      Ps      string\r\n   * @param       {number}      Pn      index\r\n   * Description  Returns the character from a store string according to the offset in the index array\r\n   */\r\n  _Index(Ps: KeyboardStore, Pn: number): KeyboardStoreElement {\r\n    Ps = this._ExplodeStore(Ps);\r\n\r\n    if(this._AnyIndices[Pn-1] < Ps.length) {   //I3319\r\n      return Ps[this._AnyIndices[Pn-1]];\r\n    } else {\r\n      /* Should not be possible for a compiled keyboard, but may arise\r\n      * during the development of handwritten keyboards.\r\n      */\r\n      console.warn(\"Unmatched contextual index() statement detected in rule with index \" + Pn + \"!\");\r\n      return \"\";\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     indexOutput   KIO\r\n   * Scope        Public\r\n   * @param       {number}      Pdn     no of character to overwrite (delete)\r\n   * @param       {string}      Ps      string\r\n   * @param       {number}      Pn      index\r\n   * @param       {Object}      Pelem   element to output to\r\n   * Description  Output a character selected from the string according to the offset in the index array\r\n   */\r\n  indexOutput(Pdn: number, Ps: KeyboardStore, Pn: number, outputTarget: OutputTarget): void {\r\n    this.resetContextCache();\r\n\r\n    var assertNever = function(x: never): never {\r\n      // Could be accessed by improperly handwritten calls to `fullContextMatch`.\r\n      throw new Error(\"Unexpected object in fullContextMatch specification: \" + x);\r\n    }\r\n\r\n    var indexChar = this._Index(Ps, Pn);\r\n    if(indexChar !== \"\") {\r\n      if(typeof indexChar == 'string' ) {\r\n        this.output(Pdn, outputTarget, indexChar);  //I3319\r\n      } else if(indexChar.t) {\r\n        switch(indexChar.t) {\r\n          case 'b': // Beep commands may appear within stores.\r\n            this.beep(outputTarget);\r\n            break;\r\n          case 'd':\r\n            this.deadkeyOutput(Pdn, outputTarget, indexChar.d);\r\n            break;\r\n          default:\r\n            assertNever(indexChar);\r\n        }\r\n      } else { // For keyboards developed during 10.0's alpha phase - t:'d' was assumed.\r\n        this.deadkeyOutput(Pdn, outputTarget, (indexChar as any).d);\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Function     deleteContext KDC\r\n   * Scope        Public\r\n   * @param       {number}      dn      number of context entries to overwrite\r\n   * @param       {Object}      Pelem   element to output to\r\n   * @param       {string}      s       string to output\r\n   * Description  Keyboard output\r\n   */\r\n  deleteContext(dn: number, outputTarget: OutputTarget): void {\r\n    var context: CachedExEntry;\r\n\r\n    // We want to control exactly which deadkeys get removed.\r\n    if(dn > 0) {\r\n      context = this._BuildExtendedContext(dn, dn, outputTarget);\r\n      let nulCount = 0;\r\n\r\n      for(var i=0; i < context.valContext.length; i++) {\r\n        var dk = context.deadContext[i];\r\n\r\n        if(dk) {\r\n          // Remove deadkey in context.\r\n          outputTarget.deadkeys().remove(dk);\r\n\r\n          // Reduce our reported context size.\r\n          dn--;\r\n        } else if(context.valContext[i] == \"\\uFFFE\") {\r\n          // Count any `nul` sentinels that would contribute to our deletion count.\r\n          nulCount++;\r\n        }\r\n      }\r\n\r\n      // Prevent attempts to delete nul sentinels, as they don't exist in the actual context.\r\n      // (Addresses regression from KMW v 12.0 paired with Developer bug through same version)\r\n      let contextLength = context.valContext.length - nulCount;\r\n      if(dn > contextLength) {\r\n        dn = contextLength;\r\n      }\r\n    }\r\n\r\n    // If a matched deadkey hasn't been deleted, we don't WANT to delete it.\r\n    outputTarget.deadkeys().resetMatched();\r\n\r\n    // Why reinvent the wheel?  Delete the remaining characters by 'inserting a blank string'.\r\n    this.output(dn, outputTarget, '');\r\n  }\r\n\r\n  /**\r\n   * Function     output        KO\r\n   * Scope        Public\r\n   * @param       {number}      dn      number of characters to overwrite\r\n   * @param       {Object}      Pelem   element to output to\r\n   * @param       {string}      s       string to output\r\n   * Description  Keyboard output\r\n   */\r\n  output(dn: number, outputTarget: OutputTarget, s:string): void {\r\n    this.resetContextCache();\r\n\r\n    outputTarget.saveProperties();\r\n    outputTarget.clearSelection();\r\n    outputTarget.deadkeys().deleteMatched(); // I3318\r\n    if(dn >= 0) {\r\n      // Automatically manages affected deadkey positions.  Does not delete deadkeys b/c legacy behavior support.\r\n      outputTarget.deleteCharsBeforeCaret(dn);\r\n    }\r\n    // Automatically manages affected deadkey positions.\r\n    outputTarget.insertTextBeforeCaret(s);\r\n    outputTarget.restoreProperties();\r\n  }\r\n\r\n  /**\r\n   * `contextExOutput` function emits the character or object at `contextOffset` from the\r\n   * current matched rule's context. Introduced in Keyman 14.0, in order to resolve a\r\n   * gap between desktop and web core functionality for context(n) matching on notany().\r\n   * See #917 for additional detail.\r\n   * @alias       KCXO\r\n   * @public\r\n   * @param       {number}        Pdn            number of characters to delete left of cursor\r\n   * @param       {OutputTarget}  outputTarget   target to output to\r\n   * @param       {number}        contextLength  length of current rule context to retrieve\r\n   * @param       {number}        contextOffset  offset from start of current rule context, 1-based\r\n   */\r\n  contextExOutput(Pdn: number, outputTarget: OutputTarget, contextLength: number, contextOffset: number): void {\r\n    this.resetContextCache();\r\n\r\n    if(Pdn >= 0) {\r\n      this.output(Pdn, outputTarget, \"\");\r\n    }\r\n\r\n    const context = this.ruleContextEx.get(contextLength, contextLength);\r\n    const dk = context.deadContext[contextOffset-1], vc = context.valContext[contextOffset-1];\r\n    if(dk) {\r\n      outputTarget.insertDeadkeyBeforeCaret(dk.d);\r\n    } else if(typeof vc == 'string') {\r\n      this.output(-1, outputTarget, vc);\r\n    } else {\r\n      throw new Error(\"contextExOutput: should never be a numeric valContext with no corresponding deadContext\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     deadkeyOutput KDO\r\n   * Scope        Public\r\n   * @param       {number}      Pdn     no of character to overwrite (delete)\r\n   * @param       {Object}      Pelem   element to output to\r\n   * @param       {number}      Pd      deadkey id\r\n   * Description  Record a deadkey at current cursor position, deleting Pdn characters first\r\n   */\r\n  deadkeyOutput(Pdn: number, outputTarget: OutputTarget, Pd: number): void {\r\n    this.resetContextCache();\r\n\r\n    if(Pdn >= 0) {\r\n      this.output(Pdn, outputTarget,\"\");  //I3318 corrected to >=\r\n    }\r\n\r\n    outputTarget.insertDeadkeyBeforeCaret(Pd);\r\n    //    _DebugDeadKeys(Pelem, 'KDeadKeyOutput: dn='+Pdn+'; deadKey='+Pd);\r\n  }\r\n\r\n  /**\r\n   * KIFS compares the content of a system store with a string value\r\n   *\r\n   * @param       {number}      systemId    ID of the system store to test (only TSS_LAYER currently supported)\r\n   * @param       {string}      strValue    String value to compare to\r\n   * @param       {Object}      Pelem       Currently active element (may be needed by future tests)\r\n   * @return      {boolean}                 True if the test succeeds\r\n   */\r\n  ifStore(systemId: number, strValue: string, outputTarget: OutputTarget): boolean {\r\n    var result=true;\r\n    let store = this.systemStores[systemId];\r\n    if(store) {\r\n      result = store.matches(strValue);\r\n    }\r\n    return result; //Moved from previous line, now supports layer selection, Build 350\r\n  }\r\n\r\n  /**\r\n   * KSETS sets the value of a system store to a string\r\n   *\r\n   * @param       {number}      systemId    ID of the system store to set (only TSS_LAYER currently supported)\r\n   * @param       {string}      strValue    String to set as the system store content\r\n   * @param       {Object}      Pelem       Currently active element (may be needed in future tests)\r\n   * @return      {boolean}                 True if command succeeds\r\n   *                                        (i.e. for TSS_LAYER, if the layer is successfully selected)\r\n   *\r\n   * Note that option/variable stores are instead set within keyboard script code, as they only\r\n   * affect keyboard behavior.\r\n   */\r\n  setStore(systemId: number, strValue: string, outputTarget: OutputTarget): boolean {\r\n    this.resetContextCache();\r\n    // Unique case:  we only allow set(&layer) ops from keyboard rules triggered by touch OSKs.\r\n    if(systemId == SystemStoreIDs.TSS_LAYER && this.activeDevice.touchable) {\r\n      // Denote the changed store as part of the matched rule's behavior.\r\n      this.ruleBehavior.setStore[systemId] = strValue;\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Load an option store value from a cookie or default value\r\n   *\r\n   * @param       {string}      kbdName     keyboard internal name\r\n   * @param       {string}      storeName   store (option) name, embedded in cookie name\r\n   * @param       {string}      dfltValue   default value\r\n   * @return      {string}                  current or default option value\r\n   *\r\n   * This will only ever be called when the keyboard is loaded, as it is used by keyboards\r\n   * to initialize a store value on the keyboard's script object.\r\n   */\r\n  loadStore(kbdName: string, storeName:string, dfltValue:string): string {\r\n    this.resetContextCache();\r\n    if(this.variableStoreSerializer) {\r\n      let cValue = this.variableStoreSerializer.loadStore(kbdName, storeName);\r\n      return cValue[storeName] || dfltValue;\r\n    } else {\r\n      return dfltValue;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save an option store value to a cookie\r\n   *\r\n   * @param       {string}      storeName   store (option) name, embedded in cookie name\r\n   * @param       {string}      optValue    option value to save\r\n   * @return      {boolean}                 true if save successful\r\n   *\r\n   * Note that a keyboard will freely manipulate the value of its variable stores on the\r\n   * script object within its own code.  This function's use is merely to _persist_ that\r\n   * value across sessions, providing a custom user default for later uses of the keyboard.\r\n   */\r\n  saveStore(storeName:string, optValue:string): boolean {\r\n    this.resetContextCache();\r\n    var kbd=this.activeKeyboard;\r\n    if(!kbd || typeof kbd.id == 'undefined' || kbd.id == '') {\r\n      return false;\r\n    }\r\n\r\n    // And the lookup under that entry looks for the value under the store name, again.\r\n    let valueObj: VariableStore = {};\r\n    valueObj[storeName] = optValue;\r\n\r\n    // Null-check in case of invocation during unit-test\r\n    if(this.ruleBehavior) {\r\n      this.ruleBehavior.saveStore[storeName] = valueObj;\r\n    } else {\r\n      // We're in a unit-test environment, directly invoking this method from outside of a keyboard.\r\n      // In this case, we should immediately commit the change.\r\n      this.variableStoreSerializer.saveStore(this.activeKeyboard.id, storeName, valueObj);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  resetContextCache(): void {\r\n    this.cachedContext.reset();\r\n    this.cachedContextEx.reset();\r\n  }\r\n\r\n  defaultBackspace(outputTarget: OutputTarget) {\r\n    if(outputTarget.isSelectionEmpty()) {\r\n      // Delete the character left of the caret\r\n      this.output(1, outputTarget, \"\");\r\n    } else {\r\n      // Delete just the selection\r\n      this.output(0, outputTarget, \"\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     processNewContextEvent\r\n   * Scope        Private\r\n   * @param       {Object}        outputTarget   The target receiving input\r\n   * @param       {Object}        keystroke      The input keystroke (with its properties) to be mapped by the keyboard.\r\n   * Description  Calls the keyboard's `begin newContext` group\r\n   * @returns     {RuleBehavior}  Record of commands and state changes that result from executing `begin NewContext`\r\n   */\r\n  processNewContextEvent(outputTarget: OutputTarget, keystroke: KeyEvent): RuleBehavior {\r\n    if(!this.activeKeyboard) {\r\n      throw \"No active keyboard for keystroke processing!\";\r\n    }\r\n    return this.process(this.activeKeyboard.processNewContextEvent.bind(this.activeKeyboard), outputTarget, keystroke, true);\r\n  }\r\n\r\n  /**\r\n   * Function     processPostKeystroke\r\n   * Scope        Private\r\n   * @param       {Object}        outputTarget   The target receiving input\r\n   * @param       {Object}        keystroke      The input keystroke with relevant properties to be mapped by the keyboard.\r\n   * Description  Calls the keyboard's `begin postKeystroke` group\r\n   * @returns     {RuleBehavior}  Record of commands and state changes that result from executing `begin PostKeystroke`\r\n   */\r\n  processPostKeystroke(outputTarget: OutputTarget, keystroke: KeyEvent): RuleBehavior {\r\n    if(!this.activeKeyboard) {\r\n      throw \"No active keyboard for keystroke processing!\";\r\n    }\r\n    return this.process(this.activeKeyboard.processPostKeystroke.bind(this.activeKeyboard), outputTarget, keystroke, true);\r\n  }\r\n\r\n  /**\r\n   * Function     processKeystroke\r\n   * Scope        Private\r\n   * @param       {Object}        outputTarget   The target receiving input\r\n   * @param       {Object}        keystroke   The input keystroke (with its properties) to be mapped by the keyboard.\r\n   * Description  Encapsulates calls to keyboard input processing.\r\n   * @returns     {RuleBehavior}  Record of commands and state changes that result from executing `begin Unicode`\r\n   */\r\n  processKeystroke(outputTarget: OutputTarget, keystroke: KeyEvent): RuleBehavior {\r\n    if(!this.activeKeyboard) {\r\n      throw \"No active keyboard for keystroke processing!\";\r\n    }\r\n    return this.process(this.activeKeyboard.process.bind(this.activeKeyboard), outputTarget, keystroke, false);\r\n  }\r\n\r\n  private process(callee: (outputTarget: OutputTarget, keystroke: KeyEvent) => boolean, outputTarget: OutputTarget, keystroke: KeyEvent, readonly: boolean): RuleBehavior {\r\n    // Clear internal state tracking data from prior keystrokes.\r\n    if(!outputTarget) {\r\n      throw \"No target specified for keyboard output!\";\r\n    } else if(!this.activeKeyboard) {\r\n      throw \"No active keyboard for keystroke processing!\";\r\n    } else if(!callee) {\r\n      throw \"No callee for keystroke processing!\";\r\n    }\r\n\r\n    outputTarget.invalidateSelection();\r\n\r\n    outputTarget.deadkeys().resetMatched();       // I3318\r\n    this.resetContextCache();\r\n\r\n    // Capture the initial state of the OutputTarget before any rules are matched.\r\n    let preInput = Mock.from(outputTarget, true);\r\n\r\n    // Capture the initial state of any variable stores\r\n    const cachedVariableStores = this.activeKeyboard.variableStores;\r\n\r\n    // Establishes the results object, allowing corresponding commands to set values here as appropriate.\r\n    this.ruleBehavior = new RuleBehavior();\r\n\r\n    // Ensure the settings are in place so that KIFS/ifState activates and deactivates\r\n    // the appropriate rule(s) for the modeled device.\r\n    this.activeDevice = keystroke.device;\r\n\r\n    // Calls the start-group of the active keyboard.\r\n    this.activeTargetOutput = outputTarget;\r\n    var matched = callee(outputTarget, keystroke);\r\n    this.activeTargetOutput = null;\r\n\r\n    // Finalize the rule's results.\r\n    this.ruleBehavior.transcription = outputTarget.buildTranscriptionFrom(preInput, keystroke, readonly);\r\n\r\n    // We always backup the changes to variable stores to the RuleBehavior, to\r\n    // be applied during finalization, then restore them to the cached initial\r\n    // values to avoid side-effects with predictive text mocks.\r\n    this.ruleBehavior.variableStores = this.activeKeyboard.variableStores;\r\n    this.activeKeyboard.variableStores = cachedVariableStores;\r\n\r\n    // `matched` refers to whether or not the FINAL rule (from any group) matched, rather than\r\n    // whether or not ANY rule matched.  If the final rule doesn't match, we trigger the key's\r\n    // default behavior (if appropriate).\r\n    //\r\n    // See https://github.com/keymanapp/keyman/pull/4350#issuecomment-768753852\r\n    this.ruleBehavior.triggerKeyDefault = !matched;\r\n\r\n    // Clear our result-tracking variable to prevent any possible pollution for future processing.\r\n    let behavior = this.ruleBehavior;\r\n    this.ruleBehavior = null;\r\n\r\n    return behavior;\r\n  }\r\n\r\n  /**\r\n   * Applies the dictionary of variable store values to the active keyboard\r\n   *\r\n   * Has no effect on keyboards compiled with 14.0 or earlier; system store\r\n   * names are not exposed unless compiled with Developer 15.0 or later.\r\n   *\r\n   * @param stores A dictionary of stores which should be found in the\r\n   *               keyboard\r\n   */\r\n  applyVariableStores(stores: VariableStoreDictionary): void {\r\n    this.activeKeyboard.variableStores = stores;\r\n  }\r\n\r\n  /**\r\n   * Publishes the KeyboardInterface's shorthand API names.  As this assigns the current functions\r\n   * held by the longform versions, note that this should be called after replacing any of them via\r\n   * JS method extension.\r\n   *\r\n   * DOM-aware KeymanWeb should call this after its domKbdInterface.ts code is loaded, as it replaces\r\n   * a few.  (This is currently done within its kmwapi.ts.)\r\n   */\r\n  static __publishShorthandAPI() {\r\n    // Keyboard callbacks\r\n    let prototype = this.prototype;\r\n\r\n    var exportKBCallback = function(miniName: string, longName: keyof KeyboardInterface) {\r\n      if(prototype[longName]) {\r\n        // @ts-ignore\r\n        prototype[miniName] = prototype[longName];\r\n      }\r\n    }\r\n\r\n    exportKBCallback('KSF', 'saveFocus');\r\n    // @ts-ignore // is defined at a higher level\r\n    exportKBCallback('KBR', 'beepReset');\r\n    exportKBCallback('KT', 'insertText');\r\n    exportKBCallback('KR', 'registerKeyboard');\r\n    // @ts-ignore // is defined at a higher level\r\n    exportKBCallback('KRS', 'registerStub');\r\n    exportKBCallback('KC', 'context');\r\n    exportKBCallback('KN', 'nul');\r\n    exportKBCallback('KCM', 'contextMatch');\r\n    exportKBCallback('KFCM', 'fullContextMatch');\r\n    exportKBCallback('KIK', 'isKeypress');\r\n    exportKBCallback('KKM', 'keyMatch');\r\n    exportKBCallback('KSM', 'stateMatch');\r\n    exportKBCallback('KKI', 'keyInformation');\r\n    exportKBCallback('KDM', 'deadkeyMatch');\r\n    exportKBCallback('KB', 'beep');\r\n    exportKBCallback('KA', 'any');\r\n    exportKBCallback('KDC', 'deleteContext');\r\n    exportKBCallback('KO', 'output');\r\n    exportKBCallback('KDO', 'deadkeyOutput');\r\n    exportKBCallback('KCXO', 'contextExOutput');\r\n    exportKBCallback('KIO', 'indexOutput');\r\n    exportKBCallback('KIFS', 'ifStore');\r\n    exportKBCallback('KSETS', 'setStore');\r\n    exportKBCallback('KLOAD', 'loadStore');\r\n    exportKBCallback('KSAVE', 'saveStore');\r\n  }\r\n}\r\n\r\n(function() {\r\n  // This will be the only call within the keyboard module.\r\n  KeyboardInterface.__publishShorthandAPI();\r\n}());\r\n",
    "/*\r\n * Keyman is copyright (C) SIL International. MIT License.\r\n *\r\n * Implementation of the JavaScript keyboard processor\r\n */\r\n\r\n// #region Big ol' list of imports\r\n\r\nimport { EventEmitter } from 'eventemitter3';\r\nimport { ModifierKeyConstants } from '@keymanapp/common-types';\r\nimport {\r\n  Codes, type Keyboard, MinimalKeymanGlobal, KeyEvent, Layouts,\r\n  DefaultRules, EmulationKeystrokes\r\n} from \"keyman/engine/keyboard\";\r\nimport { Mock } from \"./mock.js\";\r\nimport type OutputTarget from \"./outputTarget.js\";\r\nimport RuleBehavior from \"./ruleBehavior.js\";\r\nimport KeyboardInterface from './kbdInterface.js';\r\nimport { DeviceSpec, globalObject } from \"@keymanapp/web-utils\";\r\nimport { type MutableSystemStore, SystemStoreIDs } from \"./systemStores.js\";\r\n\r\n// #endregion\r\n\r\n// Also relies on @keymanapp/web-utils, which is included via tsconfig.json.\r\n\r\nexport type BeepHandler = (outputTarget: OutputTarget) => void;\r\nexport type LogMessageHandler = (str: string) => void;\r\n\r\nexport interface ProcessorInitOptions {\r\n  baseLayout?: string;\r\n  keyboardInterface?: KeyboardInterface;\r\n  defaultOutputRules?: DefaultRules; // Takes the class def object, not an instance thereof.\r\n}\r\n\r\ninterface EventMap {\r\n  statekeychange: (stateKeys: typeof KeyboardProcessor.prototype.stateKeys) => void;\r\n}\r\n\r\nexport default class KeyboardProcessor extends EventEmitter<EventMap> {\r\n  public static readonly DEFAULT_OPTIONS: ProcessorInitOptions = {\r\n    baseLayout: 'us',\r\n    defaultOutputRules: new DefaultRules()\r\n  };\r\n\r\n  // Tracks the simulated value for supported state keys, allowing the OSK to mirror a physical keyboard for them.\r\n  // Using the exact keyCode name from the Codes definitions will allow for certain optimizations elsewhere in the code.\r\n  stateKeys = {\r\n    \"K_CAPS\":false,\r\n    \"K_NUMLOCK\":false,\r\n    \"K_SCROLL\":false\r\n  };\r\n\r\n  // Tracks the most recent modifier state information in order to quickly detect changes\r\n  // in keyboard state not otherwise captured by the hosting page in the browser.\r\n  // Needed for AltGr simulation.\r\n  modStateFlags: number = 0;\r\n\r\n  keyboardInterface: KeyboardInterface;\r\n\r\n  /**\r\n   * Indicates the device (platform) to be used for non-keystroke events,\r\n   * such as those sent to `begin postkeystroke` and `begin newcontext`\r\n   * entry points.\r\n   */\r\n  contextDevice: DeviceSpec;\r\n\r\n  baseLayout: string;\r\n\r\n  defaultRules: DefaultRules;\r\n\r\n  // Callbacks for various feedback types\r\n  beepHandler?: BeepHandler;\r\n  warningLogger?: LogMessageHandler;\r\n  errorLogger?: LogMessageHandler;\r\n\r\n  constructor(device: DeviceSpec, options?: ProcessorInitOptions) {\r\n    super();\r\n\r\n    if(!options) {\r\n      options = KeyboardProcessor.DEFAULT_OPTIONS;\r\n    }\r\n\r\n    this.contextDevice = device;\r\n\r\n    this.baseLayout = options.baseLayout || KeyboardProcessor.DEFAULT_OPTIONS.baseLayout;\r\n    this.keyboardInterface = options.keyboardInterface || new KeyboardInterface(globalObject(), MinimalKeymanGlobal);\r\n    this.defaultRules = options.defaultOutputRules || KeyboardProcessor.DEFAULT_OPTIONS.defaultOutputRules;\r\n  }\r\n\r\n  public get activeKeyboard(): Keyboard {\r\n    return this.keyboardInterface.activeKeyboard;\r\n  }\r\n\r\n  public set activeKeyboard(keyboard: Keyboard) {\r\n    this.keyboardInterface.activeKeyboard = keyboard;\r\n\r\n    // All old deadkeys and keyboard-specific cache should immediately be invalidated\r\n    // on a keyboard change.\r\n    this.resetContext();\r\n  }\r\n\r\n  get layerStore(): MutableSystemStore {\r\n    return this.keyboardInterface.systemStores[SystemStoreIDs.TSS_LAYER] as MutableSystemStore;\r\n  }\r\n\r\n  public get newLayerStore(): MutableSystemStore {\r\n    return this.keyboardInterface.systemStores[SystemStoreIDs.TSS_NEWLAYER] as MutableSystemStore;\r\n  }\r\n\r\n  public get oldLayerStore(): MutableSystemStore {\r\n    return this.keyboardInterface.systemStores[SystemStoreIDs.TSS_OLDLAYER] as MutableSystemStore;\r\n  }\r\n\r\n  public get layerId(): string {\r\n    return this.layerStore.value;\r\n  }\r\n\r\n  // Note:  will trigger an 'event' callback designed to notify the OSK of layer changes.\r\n  public set layerId(value: string) {\r\n    this.layerStore.set(value);\r\n  }\r\n\r\n  /**\r\n   * Get the default RuleBehavior for the specified key, attempting to mimic standard browser defaults\r\n   * where and when appropriate.\r\n   *\r\n   * @param   {object}  Lkc           The pre-analyzed KeyEvent object\r\n   * @param   {boolean} outputTarget  The OutputTarget receiving the KeyEvent\r\n   * @return  {string}\r\n   */\r\n  defaultRuleBehavior(Lkc: KeyEvent, outputTarget: OutputTarget, readonly: boolean): RuleBehavior {\r\n    let preInput = Mock.from(outputTarget, readonly);\r\n    let ruleBehavior = new RuleBehavior();\r\n\r\n    let matched = false;\r\n    var char = '';\r\n    var special: EmulationKeystrokes;\r\n    if(Lkc.isSynthetic || outputTarget.isSynthetic) {\r\n      matched = true;  // All the conditions below result in matches until the final else, which restores the expected default\r\n                        // if no match occurs.\r\n\r\n      if(this.defaultRules.isCommand(Lkc)) {\r\n        // Note this in the rule behavior, return successfully.  We'll consider applying it later.\r\n        ruleBehavior.triggersDefaultCommand = true;\r\n\r\n        // We'd rather let the browser handle these keys, but we're using emulated keystrokes, forcing KMW\r\n        // to emulate default behavior here.\r\n      } else if((special = this.defaultRules.forSpecialEmulation(Lkc)) != null) {\r\n        switch(special) {\r\n          case EmulationKeystrokes.Backspace:\r\n            this.keyboardInterface.defaultBackspace(outputTarget);\r\n            break;\r\n          case EmulationKeystrokes.Enter:\r\n            outputTarget.handleNewlineAtCaret();\r\n            break;\r\n          // case '\\u007f': // K_DEL\r\n            // // For (possible) future implementation.\r\n            // // Would recommend (conceptually) equaling K_RIGHT + K_BKSP, the former of which would technically be a 'command'.\r\n          default:\r\n            // In case we extend the allowed set, but forget to implement its handling case above.\r\n            ruleBehavior.errorLog = \"Unexpected 'special emulation' character (\\\\u\" + (special as String).kmwCharCodeAt(0).toString(16) + \") went unhandled!\";\r\n        }\r\n      } else {\r\n        // Back to the standard default, pending normal matching.\r\n        matched = false;\r\n      }\r\n    }\r\n\r\n    let isMnemonic = this.activeKeyboard && this.activeKeyboard.isMnemonic;\r\n\r\n    if(!matched) {\r\n      if((char = this.defaultRules.forAny(Lkc, isMnemonic, ruleBehavior)) != null) {\r\n        special = this.defaultRules.forSpecialEmulation(Lkc)\r\n        if(special == EmulationKeystrokes.Backspace) {\r\n          // A browser's default backspace may fail to delete both parts of an SMP character.\r\n          this.keyboardInterface.defaultBackspace(outputTarget);\r\n        } else if(special || this.defaultRules.isCommand(Lkc)) { // Filters out 'commands' like TAB.\r\n          // We only do the \"for special emulation\" cases under the condition above... aside from backspace\r\n          // Let the browser handle those.\r\n          return null;\r\n        } else {\r\n          this.keyboardInterface.output(0, outputTarget, char);\r\n        }\r\n      } else {\r\n        // No match, no default RuleBehavior.\r\n        return null;\r\n      }\r\n    }\r\n\r\n    // Shortcut things immediately if there were issues generating this rule behavior.\r\n    if(ruleBehavior.errorLog) {\r\n      return ruleBehavior;\r\n    }\r\n\r\n    let transcription = outputTarget.buildTranscriptionFrom(preInput, Lkc, readonly);\r\n    ruleBehavior.transcription = transcription;\r\n\r\n    return ruleBehavior;\r\n  }\r\n\r\n  processNewContextEvent(device: DeviceSpec, outputTarget: OutputTarget): RuleBehavior {\r\n    return this.activeKeyboard ?\r\n      this.keyboardInterface.processNewContextEvent(outputTarget, this.activeKeyboard.constructNullKeyEvent(device, this.stateKeys)) :\r\n      null;\r\n  }\r\n\r\n  processPostKeystroke(device: DeviceSpec, outputTarget: OutputTarget): RuleBehavior {\r\n    return this.activeKeyboard ?\r\n      this.keyboardInterface.processPostKeystroke(outputTarget, this.activeKeyboard.constructNullKeyEvent(device, this.stateKeys)) :\r\n      null;\r\n  }\r\n\r\n  processKeystroke(keyEvent: KeyEvent, outputTarget: OutputTarget): RuleBehavior {\r\n    var matchBehavior: RuleBehavior;\r\n\r\n    // Before keyboard rules apply, check if the left-context is empty.\r\n    const nothingDeletable = outputTarget.getTextBeforeCaret().kmwLength() == 0 && outputTarget.isSelectionEmpty();\r\n\r\n    // Pass this key code and state to the keyboard program\r\n    if(this.activeKeyboard && keyEvent.Lcode != 0) {\r\n      matchBehavior = this.keyboardInterface.processKeystroke(outputTarget, keyEvent);\r\n    }\r\n\r\n    // Final conditional component - if someone actually makes a keyboard rule that blocks output\r\n    // of K_BKSP with an empty left-context or does other really weird things... it's on them.\r\n    //\r\n    // We don't expect such rules to appear, but trying to override them would likely result in odd\r\n    // behavior in cases where such rules actually would appear.  (Though, _that_ should be caught\r\n    // in the keyboard-review process and heavily discouraged, so... yeah.)\r\n    if(nothingDeletable && keyEvent.Lcode == Codes.keyCodes.K_BKSP && matchBehavior.triggerKeyDefault) {\r\n      matchBehavior = this.defaultRuleBehavior(keyEvent, outputTarget, false);\r\n      matchBehavior.triggerKeyDefault = true;\r\n      // Force a single `deleteLeft`.\r\n      // @ts-ignore // force value override, because deleteLeft is marked readonly.\r\n      matchBehavior.transcription.transform.deleteLeft = 1;\r\n    } else if(!matchBehavior || matchBehavior.triggerKeyDefault) {\r\n      // Restore the virtual key code if a mnemonic keyboard is being used\r\n      // If no vkCode value was stored, maintain the original Lcode value.\r\n      keyEvent.Lcode=keyEvent.vkCode || keyEvent.Lcode;\r\n\r\n      // Handle unmapped keys, including special keys\r\n      // The following is physical layout dependent, so should be avoided if possible.  All keys should be mapped.\r\n      this.keyboardInterface.activeTargetOutput = outputTarget;\r\n\r\n      // Match against the 'default keyboard' - rules to mimic the default string output when typing in a browser.\r\n      // Many keyboards rely upon these 'implied rules'.\r\n      let defaultBehavior = this.defaultRuleBehavior(keyEvent, outputTarget, false);\r\n      if(defaultBehavior) {\r\n        if(!matchBehavior) {\r\n          matchBehavior = defaultBehavior;\r\n        } else {\r\n          matchBehavior.mergeInDefaults(defaultBehavior);\r\n        }\r\n        matchBehavior.triggerKeyDefault = false; // We've triggered it successfully.\r\n      } // If null, we must rely on something else (like the browser, in DOM-aware code) to fulfill the default.\r\n\r\n      this.keyboardInterface.activeTargetOutput = null;\r\n    }\r\n\r\n    return matchBehavior;\r\n  }\r\n\r\n  /**\r\n   * Function     _UpdateVKShift\r\n   * Scope        Private\r\n   * @param       {Object}            e     OSK event\r\n   * @return      {boolean}                 Always true\r\n   * Description  Updates the current shift state within KMW, updating the OSK's visualization thereof.\r\n   */\r\n  _UpdateVKShift(e: KeyEvent): boolean {\r\n    let keyShiftState=0;\r\n\r\n    const lockNames  = ['CAPS', 'NUM_LOCK', 'SCROLL_LOCK'] as const;\r\n    const lockKeys = ['K_CAPS', 'K_NUMLOCK', 'K_SCROLL'] as const;\r\n    const lockModifiers = [ModifierKeyConstants.CAPITALFLAG, ModifierKeyConstants.NUMLOCKFLAG, ModifierKeyConstants.SCROLLFLAG] as const;\r\n\r\n\r\n    if(!this.activeKeyboard) {\r\n      return true;\r\n    }\r\n\r\n    if(e) {\r\n      // read shift states from Pevent\r\n      keyShiftState = e.Lmodifiers;\r\n\r\n      // Are we simulating AltGr?  If it's a simulation and not real, time to un-simulate for the OSK.\r\n      if(this.activeKeyboard.isChiral && (this.activeKeyboard.emulatesAltGr) &&\r\n          (this.modStateFlags & Codes.modifierBitmasks['ALT_GR_SIM']) == Codes.modifierBitmasks['ALT_GR_SIM']) {\r\n        keyShiftState |= Codes.modifierBitmasks['ALT_GR_SIM'];\r\n        keyShiftState &= ~ModifierKeyConstants.RALTFLAG;\r\n      }\r\n\r\n      // Set stateKeys where corresponding value is passed in e.Lstates\r\n      let stateMutation = false;\r\n      for(let i=0; i < lockNames.length; i++) {\r\n        if(e.Lstates & Codes.stateBitmasks[lockNames[i]]) {\r\n          this.stateKeys[lockKeys[i]] = !!(e.Lstates & lockModifiers[i]);\r\n          stateMutation = true;\r\n        }\r\n      }\r\n\r\n      if(stateMutation) {\r\n        this.emit('statekeychange', this.stateKeys);\r\n      }\r\n    }\r\n\r\n    this.updateStates();\r\n\r\n    if(this.activeKeyboard.isMnemonic && this.stateKeys['K_CAPS']) {\r\n      // Modifier keypresses doesn't trigger mnemonic manipulation of modifier state.\r\n      // Only an output key does; active use of Caps will also flip the SHIFT flag.\r\n      if(!e || !e.isModifier) {\r\n        // Mnemonic keystrokes manipulate the SHIFT property based on CAPS state.\r\n        // We need to unflip them when tracking the OSK layer.\r\n        keyShiftState ^= ModifierKeyConstants.K_SHIFTFLAG;\r\n      }\r\n    }\r\n\r\n    this.layerId = this.getLayerId(keyShiftState);\r\n    return true;\r\n  }\r\n\r\n  private updateStates(): void {\r\n    const lockKeys = ['K_CAPS', 'K_NUMLOCK', 'K_SCROLL'] as const;\r\n    const lockModifiers = [ModifierKeyConstants.CAPITALFLAG, ModifierKeyConstants.NUMLOCKFLAG, ModifierKeyConstants.SCROLLFLAG] as const;\r\n    const noLockModifers = [ModifierKeyConstants.NOTCAPITALFLAG, ModifierKeyConstants.NOTNUMLOCKFLAG, ModifierKeyConstants.NOTSCROLLFLAG] as const;\r\n\r\n\r\n\r\n    for(let i=0; i < lockKeys.length; i++) {\r\n      const key = lockKeys[i];\r\n      const flag = this.stateKeys[key];\r\n\r\n      // Ensures that the current mod-state info properly matches the currently-simulated\r\n      // state key states.\r\n      if(flag) {\r\n        this.modStateFlags |= lockModifiers[i];\r\n        this.modStateFlags &= ~noLockModifers[i];\r\n      } else {\r\n        this.modStateFlags &= ~lockModifiers[i];\r\n        this.modStateFlags |= noLockModifers[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  getLayerId(modifier: number): string {\r\n    return Layouts.getLayerId(modifier);\r\n  }\r\n\r\n  /**\r\n   * Select the OSK's next keyboard layer based upon layer switching keys as a default\r\n   * The next layer will be determined from the key name unless otherwise specifed\r\n   *\r\n   *  @param  {string}                    keyName     key identifier\r\n   *  @return {boolean}                               return true if keyboard layer changed\r\n   */\r\n  selectLayer(keyEvent: KeyEvent): boolean {\r\n    let keyName = keyEvent.kName;\r\n    var nextLayer = keyEvent.kNextLayer;\r\n    var isChiral = this.activeKeyboard && this.activeKeyboard.isChiral;\r\n\r\n    // Layer must be identified by name, not number (27/08/2015)\r\n    if(typeof nextLayer == 'number') {\r\n      nextLayer = this.getLayerId(nextLayer * 0x10);\r\n    }\r\n\r\n    // Identify next layer, if required by key\r\n    if(!nextLayer) {\r\n      switch(keyName) {\r\n        case 'K_LSHIFT':\r\n        case 'K_RSHIFT':\r\n        case 'K_SHIFT':\r\n          nextLayer = 'shift';\r\n          break;\r\n        case 'K_LCONTROL':\r\n        case 'K_LCTRL':\r\n          if(isChiral) {\r\n            nextLayer = 'leftctrl';\r\n            break;\r\n          }\r\n        case 'K_RCONTROL':\r\n        case 'K_RCTRL':\r\n          if(isChiral) {\r\n            nextLayer = 'rightctrl';\r\n            break;\r\n          }\r\n        case 'K_CTRL':\r\n          nextLayer = 'ctrl';\r\n          break;\r\n        case 'K_LMENU':\r\n        case 'K_LALT':\r\n          if(isChiral) {\r\n            nextLayer = 'leftalt';\r\n            break;\r\n          }\r\n        case 'K_RMENU':\r\n        case 'K_RALT':\r\n          if(isChiral) {\r\n            nextLayer = 'rightalt';\r\n            break;\r\n          }\r\n        case 'K_ALT':\r\n          nextLayer = 'alt';\r\n          break;\r\n        case 'K_ALTGR':\r\n          if(isChiral) {\r\n            nextLayer = 'leftctrl-rightalt';\r\n          } else {\r\n            nextLayer = 'ctrl-alt';\r\n          }\r\n          break;\r\n        case 'K_CURRENCIES':\r\n        case 'K_NUMERALS':\r\n        case 'K_SHIFTED':\r\n        case 'K_UPPER':\r\n        case 'K_LOWER':\r\n        case 'K_SYMBOLS':\r\n          nextLayer = 'default';\r\n          break;\r\n      }\r\n    }\r\n\r\n    // If no key corresponding to a layer transition is pressed, maintain the current layer.\r\n    if(!nextLayer) {\r\n      return false;\r\n    }\r\n\r\n    // Change layer and refresh OSK\r\n    this.updateLayer(keyEvent, nextLayer);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Sets the new layer id, allowing for toggling shift/ctrl/alt while preserving the remainder\r\n   * of the modifiers represented by the current layer id (where applicable)\r\n   *\r\n   * @param       {string}      id      layer id (e.g. ctrlshift)\r\n   */\r\n  updateLayer(keyEvent: KeyEvent, id: string) {\r\n    let activeLayer = this.layerId;\r\n    var s = activeLayer;\r\n\r\n    // Do not change layer unless needed (27/08/2015)\r\n    if(id == activeLayer && keyEvent.device.formFactor != DeviceSpec.FormFactor.Desktop) {\r\n      return;\r\n    }\r\n\r\n    var idx=id;\r\n    var i;\r\n\r\n    if(keyEvent.device.formFactor == DeviceSpec.FormFactor.Desktop) {\r\n      // Need to test if target layer is a standard layer (based on the plain 'default')\r\n      var replacements= ['leftctrl', 'rightctrl', 'ctrl', 'leftalt', 'rightalt', 'alt', 'shift'];\r\n\r\n      for(i=0; i < replacements.length; i++) {\r\n        // Don't forget to remove the kebab-case hyphens!\r\n        idx=idx.replace(replacements[i] + '-', '');\r\n        idx=idx.replace(replacements[i],'');\r\n      }\r\n\r\n      // If we are presently on the default layer, drop the 'default' and go straight to the shifted mode.\r\n      // If on a common symbolic layer, drop out of symbolic mode and go straight to the shifted mode.\r\n      if(activeLayer == 'default' || activeLayer == 'numeric' || activeLayer == 'symbol' || activeLayer == 'currency' || idx != '') {\r\n        s = id;\r\n      }\r\n      // Otherwise, we are based upon a layer that accepts modifier variations.\r\n      // Modify the layer according to the current state and key pressed.\r\n      //\r\n      // TODO:  Consider:  should this ever be allowed for a base layer other than 'default'?  If not,\r\n      // if(idx == '') with accompanying if-else structural shift would be a far better test here.\r\n      else {\r\n        // Save our current modifier state.\r\n        var modifier=Codes.getModifierState(s);\r\n\r\n        // Strip down to the base modifiable layer.\r\n        for(i=0; i < replacements.length; i++) {\r\n          // Don't forget to remove the kebab-case hyphens!\r\n          s=s.replace(replacements[i] + '-', '');\r\n          s=s.replace(replacements[i],'');\r\n        }\r\n\r\n        // Toggle the modifier represented by our input argument.\r\n        switch(id) {\r\n          case 'shift':\r\n            modifier ^= ModifierKeyConstants.K_SHIFTFLAG;\r\n            break;\r\n          case 'leftctrl':\r\n            modifier ^= ModifierKeyConstants.LCTRLFLAG;\r\n            break;\r\n          case 'rightctrl':\r\n            modifier ^= ModifierKeyConstants.RCTRLFLAG;\r\n            break;\r\n          case 'ctrl':\r\n            modifier ^= ModifierKeyConstants.K_CTRLFLAG;\r\n            break;\r\n          case 'leftalt':\r\n            modifier ^= ModifierKeyConstants.LALTFLAG;\r\n            break;\r\n          case 'rightalt':\r\n            modifier ^= ModifierKeyConstants.RALTFLAG;\r\n            break;\r\n          case 'alt':\r\n            modifier ^= ModifierKeyConstants.K_ALTFLAG;\r\n            break;\r\n          default:\r\n            s = id;\r\n        }\r\n\r\n        // Combine our base modifiable layer and attach the new modifier variation info to obtain our destination layer.\r\n        if(s != 'default') {\r\n          if(s == '') {\r\n            s = this.getLayerId(modifier);\r\n          } else {\r\n            s = this.getLayerId(modifier) + '-' + s;\r\n          }\r\n        }\r\n      }\r\n\r\n      if(s == '') {\r\n        s = 'default';\r\n      }\r\n    } else {\r\n      // Mobile form-factor.  Either the layout is specified by a keyboard developer with direct layer name references\r\n      // or all layers are accessed via subkey of a single layer-shifting key - no need for modifier-combining logic.\r\n      s = id;\r\n    }\r\n\r\n    let layout = this.activeKeyboard.layout(keyEvent.device.formFactor);\r\n    if(layout.getLayer(s)) {\r\n      this.layerId = s;\r\n    } else {\r\n      this.layerId = 'default';\r\n    }\r\n\r\n    let baseModifierState = Codes.getModifierState(this.layerId);\r\n    this.modStateFlags = baseModifierState | keyEvent.Lstates;\r\n  }\r\n\r\n  // Returns true if the key event is a modifier press, allowing keyPress to return selectively\r\n  // in those cases.\r\n  doModifierPress(Levent: KeyEvent, outputTarget: OutputTarget, isKeyDown: boolean): boolean {\r\n    if(!this.activeKeyboard) {\r\n      return false;\r\n    }\r\n\r\n    if(Levent.isModifier) {\r\n      this.activeKeyboard.notify(Levent.Lcode, outputTarget, isKeyDown ? 1 : 0);\r\n      // For eventual integration - we bypass an OSK update for physical keystrokes when in touch mode.\r\n      if(!Levent.device.touchable) {\r\n        return this._UpdateVKShift(Levent); // I2187\r\n      } else {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    if(Levent.LmodifierChange) {\r\n      this.activeKeyboard.notify(0, outputTarget, 1);\r\n      if(!Levent.device.touchable) {\r\n        this._UpdateVKShift(Levent);\r\n      }\r\n    }\r\n\r\n    // No modifier keypresses detected.\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Tell the currently active keyboard that a new context has been selected,\r\n   * e.g. by focus change, selection change, keyboard change, etc.\r\n   *\r\n   * @param    {Object}   outputTarget  The OutputTarget that has focus\r\n   * @returns  {Object}                 A RuleBehavior object describing the cumulative effects of\r\n   *                                    all matched keyboard rules\r\n   */\r\n  performNewContextEvent(outputTarget: OutputTarget): RuleBehavior {\r\n    const ruleBehavior = this.processNewContextEvent(this.contextDevice, outputTarget);\r\n\r\n    if(ruleBehavior) {\r\n      ruleBehavior.finalize(this, outputTarget, true);\r\n    }\r\n    return ruleBehavior;\r\n  }\r\n\r\n  resetContext(target?: OutputTarget) {\r\n    this.layerId = 'default';\r\n\r\n    // Make sure all deadkeys for the context get cleared properly.\r\n    target?.resetContext();\r\n    this.keyboardInterface.resetContextCache();\r\n\r\n    // May be null if it's a keyboard swap.\r\n    // Performed before _UpdateVKShift since the op may modify the displayed layer\r\n    // Also updates the layer for predictions.\r\n    if(target) {\r\n      this.performNewContextEvent(target);\r\n    }\r\n\r\n    if(!this.contextDevice.touchable) {\r\n      this._UpdateVKShift(null);\r\n    }\r\n  };\r\n\r\n  setNumericLayer(device: DeviceSpec) {\r\n    if (this.activeKeyboard) {\r\n      let layout = this.activeKeyboard.layout(device.formFactor);\r\n      if(layout.getLayer('numeric')) {\r\n        this.layerId = 'numeric';\r\n      }\r\n    }\r\n  };\r\n}\r\n",
    "import { Keyboard, KeyboardLoaderBase as KeyboardLoader } from \"keyman/engine/keyboard\";\r\nimport { EventEmitter } from \"eventemitter3\";\r\n\r\nimport KeyboardStub from \"./keyboardStub.js\";\r\n\r\nconst KEYBOARD_PREFIX = \"Keyboard_\";\r\n\r\nfunction prefixed(text: string) {\r\n  if(!text.startsWith(KEYBOARD_PREFIX)) {\r\n    return KEYBOARD_PREFIX + text;\r\n  } else {\r\n    return text;\r\n  }\r\n}\r\n\r\nexport {prefixed as toPrefixedKeyboardId};\r\n\r\nfunction withoutPrefix(text: string) {\r\n  if(text.startsWith(KEYBOARD_PREFIX)) {\r\n    return text.substring(KEYBOARD_PREFIX.length);\r\n  } else {\r\n    return text;\r\n  }\r\n}\r\n\r\nexport {withoutPrefix as toUnprefixedKeyboardId};\r\n\r\ninterface EventMap {\r\n  /**\r\n   * Indicates that the specified stub has just been registered within the cache.\r\n   *\r\n   * Note for future hook:  establish a listener for this event during engine init\r\n   * to denote the first added stub to facilitate auto-activation of the first\r\n   * keyboard to be registered.\r\n   */\r\n  stubadded: (stub: KeyboardStub) => void;\r\n\r\n  /**\r\n   * Indicates that the specified Keyboard has just been added to the cache.\r\n   */\r\n  keyboardadded: (keyboard: Keyboard) => void;\r\n}\r\n\r\nexport default class StubAndKeyboardCache extends EventEmitter<EventMap> {\r\n  private stubSetTable: Record<string, Record<string, KeyboardStub>> = {};\r\n  private keyboardTable: Record<string, Keyboard | Promise<Keyboard>> = {};\r\n\r\n  private readonly keyboardLoader: KeyboardLoader;\r\n\r\n  constructor(keyboardLoader?: KeyboardLoader) {\r\n    super();\r\n    this.keyboardLoader = keyboardLoader;\r\n  }\r\n\r\n  getKeyboardForStub(stub: KeyboardStub): Keyboard {\r\n    return stub ? this.getKeyboard(stub.KI) : null;\r\n  }\r\n\r\n  getKeyboard(keyboardID: string): Keyboard {\r\n    if(!keyboardID) {\r\n      return null;\r\n    }\r\n    const entry = this.keyboardTable[prefixed(keyboardID)];\r\n\r\n    // Unit testing may 'trip up' in the DOM, as bundled versions of a class from one bundled\r\n    // module will fail against an `instanceof` expecting the version bundled in a second.\r\n    //\r\n    // Thus, we filter based on `Promise`, which needs no module.\r\n    return entry instanceof Promise ? null : entry;\r\n  }\r\n\r\n  get defaultStub(): KeyboardStub {\r\n    /* See the following two StackOverflow links:\r\n     * - https://stackoverflow.com/a/23202095\r\n     * - https://stackoverflow.com/a/5525820\r\n     *\r\n     * Also: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Object/values#description\r\n     *\r\n     * As keyboard IDs are never purely numeric, any sufficiently-recent browser will\r\n     * maintain the order in which stubs were added to this cache.\r\n     *\r\n     * Note that if a keyboard is removed, its matching stubs are also removed, so the next most-recent\r\n     * property will take precedence.\r\n     *\r\n     * Might possibly fail to return the oldest registered stub for the oldest of supported browsers\r\n     * (i.e, Android 5.0), but will work for anything decently recent.  Even then... we still supply\r\n     * _a_ keyboard.  Just not in a way that will seem deterministic/controllable to site designers.\r\n     *\r\n     * Warning:  Object.values and Object.entries require Chrome for Android 54, which is higher than\r\n     * API 21's base. Object.keys only requires Chrome for Android 18, so is safe.\r\n     */\r\n\r\n    // An `Object.keys`-based helper function.  Gets the first entry of Object.values for the object.\r\n    // Can be written with stronger type safety... if we get very explicit with generics during calls.\r\n    // That'd be more verbose than desired here.\r\n    function getFirstValue(obj: any) {\r\n      const keys = Object.keys(obj);\r\n      if(keys.length == 0) {\r\n        return undefined;\r\n      } else {\r\n        return obj[keys[0]];\r\n      }\r\n    };\r\n\r\n    const stubTable = getFirstValue(this.stubSetTable) as Record<string, KeyboardStub>;\r\n    if(!stubTable) {\r\n      return undefined;\r\n    } else {\r\n      // First value = first registered stub for that first keyboard.\r\n      // Does not consider later-added stubs, but neither does removeKeyboard - removal is \"all or nothing\".\r\n      return getFirstValue(stubTable) as KeyboardStub;\r\n    }\r\n  }\r\n\r\n  addKeyboard(keyboard: Keyboard) {\r\n    const keyboardID = prefixed(keyboard.id);\r\n    this.keyboardTable[keyboardID] = keyboard;\r\n\r\n    this.emit('keyboardadded', keyboard);\r\n  }\r\n\r\n  fetchKeyboardForStub(stub: KeyboardStub) : Promise<Keyboard> {\r\n    return this.fetchKeyboard(stub.KI);\r\n  }\r\n\r\n  isFetchingKeyboard(keyboardID: string): boolean {\r\n    if(!keyboardID) {\r\n      throw new Error(\"Keyboard ID must be specified\");\r\n    }\r\n\r\n    keyboardID = prefixed(keyboardID);\r\n\r\n    const cachedEntry = this.keyboardTable[keyboardID];\r\n    return cachedEntry instanceof Promise;\r\n  }\r\n\r\n  fetchKeyboard(keyboardID: string): Promise<Keyboard> {\r\n    if(!keyboardID) {\r\n      throw new Error(\"Keyboard ID must be specified\");\r\n    }\r\n\r\n    if(!this.keyboardLoader) {\r\n      throw new Error(\"Cannot load keyboards; this cache was configured without a loader\");\r\n    }\r\n\r\n    keyboardID = prefixed(keyboardID);\r\n\r\n    const cachedEntry = this.keyboardTable[keyboardID];\r\n    if(cachedEntry instanceof Keyboard) {\r\n      return Promise.resolve(cachedEntry);\r\n    } else if(cachedEntry instanceof Promise) {\r\n      return cachedEntry;\r\n    }\r\n\r\n    const stub = this.getStub(keyboardID, null);\r\n    if(!stub) {\r\n      throw new Error(`No stub for ${withoutPrefix(keyboardID)} has been registered`);\r\n    }\r\n\r\n    if(!stub.filename) {\r\n      throw new Error(`The registered stub for ${withoutPrefix(keyboardID)} lacks a path to the main keyboard file`);\r\n    }\r\n\r\n    const promise = this.keyboardLoader.loadKeyboardFromStub(stub);\r\n    this.keyboardTable[keyboardID] = promise;\r\n\r\n    promise.then((kbd) => {\r\n      // Overrides the built-in ID in case of keyboard namespacing.\r\n      kbd.scriptObject[\"KI\"] = keyboardID;\r\n      this.addKeyboard(kbd);\r\n    }).catch((err) => {\r\n      delete this.keyboardTable[keyboardID];\r\n      throw err;\r\n    })\r\n\r\n    return promise;\r\n  }\r\n\r\n  addStub(stub: KeyboardStub) {\r\n    const keyboardID = prefixed(stub.KI);\r\n    const stubTable = this.stubSetTable[keyboardID] = this.stubSetTable[keyboardID] ?? {};\r\n    stubTable[stub.KLC] = stub;\r\n\r\n    this.emit('stubadded', stub);\r\n  }\r\n\r\n  findMatchingStub(stub: KeyboardStub) {\r\n    return this.getStub(stub.KI, stub.KLC);\r\n  }\r\n\r\n  getStub(keyboardID: string, languageID: string): KeyboardStub;\r\n  getStub(keyboard: Keyboard, languageID?: string): KeyboardStub;\r\n  getStub(arg0: string | Keyboard, arg1?: string): KeyboardStub {\r\n    let keyboardID: string;\r\n    let languageID = arg1 || '---';\r\n\r\n    if(arg0 instanceof Keyboard) {\r\n      keyboardID = arg0.id;\r\n    } else {\r\n      keyboardID = arg0;\r\n    }\r\n\r\n    if(keyboardID) {\r\n      keyboardID = prefixed(keyboardID);\r\n    }\r\n\r\n    const stubTable = this.stubSetTable[keyboardID] ?? {};\r\n\r\n    if(languageID != '---') {\r\n      return stubTable[languageID];\r\n    } else {\r\n      const keys = Object.keys(stubTable);\r\n      if(keys.length == 0) {\r\n        return null;\r\n      } else {\r\n        return stubTable[keys[0]];\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Removes all metadata (stubs) associated with a specific keyboard from the cache, optionally\r\n   * removing the cached keyboard as well.\r\n   * @param keyboard Either the keyboard ID or `Keyboard` instance\r\n   * @param purge If `true`, will also purge the `Keyboard` instance itself from the cache.\r\n   *              If `false`, only forgets the metadata (stubs).\r\n   */\r\n  forgetKeyboard(keyboard: string | Keyboard, purge: boolean = false) {\r\n    let id: string = (keyboard instanceof Keyboard) ? keyboard.id : prefixed(keyboard);\r\n\r\n    if(this.stubSetTable[id]) {\r\n      delete this.stubSetTable[id];\r\n    }\r\n\r\n    if(purge && this.keyboardTable[id]) {\r\n      delete this.keyboardTable[id];\r\n    }\r\n  }\r\n\r\n  getStubList(): KeyboardStub[] {\r\n    let arr: KeyboardStub[] = [];\r\n\r\n    const kbdIds = Object.keys(this.stubSetTable);\r\n    for(let kbdId of kbdIds) {\r\n      let row = this.stubSetTable[kbdId];\r\n      const langIds = Object.keys(row);\r\n      for(let langId of langIds) {\r\n        arr.push(row[langId]);\r\n      }\r\n    }\r\n\r\n    return arr;\r\n  }\r\n}",
    "import {\r\n  type KeyboardAPIPropertySpec as APISimpleKeyboard,\r\n  type KeyboardAPIPropertyMultilangSpec as APICompoundKeyboard,\r\n  KeyboardProperties,\r\n  type LanguageAPIPropertySpec,\r\n} from 'keyman/engine/keyboard';\r\nimport { toPrefixedKeyboardId as prefixed } from './stubAndKeyboardCache.js';\r\n\r\n\r\n// Language regions as defined by cloud server\r\nexport const REGIONS = ['World','Africa','Asia','Europe','South America','North America','Oceania','Central America','Middle East'];\r\nexport const REGION_CODES = ['un','af','as','eu','sa','na','oc','ca','me'];\r\n\r\nexport type KeyboardAPISpec = (APISimpleKeyboard | APICompoundKeyboard) & {\r\n  displayName?: string;\r\n  filename: string\r\n};\r\n\r\nexport interface RawKeyboardStub extends KeyboardStub {};\r\n\r\n/*\r\n * Get keyboard path (relative or absolute)\r\n * KeymanWeb 2 revised keyboard location specification:\r\n *  (a) absolute URL (includes ':') - load from specified URL\r\n *  (b) relative URL (starts with /, ./, ../) - load with respect to current page\r\n *  (c) filename only (anything else) - prepend keyboards option to URL\r\n *      (e.g. default keyboards option will be set by Cloud)\r\n *\r\n * So, to fully interpret the following regex, it detects the following patterns (at minimum):\r\n * ../file (but not .../file)\r\n * ./file\r\n * /file\r\n * http:// (on the colon)\r\n * hello:world (on the colon) - that one miiiight be less intentional, though.  Would 'fall\r\n * over' on attempted use anyway, since it's not a valid path.\r\n *\r\n * Alternative clearer version - '^(\\.{0,2}/)|(:)'?\r\n * Unless backslashes should be able to replace dots?\r\n */\r\nconst REGEX_FOR_PRECONFIGURED_PATH=RegExp('^(([\\\\.]/)|([\\\\.][\\\\.]/)|(/))|(:)');\r\n\r\nfunction configureFilePathing(path: string, configurationBasePath: string) {\r\n  configurationBasePath = configurationBasePath || '';\r\n  if(path && !REGEX_FOR_PRECONFIGURED_PATH.test(path)) {\r\n    return configurationBasePath + path;\r\n  } else {\r\n    return path;\r\n  }\r\n}\r\n\r\nexport default class KeyboardStub extends KeyboardProperties {\r\n  KR: string;\r\n  KRC: string;\r\n  KF: string;\r\n\r\n  KP?: string;\r\n\r\n  // For the first flavor of constructor, note that Developer relies on KMW's path config to complete the paths...\r\n  // even though supplying an 'internal'-style stub.\r\n  public constructor(rawStub: RawKeyboardStub, keyboardBaseUri?: string, fontBaseUri?: string);\r\n  public constructor(apiSpec: APISimpleKeyboard & { filename: string }, keyboardBaseUri?: string, fontBaseUri?: string);\r\n  public constructor(kbdId: string, lngId: string);\r\n  constructor(arg0: string | RawKeyboardStub | (APISimpleKeyboard & { filename: string }), arg1?: string, arg2?: string) {\r\n    if(typeof arg0 !== 'string') {\r\n      if(arg0.id !== undefined) {\r\n        let apiSpec = arg0 as APISimpleKeyboard & { filename: string };\r\n        apiSpec.id = prefixed(apiSpec.id);\r\n        super(apiSpec, arg2);\r\n        this.KF = configureFilePathing(apiSpec.filename, arg1);\r\n        this.mapRegion(apiSpec.languages);\r\n      } else {\r\n        let rawStub = arg0 as RawKeyboardStub;\r\n        rawStub.KI = prefixed(rawStub.KI);\r\n        super(rawStub, arg2);\r\n\r\n        this.KF = configureFilePathing(rawStub.KF, arg1);\r\n        this.KP = rawStub.KP;\r\n        this.KR = rawStub.KR;\r\n        this.KRC = rawStub.KRC;\r\n\r\n\r\n        return;\r\n      }\r\n    } else {\r\n      super(prefixed(arg0), arg1);\r\n    }\r\n  }\r\n\r\n  private mapRegion(language: LanguageAPIPropertySpec) {\r\n    // Accept region as number (from Cloud server), code, or name\r\n    const region=language.region;\r\n    let rIndex=0;\r\n    if(typeof(region) == 'number') {\r\n      if(region < 1 || region > 9) {\r\n        rIndex = 0;\r\n      } else {\r\n        rIndex = region-1;\r\n      }\r\n    } else if(typeof(region) == 'string') {\r\n      let list = (region.length == 2 ? REGION_CODES : REGIONS);\r\n      for(let i=0; i<list.length; i++) {\r\n        if(region.toLowerCase() == list[i].toLowerCase()) {\r\n          rIndex=i;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.KR = REGIONS[rIndex];\r\n    this.KRC = REGION_CODES[rIndex];\r\n  }\r\n\r\n  get region(): string {\r\n    return this.KR;\r\n  }\r\n\r\n  get regionCode(): string {\r\n    return this.KRC;\r\n  }\r\n\r\n  get filename(): string {\r\n    return this.KF;\r\n  }\r\n\r\n  /**\r\n   * Utility to convert API 'stubs' to internal KeyboardStub[]\r\n   * @param arg\r\n   * @returns (KeyboardStub|ErrorStub)[]\r\n   */\r\n  public static toStubs(arg: KeyboardAPISpec, keyboardBaseUri: string, fontBaseUri: string): (KeyboardStub|ErrorStub)[] {\r\n    let errorMsg: string = '';\r\n\r\n    if(typeof(arg.language) != \"undefined\") {\r\n      console.warn(\"The 'language' property for keyboard stubs has been deprecated.  Please use the 'languages' property instead.\");\r\n    }\r\n    arg.languages ||= arg.language;\r\n\r\n    if (!arg) {\r\n      errorMsg = \"Stub undefined\";\r\n    } else if (!arg.id) {\r\n      errorMsg = \"KeyboardStub has undefined id\";\r\n    } else if (!arg.languages) {\r\n      errorMsg = \"KeyboardStub has undefined languages\"\r\n    }\r\n    if (errorMsg != '') {\r\n      return [{error: new Error(errorMsg)}];\r\n    }\r\n\r\n    // We have a valid API object to convert over.\r\n\r\n    // Extract all the languages\r\n    let languages: LanguageAPIPropertySpec[] = [];\r\n    if (!Array.isArray(arg.languages)) {\r\n      languages.push(arg.languages);\r\n    } else {\r\n      languages = languages.concat(arg.languages);\r\n    }\r\n\r\n    let stubs: KeyboardStub[] = [];\r\n    languages.forEach(language => {\r\n      // The deprecated `language` is assigned to satisfy TS type-checking.\r\n      const intermediate = {...arg, languages: language, language: undefined as LanguageAPIPropertySpec};\r\n      const stub: KeyboardStub = new KeyboardStub(intermediate, keyboardBaseUri, fontBaseUri);\r\n\r\n      stubs.push(stub);\r\n    })\r\n\r\n    return stubs;\r\n  }\r\n\r\n  public merge(stub: KeyboardStub) {\r\n    this.KL ||= stub.KL;\r\n    this.KR ||= stub.KR;\r\n    this.KRC ||= stub.KRC;\r\n    this.KN ||= stub.KN;\r\n    this.KF ||= stub.KF;\r\n    this.KFont ||= stub.KFont;\r\n    this.KOskFont ||= stub.KOskFont;\r\n\r\n    if(stub._displayName) {\r\n      this._displayName ||= stub._displayName;\r\n    }\r\n  }\r\n\r\n  public validateForCustomKeyboard(): Error {\r\n    if(super.validateForCustomKeyboard() || !this.KF || !this.KR) {\r\n      return new Error('To use a custom keyboard, you must specify file name, keyboard id, keyboard name, language, language code, and region.');\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n}\r\n\r\n// Information about a keyboard that fails to get added\r\nexport interface ErrorStub {\r\n  keyboard?: {\r\n    id: string;\r\n    name: string;\r\n  },\r\n  language?: {\r\n    id?: string;\r\n    name?: string;\r\n  }\r\n\r\n  error: Error;\r\n}\r\n\r\nexport function mergeAndResolveStubPromises(keyboardStubs: (KeyboardStub|ErrorStub)[], errorStubs: ErrorStub[]) :\r\n  Promise<(KeyboardStub|ErrorStub)[]> {\r\n  if (errorStubs.length == 0) {\r\n    return Promise.resolve(keyboardStubs);\r\n  } if (keyboardStubs.length == 0) {\r\n    return Promise.reject(errorStubs);\r\n  } else {\r\n    // Merge this with errorStubs\r\n    let result: (KeyboardStub|ErrorStub)[] = keyboardStubs;\r\n    return Promise.resolve(result.concat(errorStubs));\r\n  }\r\n}",
    "import { EventEmitter } from 'eventemitter3';\r\n\r\nimport { PathConfiguration } from 'keyman/engine/interfaces';\r\n\r\nimport { default as KeyboardStub, ErrorStub, KeyboardAPISpec, mergeAndResolveStubPromises } from '../keyboardStub.js';\r\nimport { LanguageAPIPropertySpec, ManagedPromise, Version } from 'keyman/engine/keyboard';\r\nimport CloudRequesterInterface from './requesterInterface.js';\r\n\r\n// For when the API call straight-up times out.\r\nexport const CLOUD_TIMEOUT_ERR = \"The Cloud API request timed out.\";\r\n// Currently cannot distinguish between \"no matching keyboard\" and other script-load errors.\r\nexport const CLOUD_MALFORMED_OBJECT_ERR = \"Could not find a keyboard with that ID.\";\r\n// Represents unspecified errors that occur when registering the results of a successful API call.\r\nexport const CLOUD_STUB_REGISTRATION_ERR = \"The Cloud API failed to find an appropriate keyboard.\";\r\n// Represents custom, specified KMW errors that occur when registering the results of a successful API call.\r\nexport const CLOUD_REGISTRATION_ERR = \"Error occurred while registering keyboards: \";\r\n\r\nexport const MISSING_KEYBOARD = function(kbdid: string) {\r\n  return kbdid + ' keyboard not found.';\r\n}\r\n\r\ntype CloudQueryOptions = {\r\n  context: 'keyboard' | 'language';\r\n  keyboardid?: string,\r\n  keyboardBaseUri?: string,\r\n  fontBaseUri?: string\r\n}\r\n\r\ntype CloudKeyboardQueryResult = {\r\n  /**\r\n   * A 1D array is returned for keyboard-id based queries: `addKeyboards('sil_cameroon_qwerty')`\r\n   * returns a single array with one entry.\r\n   *\r\n   * A 2D array is returned for language-code based keyboard queries:  `addKeyboards('@fr,@en')`\r\n   * returns two arrays of keyboards, one per language code.\r\n   * - First index = fr\r\n   * - Second = en\r\n   */\r\n  keyboard: KeyboardAPISpec | KeyboardAPISpec[] | KeyboardAPISpec[][],\r\n  options: { context: 'keyboard' } & CloudQueryOptions,\r\n  error?: string,\r\n  timerid: string\r\n};\r\n\r\ntype CloudLanguagesQueryResult = {\r\n  languages: LanguageAPIPropertySpec[],\r\n  options: { context: 'language' } & CloudQueryOptions,\r\n  error?: string,\r\n  keyboardid?: string,\r\n  timerid: string\r\n}\r\n\r\nexport type CloudQueryResult = CloudKeyboardQueryResult | CloudLanguagesQueryResult;\r\n\r\ninterface EventMap {\r\n  'unboundregister': (registration: ReturnType<CloudQueryEngine['_registerCore']>) => void\r\n}\r\n\r\nexport default class CloudQueryEngine extends EventEmitter<EventMap> {\r\n  private cloudResolutionPromises: Map<number, ManagedPromise<KeyboardStub[] | LanguageAPIPropertySpec[]>> = new Map();\r\n\r\n  private _languageListPromise: ManagedPromise<LanguageAPIPropertySpec[]>;\r\n  private languageFetchStarted: boolean = false;\r\n\r\n  private requestEngine: CloudRequesterInterface;\r\n  private pathConfig: PathConfiguration;\r\n\r\n  constructor(requestEngine: CloudRequesterInterface, pathConfig: PathConfiguration) {\r\n    super();\r\n\r\n    this.requestEngine = requestEngine;\r\n    this.pathConfig = pathConfig;\r\n\r\n    this._languageListPromise = new ManagedPromise<LanguageAPIPropertySpec[]>;\r\n  }\r\n\r\n  public get languageListPromise(): Promise<LanguageAPIPropertySpec[]> {\r\n    if(!this.languageFetchStarted) {\r\n      this.languageFetchStarted = true;\r\n\r\n      this.keymanCloudRequest('', true).catch((error) => {\r\n        // If promise is not error, then...\r\n        this.languageFetchStarted = false;\r\n\r\n        // We should allow retries.\r\n        this._languageListPromise.reject(error);\r\n        this._languageListPromise = new ManagedPromise<LanguageAPIPropertySpec[]>;\r\n      });\r\n    }\r\n\r\n    return this._languageListPromise.corePromise;\r\n  }\r\n\r\n  /**\r\n   *  Request keyboard metadata from the Keyman Cloud keyboard metadata server\r\n   *\r\n   *  @param  {string}   cmd        command string\r\n   *  @param  {boolean?} byLanguage if true, context=languages, else context=keyboards\r\n   *  @returns {Promise<(KeyboardStub[]>} Promise of added keyboard stubs\r\n   **/\r\n  keymanCloudRequest(cmd: string, byLanguage: true): Promise<LanguageAPIPropertySpec[]>;\r\n  keymanCloudRequest(cmd: string, byLanguage: false): Promise<KeyboardStub[]>;\r\n  keymanCloudRequest(cmd: string, byLanguage?: boolean): Promise<KeyboardStub[]> | Promise<LanguageAPIPropertySpec[]> {\r\n    // Some basic support toward #5044, but definitely not a full solution toward it.\r\n    // Wraps the cloud API keyboard-stub request in a Promise, allowing response on network\r\n    // and/or parser errors.  Also detects when `register` returns due to an error case that\r\n    // does not throw errors.  (There are a few such \"empty\" `return` statements there.)\r\n    const URL='https://api.keyman.com/cloud/4.0/'\r\n              + ((arguments.length > 1) && byLanguage ? 'languages' : 'keyboards');\r\n\r\n\r\n    const queryConfig = '?jsonp=keyman.register&languageidtype=bcp47&version='+Version.CURRENT.toString();\r\n\r\n    const query = URL + queryConfig + cmd;\r\n\r\n    let { promise, queryId } = this.requestEngine.request<KeyboardStub[] | LanguageAPIPropertySpec[]>(query);\r\n    this.cloudResolutionPromises.set(queryId, promise);\r\n\r\n    promise.finally(() => {\r\n      this.cloudResolutionPromises.delete(queryId);\r\n    });\r\n\r\n    return promise.corePromise as any;\r\n  }\r\n\r\n  /**\r\n   * Call back from cloud for adding keyboard metadata\r\n   *\r\n   * This function should be published to scripts returned from the cloud;\r\n   * they will expect to call it as `keyman.register`.\r\n   *\r\n   * @param {Object}    x   metadata object\r\n   **/\r\n  registerFromCloud = (x: CloudQueryResult) => {\r\n    const promiseid = Number.parseInt(x.timerid);\r\n\r\n    let result: KeyboardStub[] | LanguageAPIPropertySpec[] | Error;\r\n    try {\r\n      result = this._registerCore(x);\r\n    } catch(err) {\r\n      result = new Error(CLOUD_REGISTRATION_ERR + err);\r\n    }\r\n\r\n    if(!promiseid) {\r\n      this.emit('unboundregister', result);\r\n      return;\r\n    } else {\r\n      const promise = this.cloudResolutionPromises.get(promiseid);\r\n\r\n      if(!promise) {\r\n        this.emit('unboundregister', result);\r\n        return;\r\n      } else {\r\n        try {\r\n          if(result instanceof Error) {\r\n            promise.reject(result as Error);\r\n          } else {\r\n            promise.resolve(result as any);\r\n          }\r\n        } finally {\r\n          this.cloudResolutionPromises.delete(promiseid);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call back from cloud for adding keyboard metadata\r\n   *\r\n   * @param {Object}    queryResult   metadata object\r\n   **/\r\n  private _registerCore(queryResult: CloudQueryResult): KeyboardStub[] | LanguageAPIPropertySpec[] | Error { // TODO (#5044): should return heterogenous type; allow array of stubs.\r\n    const options: CloudQueryOptions = queryResult.options;\r\n\r\n    // Font path defined by cloud entry\r\n    let fontPath=options['fontBaseUri'];\r\n\r\n    // or overridden locally, in page source\r\n    if(this.pathConfig.fonts != '') {\r\n      fontPath=this.pathConfig.fonts;\r\n    }\r\n    else {\r\n      // If there's no preconfigured option for font paths, uses the cloud's returned `fontPath` in its place.\r\n      this.pathConfig.updateFontPath(fontPath);\r\n    }\r\n\r\n    // Indicate if unable to register keyboard\r\n    if(typeof(queryResult.error) == 'string') {\r\n      // Currently unreachable (24 May 2021 - API returns a 404; returned 'script' does not call register)\r\n      var badName='';\r\n      if(typeof(queryResult.options.keyboardid) == 'string') {\r\n        let keyboardId = queryResult.options.keyboardid;\r\n        badName = keyboardId.substring(0,1).toUpperCase() + keyboardId.substring(1);\r\n      }\r\n\r\n      return new Error(MISSING_KEYBOARD(badName));\r\n    }\r\n\r\n    // Ignore callback unless the context is defined\r\n    if(typeof(options) == 'undefined' || typeof(options['context']) == 'undefined') {\r\n      return new Error(CLOUD_MALFORMED_OBJECT_ERR);\r\n    }\r\n\r\n    // Register each keyboard for the specified language codes\r\n    let stubs: KeyboardStub[] = [];\r\n\r\n    if(options.context == 'keyboard') {\r\n      let i, kp=(queryResult as CloudKeyboardQueryResult).keyboard;\r\n      // Process array of keyboard definitions\r\n      if(Array.isArray(kp)) {\r\n        for(i=0; i<kp.length; i++) {\r\n          // Note:  if an invalid language code is specified, the elements here may be\r\n          //        empty arrays.  Will not report an error if so.\r\n          stubs = stubs.concat(CloudQueryEngine.registerLanguagesForKeyboard(kp[i],options,i));\r\n        }\r\n      } else { // Process a single keyboard definition\r\n        stubs = stubs.concat(CloudQueryEngine.registerLanguagesForKeyboard(kp,options,0));\r\n      }\r\n    } else if(options.context == 'language') { // Download the full list of supported keyboard languages\r\n      const languageList = (queryResult as CloudLanguagesQueryResult).languages;\r\n      this._languageListPromise.resolve(languageList);\r\n      return languageList;\r\n    }\r\n\r\n    // Return any new entries to the `keyboardStubs` array.\r\n    return stubs;\r\n  }\r\n\r\n\r\n  /**\r\n   *  Register a keyboard for each associated language\r\n   *\r\n   *  @param  {Object}  kp  Keyboard Object or Object array\r\n   *  @param  {Object}  options   keymanCloud callback options\r\n   *  @param  {number}  nArg  keyboard index in argument array\r\n   *\r\n   **/\r\n  private static registerLanguagesForKeyboard(kp: KeyboardAPISpec | KeyboardAPISpec[], options: CloudQueryOptions, nArg: number): KeyboardStub[] {\r\n    let kbId='';\r\n\r\n    // Do not attempt to process badly formatted requests\r\n    if(typeof(kp) == 'undefined') {\r\n      return [];\r\n    }\r\n\r\n    if(typeof(options.keyboardid) == 'string') {\r\n      kbId = options.keyboardid.split(',')[nArg];\r\n    }\r\n\r\n    // When keyboards requested by language code, several keyboards may be returned as an array\r\n    if(Array.isArray(kp)) {\r\n      // If language code is suffixed by $, register all keyboards for this language\r\n      if(kp.length == 1 || kbId.substr(-1,1) == '$' || kbId == '') {\r\n        let stubs: KeyboardStub[] = [];\r\n\r\n        for(let i=0; i<kp.length; i++) {\r\n          stubs = stubs.concat(this.registerLanguagesForKeyboard(kp[i],options,nArg));\r\n        }\r\n\r\n        return stubs;\r\n      } else {\r\n        let nDflt = 0;\r\n\r\n        // Register the default keyboard for the language code\r\n        // Until a default is defined, the default will be the Windows keyboard,\r\n        // that is, the keyboard named for the language (exception: English:US), or the\r\n        // first keyboard found.\r\n\r\n        for(let i=0; i<kp.length; i++) {\r\n          let id=kp[i].id.toLowerCase();\r\n          if(id == 'us') {\r\n            id='english';\r\n          }\r\n\r\n          if(Array.isArray(kp[i].languages)) {\r\n            let langArray = kp[i].languages as LanguageAPIPropertySpec[];\r\n            for(let j=0; j < langArray.length; j++) {\r\n              if(id == langArray[j].name.toLowerCase()) {\r\n                nDflt = i;\r\n                break;\r\n              }\r\n            }\r\n          } // else nDflt === 0 already.\r\n        }\r\n\r\n        return this.registerLanguagesForKeyboard(kp[nDflt],options,nArg);\r\n      }\r\n    } else { // Otherwise, process a single keyboard for the specified languages\r\n      // Font path defined by cloud entry\r\n      let fontPath = options.fontBaseUri || '';\r\n\r\n      const allStubs = KeyboardStub.toStubs(kp, options.keyboardBaseUri, fontPath);\r\n\r\n      // May need to filter returned stubs by language\r\n      let lgCode=kbId.split('@')[1];\r\n      if(allStubs.length == 1 && typeof (allStubs[0] as ErrorStub).error != 'undefined') {\r\n        throw (allStubs[0] as ErrorStub).error;\r\n      } else if(typeof(lgCode) != 'string') {\r\n        return allStubs as KeyboardStub[];\r\n      } else {\r\n        lgCode=lgCode.replace(/\\$$/,'');\r\n        return [(allStubs as KeyboardStub[]).find((stub) => stub.KLC == lgCode)];\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build 362: addKeyboardArray() link to Cloud. One or more arguments may be used\r\n   *\r\n   * @param   x  keyboard name string or keyboard metadata JSON object\r\n   * @returns resolved or rejected promise with merged array of stubs.\r\n   */\r\n  async fetchCloudStubs(cloudList: string[]): Promise<(KeyboardStub|ErrorStub)[]> {\r\n    // // Ensure keymanweb is initialized before continuing to add keyboards\r\n    // if(!this.keymanweb.initialized) {\r\n    //   await this.deferment;\r\n    // }\r\n\r\n    if(cloudList.length == 0) {\r\n      return Promise.resolve([]);\r\n    }\r\n\r\n    // Update the keyboard metadata list from keyman.com - build the command\r\n    let cmd='&keyboardid=';\r\n    let comma = '';\r\n    for(let i=0; i<cloudList.length; i++) {\r\n      cmd=cmd+comma+cloudList[i].toString();\r\n      comma=',';\r\n    }\r\n\r\n    let errorStubs: ErrorStub[] = [];\r\n    // Request keyboard metadata from the Keyman Cloud keyboard metadata server\r\n    try {\r\n      let result: (KeyboardStub|ErrorStub)[]|Error = await this.keymanCloudRequest(cmd,false);\r\n      return mergeAndResolveStubPromises(result, errorStubs);\r\n    } catch(err) {\r\n      // We don't have keyboard info for this ErrorStub\r\n      console.error(err);\r\n      let stub: ErrorStub = {error: err};\r\n      errorStubs.push(stub);\r\n      return Promise.reject(errorStubs);\r\n    }\r\n  }\r\n}",
    "import {\r\n  KeyboardAPIPropertySpec,\r\n  KeyboardLoaderBase as KeyboardLoader,\r\n  LanguageAPIPropertySpec,\r\n  RawKeyboardMetadata\r\n} from \"keyman/engine/keyboard\";\r\nimport { PathConfiguration } from \"keyman/engine/interfaces\";\r\n\r\n// TODO:  is cleanup needed here, to use local paths instead?\r\nimport {\r\n  CloudQueryEngine,\r\n  type ErrorStub,\r\n  KeyboardAPISpec,\r\n  KeyboardStub,\r\n  StubAndKeyboardCache,\r\n  RawKeyboardStub,\r\n  mergeAndResolveStubPromises,\r\n  toUnprefixedKeyboardId as unprefixed\r\n } from \"./index.js\";\r\nimport { default as CloudRequesterInterface } from \"./cloud/requesterInterface.js\";\r\n\r\nclass CloudRequestEntry {\r\n  id: string;\r\n  language?: string;\r\n  version?: string;\r\n\r\n  constructor(id: string, language?: string) {\r\n    this.id = id;\r\n    this.language = language;\r\n  }\r\n\r\n  toString(): string {\r\n    let str=this.id;\r\n\r\n    if(this.language) {\r\n      str=str+'@'+this.language;\r\n      if(this.version) {\r\n        str=str+'@'+this.version;\r\n      }\r\n    } else {\r\n      if(this.version) {\r\n        str=str+'@@'+this.version;\r\n      }\r\n    }\r\n\r\n    //TODO: add specifier validation...\r\n\r\n    return str;\r\n  }\r\n}\r\n\r\nfunction convertToErrorStub(stub: {id: string, name: string}, err: Error | string): ErrorStub {\r\n  return {\r\n    keyboard: {\r\n      id : stub.id,\r\n      name: stub.name\r\n    },\r\n    error: typeof err == 'string' ? new Error(err) : err\r\n  };\r\n}\r\n\r\nfunction toQuerySpecs(id: string, langId: string, version?: string): CloudRequestEntry {\r\n  let obj = new CloudRequestEntry(id, langId);\r\n  if(version) {\r\n    obj.version = version;\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Function       isUniqueRequest\r\n * Scope          Private\r\n * @param         {Object}    tEntry\r\n * Description    Checks to ensure that the stub isn't already loaded within KMW or subject\r\n *                to an already-pending request.\r\n */\r\nfunction isUniqueRequest(cache: StubAndKeyboardCache, cloudList: {id: string, language?: string}[], tEntry: CloudRequestEntry) {\r\n  if(cache.getStub(tEntry.id, tEntry.language) == null) {\r\n    for(let k=0; k < cloudList.length; k++) {\r\n      if(cloudList[k].id == tEntry['id'] && cloudList[k].language == tEntry.language) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\n// TODO:  Move to the keyboard-cache child project - we can test it headlessly there!\r\nexport default class KeyboardRequisitioner {\r\n  readonly cache: StubAndKeyboardCache;\r\n  readonly cloudQueryEngine: CloudQueryEngine;\r\n  readonly pathConfig: PathConfiguration;\r\n\r\n  constructor(keyboardLoader: KeyboardLoader, keyboardRequester: CloudRequesterInterface, pathConfig: PathConfiguration) {\r\n    this.pathConfig = pathConfig;\r\n    this.cache = new StubAndKeyboardCache(keyboardLoader);\r\n    this.cloudQueryEngine = new CloudQueryEngine(keyboardRequester, this.pathConfig);\r\n\r\n    // Handles keymanweb.com's precached keyboard array.  There is no associated promise,\r\n    // so there's nothing handling the `register` call's results otherwise.\r\n    this.cloudQueryEngine.on('unboundregister', (registration) => {\r\n      // Internal, undocumented use-case of `keyman.register`:  precached keyboard loading\r\n      // Other uses may trigger errors, especially if there's a type-structure mismatch.\r\n      // Those errors should not be handled here; let them surface.\r\n      if(Array.isArray(registration)) {\r\n        registration.forEach((entry) => {\r\n          if(entry instanceof KeyboardStub) {\r\n            this.cache.addStub(entry);\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  addKeyboardArray(x: (string|RawKeyboardMetadata)[]): Promise<(KeyboardStub | ErrorStub)[]> {\r\n    let completeStubs: KeyboardStub[] = [];\r\n    let incompleteStubs: KeyboardStub[] = [];\r\n    let stubs: KeyboardStub[] = [];\r\n    let identifiers: string[] = [];\r\n    let errorStubs: ErrorStub[] = [];\r\n\r\n    // #region Parameter preprocessing: is incoming data already 'complete', or do we need to fetch the 'complete' version?\r\n\r\n    for(let entry of x) {\r\n      if(typeof entry == 'string') {\r\n        if(entry.length > 0) {\r\n          identifiers.push(entry);\r\n        }\r\n      } else { // is some sort of object.\r\n        // @ts-ignore\r\n        if(entry['KI'] || entry['KL'] || entry['KLC'] || entry['KFont'] || entry['KOskFont']) {\r\n          stubs.push(new KeyboardStub(entry as RawKeyboardStub));\r\n        } else {\r\n          let apiSpecEntry = entry as KeyboardAPISpec;\r\n          if(typeof(apiSpecEntry.language) != \"undefined\") {\r\n            console.warn(\"The 'language' property for keyboard stubs has been deprecated.  Please use the 'languages' property instead.\");\r\n          }\r\n          apiSpecEntry.languages ||= apiSpecEntry.language;\r\n\r\n          if(typeof apiSpecEntry.languages === 'undefined') {\r\n            let msg = 'To use keyboard \\'' + apiSpecEntry.id + '\\', you must specify languages.';\r\n            errorStubs.push(convertToErrorStub(apiSpecEntry, msg));\r\n          } else if(Array.isArray(apiSpecEntry.languages)) {\r\n            let splitStubs = KeyboardStub.toStubs(apiSpecEntry, this.pathConfig.keyboards, this.pathConfig.fonts);\r\n            for(let stub of splitStubs) {\r\n              if(stub instanceof KeyboardStub) {\r\n                stubs.push(stub);\r\n              } else {\r\n                errorStubs.push(stub);\r\n              }\r\n            }\r\n          } else { // is a single-language entry.\r\n            const singleLangEntry = apiSpecEntry as KeyboardAPIPropertySpec & { filename: string };\r\n            stubs.push(new KeyboardStub(singleLangEntry, this.pathConfig.keyboards, this.pathConfig.fonts));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Next pass: determine which stubs are fully-formed and which are not.\r\n    for(let stub of stubs) {\r\n      if(stub.KF) {\r\n        let err = stub.validateForCustomKeyboard();\r\n        if(err) {\r\n          errorStubs.push(convertToErrorStub(stub, err));\r\n        } else {\r\n          completeStubs.push(stub); // completes are directly added (if possible without error)\r\n        }\r\n      } else {\r\n        incompleteStubs.push(stub);  // incompletes are only used to build a query & are not merged back later.\r\n      }\r\n    }\r\n\r\n    // #endregion\r\n\r\n    // After that, request stubs that aren't fully-formed / are just requested by string.\r\n    // Verify that we have at least a keyboard ID or a language code.\r\n    let cloudList: CloudRequestEntry[] = [];\r\n    for(let incomplete of incompleteStubs) {\r\n      if(!incomplete.KI && !incomplete.KLC) {\r\n        errorStubs.push(convertToErrorStub(incomplete, \"Cannot fetch keyboard information without a keyboard ID or language code.\"));\r\n        continue;\r\n      }\r\n\r\n      // Requests not of string form never specify a specific version.\r\n      // If an 'incomplete stub', we may have prefixed the keyboard ID - undo that!\r\n      const querySpec = toQuerySpecs(unprefixed(incomplete.id), incomplete.langId);\r\n      if(isUniqueRequest(this.cache, cloudList, querySpec)) {\r\n        cloudList.push(querySpec);\r\n      }\r\n    }\r\n\r\n    // Double-check the incoming string-based queries, too!\r\n    for(let identifier of identifiers) {\r\n      const pList=identifier.split('@');\r\n      let lList=[''];\r\n      if(pList[0].toLowerCase() == 'english') {\r\n        pList[0] = 'us';\r\n      }\r\n\r\n      if(pList.length > 1) {\r\n        lList=pList[1].split(',');\r\n      }\r\n\r\n      for(let j=0; j<lList.length; j++) {\r\n        if(j > 0 && lList[j] == '') { // for j==0 => '', no language was specified.\r\n          continue;\r\n        }\r\n\r\n        const querySpec = toQuerySpecs(pList[0], lList[j], pList[2]);\r\n        if(isUniqueRequest(this.cache, cloudList, querySpec)) {\r\n          cloudList.push(querySpec);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Go ahead and register 'complete' stubs.\r\n    completeStubs.forEach((stub) => this.cache.addStub(stub));\r\n\r\n    // After that, note that we do merge non-fully-formed stubs with returned stubs that match?\r\n    let resultPromise = this.cloudQueryEngine.fetchCloudStubs(cloudList.map((spec) => spec.toString()));\r\n    return resultPromise.then((queryResults) => {\r\n      for(let result of queryResults) {\r\n        if(result instanceof KeyboardStub) {\r\n          // Register the newly-complete stub.\r\n          this.cache.addStub(result);\r\n          completeStubs.push(result);\r\n        } else {\r\n          errorStubs.push(result);\r\n        }\r\n      }\r\n\r\n      return [].concat(errorStubs).concat(completeStubs);\r\n    });\r\n  }\r\n\r\n  async addLanguageKeyboards(languages: string[]): Promise<(ErrorStub | KeyboardStub)[]> {\r\n    // Covers the 'add a keyboard by language name' angle.\r\n    let errorStubs: ErrorStub[] = [];\r\n    let fetchedLanguageList: LanguageAPIPropertySpec[] = [];\r\n\r\n    try {\r\n      fetchedLanguageList = await this.cloudQueryEngine.languageListPromise;\r\n    } catch (error) {\r\n      console.error(error);\r\n      errorStubs.push({error: error});\r\n      return errorStubs;\r\n    }\r\n\r\n    // Defer registering keyboards by language until the language list has been loaded\r\n    const languageList = fetchedLanguageList;\r\n\r\n    // Identify and register each keyboard by language name\r\n    let cmd = '';\r\n    for(let i=0; i<languages.length; i++) {\r\n      let lgName = languages[i].toLowerCase();\r\n      let addAll = (lgName.substr(-1,1) == '$');\r\n      if(addAll) {\r\n        lgName = lgName.substr(0,lgName.length-1);\r\n      }\r\n\r\n      let languageFound: boolean = false;\r\n      for(let j=0; j < languageList.length; j++) {\r\n        if(lgName == languageList[j]['name'].toLowerCase()) {\r\n          if(cmd != '') {\r\n            cmd = cmd + ',';\r\n          }\r\n\r\n          cmd = cmd + '@' + languageList[j]['id'];\r\n          if(addAll) {\r\n            cmd = cmd + '$';\r\n          }\r\n\r\n          languageFound = true;\r\n          break;\r\n        }\r\n      }\r\n      if (!languageFound) {\r\n        // Construct response array of errors (failed-query keyboards)\r\n        // that will be merged with stubs (successfully-queried keyboards)\r\n        let stub: ErrorStub = {language: {name: lgName}, error: new Error(this.alertLanguageUnavailable(lgName))};\r\n        errorStubs.push(stub);\r\n      }\r\n    }\r\n\r\n    if(cmd == '') {\r\n      // No command so return errors\r\n      return Promise.reject(errorStubs);\r\n    }\r\n\r\n    return this.cloudQueryEngine.keymanCloudRequest('&keyboardid='+cmd, false).then(async (result) => {\r\n      const results = await mergeAndResolveStubPromises(result, errorStubs);\r\n\r\n      for(let result of results) {\r\n        // If not an error stub...\r\n        if(typeof (result as ErrorStub).error == 'undefined') {\r\n          this.cache.addStub(result as KeyboardStub);\r\n        }\r\n      }\r\n\r\n      return results;\r\n    }, (err) => {\r\n      console.error(err);\r\n      let stub: ErrorStub = {error: err};\r\n      errorStubs.push(stub);\r\n      return Promise.reject(errorStubs);\r\n    });\r\n  }\r\n\r\n  async fetchCloudCatalog() {\r\n    try {\r\n      const stubs = await this.cloudQueryEngine.keymanCloudRequest('', false);\r\n      stubs.forEach((stub) => this.cache.addStub(stub));\r\n      return stubs;\r\n    } catch(error) {\r\n      return Promise.reject([{error: error}]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Display warning if language name unavailable to add keyboard\r\n   * @param {string} languageName\r\n   * @returns string of Error message\r\n   */\r\n  private alertLanguageUnavailable(languageName: string): string {\r\n    let msg = 'No keyboards are available for '+ languageName + '. '\r\n      +'Does it have another language name?';\r\n\r\n    // TODO:  hooks for internal alerts!\r\n    // this.keymanweb.util.internalAlert(msg);\r\n    return msg;\r\n  }\r\n}",
    "import { ModelSpec } from 'keyman/engine/interfaces';\r\n\r\nexport default class ModelManager {\r\n  // Tracks registered models by ID.\r\n  private registeredModels: {[id: string]: ModelSpec} = {};\r\n\r\n  // Allows for easy model lookup by language code; useful when switching keyboards.\r\n  languageModelMap: {[language:string]: ModelSpec} = {};\r\n\r\n  modelForLanguage(lgCode: string) {\r\n    return this.languageModelMap[lgCode];\r\n  }\r\n\r\n  // Accessible publicly as keyman.modelCache.register(model: ModelSpec)\r\n  register(model: ModelSpec): void {\r\n    // Forcibly lowercase the model ID before proceeding.\r\n    model.id = model.id.toLowerCase();\r\n\r\n    if(JSON.stringify(model) == JSON.stringify(this.registeredModels[model.id])) {\r\n      // We are already registered, let's not go through and re-register\r\n      // because we'll already have the correct model active\r\n      return;\r\n    }\r\n    this.registeredModels[model.id] = model;\r\n\r\n    // Register the model for each targeted language code variant.\r\n    let mm = this;\r\n    model.languages.forEach(function(code: string) {\r\n      // Prevent null / undefined codes; they're invalid.\r\n      if(!code) {\r\n        console.warn(\"Null / undefined language codes are not permitted for registration.\");\r\n        return;\r\n      }\r\n\r\n      mm.languageModelMap[code] = model;\r\n    });\r\n  }\r\n\r\n  unregister(modelId: string): ModelSpec {\r\n    let model: ModelSpec;\r\n\r\n    modelId = modelId.toLowerCase();\r\n\r\n    // Remove the model from the id-lookup associative array.\r\n    if(this.registeredModels[modelId]) {\r\n      model = this.registeredModels[modelId];\r\n      delete this.registeredModels[modelId];\r\n    } else {\r\n      return null;\r\n    }\r\n\r\n    // Ensure the model is deregistered for each targeted language code variant.\r\n    let mm = this;\r\n    model.languages.forEach(function(code: string) {\r\n      if(mm.languageModelMap[code].id == modelId) {\r\n        delete mm.languageModelMap[code];\r\n      }\r\n    });\r\n\r\n    return model;\r\n  }\r\n\r\n  isRegistered(model: ModelSpec): boolean {\r\n    return !! this.registeredModels[model.id.toLowerCase()];\r\n  }\r\n}\r\n",
    "/**\r\n * Function     arrayFromNodeList\r\n * Scope        Public\r\n * @param       {Object}    nl a node list, as returned from getElementsBy_____ methods.\r\n * Description  Transforms a node list into an array.   *\r\n * @return      {Array<Element>}\r\n */\r\nexport function arrayFromNodeList(nl: NodeList|HTMLCollectionOf<Element>): HTMLElement[] {\r\n  let res: (HTMLElement)[] = [];\r\n  for(let i=0; i < nl.length; i++) {\r\n    // Typing says we could get Node instances; it's up to use to use this method responsibly.\r\n    res.push(nl[i] as HTMLElement);\r\n  }\r\n  return res;\r\n}",
    "// Found a bit of magic formatting that allows dynamic return typing for a specified element tag!\r\nexport default function createUnselectableElement<E extends \"p\"|\"style\"|\"script\"|\"div\"|\"canvas\"|\"span\">(nodeName:E) {\r\n  const e = document.createElement<E>(nodeName);\r\n\r\n  e.style.userSelect=\"none\";\r\n  e.style.webkitUserSelect = \"none\";\r\n  return e;\r\n}",
    "import { DeviceSpec, ManagedPromise } from '@keymanapp/web-utils';\r\nimport { type InternalKeyboardFont as KeyboardFont } from 'keyman/engine/keyboard';\r\n\r\ntype FontFamilyStyleMap = {[family: string]: HTMLStyleElement};\r\n\r\nexport class StylesheetManager {\r\n  private fontStyleDefinitions: { [os: string]: FontFamilyStyleMap} = {};\r\n  private linkedSheets: {\r\n    sheet: HTMLStyleElement,\r\n    load: ManagedPromise<void>\r\n  }[] = [];\r\n  private fontPromises: Promise<FontFace | void>[] = [];\r\n  private doCacheBusting: boolean;\r\n\r\n  public readonly linkNode: Node;\r\n\r\n  public get sheets(): readonly HTMLStyleElement[] {\r\n    return this.linkedSheets.map((entry) => entry.sheet);\r\n  }\r\n\r\n  public constructor(linkNode?: Node, doCacheBusting?: boolean) {\r\n    if(!linkNode) {\r\n      let _ElemHead=document.getElementsByTagName('HEAD');\r\n      if(_ElemHead.length > 0) {\r\n        linkNode = _ElemHead[0];\r\n      } else {\r\n        linkNode = document.body; // Won't work on [old?] Chrome, ah well\r\n      }\r\n    }\r\n    this.linkNode = linkNode;\r\n    this.doCacheBusting = doCacheBusting || false;\r\n  }\r\n\r\n  linkStylesheet(sheet: HTMLStyleElement | HTMLLinkElement) {\r\n    if(!(sheet instanceof HTMLLinkElement) && !sheet.innerHTML) {\r\n      return;\r\n    }\r\n\r\n    const promise = new ManagedPromise();\r\n    if(sheet instanceof HTMLLinkElement) {\r\n      sheet.onload = () => promise.resolve();\r\n    } else {\r\n      // If it's an inline sheet, it's essentially already loaded.\r\n      // The microtask delay this induces (for type compat) also\r\n      // gives the browser time to apply the inlined-style.\r\n      promise.resolve();\r\n    }\r\n\r\n    this.linkedSheets.push({\r\n      sheet: sheet,\r\n      load: promise\r\n    });\r\n    this.linkNode.appendChild(sheet);\r\n  }\r\n\r\n  /**\r\n   * Provides a `Promise` that resolves when all currently-linked stylesheets have loaded.\r\n   * Any change to the set of linked sheets after the initial call will be ignored.\r\n   */\r\n  async allLoadedPromise(): Promise<void> {\r\n    const allPromises = this.linkedSheets.map((entry) => entry.load.corePromise);\r\n    if(Promise.allSettled) {\r\n      // allSettled - Chrome 76 / Safari 13\r\n      // Delays for settling (either then OR catch) for ALL promises.\r\n      await Promise.allSettled(allPromises)\r\n    } else {\r\n      // all - Chrome 32\r\n      // If an error happens, .all instantly resolves regardless of state of\r\n      // other Promises.\r\n      await Promise.all(allPromises);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Build a stylesheet with a font-face CSS descriptor for the embedded font appropriate\r\n   * for the browser being used\r\n   *\r\n   * @param    {Object}  fd            keymanweb font descriptor (internal format; should be preprocessed)\r\n   * @param    {string}  fontPathRoot  Should correspond to `this.keyman.options['fonts']`\r\n   **/\r\n  addStyleSheetForFont(fd: KeyboardFont, fontPathRoot: string, os?: DeviceSpec.OperatingSystem) {\r\n    // Test if a valid font descriptor\r\n    if(!fd) {\r\n      return null;\r\n    }\r\n\r\n    if(typeof(fd.files) == 'undefined') {\r\n      return null;\r\n    }\r\n\r\n    const fontKey = fd.family;\r\n    let source: string;\r\n\r\n    let i, ttf='', woff='', fList=[], data='';\r\n\r\n    // TODO: 22 Aug 2014: check that font path passed from cloud is actually used!\r\n\r\n    if(!os) {\r\n      os = DeviceSpec.OperatingSystem.Other; // as a fallback option.\r\n    }\r\n\r\n    // Do not add a new font-face style sheet if already added for this font\r\n    const fontStyleMap = this.fontStyleDefinitions[os] = this.fontStyleDefinitions[os] || {};\r\n\r\n    if(fontStyleMap[fontKey]) {\r\n      const sheet = fontStyleMap[fontKey];\r\n\r\n      if(!sheet.parentNode) {\r\n        this.linkStylesheet(sheet);\r\n      }\r\n      return null;\r\n    }\r\n\r\n    if(typeof(fd.files) == 'string') {\r\n      fList[0]=fd.files;\r\n    } else {\r\n      fList=fd.files;\r\n    }\r\n\r\n    for(i=0;i<fList.length;i++) {\r\n      if(fList[i].toLowerCase().indexOf('data:font') == 0) {\r\n        data = fList[i];\r\n      }\r\n      if(fList[i].toLowerCase().indexOf('.otf') > 0) ttf=fList[i];\r\n      if(fList[i].toLowerCase().indexOf('.ttf') > 0) ttf=fList[i];\r\n      if(fList[i].toLowerCase().indexOf('.woff') > 0) woff=fList[i];\r\n    }\r\n\r\n    // Font path qualified to support page-relative fonts (build 347)\r\n    if(ttf != '' && (ttf.indexOf('/') < 0))  {\r\n      ttf = fontPathRoot+ttf;\r\n    }\r\n\r\n    if(woff != '' && (woff.indexOf('/') < 0)) {\r\n      woff = fontPathRoot+woff;\r\n    }\r\n\r\n    // Build the font-face definition according to the browser being used\r\n    var s='@font-face {\\nfont-family:'\r\n      + fd.family + ';\\nfont-style:normal;\\nfont-weight:normal;\\n';\r\n\r\n    // Build the font source string according to the browser,\r\n    // but return without adding the style sheet if the required font type is unavailable\r\n\r\n    // Modern browsers: use WOFF, TTF and fallback finally to SVG. Don't provide EOT\r\n    if(data) {\r\n      // For inline-defined fonts:\r\n      const formatStartIndex = 'data:font/'.length;\r\n      const format = data.substring(formatStartIndex, data.indexOf(';', formatStartIndex));\r\n      s +=`src:url('${data}'), format('${format}');`;\r\n    } else if(os == DeviceSpec.OperatingSystem.iOS) {\r\n      if(ttf != '') {\r\n        if(this.doCacheBusting) {\r\n          ttf = this.cacheBust(ttf);\r\n        }\r\n        source = \"url('\"+encodeURI(ttf)+\"') format('truetype')\";\r\n      }\r\n    } else {\r\n      if(woff != '') {\r\n        source = \"url('\"+encodeURI(woff)+\"') format('woff')\";\r\n      }\r\n\r\n      if(ttf != '') {\r\n        source = \"url('\"+encodeURI(ttf)+\"') format('truetype')\";\r\n      }\r\n    }\r\n\r\n    if(!source) {\r\n      return null;\r\n    }\r\n\r\n    s += 'src:'+source+';';\r\n\r\n    s=s+'\\n}\\n';\r\n\r\n    const sheet = createStyleSheet(s);\r\n    fontStyleMap[fontKey] = sheet;\r\n\r\n    /* https://developer.mozilla.org/en-US/docs/Web/API/CSS_Font_Loading_API\r\n     * Compat:  Chrome 35... _just_ on the unupdated-Android 5.0 threshold.\r\n     *\r\n     * Note:  this could probably wholesale-replace the stylesheet!\r\n     * Would need: `document.fonts.add(fontFace)` - does not have to wait for the load() Promise.\r\n     *\r\n     * For now, we're using this solely to detect when the font has been succesfully loaded.\r\n     */\r\n    const fontFace = new FontFace(fd.family, source);\r\n\r\n    let loadPromise = fontFace.load();\r\n    const clearPromise = () => {\r\n      this.fontPromises = this.fontPromises.filter((entry) => entry != loadPromise);\r\n    }\r\n    this.fontPromises.push(loadPromise.then(clearPromise).catch(clearPromise));\r\n\r\n    this.linkStylesheet(sheet);\r\n\r\n    return sheet;\r\n  }\r\n\r\n  private cacheBust(uri: string) {\r\n    // Our WebView version directly sets the keyboard path, and it may replace the file\r\n    // after KMW has loaded.  We need cache-busting to prevent the new version from\r\n    // being ignored.\r\n    return uri + \"?v=\" + (new Date()).getTime(); /*cache buster*/\r\n  }\r\n\r\n  /**\r\n   * Add a reference to an external stylesheet file\r\n   *\r\n   * @param   {string}  href   path to stylesheet file\r\n   */\r\n  linkExternalSheet(href: string, force?: boolean): HTMLStyleElement {\r\n    try {\r\n      if(!force && document.querySelector(\"link[href=\"+JSON.stringify(href)+\"]\") != null) {\r\n        // We've already linked this stylesheet, don't do it again\r\n        return null;\r\n      }\r\n    } catch(e) {\r\n      // We've built an invalid href, somehow?\r\n      return null;\r\n    }\r\n\r\n    const linkElement=document.createElement('link');\r\n    linkElement.type='text/css';\r\n    linkElement.rel='stylesheet';\r\n    linkElement.href=href;\r\n\r\n    this.linkStylesheet(linkElement);\r\n    return linkElement;\r\n  }\r\n\r\n  public unlink(stylesheet: HTMLStyleElement) {\r\n    const index = this.linkedSheets.findIndex((entry) => entry.sheet == stylesheet);\r\n    if(index > -1) {\r\n      const tuple = this.linkedSheets.splice(index, 1);\r\n      // Ensure we don't leave `await`s that were waiting on the stylesheet hanging.\r\n      tuple[0].load.resolve();\r\n      stylesheet.parentNode.removeChild(stylesheet);\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public unlinkAll() {\r\n    for(let tuple of this.linkedSheets) {\r\n      const sheet = tuple.sheet;\r\n      if(sheet.parentNode) {\r\n        sheet.parentNode.removeChild(sheet);\r\n      }\r\n      // Clear out any lingering `await`s.\r\n      tuple.load.resolve();\r\n    }\r\n\r\n    this.linkedSheets.splice(0, this.linkedSheets.length);\r\n  }\r\n}\r\n\r\n/**\r\n * Add a stylesheet to a page programmatically, for use by the OSK, the UI or the page creator\r\n *\r\n * @param       {string}        s             style string\r\n * @return      {Object}                      returns the object reference\r\n **/\r\nexport function createStyleSheet(styleString: string): HTMLStyleElement {\r\n  var _ElemStyle: HTMLStyleElement = <HTMLStyleElement>document.createElement<'style'>('style');\r\n\r\n  _ElemStyle.type = 'text/css';\r\n  _ElemStyle.appendChild(document.createTextNode(styleString));\r\n\r\n  return _ElemStyle;\r\n}",
    "/**\r\n * Get orientation of tablet or phone  display\r\n *\r\n * @return      {boolean}\r\n */\r\nexport default function landscapeView(): boolean\t{ // new for I3363 (Build 301)\r\n  var orientation: number;\r\n\r\n  // Assume portrait mode if orientation undefined\r\n  if(typeof window.orientation != 'undefined') { // Used by iOS Safari\r\n    // Else landscape for +/-90, portrait for 0, +/-180\r\n    orientation = window.orientation as number;\r\n  } else if(typeof window.screen.orientation != 'undefined') { // Used by Firefox, Chrome\r\n    orientation = window.screen.orientation.angle;\r\n  }\r\n\r\n  if(orientation !== undefined) {\r\n    return (Math.abs(orientation/90) == 1);\r\n  } else {\r\n    return false;\r\n  }\r\n}",
    "type DecodedCookieFieldValue = string | number | boolean;\r\n\r\ntype FilteredRecordEncoder = (value: DecodedCookieFieldValue, key: string) => string;\r\ntype FilteredRecordDecoder = (value: string, key: string) => DecodedCookieFieldValue;\r\n\r\nexport default class CookieSerializer<Type extends Record<keyof Type, DecodedCookieFieldValue>> {\r\n  readonly name: string;\r\n\r\n  constructor(name: string) {\r\n    this.name = name;\r\n  }\r\n\r\n  load(decoder?: FilteredRecordDecoder): Type {\r\n    return this.loadCookie(this.name, decoder || ((val: string) => val as DecodedCookieFieldValue)) as Type;\r\n  }\r\n\r\n  save(cookie: Type, encoder?: FilteredRecordEncoder) {\r\n    this.saveCookie(this.name, cookie, encoder || ((val: DecodedCookieFieldValue) => val as string));\r\n  }\r\n\r\n  /**\r\n   * Document cookie parsing for use by kernel, OSK, UI etc.\r\n   *\r\n   * @return      {Object}                  array of names and strings\r\n   */\r\n  private _loadRawCookies(): Record<string, string> {\r\n    let v: Record<string, string> = {};\r\n    if(typeof(document.cookie) != 'undefined' && document.cookie != '') {\r\n      let c = document.cookie.split(/;\\s*/);\r\n      for(let i = 0; i < c.length; i++) {\r\n        let d = c[i].split('=');\r\n        if(d.length == 2) {\r\n          v[d[0]] = d[1];\r\n        }\r\n      }\r\n    }\r\n\r\n    return v;\r\n  }\r\n\r\n  /**\r\n   * Document cookie parsing for use by kernel, OSK, UI etc.\r\n   *\r\n   * @param       {string}        cookieName        cookie name\r\n   * @return      {Object}                  array of variables and values\r\n   */\r\n  private loadCookie(cookieName: string, decoder: FilteredRecordDecoder): Record<string, DecodedCookieFieldValue> {\r\n    let cookie: Record<string, DecodedCookieFieldValue> = {};\r\n    let allCookies = this._loadRawCookies();\r\n    const encodedCookie = allCookies[cookieName];\r\n\r\n    if(encodedCookie) {\r\n      let rawDecode = decodeURIComponent(encodedCookie).split(';');\r\n      for(let i=0; i<rawDecode.length; i++) {\r\n        // Prevent accidental empty-key entries caused by cookie-final ';'.\r\n        if(i == rawDecode.length - 1 && !rawDecode[i]) {\r\n          break;\r\n        }\r\n\r\n        let record = rawDecode[i].split('=');\r\n        if(record.length > 1) {\r\n          const [key, value] = record;\r\n          // key, value\r\n          cookie[key] = decoder(value, key);\r\n        } else {\r\n          // key, <implied 'true', as boolean flag>\r\n          cookie[record[0]] = '';\r\n        }\r\n      }\r\n    }\r\n    return cookie;\r\n  }\r\n\r\n  /**\r\n   * Standard cookie saving for use by kernel, OSK, UI etc.\r\n   *\r\n   * @param       {string}      cookieName            name of cookie\r\n   * @param       {Object}      cookieValueMap            object with array of named arguments and values\r\n   */\r\n  private saveCookie(cookieName: string, cookieValueMap: Record<string, DecodedCookieFieldValue>, encoder: FilteredRecordEncoder) {\r\n    let serialization='';\r\n    for(let key in cookieValueMap) {\r\n      serialization += key + '=' + encoder(cookieValueMap[key], key) + \";\";\r\n    }\r\n\r\n    let d = new Date(new Date().valueOf() + 1000 * 60 * 60 * 24 * 30).toUTCString();\r\n    let cookieConfig = ' path=/; expires=' + d;  //Fri, 31 Dec 2099 23:59:59 GMT;';\r\n    document.cookie = `${cookieName}=${encodeURIComponent(serialization)}; ${cookieConfig}`;\r\n  }\r\n}",
    "/**\r\n * Function     getAbsoluteX\r\n * Scope        Public\r\n * @param       {Object}    Pobj        HTML element\r\n * @return      {number}\r\n * Description  Returns x-coordinate of Pobj element absolute position with respect to page\r\n */\r\nexport function getAbsoluteX(Pobj: HTMLElement): number { // I1476 - Handle SELECT overlapping END\r\n  var Lobj: HTMLElement\r\n\r\n  if(!Pobj) {\r\n    return 0;\r\n  }\r\n\r\n  var Lcurleft = Pobj.offsetLeft ? Pobj.offsetLeft : 0;\r\n  Lobj = Pobj;   \t// I2404 - Support for IFRAMEs\r\n\r\n  if (Lobj.offsetParent) {\r\n    while (Lobj.offsetParent) {\r\n      Lobj = Lobj.offsetParent as HTMLElement;\r\n      Lcurleft += Lobj.offsetLeft;\r\n    }\r\n\r\n    // On mobile devices, the OSK uses 'fixed' - this requires some extra offset work to handle.\r\n    let Ldoc = Lobj.ownerDocument;\r\n    if(Lobj.style.position == 'fixed' && Ldoc && Ldoc.scrollingElement) {\r\n      Lcurleft += Ldoc.scrollingElement.scrollLeft;\r\n    }\r\n  }\r\n  // Correct position if element is within a frame (but not if the controller is in document within that frame)\r\n  // We used to reference a KMW state variable `this.keyman._MasterDocument`, but it was only ever set to `window.document`.\r\n  if(Lobj && Lobj.ownerDocument && (Pobj.ownerDocument != window.document)) {\r\n    var Ldoc=Lobj.ownerDocument;   // I2404 - Support for IFRAMEs\r\n\r\n    if(Ldoc && Ldoc.defaultView && Ldoc.defaultView.frameElement) {\r\n      return Lcurleft + getAbsoluteX(<HTMLElement>Ldoc.defaultView.frameElement) - Ldoc.documentElement.scrollLeft;\r\n    }\r\n  }\r\n  return Lcurleft;\r\n}\r\n\r\n/**\r\n * Function     getAbsoluteY\r\n * Scope        Public\r\n * @param       {Object}    Pobj        HTML element\r\n * @return      {number}\r\n * Description  Returns y-coordinate of Pobj element absolute position with respect to page\r\n */\r\nexport function getAbsoluteY(Pobj: HTMLElement): number {\r\n  var Lobj: HTMLElement\r\n\r\n  if(!Pobj) {\r\n    return 0;\r\n  }\r\n  var Lcurtop = Pobj.offsetTop ? Pobj.offsetTop : 0;\r\n  Lobj = Pobj;  // I2404 - Support for IFRAMEs\r\n\r\n  if (Lobj.ownerDocument && Lobj instanceof Lobj.ownerDocument.defaultView.HTMLElement) {\r\n    while (Lobj.offsetParent) {\r\n      Lobj = Lobj.offsetParent as HTMLElement;\r\n      Lcurtop += Lobj.offsetTop;\r\n    }\r\n\r\n    // On mobile devices, the OSK uses 'fixed' - this requires some extra offset work to handle.\r\n    let Ldoc = Lobj.ownerDocument;\r\n    if(Lobj.style.position == 'fixed' && Ldoc && Ldoc.scrollingElement) {\r\n      Lcurtop += Ldoc.scrollingElement.scrollTop;\r\n    }\r\n  }\r\n\r\n  // Correct position if element is within a frame (but not if the controller is in document within that frame)\r\n  // We used to reference a KMW state variable `this.keyman._MasterDocument`, but it was only ever set to `window.document`.\r\n  if(Lobj && Lobj.ownerDocument && (Pobj.ownerDocument != window.document)) {\r\n    var Ldoc=Lobj.ownerDocument;   // I2404 - Support for IFRAMEs\r\n\r\n    if(Ldoc && Ldoc.defaultView && Ldoc.defaultView.frameElement) {\r\n      return Lcurtop + getAbsoluteY(<HTMLElement>Ldoc.defaultView.frameElement);\r\n    }\r\n  }\r\n  return Lcurtop;\r\n}",
    "import { VariableStore, VariableStoreSerializer } from 'keyman/engine/js-processor';\r\nimport { CookieSerializer } from \"keyman/engine/dom-utils\";\r\n\r\n// While there's little reason we couldn't store all of a keyboard's store values within\r\n// the same cookie... that's not what we had implemented in the last pre-es-module version\r\n// of KeymanWeb.  We're keeping this transformation _very_ straightforward.\r\n//\r\n// Also of note:  there's nothing we can do to allow TS to provide type-checking of\r\n// dynamic property names; they'd have to be known at compile time to facilitate\r\n// strict type checking.\r\nclass VarStoreSerializer extends CookieSerializer<VariableStore> {\r\n  constructor(keyboardID: string, storeName: string) {\r\n    super(`KeymanWeb_${keyboardID}_Option_${storeName}`);\r\n  }\r\n\r\n  load() {\r\n    return super.load(decodeURIComponent);\r\n  }\r\n\r\n  save(storeMap: VariableStore) {\r\n    super.save(storeMap, encodeURIComponent);\r\n  }\r\n}\r\n\r\nexport class VariableStoreCookieSerializer implements VariableStoreSerializer {\r\n  loadStore(keyboardID: string, storeName: string): VariableStore {\r\n    const storeCookieSerializer = new VarStoreSerializer(keyboardID, storeName);\r\n    return storeCookieSerializer.load();\r\n  }\r\n\r\n  saveStore(keyboardID: string, storeName: string, storeMap: VariableStore) {\r\n    const storeCookieSerializer = new VarStoreSerializer(keyboardID, storeName);\r\n    storeCookieSerializer.save(storeMap);\r\n  }\r\n}",
    "import { KeymanWebKeyboard } from '@keymanapp/common-types';\r\nimport { KeyboardInterface as KeyboardInterfaceBase } from 'keyman/engine/js-processor';\r\nimport { KeyboardStub, RawKeyboardStub, toUnprefixedKeyboardId as unprefixed } from 'keyman/engine/keyboard-storage';\r\n\r\nimport KeyboardObject = KeymanWebKeyboard.KeyboardObject;\r\n\r\nimport { ContextManagerBase } from './contextManagerBase.js';\r\nimport { VariableStoreCookieSerializer } from \"./variableStoreCookieSerializer.js\";\r\nimport KeymanEngine from \"./keymanEngine.js\";\r\nimport { EngineConfiguration } from \"./engineConfiguration.js\";\r\n\r\nexport default class KeyboardInterface<ContextManagerType extends ContextManagerBase<any>> extends KeyboardInterfaceBase {\r\n  protected readonly engine: KeymanEngine<EngineConfiguration, ContextManagerType, any>;\r\n  private stubNamespacer?: (stub: RawKeyboardStub) => void;\r\n\r\n  constructor(\r\n    _jsGlobal: any,\r\n    engine: KeymanEngine<any, ContextManagerType, any>,\r\n    stubNamespacer?: (stub: RawKeyboardStub) => void\r\n  ) {\r\n    super(_jsGlobal, engine, new VariableStoreCookieSerializer());\r\n    this.engine = engine;\r\n    this.stubNamespacer = stubNamespacer;\r\n  }\r\n\r\n  // Preserves a keyboard's ID, even if namespaced, via script tag tagging.\r\n  preserveID(Pk: any /** a `Keyboard`'s `scriptObject` entry */) {\r\n    var trueID;\r\n\r\n    // Find the currently-executing script tag; KR is called directly from each keyboard's definition script.\r\n    if(document.currentScript) {\r\n      trueID = document.currentScript.id;\r\n    } else {\r\n      var scripts = document.getElementsByTagName('script');\r\n      var currentScript = scripts[scripts.length-1];\r\n\r\n      trueID = currentScript.id;\r\n    }\r\n\r\n    // Final check that the script tag is valid and appropriate for the loading keyboard.\r\n    if(!trueID) {\r\n      return;\r\n    } else if(trueID.indexOf(unprefixed(Pk['KI'])) != -1) {\r\n      Pk['KI'] = trueID;  // Take the script's version of the ID, which may include package namespacing.\r\n    } else {\r\n      console.error(\"Error when registering keyboard:  current SCRIPT tag's ID does not match!\");\r\n    }\r\n  }\r\n\r\n  registerKeyboard(Pk: KeyboardObject): void {\r\n    // Among other things, sets Pk as a newly-active Keyboard.\r\n    super.registerKeyboard(Pk);\r\n    const registeredKeyboard = this.loadedKeyboard;\r\n\r\n    this.preserveID(Pk);\r\n\r\n    this.engine.config.deferForInitialization.then(() => {\r\n      if(!this.engine.keyboardRequisitioner.cache.isFetchingKeyboard(registeredKeyboard.id)) {\r\n        // Deliberate keyboard pre-loading via direct script-tag link on the page.\r\n        // Just load the keyboard and reset the harness's keyboard-receiver field.\r\n        this.engine.keyboardRequisitioner.cache.addKeyboard(registeredKeyboard);\r\n        this.loadedKeyboard = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add the basic keyboard parameters (keyboard stub) to the array of keyboard stubs\r\n   * If no language code is specified in a keyboard it cannot be registered,\r\n   * and a keyboard stub must be registered before the keyboard is loaded\r\n   * for the keyboard to be usable.\r\n   *\r\n   * @param       {Object}      Pstub     Keyboard stub object\r\n   * @return      {?number}               1 if already registered, else null\r\n   */\r\n  registerStub(Pstub: RawKeyboardStub): number {\r\n    if(this.stubNamespacer) {\r\n      this.stubNamespacer(Pstub);\r\n    }\r\n\r\n    // This is where app-hosted KeymanWeb receives pre-formed stubs.\r\n    // They're specified in the \"internal\" format (KI, KN, KLC...)\r\n    // (SHIFT-CTRL-F @ repo-level for the mobile apps:  `setKeymanLanguage`)\r\n    // Keyman Developer may also use this method directly for its test-host page.\r\n    //\r\n    // It may also be used by documented legacy API:\r\n    // https://help.keyman.com/developer/engine/web/2.0/guide/examples/manual-control\r\n    // (See: referenced laokeys_load.js)\r\n    //\r\n    // The mobile apps typically have fully-preconfigured paths, but Developer's\r\n    // test-host page does not.\r\n\r\n    const buildStub = () => {\r\n      const pathConfig = this.engine.config.paths;\r\n      return new KeyboardStub(Pstub, pathConfig.keyboards, pathConfig.fonts);\r\n    };\r\n\r\n    if(!this.engine.config.deferForInitialization.isResolved) {\r\n      // pathConfig is not ready until KMW initializes, which prevents proper stub-building.\r\n      this.engine.config.deferForInitialization.then(() => this.engine.keyboardRequisitioner.cache.addStub(buildStub()));\r\n    } else {\r\n      const stub = buildStub();\r\n\r\n      if(this.engine.keyboardRequisitioner?.cache.findMatchingStub(stub)) {\r\n        return 1;\r\n      }\r\n      this.engine.keyboardRequisitioner.cache.addStub(stub);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  insertText = (Ptext: string, PdeadKey:number): void => {\r\n    this.resetContextCache();\r\n    // As this function isn't provided a handle to an active outputTarget, we rely on\r\n    // the context manager to resolve said issue.\r\n    this.engine.contextManager.insertText(this, Ptext, PdeadKey);\r\n  }\r\n\r\n  // Short-hand name: necessary to do it this way due to assignment style.\r\n  KT = this.insertText;\r\n}\r\n\r\n(function() {\r\n  KeyboardInterface.__publishShorthandAPI();\r\n}());",
    "// Enables DOM types, but just for this one module.\r\n\r\n///<reference lib=\"dom\" />\r\n\r\nimport { Keyboard, KeyboardHarness, KeyboardLoaderBase, KeyboardLoadErrorBuilder, MinimalKeymanGlobal } from 'keyman/engine/keyboard';\r\n\r\nimport { ManagedPromise } from '@keymanapp/web-utils';\r\n\r\nexport class DOMKeyboardLoader extends KeyboardLoaderBase {\r\n  public readonly element: HTMLIFrameElement;\r\n  private readonly performCacheBusting: boolean;\r\n\r\n  constructor()\r\n  constructor(harness: KeyboardHarness);\r\n  constructor(harness: KeyboardHarness, cacheBust?: boolean)\r\n  constructor(harness?: KeyboardHarness, cacheBust?: boolean) {\r\n    if(harness && harness._jsGlobal != window) {\r\n      // Copy the String typing over; preserve string extensions!\r\n      harness._jsGlobal['String'] = window['String'];\r\n    }\r\n\r\n    if(!harness) {\r\n      super(new KeyboardHarness(window, MinimalKeymanGlobal));\r\n    } else {\r\n      super(harness);\r\n    }\r\n\r\n    this.performCacheBusting = cacheBust || false;\r\n  }\r\n\r\n  protected loadKeyboardInternal(\r\n    uri: string,\r\n    errorBuilder: KeyboardLoadErrorBuilder,\r\n    id?: string\r\n  ): Promise<Keyboard> {\r\n    const promise = new ManagedPromise<Keyboard>();\r\n\r\n    if(this.performCacheBusting) {\r\n      uri = this.cacheBust(uri);\r\n    }\r\n\r\n    try {\r\n      const document = this.harness._jsGlobal.document;\r\n      const script = document.createElement('script');\r\n      if(id) {\r\n        script.id = id;\r\n      }\r\n      document.head.appendChild(script);\r\n      script.onerror = (err: any) => {\r\n        promise.reject(errorBuilder.missingError(err));\r\n      }\r\n      script.onload = () => {\r\n        if(this.harness.loadedKeyboard) {\r\n          const keyboard = this.harness.loadedKeyboard;\r\n          this.harness.loadedKeyboard = null;\r\n          promise.resolve(keyboard);\r\n        } else {\r\n          promise.reject(errorBuilder.scriptError());\r\n        }\r\n      }\r\n\r\n      // On the oldest mobile devices we support, Promise.finally may not actually exist.\r\n      // Fortunately... it's not that hard of an issue to work around.\r\n      // Note:  es6-shim doesn't polyfill Promise.finally!\r\n      promise.then(() => {\r\n        // It is safe to remove the script once it has been run (https://stackoverflow.com/a/37393041)\r\n        script.remove();\r\n      }).catch(() => {\r\n        script.remove();\r\n      });\r\n\r\n      // Now that EVERYTHING ELSE is ready, establish the link to the keyboard's script.\r\n      script.src = uri;\r\n    } catch (err) {\r\n      return Promise.reject(err);\r\n    }\r\n\r\n    return promise.corePromise;\r\n  }\r\n\r\n  private cacheBust(uri: string) {\r\n    // Our WebView version directly sets the keyboard path, and it may replace the file\r\n    // after KMW has loaded.  We need cache-busting to prevent the new version from\r\n    // being ignored.\r\n    return uri + \"?v=\" + (new Date()).getTime(); /*cache buster*/\r\n  }\r\n}",
    "import { CasingForm, Configuration, Context } from '@keymanapp/common-types';\r\nimport { Mock } from \"keyman/engine/js-processor\";\r\n\r\nexport default class ContextWindow implements Context {\r\n  // Used to limit the range of context replicated for use of keyboard rules within\r\n  // the engine, as used for fat-finger prep / `Alternate` generation.\r\n  public static readonly ENGINE_RULE_WINDOW: Configuration = {\r\n    leftContextCodePoints: 64,\r\n    rightContextCodePoints: 32\r\n  };\r\n\r\n  left: string;\r\n  right?: string;\r\n\r\n  startOfBuffer: boolean;\r\n  endOfBuffer: boolean;\r\n\r\n  casingForm?: CasingForm;\r\n\r\n  constructor(mock: Mock, config: Configuration, layerId: string) {\r\n    this.left = mock.getTextBeforeCaret();\r\n    this.startOfBuffer = this.left._kmwLength() <= config.leftContextCodePoints;\r\n    if(!this.startOfBuffer) {\r\n      // Our custom substring version will return the last n characters if param #1 is given -n.\r\n      this.left = this.left._kmwSubstr(-config.leftContextCodePoints);\r\n    }\r\n\r\n    this.right = mock.getTextAfterCaret();\r\n    this.endOfBuffer = this.right._kmwLength() <= config.rightContextCodePoints;\r\n    if(!this.endOfBuffer) {\r\n      this.right = this.right._kmwSubstr(0, config.rightContextCodePoints);\r\n    }\r\n\r\n    this.casingForm =\r\n      layerId == 'shift' ? 'initial' :\r\n      layerId == 'caps' ? 'upper' :\r\n      null;\r\n  }\r\n\r\n  public toMock(): Mock {\r\n    let caretPos = this.left._kmwLength();\r\n\r\n    return new Mock(this.left + (this.right || \"\"), caretPos);\r\n  }\r\n}",
    "/*\r\n * Copyright (c) 2018 National Research Council Canada (author: Eddie A. Santos)\r\n * Copyright (c) 2018 SIL International\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\r\n * this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to\r\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\n * the Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/// <reference types=\"@keymanapp/lm-message-types\" />\r\n\r\nimport { Token } from '@keymanapp/lm-message-types';\r\n\r\ntype Resolve<T> = (value?: T | PromiseLike<T>) => void;\r\ntype Reject = (reason?: any) => void;\r\ninterface PromiseCallbacks<T> {\r\n  resolve: Resolve<T>;\r\n  reject: Reject;\r\n}\r\n\r\n\r\n/**\r\n * Associate tokens with promises.\r\n *\r\n * First, .make() a promise -- associate a token with resolve/reject callbacks.\r\n *\r\n * You can either .keep() a promise -- resolve() and forget it;\r\n * Or you may also .break() a promise -- reject() and forget it.\r\n *\r\n * <T> is the type of resolved value (value yielded successfully by promise).\r\n */\r\nexport default class PromiseStore<T> {\r\n  // IE11 offers partial support for new Map().\r\n  // Assume only .get(), .set(), .has(), .delete(), and .size work.\r\n  // See: http://kangax.github.io/compat-table/es6/#test-Map\r\n  private _promises: Map<Token, PromiseCallbacks<T>>;\r\n  constructor() {\r\n    this._promises = new Map();\r\n  }\r\n  /**\r\n   * How many promises are currently being tracked?\r\n   */\r\n  get length(): number {\r\n    return this._promises.size;\r\n  }\r\n  /**\r\n   * Associate a token with its respective resolve and reject callbacks.\r\n   */\r\n  make(token: Token, resolve: Resolve<T>, reject: Reject): void {\r\n    if (this._promises.has(token)) {\r\n      return reject(`Existing request with token ${token}`);\r\n    }\r\n    this._promises.set(token, { reject, resolve });\r\n  }\r\n  /**\r\n   * Resolve the promise associated with a token (with a value!).\r\n   * Once the promise is resolved, the token is removed..\r\n   */\r\n  keep(token: Token, value: T) {\r\n    let callbacks = this._promises.get(token);\r\n    if (!callbacks) {\r\n      throw new Error(`No promise associated with token: ${token}`);\r\n    }\r\n    let accept = callbacks.resolve;\r\n    this._promises.delete(token);\r\n    return accept(value);\r\n  }\r\n  /**\r\n   * Instantly reject and forget a promise associated with the token.\r\n   */\r\n  break(token: Token, reason?: any): void {\r\n    let callbacks = this._promises.get(token);\r\n    if (!callbacks) {\r\n      throw new Error(`No promise associated with token: ${token}`);\r\n    }\r\n    this._promises.delete(token);\r\n    callbacks.reject(reason);\r\n  }\r\n}",
    "/*\r\n * Copyright (c) 2018 National Research Council Canada (author: Eddie A. Santos)\r\n * Copyright (c) 2018 SIL International\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy of\r\n * this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to\r\n * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\n * the Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\n * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\n * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\n * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\n * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nimport { Capabilities, Configuration, Context, Distribution, Reversion, Suggestion, Transform, USVString } from '@keymanapp/common-types';\r\nimport PromiseStore from \"./promise-store.js\";\r\nimport { OutgoingMessage } from '@keymanapp/lm-message-types';\r\n\r\n/// <reference types=\"worker-interface.d.ts\" />\r\n\r\n/**\r\n * Top-level interface to the Language Modelling layer, or \"LMLayer\" for short.\r\n *\r\n * The Language Modelling layer provides a way for keyboards to offer prediction and\r\n * correction functionalities. The LMLayer proper runs within a Web Worker, however,\r\n * this class is intended to run in the main thread, and automatically spawn a Web\r\n * Worker, capable of offering predictions.\r\n *\r\n * Since the Worker runs in a different thread, the public methods of this class are\r\n * asynchronous. Methods of note include:\r\n *\r\n *  - #loadModel() -- loads a specified model file\r\n *  - #predict() -- ask the LMLayer to offer suggestions (predictions or corrections) for\r\n *                  the input event\r\n *  - #unloadModel() -- unloads the LMLayer's currently loaded model, preparing it to\r\n *                          receive (load) a new model\r\n *\r\n * The top-level LMLayer will automatically starts up its own Web Worker.\r\n */\r\n\r\nexport default class LMLayer {\r\n  /**\r\n   * The underlying worker instance. By default, this is the LMLayerWorker.\r\n   */\r\n  private _worker: Worker;\r\n  /** Call this when the LMLayer has sent us the 'ready' message! */\r\n  private _declareLMLayerReady: (conf: Configuration) => void;\r\n  private _predictPromises: PromiseStore<Suggestion[]>;\r\n  private _wordbreakPromises: PromiseStore<USVString>;\r\n  private _acceptPromises: PromiseStore<Reversion>;\r\n  private _revertPromises: PromiseStore<Suggestion[]>;\r\n  private _nextToken: number;\r\n  // @ts-ignore // currently unused & unreferenced.\r\n  private capabilities: Capabilities;\r\n\r\n  /**\r\n   * Construct the top-level LMLayer interface. This also starts the underlying Worker.\r\n   *\r\n   * @param uri URI of the underlying LMLayer worker code. This will usually be a blob:\r\n   *            or file: URI. If uri is not provided, this will start the default Worker.\r\n   */\r\n  constructor(capabilities: Capabilities, worker: Worker, testMode?: boolean) {\r\n    // Either use the given worker, or instantiate the default worker.\r\n    this._worker = worker;\r\n    this._worker.onmessage = this.onMessage.bind(this)\r\n    this._declareLMLayerReady = null;\r\n    this._predictPromises = new PromiseStore();\r\n    this._wordbreakPromises = new PromiseStore();\r\n    this._acceptPromises = new PromiseStore();\r\n    this._revertPromises = new PromiseStore();\r\n    this._nextToken = Number.MIN_SAFE_INTEGER;\r\n\r\n    this.sendConfig(capabilities, !!testMode);\r\n  }\r\n\r\n  /**\r\n   * Initializes the LMLayer worker with the host platform's capability set.\r\n   *\r\n   * @param capabilities The host platform's capability spec - a model cannot assume access to more context\r\n   *                     than specified by this parameter.\r\n   */\r\n  private sendConfig(capabilities: Capabilities, testMode: boolean) {\r\n    this._worker.postMessage({\r\n      message: 'config',\r\n      capabilities: capabilities,\r\n      testMode: testMode\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initializes the LMLayer worker with a path to the desired model file.\r\n   */\r\n  loadModel(modelSource: string, loadType: 'file' | 'raw' = 'file'): Promise<Configuration> {\r\n    return new Promise((resolve, _reject) => {\r\n      // Sets up so the promise is resolved in the onMessage() callback, when it receives\r\n      // the 'ready' message.\r\n      this._declareLMLayerReady = resolve;\r\n\r\n      let modelSourceSpec: any = {\r\n        type: loadType\r\n      };\r\n\r\n      if(loadType == 'file') {\r\n        modelSourceSpec.file = modelSource;\r\n      } else {\r\n        modelSourceSpec.code = modelSource;\r\n      }\r\n\r\n      this._worker.postMessage({\r\n        message: 'load',\r\n        source: modelSourceSpec\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Unloads the previously-active model from memory, resetting the LMLayer to prep\r\n   * for transition to use of a new model.\r\n   */\r\n  public unloadModel() {\r\n    this._worker.postMessage({\r\n      message: 'unload'\r\n    });\r\n  }\r\n\r\n  predict(transform: Transform | Distribution<Transform>, context: Context): Promise<Suggestion[]> {\r\n    let token = this._nextToken++;\r\n    return new Promise((resolve, reject) => {\r\n      this._predictPromises.make(token, resolve, reject);\r\n      this._worker.postMessage({\r\n        message: 'predict',\r\n        token: token,\r\n        transform: transform,\r\n        context: context,\r\n      });\r\n    });\r\n  }\r\n\r\n  wordbreak(context: Context): Promise<USVString> {\r\n    let token = this._nextToken++;\r\n    return new Promise((resolve, reject) => {\r\n      this._wordbreakPromises.make(token, resolve, reject);\r\n      this._worker.postMessage({\r\n        message: 'wordbreak',\r\n        token: token,\r\n        context: context\r\n      })\r\n    });\r\n  }\r\n\r\n  acceptSuggestion(suggestion: Suggestion, context: Context, postTransform: Transform): Promise<Reversion> {\r\n    let token = this._nextToken++;\r\n    return new Promise((resolve, reject) => {\r\n      this._acceptPromises.make(token, resolve, reject);\r\n      this._worker.postMessage({\r\n        message: 'accept',\r\n        token: token,\r\n        suggestion: suggestion,\r\n        context: context,\r\n        postTransform: postTransform\r\n      });\r\n    });\r\n  }\r\n\r\n  revertSuggestion(reversion: Reversion, context: Context): Promise<Suggestion[]> {\r\n    let token = this._nextToken++;\r\n    return new Promise((resolve, reject) => {\r\n      this._revertPromises.make(token, resolve, reject);\r\n      this._worker.postMessage({\r\n        message: 'revert',\r\n        token: token,\r\n        reversion: reversion,\r\n        context: context\r\n      })\r\n    });\r\n  }\r\n\r\n  resetContext(context: Context) {\r\n    this._worker.postMessage({\r\n      message: 'reset-context',\r\n      context: context\r\n    });\r\n  }\r\n\r\n  // TODO: asynchronous close() method.\r\n  //       Worker code must recognize message and call self.close().\r\n\r\n  private onMessage(event: MessageEvent): void {\r\n    let payload: OutgoingMessage = event.data;\r\n    if (payload.message === 'error') {\r\n      console.error(payload.log);\r\n      if(payload.error) {\r\n        console.error(payload.error);\r\n      }\r\n    }\r\n    else if (payload.message === 'ready') {\r\n      this._declareLMLayerReady(event.data.configuration);\r\n    } else if (payload.message === 'suggestions') {\r\n      this._predictPromises.keep(payload.token, payload.suggestions);\r\n    } else if (payload.message === 'currentword') {\r\n      this._wordbreakPromises.keep(payload.token, payload.word);\r\n    } else if (payload.message === 'postaccept') {\r\n      this._acceptPromises.keep(payload.token, payload.reversion);\r\n    } else if (payload.message === 'postrevert') {\r\n      this._revertPromises.keep(payload.token, payload.suggestions);\r\n    } else {\r\n      // This branch should never execute, but just in case...\r\n      //@ts-ignore\r\n      throw new Error(`Message not implemented: ${payload.message}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clears out any computational resources in use by the LMLayer, including shutting\r\n   * down any internal WebWorkers.\r\n   */\r\n  public shutdown() {\r\n    this._worker.terminate();\r\n  }\r\n}\r\n",
    "/**\r\n * Given a function, this utility returns the source code within it, as a string.\r\n * This is intended to unwrap the \"wrapped\" source code created in the LMLayerWorker\r\n * build process.\r\n *\r\n * @param fn The function whose body will be returned.\r\n */\r\nexport default function unwrap(encodedSrc: string): string {\r\n  // There used to be more to this, but now it's a pretty simple passthrough!\r\n  return encodedSrc;\r\n}",
    "\n// Autogenerated code.  Do not modify!\n// --START:LMLayerWorkerCode--\n\nexport var LMLayerWorkerCode = \"\\\"use strict\\\";(()=>{var Oe=Object.defineProperty,Kt=Object.defineProperties;var Qt=Object.getOwnPropertyDescriptors;var ft=Object.getOwnPropertySymbols;var Ht=Object.prototype.hasOwnProperty,Vt=Object.prototype.propertyIsEnumerable;var gt=(o,e)=>{if(e=Symbol[o])return e;throw Error(\\\"Symbol.\\\"+o+\\\" is not defined\\\")};var Tt=(o,e,t)=>e in o?Oe(o,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):o[e]=t,A=(o,e)=>{for(var t in e||(e={}))Ht.call(e,t)&&Tt(o,t,e[t]);if(ft)for(var t of ft(e))Vt.call(e,t)&&Tt(o,t,e[t]);return o},Re=(o,e)=>Kt(o,Qt(e)),h=(o,e)=>Oe(o,\\\"name\\\",{value:e,configurable:!0});var _e=(o,e)=>{for(var t in e)Oe(o,t,{get:e[t],enumerable:!0})};var D=(o,e,t)=>new Promise((r,n)=>{var i=a=>{try{l(t.next(a))}catch(u){n(u)}},s=a=>{try{l(t.throw(a))}catch(u){n(u)}},l=a=>a.done?r(a.value):Promise.resolve(a.value).then(i,s);l((t=t.apply(o,e)).next())}),be=function(o,e){this[0]=o,this[1]=e},Ct=(o,e,t)=>{var r=(s,l,a,u)=>{try{var c=t[s](l),p=(l=c.value)instanceof be,f=c.done;Promise.resolve(p?l[0]:l).then(d=>p?r(s===\\\"return\\\"?s:\\\"next\\\",l[1]?{done:d.done,value:d.value}:d,a,u):a({value:d,done:f})).catch(d=>r(\\\"throw\\\",d,a,u))}catch(d){u(d)}},n=s=>i[s]=l=>new Promise((a,u)=>r(s,l,a,u)),i={};return t=t.apply(o,e),i[Symbol.asyncIterator]=()=>i,n(\\\"next\\\"),n(\\\"throw\\\"),n(\\\"return\\\"),i};var St=(o,e,t)=>(e=o[gt(\\\"asyncIterator\\\")])?e.call(o):(o=o[gt(\\\"iterator\\\")](),e={},t=(r,n)=>(n=o[r])&&(e[r]=i=>new Promise((s,l,a)=>(i=n.call(o,i),a=i.done,Promise.resolve(i.value).then(u=>s({value:u,done:a}),l)))),t(\\\"next\\\"),t(\\\"return\\\"),e);function O(){String.kmwFromCharCode=function(o){var e=[],t;for(t=0;t<arguments.length;t++){var r=Number(arguments[t]);if(!isFinite(r)||r<0||r>1114111||Math.floor(r)!==r)throw new RangeError(\\\"Invalid code point \\\"+r);r<65536?e.push(r):(r-=65536,e.push((r>>10)+55296),e.push(r%1024+56320))}return String.fromCharCode.apply(void 0,e)},String.prototype.kmwCharCodeAt=function(o){var e=String(this),t=0;if(o<0||o>=e.length)return NaN;for(var r=0;r<o;r++)if(t=e.kmwNextChar(t),t===null)return NaN;var n=e.charCodeAt(t);if(n>=55296&&n<=56319&&e.length>t+1){var i=e.charCodeAt(t+1);if(i>=56320&&i<=57343)return(n-55296<<10)+(i-56320)+65536}return n},String.prototype.kmwIndexOf=function(o,e){var t=String(this),r=t.indexOf(o,e);if(r<0)return r;for(var n=0,i=0;i!==null&&i<r;i=t.kmwNextChar(i))n++;return n},String.prototype.kmwLastIndexOf=function(o,e){var t=String(this),r=t.lastIndexOf(o,e);if(r<0)return r;for(var n=0,i=0;i!==null&&i<r;i=t.kmwNextChar(i))n++;return n},String.prototype.kmwLength=function(){var o=String(this);if(o.length==0)return 0;for(var e=0,t=0;t!==null;e++)t=o.kmwNextChar(t);return e},String.prototype.kmwSlice=function(o,e){var t=String(this),r=t.kmwCodePointToCodeUnit(o),n=t.kmwCodePointToCodeUnit(e);return r===null||n===null?\\\"\\\":t.slice(r,n)},String.prototype.kmwSubstr=function(o,e){var t=String(this);o<0&&(o=t.kmwLength()+o),o<0&&(o=0);var r=t.kmwCodePointToCodeUnit(o),n=r;if(r===null)return\\\"\\\";if(arguments.length<2)n=t.length;else for(var i=0;i<e;i++)n=t.kmwNextChar(n);return n===null?t.substring(r):t.substring(r,n)},String.prototype.kmwSubstring=function(o,e){var t=String(this),r,n;if(typeof e==\\\"undefined\\\")r=t.kmwCodePointToCodeUnit(o),n=t.length;else{if(o>e){var i=o;o=e,e=i}r=t.kmwCodePointToCodeUnit(o),n=t.kmwCodePointToCodeUnit(e)}return(isNaN(r)||r===null)&&(r=0),(isNaN(n)||n===null)&&(n=t.length),t.substring(r,n)},String.prototype.kmwNextChar=function(o){var e=String(this);if(o===null||o<0||o>=e.length-1)return null;var t=e.charCodeAt(o);if(t>=55296&&t<=56319&&e.length>o+1){var r=e.charCodeAt(o+1);if(r>=56320&&r<=57343)return o==e.length-2?null:o+2}return o+1},String.prototype.kmwPrevChar=function(o){var e=String(this);if(o==null||o<=0||o>e.length)return null;var t=e.charCodeAt(o-1);if(t>=56320&&t<=57343&&o>1){var r=e.charCodeAt(o-2);if(r>=55296&&r<=56319)return o-2}return o-1},String.prototype.kmwCodePointToCodeUnit=function(o){if(o===null)return null;var e=String(this),t=0;if(o<0){t=e.length;for(var r=0;r>o;r--)t=e.kmwPrevChar(t);return t}if(o==e.kmwLength())return e.length;for(var r=0;r<o;r++)t=e.kmwNextChar(t);return t},String.prototype.kmwCodeUnitToCodePoint=function(o){var e=String(this);return o===null?null:o==0?0:o<0?e.substr(o).kmwLength():e.substr(0,o).kmwLength()},String.prototype.kmwCharAt=function(o){var e=String(this);return o>=0?e.kmwSubstr(o,1):\\\"\\\"},String.prototype.kmwBMPNextChar=function(o){var e=String(this);return o<0||o>=e.length-1?null:o+1},String.prototype.kmwBMPPrevChar=function(o){var e=String(this);return o<=0||o>e.length?null:o-1},String.prototype.kmwBMPCodePointToCodeUnit=function(o){return o},String.prototype.kmwBMPCodeUnitToCodePoint=function(o){return o},String.prototype.kmwBMPLength=function(){var o=String(this);return o.length},String.prototype.kmwBMPSubstr=function(o,e){var t=String(this);return o>-1?t.substr(o,e):t.substr(t.length+o,-o)},String.kmwEnableSupplementaryPlane=function(o){var e=String.prototype;String._kmwFromCharCode=o?String.kmwFromCharCode:String.fromCharCode,e._kmwCharAt=o?e.kmwCharAt:e.charAt,e._kmwCharCodeAt=o?e.kmwCharCodeAt:e.charCodeAt,e._kmwIndexOf=o?e.kmwIndexOf:e.indexOf,e._kmwLastIndexOf=o?e.kmwLastIndexOf:e.lastIndexOf,e._kmwSlice=o?e.kmwSlice:e.slice,e._kmwSubstring=o?e.kmwSubstring:e.substring,e._kmwSubstr=o?e.kmwSubstr:e.kmwBMPSubstr,e._kmwLength=o?e.kmwLength:e.kmwBMPLength,e._kmwNextChar=o?e.kmwNextChar:e.kmwBMPNextChar,e._kmwPrevChar=o?e.kmwPrevChar:e.kmwBMPPrevChar,e._kmwCodePointToCodeUnit=o?e.kmwCodePointToCodeUnit:e.kmwBMPCodePointToCodeUnit,e._kmwCodeUnitToCodePoint=o?e.kmwCodeUnitToCodePoint:e.kmwBMPCodeUnitToCodePoint},String._kmwFromCharCode||String.kmwEnableSupplementaryPlane(!1)}h(O,\\\"extendString\\\");O();var De=class De{constructor(e){this._isFulfilled=!1;this._isRejected=!1;this._promise=new Promise((t,r)=>{this._resolve=n=>{this._isFulfilled=!0,t(n)},this._reject=n=>{this._isRejected=!0,r(n)},e&&e(this._resolve,this._reject)})}get resolve(){return this._resolve}get reject(){return this._reject}get isFulfilled(){return this._isFulfilled}get isRejected(){return this._isRejected}get isResolved(){return this.isFulfilled||this.isRejected}then(e,t){return this._promise.then(e,t)}catch(e){return this._promise.catch(e)}finally(e){return this._promise.finally(e)}get corePromise(){return this._promise}};h(De,\\\"ManagedPromise\\\");var ne=De;var Fe=class Fe extends ne{constructor(t){let r=null;super(s=>{r=setTimeout(()=>{this.isResolved||s(!0)},t)});this.timerHandle=r;let n=this._resolve;this._resolve=s=>{clearTimeout(this.timerHandle),n(s)};let i=this._reject;this._reject=s=>{clearTimeout(this.timerHandle),i(s)}}};h(Fe,\\\"TimeoutPromise\\\");var ie=Fe,Ue=h(o=>new ie(o).corePromise,\\\"timedPromise\\\");var I=class I{constructor(e,t){if(typeof e!=\\\"function\\\"){this.comparator=e.comparator,this.heap=[].concat(e.heap);return}let r=e;this.comparator=r,this.heap=(t!=null?t:[]).slice(0),this.heapify()}static leftChildIndex(e){return e*2+1}static rightChildIndex(e){return e*2+2}static parentIndex(e){return Math.floor((e-1)/2)}heapify(e,t){if(e==null||t==null){this.heapify(0,this.count-1);return}let r=[],n=-1;for(let i=t;i>=e;i--){let s=I.parentIndex(i);this.siftDown(i)&&s<e&&n!=s&&(r.push(s),n=s)}for(n=-1;r.length>0;){let i=r.shift(),s=I.parentIndex(i);this.siftDown(i)&&s>=0&&n!=s&&(r.push(s),n=s)}}get count(){return this.heap.length}peek(){return this.heap[0]}enqueue(e){let t=this.heap.length;this.heap.push(e);let r=I.parentIndex,n=r(t);for(;t!==0&&this.comparator(this.heap[t],this.heap[n])<0;){let i=this.heap[t];this.heap[t]=this.heap[n],this.heap[n]=i,t=n,n=r(t)}}enqueueAll(e){if(e.length==0)return;let t=this.count;this.heap=this.heap.concat(e);let r=I.parentIndex(t);this.heapify(r>=0?r:0,I.parentIndex(this.count-1))}dequeue(){if(this.count==0)return;let e=this.heap[0],t=this.heap.pop();return this.heap.length>0&&(this.heap[0]=t,this.siftDown(0)),e}siftDown(e){let t=I.leftChildIndex(e),r=I.rightChildIndex(e),n=e;if(t<this.heap.length&&this.comparator(this.heap[t],this.heap[n])<0&&(n=t),r<this.heap.length&&this.comparator(this.heap[r],this.heap[n])<0&&(n=r),n!=e){let i=this.heap[e];return this.heap[e]=this.heap[n],this.heap[n]=i,this.siftDown(n),!0}else return!1}toArray(){return this.heap.slice(0)}};h(I,\\\"PriorityQueue\\\");var k=I;var ve={};_e(ve,{DummyModel:()=>Et,QuoteBehavior:()=>j,SENTINEL_CODE_UNIT:()=>N,TrieModel:()=>ue,applyTransform:()=>g,buildMergedTransform:()=>U,defaultApplyCasing:()=>we,getLastPreCaretToken:()=>ae,isHighSurrogate:()=>F,isLowSurrogate:()=>We,isSentinel:()=>ke,tokenize:()=>se,transformToSuggestion:()=>W,wordbreak:()=>X});O();var N=\\\"﷐\\\";function g(o,e){var c,p;let t=e.left||\\\"\\\",r=t.kmwLength(),n=r<o.deleteLeft?r:o.deleteLeft,i=t.kmwSubstr(0,r-n)+(o.insert||\\\"\\\"),s=e.right||\\\"\\\",l=s.kmwLength(),a=l<((c=o.deleteRight)!=null?c:0)?l:(p=o.deleteRight)!=null?p:0,u=s.kmwSubstr(a);return{left:i,right:u,startOfBuffer:e.startOfBuffer,endOfBuffer:e.endOfBuffer,casingForm:e.casingForm}}h(g,\\\"applyTransform\\\");function U(o,e){let t=o.insert,r=e.deleteLeft;if(e.deleteLeft){let n=o.insert.kmwLength();n<=e.deleteLeft?(t=\\\"\\\",r=e.deleteLeft-n):(t=o.insert.kmwSubstr(0,n-e.deleteLeft),r=0)}return{insert:t+e.insert,deleteLeft:o.deleteLeft+r,deleteRight:(o.deleteRight||0)+(e.deleteRight||0)}}h(U,\\\"buildMergedTransform\\\");function F(o){return typeof o==\\\"string\\\"&&(o=o.charCodeAt(0)),o>=55296&&o<=56319}h(F,\\\"isHighSurrogate\\\");function We(o){return typeof o==\\\"string\\\"&&(o=o.charCodeAt(0)),o>=56320&&o<=57343}h(We,\\\"isLowSurrogate\\\");function ke(o){return o==N}h(ke,\\\"isSentinel\\\");function W(o,e){let t={transform:o,displayAs:o.insert};return o.id!==void 0&&(t.transformId=o.id),(e===0||e)&&(t.p=e),t}h(W,\\\"transformToSuggestion\\\");function we(o,e){switch(o){case\\\"lower\\\":return e.toLowerCase();case\\\"upper\\\":return e.toUpperCase();case\\\"initial\\\":let t=1;return e.length>1&&F(e.charAt(0))&&We(e.charCodeAt(1))&&(t=2),e.substring(0,t).toUpperCase().concat(e.substring(t))}}h(we,\\\"defaultApplyCasing\\\");var oe=(r=>(r.noQuotes=\\\"no-quotes\\\",r.useQuotes=\\\"use-quotes\\\",r.default=\\\"default-quotes\\\",r))(oe||{});(e=>{function o(t,r,n,i){if(i==\\\"default-quotes\\\"||!i)throw\\\"Specified quote behavior may be ambiguous - default behavior not specified (may not be .default)\\\";switch(t==\\\"default-quotes\\\"&&(t=i),t){case\\\"no-quotes\\\":return r;case\\\"use-quotes\\\":let{open:s,close:l}=n.quotesForKeepSuggestion;return s+r+l;default:throw\\\"Unsupported quote behavior state detected; implementation missing!\\\"}}e.apply=o,h(o,\\\"apply\\\")})(oe||(oe={}));var j=oe;function se(o,e,t){let r=(t==null?void 0:t.rejoins)||[\\\"'\\\"];e=e||{left:void 0,startOfBuffer:void 0,endOfBuffer:void 0};let n=o(e.left||\\\"\\\")||[],i=o(e.right||\\\"\\\")||[],s={left:[],right:[],caretSplitsToken:!1},l=0;for(;n.length>0;){let c=n[0];if(Math.max(c.start,l)!=l){let p=Math.max(l,c.start);s.left.push({text:e.left.substring(l,p),isWhitespace:!0}),l=p}else n.shift(),s.left.push({text:c.text}),l=Math.max(l,c.end)}if(e.left!=null&&l!=e.left.length){let c=Math.max(l,e.left.length);s.left.push({text:e.left.substring(l,c),isWhitespace:!0}),l=c}let a=s.left.length;if(a>1){let c=s.left[a-2],p=s.left[a-1];!c.isWhitespace&&!p.isWhitespace&&r.indexOf(p.text)!=-1&&(s.left.pop(),s.left.pop(),s.left.push({text:c.text+p.text}),a--)}l=0;let u=!0;for(;i.length>0;){let c=i[0];if(Math.max(c.start,l)!=l){let p=Math.max(l,c.start);s.right.push({text:e.right.substring(l,p),isWhitespace:!0}),l=p}else{let p=s.left[a-1];p&&u&&!p.isWhitespace&&o(p.text+c.text).length==1&&(s.caretSplitsToken=!0),i.shift(),s.right.push({text:c.text}),l=Math.max(l,c.end)}u=!1}if(e.right&&l!=e.right.length){let c=Math.max(l,e.right.length);s.right.push({text:e.right.substring(l,c),isWhitespace:!0}),l=c}return s}h(se,\\\"tokenize\\\");function ae(o,e){let t=se(o,e);if(t.left.length>0){let r=t.left.pop();return r.isWhitespace?\\\"\\\":r.text}return\\\"\\\"}h(ae,\\\"getLastPreCaretToken\\\");function X(o,e){return ae(o,e)}h(X,\\\"wordbreak\\\");var le={};_e(le,{ascii:()=>Ke,default:()=>R,defaultWordbreaker:()=>R,placeholder:()=>qe});function qe(o){let e=0;return o.split(/\\\\s+/).map(t=>{let r={start:e,end:e+t.length,text:t,length:t.length};return e=r.end,r})}h(qe,\\\"placeholder\\\");function Ke(o){let e=/[A-Za-z0-9']+/g,t=[],r;for(;(r=e.exec(o))!==null;)t.push(new Be(r[0],r.index));return t}h(Ke,\\\"ascii\\\");var Qe=class Qe{constructor(e,t){this.text=e,this.start=t}get length(){return this.text.length}get end(){return this.start+this.text.length}};h(Qe,\\\"RegExpDerivedSpan\\\");var Be=Qe;var xt=[\\\"Other\\\",\\\"LF\\\",\\\"Newline\\\",\\\"CR\\\",\\\"WSegSpace\\\",\\\"Double_Quote\\\",\\\"Single_Quote\\\",\\\"MidNum\\\",\\\"MidNumLet\\\",\\\"Numeric\\\",\\\"MidLetter\\\",\\\"ALetter\\\",\\\"ExtendNumLet\\\",\\\"Format\\\",\\\"Extend\\\",\\\"Hebrew_Letter\\\",\\\"ZWJ\\\",\\\"Katakana\\\",\\\"Regional_Indicator\\\",\\\"sot\\\",\\\"eot\\\"],bt=`\\\\0 \\n!\\\\v\\\"\\n#\\u000e  $! \\\"%# '&( ,'- .(/ 0):*;'< A+[ _,\\\\` a+{ \\\" ª+« ­-® µ+¶ ·*¸ º+» À+× Ø+÷ ø+˘ ˞+̀.Ͱ+͵ Ͷ+͸ ͺ+;'Ϳ+΀ Ά+·*Έ+΋ Ό+΍ Ύ+΢ Σ+϶ Ϸ+҂ ҃.Ҋ+԰ Ա+՗ ՙ+՝ ՞+՟*ՠ+։'֊+֋ ֑.־ ֿ.׀ ׁ.׃ ׄ.׆ ׇ.׈ א/׫ ׯ/׳+״*׵ ؀)؆ ،'؎ ؐ.؛ ؜-؝ ؠ+ً.٠)٪ ٫)٬'٭ ٮ+ٰ.ٱ+۔ ە+ۖ.۝)۞ ۟.ۥ+ۧ.۩ ۪.ۮ+۰)ۺ+۽ ۿ+܀ ܏+ܑ.ܒ+ܰ.݋ ݍ+ަ.ޱ+޲ ߀)ߊ+߫.ߴ+߶ ߸'߹ ߺ+߻ ߽.߾ ࠀ+ࠖ.ࠚ+ࠛ.ࠤ+ࠥ.ࠨ+ࠩ.࠮ ࡀ+࡙.࡜ ࡠ+࡫ ࡰ+࢈ ࢉ+࢏ ࢐)࢒ ࢗ.ࢠ+࣊.࣢)ࣣ.ऄ+ऺ.ऽ+ा.ॐ+॑.क़+ॢ.। ०)॰ ॱ+ঁ.঄ অ+঍ এ+঑ ও+঩ প+঱ ল+঳ শ+঺ ়.ঽ+া.৅ ে.৉ ো.ৎ+৏ ৗ.৘ ড়+৞ য়+ৢ.৤ ০)ৰ+৲ ৼ+৽ ৾.৿ ਁ.਄ ਅ+਋ ਏ+਑ ਓ+਩ ਪ+਱ ਲ+਴ ਵ+਷ ਸ+਺ ਼.਽ ਾ.੃ ੇ.੉ ੋ.੎ ੑ.੒ ਖ਼+੝ ਫ਼+੟ ੦)ੰ.ੲ+ੵ.੶ ઁ.઄ અ+઎ એ+઒ ઓ+઩ પ+઱ લ+઴ વ+઺ ઼.ઽ+ા.૆ ે.૊ ો.૎ ૐ+૑ ૠ+ૢ.૤ ૦)૰ ૹ+ૺ.଀ ଁ.଄ ଅ+଍ ଏ+଑ ଓ+଩ ପ+଱ ଲ+଴ ଵ+଺ ଼.ଽ+ା.୅ େ.୉ ୋ.୎ ୕.୘ ଡ଼+୞ ୟ+ୢ.୤ ୦)୰ ୱ+୲ ஂ.ஃ+஄ அ+஋ எ+஑ ஒ+஖ ங+஛ ஜ+஝ ஞ+஠ ண+஥ ந+஫ ம+஺ ா.௃ ெ.௉ ொ.௎ ௐ+௑ ௗ.௘ ௦)௰ ఀ.అ+఍ ఎ+఑ ఒ+఩ ప+఺ ఼.ఽ+ా.౅ ె.౉ ొ.౎ ౕ.౗ ౘ+౛ ౝ+౞ ౠ+ౢ.౤ ౦)౰ ಀ+ಁ.಄ ಅ+಍ ಎ+಑ ಒ+಩ ಪ+಴ ವ+಺ ಼.ಽ+ಾ.೅ ೆ.೉ ೊ.೎ ೕ.೗ ೝ+೟ ೠ+ೢ.೤ ೦)೰ ೱ+ೳ.೴ ഀ.ഄ+഍ എ+഑ ഒ+഻.ഽ+ാ.൅ െ.൉ ൊ.ൎ+൏ ൔ+ൗ.൘ ൟ+ൢ.൤ ൦)൰ ൺ+඀ ඁ.඄ අ+඗ ක+඲ ඳ+඼ ල+඾ ව+෇ ්.෋ ා.෕ ූ.෗ ෘ.෠ ෦)෰ ෲ.෴ ั.า ิ.฻ ็.๏ ๐)๚ ັ.າ ິ.ຽ ່.໏ ໐)໚ ༀ+༁ ༘.༚ ༠)༪ ༵.༶ ༷.༸ ༹.༺ ༾.ཀ+཈ ཉ+཭ ཱ.྅ ྆.ྈ+ྍ.྘ ྙ.྽ ࿆.࿇ ါ.ဿ ၀)၊ ၖ.ၚ ၞ.ၡ ၢ.ၥ ၧ.ၮ ၱ.ၵ ႂ.ႎ ႏ.႐)ႚ.႞ Ⴀ+჆ Ⴧ+჈ Ⴭ+჎ ა+჻ ჼ+቉ ቊ+቎ ቐ+቗ ቘ+቙ ቚ+቞ በ+኉ ኊ+኎ ነ+኱ ኲ+኶ ኸ+኿ ዀ+዁ ዂ+዆ ወ+዗ ዘ+጑ ጒ+጖ ጘ+፛ ፝.፠ ᎀ+᎐ Ꭰ+᏶ ᏸ+᏾ ᐁ+᙭ ᙯ+ $ᚁ+᚛ ᚠ+᛫ ᛮ+᛹ ᜀ+ᜒ.᜖ ᜟ+ᜲ.᜵ ᝀ+ᝒ.᝔ ᝠ+᝭ ᝮ+᝱ ᝲ.᝴ ឴.។ ៝.៞ ០)៪ ᠋.᠎-᠏.᠐)᠚ ᠠ+᡹ ᢀ+ᢅ.ᢇ+ᢩ.ᢪ+᢫ ᢰ+᣶ ᤀ+᤟ ᤠ.᤬ ᤰ.᤼ ᥆)ᥐ ᧐)᧛ ᨀ+ᨗ.᨜ ᩕ.᩟ ᩠.᩽ ᩿.᪀)᪊ ᪐)᪚ ᪰.᫏ ᬀ.ᬅ+᬴.ᭅ+᭍ ᭐)᭚ ᭫.᭴ ᮀ.ᮃ+ᮡ.ᮮ+᮰)ᮺ+᯦.᯴ ᰀ+ᰤ.᰸ ᱀)᱊ ᱍ+᱐)ᱚ+᱾ ᲀ+᲋ Ა+᲻ Ჽ+᳀ ᳐.᳓ ᳔.ᳩ+᳭.ᳮ+᳴.ᳵ+᳷.ᳺ+᳻ ᴀ+᷀.Ḁ+἖ Ἐ+἞ ἠ+὆ Ὀ+὎ ὐ+὘ Ὑ+὚ Ὓ+὜ Ὕ+὞ Ὗ+὾ ᾀ+᾵ ᾶ+᾽ ι+᾿ ῂ+῅ ῆ+῍ ῐ+῔ ῖ+῜ ῠ+῭ ῲ+῵ ῶ+´  $   $​ ‌.‍0‎-‐ ‘(‚ ․(‥ ‧*\\\\u2028\\\"‪- ,‰ ‿,⁁ ⁄'⁅ ⁔,⁕  $⁠-⁥ ⁦-⁰ ⁱ+⁲ ⁿ+₀ ₐ+₝ ⃐.⃱ ℂ+℃ ℇ+℈ ℊ+℔ ℕ+№ ℙ+℞ ℤ+℥ Ω+℧ ℨ+℩ K+℮ ℯ+℺ ℼ+⅀ ⅅ+⅊ ⅎ+⅏ Ⅰ+↉ Ⓐ+⓪ Ⰰ+⳥ Ⳬ+⳯.Ⳳ+⳴ ⴀ+⴦ ⴧ+⴨ ⴭ+⴮ ⴰ+⵨ ⵯ+⵰ ⵿.ⶀ+⶗ ⶠ+⶧ ⶨ+⶯ ⶰ+⶷ ⶸ+⶿ ⷀ+⷇ ⷈ+⷏ ⷐ+⷗ ⷘ+⷟ ⷠ.⸀ ⸯ+⸰ 　$、 々+〆 〪.〰 〱1〶 〻+〽 ゙.゛1ゝ ゠1・ ー1㄀ ㄅ+㄰ ㄱ+㆏ ㆠ+㇀ ㇰ1㈀ ㋐1㋿ ㌀1㍘ ꀀ+꒍ ꓐ+꓾ ꔀ+꘍ ꘐ+꘠)ꘪ+꘬ Ꙁ+꙯.꙳ ꙴ.꙾ ꙿ+ꚞ.ꚠ+꛰.꛲ ꜈+꟎ Ꟑ+꟒ ꟓ+꟔ ꟕ+꟝ ꟲ+ꠂ.ꠃ+꠆.ꠇ+ꠋ.ꠌ+ꠣ.꠨ ꠬.꠭ ꡀ+꡴ ꢀ.ꢂ+ꢴ.꣆ ꣐)꣚ ꣠.ꣲ+꣸ ꣻ+꣼ ꣽ+ꣿ.꤀)ꤊ+ꤦ.꤮ ꤰ+ꥇ.꥔ ꥠ+꥽ ꦀ.ꦄ+꦳.꧁ ꧏ+꧐)꧚ ꧥ.ꧦ ꧰)ꧺ ꨀ+ꨩ.꨷ ꩀ+ꩃ.ꩄ+ꩌ.꩎ ꩐)꩚ ꩻ.ꩾ ꪰ.ꪱ ꪲ.ꪵ ꪷ.ꪹ ꪾ.ꫀ ꫁.ꫂ ꫠ+ꫫ.꫰ ꫲ+ꫵ.꫷ ꬁ+꬇ ꬉ+꬏ ꬑ+꬗ ꬠ+꬧ ꬨ+꬯ ꬰ+꭪ ꭰ+ꯣ.꯫ ꯬.꯮ ꯰)꯺ 가+힤 ힰ+퟇ ퟋ+퟼ ﬀ+﬇ ﬓ+﬘ יִ/ﬞ.ײַ/﬩ שׁ/﬷ טּ/﬽ מּ/﬿ נּ/﭂ ףּ/﭅ צּ/ﭐ+﮲ ﯓ+﴾ ﵐ+﶐ ﶒ+﷈ ﷰ+﷼ ︀.︐ ︓*︔ ︠.︰ ︳,︵ ﹍,﹐'﹑ ﹒(﹓ ﹔'﹕*﹖ ﹰ+﹵ ﹶ+﻽ \\\\uFEFF-＀ ＇(（ ，'－ ．(／ ０)：*；'＜ Ａ+［ ＿,｀ ａ+｛ ｦ1ﾞ.ﾠ+﾿ ￂ+￈ ￊ+￐ ￒ+￘ ￚ+￝ ￹-￼ ￿ `,kt=\\\"𐀀+𐀌 𐀍+𐀧 𐀨+𐀻 𐀼+𐀾 𐀿+𐁎 𐁐+𐁞 𐂀+𐃻 𐅀+𐅵 𐇽.𐇾 𐊀+𐊝 𐊠+𐋑 𐋠.𐋡 𐌀+𐌠 𐌭+𐍋 𐍐+𐍶.𐍻 𐎀+𐎞 𐎠+𐏄 𐏈+𐏐 𐏑+𐏖 𐐀+𐒞 𐒠)𐒪 𐒰+𐓔 𐓘+𐓼 𐔀+𐔨 𐔰+𐕤 𐕰+𐕻 𐕼+𐖋 𐖌+𐖓 𐖔+𐖖 𐖗+𐖢 𐖣+𐖲 𐖳+𐖺 𐖻+𐖽 𐗀+𐗴 𐘀+𐜷 𐝀+𐝖 𐝠+𐝨 𐞀+𐞆 𐞇+𐞱 𐞲+𐞻 𐠀+𐠆 𐠈+𐠉 𐠊+𐠶 𐠷+𐠹 𐠼+𐠽 𐠿+𐡖 𐡠+𐡷 𐢀+𐢟 𐣠+𐣳 𐣴+𐣶 𐤀+𐤖 𐤠+𐤺 𐦀+𐦸 𐦾+𐧀 𐨀+𐨁.𐨄 𐨅.𐨇 𐨌.𐨐+𐨔 𐨕+𐨘 𐨙+𐨶 𐨸.𐨻 𐨿.𐩀 𐩠+𐩽 𐪀+𐪝 𐫀+𐫈 𐫉+𐫥.𐫧 𐬀+𐬶 𐭀+𐭖 𐭠+𐭳 𐮀+𐮒 𐰀+𐱉 𐲀+𐲳 𐳀+𐳳 𐴀+𐴤.𐴨 𐴰)𐴺 𐵀)𐵊+𐵦 𐵩.𐵮 𐵯+𐶆 𐺀+𐺪 𐺫.𐺭 𐺰+𐺲 𐻂+𐻅 𐻼.𐼀+𐼝 𐼧+𐼨 𐼰+𐽆.𐽑 𐽰+𐾂.𐾆 𐾰+𐿅 𐿠+𐿷 𑀀.𑀃+𑀸.𑁇 𑁦)𑁰.𑁱+𑁳.𑁵+𑁶 𑁿.𑂃+𑂰.𑂻 𑂽)𑂾 𑃂.𑃃 𑃍)𑃎 𑃐+𑃩 𑃰)𑃺 𑄀.𑄃+𑄧.𑄵 𑄶)𑅀 𑅄+𑅅.𑅇+𑅈 𑅐+𑅳.𑅴 𑅶+𑅷 𑆀.𑆃+𑆳.𑇁+𑇅 𑇉.𑇍 𑇎.𑇐)𑇚+𑇛 𑇜+𑇝 𑈀+𑈒 𑈓+𑈬.𑈸 𑈾.𑈿+𑉁.𑉂 𑊀+𑊇 𑊈+𑊉 𑊊+𑊎 𑊏+𑊞 𑊟+𑊩 𑊰+𑋟.𑋫 𑋰)𑋺 𑌀.𑌄 𑌅+𑌍 𑌏+𑌑 𑌓+𑌩 𑌪+𑌱 𑌲+𑌴 𑌵+𑌺 𑌻.𑌽+𑌾.𑍅 𑍇.𑍉 𑍋.𑍎 𑍐+𑍑 𑍗.𑍘 𑍝+𑍢.𑍤 𑍦.𑍭 𑍰.𑍵 𑎀+𑎊 𑎋+𑎌 𑎎+𑎏 𑎐+𑎶 𑎷+𑎸.𑏁 𑏂.𑏃 𑏅.𑏆 𑏇.𑏋 𑏌.𑏑+𑏒.𑏓+𑏔 𑏡.𑏣 𑐀+𑐵.𑑇+𑑋 𑑐)𑑚 𑑞.𑑟+𑑢 𑒀+𑒰.𑓄+𑓆 𑓇+𑓈 𑓐)𑓚 𑖀+𑖯.𑖶 𑖸.𑗁 𑗘+𑗜.𑗞 𑘀+𑘰.𑙁 𑙄+𑙅 𑙐)𑙚 𑚀+𑚫.𑚸+𑚹 𑛀)𑛊 𑛐)𑛤 𑜝.𑜬 𑜰)𑜺 𑠀+𑠬.𑠻 𑢠+𑣠)𑣪 𑣿+𑤇 𑤉+𑤊 𑤌+𑤔 𑤕+𑤗 𑤘+𑤰.𑤶 𑤷.𑤹 𑤻.𑤿+𑥀.𑥁+𑥂.𑥄 𑥐)𑥚 𑦠+𑦨 𑦪+𑧑.𑧘 𑧚.𑧡+𑧢 𑧣+𑧤.𑧥 𑨀+𑨁.𑨋+𑨳.𑨺+𑨻.𑨿 𑩇.𑩈 𑩐+𑩑.𑩜+𑪊.𑪚 𑪝+𑪞 𑪰+𑫹 𑯀+𑯡 𑯰)𑯺 𑰀+𑰉 𑰊+𑰯.𑰷 𑰸.𑱀+𑱁 𑱐)𑱚 𑱲+𑲐 𑲒.𑲨 𑲩.𑲷 𑴀+𑴇 𑴈+𑴊 𑴋+𑴱.𑴷 𑴺.𑴻 𑴼.𑴾 𑴿.𑵆+𑵇.𑵈 𑵐)𑵚 𑵠+𑵦 𑵧+𑵩 𑵪+𑶊.𑶏 𑶐.𑶒 𑶓.𑶘+𑶙 𑶠)𑶪 𑻠+𑻳.𑻷 𑼀.𑼂+𑼃.𑼄+𑼑 𑼒+𑼴.𑼻 𑼾.𑽃 𑽐)𑽚.𑽛 𑾰+𑾱 𒀀+𒎚 𒐀+𒑯 𒒀+𒕄 𒾐+𒿱 𓀀+𓐰-𓑀.𓑁+𓑇.𓑖 𓑠+𔏻 𔐀+𔙇 𖄀+𖄞.𖄰)𖄺 𖠀+𖨹 𖩀+𖩟 𖩠)𖩪 𖩰+𖪿 𖫀)𖫊 𖫐+𖫮 𖫰.𖫵 𖬀+𖬰.𖬷 𖭀+𖭄 𖭐)𖭚 𖭣+𖭸 𖭽+𖮐 𖵀+𖵭 𖵰)𖵺 𖹀+𖺀 𖼀+𖽋 𖽏.𖽐+𖽑.𖾈 𖾏.𖾓+𖾠 𖿠+𖿢 𖿣+𖿤.𖿥 𖿰.𖿲 𚿰1𚿴 𚿵1𚿼 𚿽1𚿿 𛀀1𛀁 𛄠1𛄣 𛅕1𛅖 𛅤1𛅨 𛰀+𛱫 𛱰+𛱽 𛲀+𛲉 𛲐+𛲚 𛲝.𛲟 𛲠-𛲤 𜳰)𜳺 𜼀.𜼮 𜼰.𜽇 𝅥.𝅪 𝅭.𝅳-𝅻.𝆃 𝆅.𝆌 𝆪.𝆮 𝉂.𝉅 𝐀+𝑕 𝑖+𝒝 𝒞+𝒠 𝒢+𝒣 𝒥+𝒧 𝒩+𝒭 𝒮+𝒺 𝒻+𝒼 𝒽+𝓄 𝓅+𝔆 𝔇+𝔋 𝔍+𝔕 𝔖+𝔝 𝔞+𝔺 𝔻+𝔿 𝕀+𝕅 𝕆+𝕇 𝕊+𝕑 𝕒+𝚦 𝚨+𝛁 𝛂+𝛛 𝛜+𝛻 𝛼+𝜕 𝜖+𝜵 𝜶+𝝏 𝝐+𝝯 𝝰+𝞉 𝞊+𝞩 𝞪+𝟃 𝟄+𝟌 𝟎)𝠀 𝨀.𝨷 𝨻.𝩭 𝩵.𝩶 𝪄.𝪅 𝪛.𝪠 𝪡.𝪰 𝼀+𝼟 𝼥+𝼫 𞀀.𞀇 𞀈.𞀙 𞀛.𞀢 𞀣.𞀥 𞀦.𞀫 𞀰+𞁮 𞂏.𞂐 𞄀+𞄭 𞄰.𞄷+𞄾 𞅀)𞅊 𞅎+𞅏 𞊐+𞊮.𞊯 𞋀+𞋬.𞋰)𞋺 𞓐+𞓬.𞓰)𞓺 𞗐+𞗮.𞗰+𞗱)𞗻 𞟠+𞟧 𞟨+𞟬 𞟭+𞟯 𞟰+𞟿 𞠀+𞣅 𞣐.𞣗 𞤀+𞥄.𞥋+𞥌 𞥐)𞥚 𞸀+𞸄 𞸅+𞸠 𞸡+𞸣 𞸤+𞸥 𞸧+𞸨 𞸩+𞸳 𞸴+𞸸 𞸹+𞸺 𞸻+𞸼 𞹂+𞹃 𞹇+𞹈 𞹉+𞹊 𞹋+𞹌 𞹍+𞹐 𞹑+𞹓 𞹔+𞹕 𞹗+𞹘 𞹙+𞹚 𞹛+𞹜 𞹝+𞹞 𞹟+𞹠 𞹡+𞹣 𞹤+𞹥 𞹧+𞹫 𞹬+𞹳 𞹴+𞹸 𞹹+𞹽 𞹾+𞹿 𞺀+𞺊 𞺋+𞺜 𞺡+𞺤 𞺥+𞺪 𞺫+𞺼 🄰+🅊 🅐+🅪 🅰+🆊 🇦2🈀 🏻.🐀 🯰)🯺 󠀁-󠀂 󠀠.󠂀 󠄀.󠇰 \\\";function wt(o){let e=o<=65535?2:3,t=e==2?bt:kt;return He(t,o,e,0,t.length/e-1)-32}h(wt,\\\"searchForProperty\\\");function He(o,e,t,r,n){if(n<r)return 0;let i=r+~~((n-r)/2),s=o.codePointAt(t*i),l=o.codePointAt(t*(i+1)),a=isNaN(l)?1/0:l;return e<s?He(o,e,t,r,i-1):e>=a?He(o,e,t,i+1,n):o.charCodeAt(t*(i+1)-1)}h(He,\\\"_searchForProperty\\\");function R(o,e){let t=jt(o,e);if(t.length==0)return[];let r=[];for(let n=0;n<t.length-1;n++){let i=t[n],s=t[n+1],l=new ye(o,i,s);Gt(l.text,e)?r.push(l):n==t.length-2&&(l=new ye(o,s,s),r.push(l))}return r}h(R,\\\"default_\\\");var Ge=class Ge{constructor(e,t,r){this._source=e,this.start=t,this.end=r}get text(){return this._source.substring(this.start,this.end)}get length(){return this.end-this.start}};h(Ge,\\\"LazySpan\\\");var ye=Ge,Y=class Y{constructor(e,t,r,n,i,s){this.lookbehind=19;this.left=19;this.right=19;this.text=e,this.options=t,arguments.length==3?this.lookahead=this.wordbreakPropertyAt(r):(this.lookbehind=r,this.left=n,this.right=i,this.lookahead=s)}next(e){let t=this.wordbreakPropertyAt(e);return new Y(this.text,this.options,this.left,this.right,this.lookahead,t)}ignoringRight(e){let t=this.wordbreakPropertyAt(e);return new Y(this.text,this.options,this.lookbehind,this.left,this.lookahead,t)}ignoringLookahead(e){let t=this.wordbreakPropertyAt(e);return new Y(this.text,this.options,this.lookbehind,this.left,this.right,t)}wordbreakPropertyAt(e){return e<0?19:e>=this.text.length?20:yt(this.text[e])?ze(this.text[e]+this.text[e+1]):ze(this.text[e],this.options)}match(e,t,r,n){var s,l,a,u;let i=(s=e==null?void 0:e.includes(this.lookbehind))!=null?s:!0;return i=i&&((l=t==null?void 0:t.includes(this.left))!=null?l:!0),i=i&&((a=r==null?void 0:r.includes(this.right))!=null?a:!0),i&&((u=n==null?void 0:n.includes(this.lookahead))!=null?u:!0)}propertyMatch(e,t,r,n){let i=h(s=>vt(s,this.options),\\\"propMapper\\\");return this.match(e==null?void 0:e.map(i),t==null?void 0:t.map(i),r==null?void 0:r.map(i),n==null?void 0:n.map(i))}};h(Y,\\\"BreakerContext\\\");var Ve=Y;function Gt(o,e){return!o.split(\\\"\\\").map(t=>ze(t,e)).every(t=>t===3||t===1||t===2||t===4)}h(Gt,\\\"isNonSpace\\\");function jt(o,e){if(o.length===0)return[];e&&!e.rules&&(e.rules=[]);let t=[],r,n=0,i=new Ve(o,e,n),s=0;do{if(r=n,n=l(n),i=i.next(n),i.match(null,[19],null,null)){t.push(r);continue}if(i.match(null,null,[20],null)){t.push(r);break}if(i.match(null,[3],[1],null))continue;let a=[2,3,1];if(i.match(null,a,null,null)){t.push(r);continue}if(i.match(null,null,a,null)){t.push(r);continue}if(i.match(null,[4],[4],null))continue;let u=[13,14,16];for(;i.match(null,null,u,null);)[r,n]=[n,l(n)],i=i.ignoringRight(n);if(i.right===20){t.push(r);break}for(;i.match(null,null,null,u);)n=l(n),i=i.ignoringLookahead(n);let c=[11,15],p=[8,6];if(e!=null&&e.rules){let x=!1;for(let m of e.rules)if(x=m.match(i),x){m.breakIfMatch&&t.push(r);break}if(x)continue}if(i.match(null,c,c,null))continue;let f=[10].concat(p);if(i.match(null,c,f,c)||i.match(c,f,c,null)||i.match(null,[15],[6],null)||i.match(null,[15],[5],[15])||i.match([15],[5],[15],null)||i.match(null,[9],[9],null)||i.match(null,c,[9],null)||i.match(null,[9],c,null))continue;let d=[7].concat(p);if(i.match([9],d,[9],null)||i.match(null,[9],d,[9])||i.match(null,[17],[17],null))continue;let C=[17,9].concat(c);if(!i.match(null,C,[12],null)&&!i.match(null,[12],[12],null)&&!i.match(null,[12],C,null)){if(i.right===18){if(s+=1,s%2==1)continue}else s=0;t.push(r)}}while(r<o.length);return t;function l(a){return a>=o.length?o.length:yt(o[a])?a+2:a+1}}h(jt,\\\"findBoundaries\\\");function yt(o){let e=o.charCodeAt(0);return e>=55296&&e<=56319}h(yt,\\\"isStartOfSurrogatePair\\\");function ze(o,e){if(e!=null&&e.propertyMapping){let r=e.propertyMapping(o);if(r)return vt(r,e)}let t=o.codePointAt(0);return wt(t)}h(ze,\\\"property\\\");function vt(o,e){var n,i;let t=h(s=>s.toLowerCase()==o.toLowerCase(),\\\"matcher\\\"),r=(i=(n=e==null?void 0:e.customProperties)==null?void 0:n.findIndex(t))!=null?i:-1;return r!=-1?-r-1:xt.findIndex(t)}h(vt,\\\"propertyVal\\\");O();var Lt=12,_=class _{constructor(e,t,r){this.root=e,this.prefix=t,this.totalWeight=r}child(e){if(e==\\\"\\\")return this;let t=e.split(\\\"\\\"),r=this;for(;t.length>0&&r;){let n=t.shift();r=r._child(n)}return r}_child(e){let t=this.root,r=this.totalWeight,n=this.prefix+e;if(t.type==\\\"internal\\\"){let i=t.children[e];return i?new _(i,n,r):void 0}else return t.entries.filter(function(s){return s.key.indexOf(n)==0}).length?new _(t,n,r):void 0}*children(){let e=this.root,t=this.totalWeight;if(e.type==\\\"internal\\\"){for(let r of e.values){let n=e.children[r];if(F(r))if(n.type==\\\"internal\\\"){let i=n;for(let s of i.values){let l=this.prefix+r+s;yield{char:r+s,traversal:function(){return new _(i.children[s],l,t)}}}}else{let i=n.entries[0].key;r=r+i[this.prefix.length+1];let s=this.prefix+r;yield{char:r,traversal:function(){return new _(n,s,t)}}}else{if(ke(r))continue;if(r){let i=this.prefix+r;yield{char:r,traversal:function(){return new _(n,i,t)}}}else continue}}return}else{let r=this.prefix,n=e.entries.filter(function(i){return i.key!=r&&r.length<i.key.length});for(let{key:i}of n){let s=i[r.length];F(s)&&(s=s+i[r.length+1]),yield{char:s,traversal:function(){return new _(e,r+s,t)}}}return}}get entries(){let e=h(t=>({text:t.content,p:t.weight/this.totalWeight}),\\\"entryMapper\\\");if(this.root.type==\\\"leaf\\\"){let t=this.prefix;return this.root.entries.filter(function(n){return n.key==t}).map(e)}else{let t=this.root.children[N];return t&&t.type==\\\"leaf\\\"?t.entries.map(e):[]}}get p(){return this.root.weight/this.totalWeight}};h(_,\\\"Traversal\\\");var je=_,Ye=class Ye{constructor(e,t={}){this.languageUsesCasing=t.languageUsesCasing,this.applyCasing=t.applyCasing,this._trie=new Xe(e.root,e.totalWeight,t.searchTermToKey||Xt),this.breakWords=t.wordBreaker||R,this.punctuation=t.punctuation}configure(e){var t;return this.configuration={leftContextCodePoints:e.maxLeftContextCodePoints,rightContextCodePoints:(t=e.maxRightContextCodePoints)!=null?t:0}}toKey(e){return this._trie.toKey(e)}predict(e,t){if(!e.insert&&!t.left&&!t.right&&t.startOfBuffer&&t.endOfBuffer)return s(this._trie.firstN(Lt).map(({text:l,p:a})=>({transform:{insert:l,deleteLeft:0},displayAs:l,p:a})));let r=g(e,t),n=e.deleteLeft-e.insert.kmwLength(),i=ae(this.breakWords,r);return s(this._trie.lookup(i).map(({text:l,p:a})=>W({insert:l,deleteLeft:n+i.kmwLength()},a)));function s(l){let a=[];for(let u of l)a.push({sample:u,p:u.p});return a}}get wordbreaker(){return this.breakWords}traverseFromRoot(){return this._trie.traverseFromRoot()}};h(Ye,\\\"TrieModel\\\");var ue=Ye,$e=class $e{constructor(e,t,r){this.root=e,this.toKey=r,this.totalWeight=t}traverseFromRoot(){return new je(this.root,\\\"\\\",this.totalWeight)}lookup(e){let t=this.toKey(e),r=this.traverseFromRoot().child(t);if(!r)return[];let n=r.entries,i={};for(let a of n)i[a.text]=a.text;let l=Mt(r).filter(a=>!i[a.text]);return n.concat(l)}firstN(e){return Mt(this.traverseFromRoot(),e)}};h($e,\\\"Trie\\\");var Xe=$e;function Mt(o,e=Lt){let t=new k(function(n,i){return(i?i.p:0)-(n?n.p:0)}),r=[];for(t.enqueue(o);t.count>0;){let n=t.dequeue();if(n.text!==void 0){let i=n;if(r.push(i),r.length>=e)return r}else{let i=n;t.enqueueAll(i.entries);let s=[];for(let l of i.children())s.push(l.traversal());t.enqueueAll(s)}}return r}h(Mt,\\\"getSortedResults\\\");function Xt(o){return o.normalize(\\\"NFD\\\").replace(/[\\\\u0300-\\\\u036f]/g,\\\"\\\").toLowerCase()}h(Xt,\\\"defaultSearchTermToKey\\\");var et=class et{constructor(e){e=e||{},this._futureSuggestions=e.futureSuggestions?e.futureSuggestions.slice():[],e.punctuation&&(this.punctuation=e.punctuation),this.toKey=e.toKey,this.wordbreaker=e.wordbreaker,this.applyCasing=e.applyCasing,this.languageUsesCasing=e.languageUsesCasing}configure(e){return this.configuration={leftContextCodePoints:e.maxLeftContextCodePoints,rightContextCodePoints:e.maxRightContextCodePoints},this.configuration}predict(e,t,r){let n=h(function(s){let l=[];for(let a of s)l.push({sample:a,p:a.p!==void 0?a.p:1});return l},\\\"makeUniformDistribution\\\");if(r)return n(r);let i=this._futureSuggestions.shift();return i?n(i):[]}};h(et,\\\"DummyModel\\\");var Je=et,Et=Je;var Ce={};_e(Ce,{ClassicalDistanceCalculation:()=>K,ContextTracker:()=>Te,ExecutionBucket:()=>ce,ExecutionSpan:()=>Q,ExecutionTimer:()=>he,QUEUE_NODE_COMPARATOR:()=>Le,STANDARD_TIME_BETWEEN_DEFERS:()=>Me,SearchNode:()=>Ee,SearchResult:()=>de,SearchSpace:()=>v,TrackedContextState:()=>V,TrackedContextSuggestion:()=>lt,TrackedContextToken:()=>z});var T=class T{constructor(e){this.diagonalWidth=2;this.inputSequence=[];this.matchSequence=[];if(e){let t=e.resolvedDistances.length;this.resolvedDistances=Array(t);for(let r=0;r<t;r++)this.resolvedDistances[r]=e.resolvedDistances[r].slice(0);this.inputSequence=e.inputSequence.slice(0),this.matchSequence=e.matchSequence.slice(0),this.diagonalWidth=e.diagonalWidth}else this.resolvedDistances=[]}getTrueIndex(e,t,r){let n={row:e,col:t-e+r,sparse:!1};return(n.col<0||n.col>2*r)&&(n.sparse=!0),n}getCostAt(e,t,r=this.diagonalWidth){if(e<0||t<0)return e==-1&&t>=-1?t+1:t==-1&&e>=-1?e+1:Number.MAX_VALUE;let n=this.getTrueIndex(e,t,r);return n.sparse?Number.MAX_VALUE:this.resolvedDistances[n.row][n.col]}getFinalCost(){let e=this,t=e.getHeuristicFinalCost();for(;t>e.diagonalWidth;)e=e.increaseMaxDistance(),t=e.getHeuristicFinalCost();return t}getHeuristicFinalCost(){return this.getCostAt(this.inputSequence.length-1,this.matchSequence.length-1)}hasFinalCostWithin(e){let t=this,r=t.getHeuristicFinalCost(),n=this.diagonalWidth;do{if(r<=e)return!0;if(n<e)t=t.increaseMaxDistance(),n++,r=t.getHeuristicFinalCost();else break}while(!0);return!1}editPath(e=this.inputSequence.length-1,t=this.matchSequence.length-1){let r=this.getCostAt(e,t),n=null,i=null,s=this.getCostAt(e,t-1),l=this.getCostAt(e-1,t),a=this.getCostAt(e-1,t-1),[u,c]=T.getTransposeParent(this,e,t);if(u>=0&&c>=0){let p=1;if(n=[\\\"transpose-start\\\"],u!=e-1){let f=e-u-1;n=n.concat(Array(f).fill(\\\"transpose-delete\\\")),p+=f}else{let f=t-c-1;n=n.concat(Array(f).fill(\\\"transpose-insert\\\")),p+=f}n.push(\\\"transpose-end\\\"),this.getCostAt(u-1,c-1)!=r-p&&(n=null),i=[u-1,c-1]}return n||(a==r-1?(n=[\\\"substitute\\\"],i=[e-1,t-1]):s==r-1?(n=[\\\"insert\\\"],i=[e,t-1]):l==r-1?(n=[\\\"delete\\\"],i=[e-1,t]):(n=[\\\"match\\\"],i=[e-1,t-1])),i[0]>=0&&i[1]>=0?this.editPath(i[0],i[1]).concat(n):i[0]>-1?Array(i[0]+1).fill(\\\"delete\\\").concat(n):i[1]>-1?Array(i[1]+1).fill(\\\"insert\\\").concat(n):n}static getTransposeParent(e,t,r){if(t<0||r<0||e.inputSequence[t].key==e.matchSequence[r].key)return[-1,-1];let n=-1;for(let s=t-1;s>=0;s--)if(e.inputSequence[s].key==e.matchSequence[r].key){n=s;break}let i=-1;for(let s=r-1;s>=0;s--)if(e.matchSequence[s].key==e.inputSequence[t].key){i=s;break}return[n,i]}static initialCostAt(e,t,r,n,i){var s=e.inputSequence[t].key==e.matchSequence[r].key?0:1,l=e.getCostAt(t-1,r-1)+s,a=n||e.getCostAt(t,r-1)+1,u=i||e.getCostAt(t-1,r)+1,c=Number.MAX_VALUE;if(t>0&&r>0){let[p,f]=T.getTransposeParent(e,t,r);c=e.getCostAt(p-1,f-1)+(t-p-1)+1+(r-f-1)}return Math.min(l,u,a,c)}getSubset(e,t){let r=new T(this);if(e>this.inputSequence.length||t>this.matchSequence.length)throw\\\"Invalid dimensions specified for trim operation\\\";r.inputSequence.splice(e),r.matchSequence.splice(t),r.resolvedDistances.splice(e);let n=this.getTrueIndex(e-1,t-1,this.diagonalWidth);for(let i=n.col;i<=2*this.diagonalWidth;i++){let s=n.row-(i-n.col);if(s<0)break;if(i<0)r.resolvedDistances[s]=Array(2*r.diagonalWidth+1).fill(Number.MAX_VALUE);else{let l=2*this.diagonalWidth-i,a=r.resolvedDistances[s].splice(0,i+1),u=Array(l).fill(Number.MAX_VALUE);r.resolvedDistances[s]=a.concat(u)}}return r}static forDiagonalOfAxis(e,t,r,n){let i=r-t<e?r-t+e:2*e,s=t-e,l=s<0?0:s;for(let a=l-s;a<=i;a++)n(s+a,a)}addInputChar(e){let t=new T(this),r=t.inputSequence.length;t.inputSequence.push(e);let n=Array(2*t.diagonalWidth+1).fill(Number.MAX_VALUE);return t.resolvedDistances[r]=n,t.matchSequence.length==0||T.forDiagonalOfAxis(t.diagonalWidth,r,t.matchSequence.length-1,function(i,s){n[s]=T.initialCostAt(t,r,i)}),t}addMatchChar(e){let t=new T(this),r=t.matchSequence.length;return t.matchSequence.push(e),t.inputSequence.length==0||T.forDiagonalOfAxis(t.diagonalWidth,r,t.inputSequence.length-1,function(n,i){var s=t.resolvedDistances[n];s[2*t.diagonalWidth-i]=T.initialCostAt(t,n,r)}),t}increaseMaxDistance(){let e=new T(this);if(e.diagonalWidth++,e.inputSequence.length<1||e.matchSequence.length<1)return e;function t(n,i,s,l){let a=2*(e.diagonalWidth-1),u=s.length-1;a=a<u-n?a:u-n;for(let c=0;c<=a;c++)i==s[n+c].key&&l(n+c,c)}h(t,\\\"forPossibleTranspositionsInDiagonal\\\");for(let n=0;n<e.inputSequence.length;n++){let i=Number.MAX_VALUE,s=n-e.diagonalWidth;if(s>=0){let a=s==0?n+2:Number.MAX_VALUE;i=T.initialCostAt(e,n,s,a,void 0);let u=i;if(s<e.matchSequence.length-1){T.propagateUpdateFrom(e,n,s+1,u+1,0);let c=n+2;if(n+2<this.inputSequence.length){let p=e.inputSequence[n+1].key;t(s+3,p,e.matchSequence,function(f,d){T.propagateUpdateFrom(e,c,f,u+d+2,d)})}}}let l=Number.MAX_VALUE;if(s=n+e.diagonalWidth,s<e.matchSequence.length){let a=n==0?s+2:Number.MAX_VALUE;var r=e.getCostAt(n,s-1,this.diagonalWidth)+1;l=T.initialCostAt(e,n,s,r,a);let u=l;if(n<e.inputSequence.length-1){T.propagateUpdateFrom(e,n+1,s,u+1,2*this.diagonalWidth);let c=s+2;if(s+2<this.matchSequence.length){let p=e.matchSequence[n+1].key;t(n+3,p,e.inputSequence,function(f,d){let C=2*(e.diagonalWidth-1)-d;T.propagateUpdateFrom(e,f,c,u+d+2,C)})}}}e.resolvedDistances[n]=[i].concat(e.resolvedDistances[n],l)}return e}static propagateUpdateFrom(e,t,r,n,i){if(n<e.resolvedDistances[t][i])e.resolvedDistances[t][i]=n;else return;let s=t<e.inputSequence.length-1,l=r<e.matchSequence.length-1;if(i<2*(e.diagonalWidth-1)&&l){let a=n+1;this.propagateUpdateFrom(e,t,r+1,a,i+1)}if(i>0&&s){let a=n+1;this.propagateUpdateFrom(e,t+1,r,a,i-1)}if(s&&l){let a=n+(e.inputSequence[t+1].key==e.matchSequence[r+1].key?0:1);this.propagateUpdateFrom(e,t+1,r+1,a,i);let u=-1;for(let p=t+2;p<e.inputSequence.length;p++)if(e.inputSequence[p].key==e.matchSequence[r+1].key){u=p;break}let c=-1;for(let p=r+2;p<e.matchSequence.length;p++)if(e.matchSequence[p].key==e.inputSequence[t+1].key){c=p;break}if(u>0&&c>0){let p=n+(u-t-2)+1+(c-r-2);this.propagateUpdateFrom(e,u,c,p,e.diagonalWidth-1+c-u)}}}get mapKey(){let e=this.inputSequence.map(r=>r.key).join(\\\"\\\"),t=this.matchSequence.map(r=>r.key).join(\\\"\\\");return e+N+t+N+this.diagonalWidth}get lastInputEntry(){return this.inputSequence[this.inputSequence.length-1]}get lastMatchEntry(){return this.matchSequence[this.matchSequence.length-1]}static computeDistance(e,t,r=1){let n=new T;r=r||1,n.diagonalWidth=r;for(let i=0;i<e.length;i++)n=n.addInputChar(e[i]);for(let i=0;i<t.length;i++)n=n.addMatchChar(t[i]);return n}};h(T,\\\"ClassicalDistanceCalculation\\\");var K=T;var Yt=1,Pt=5,Me=5,tt=class tt{constructor(e){this.timeSpent=0;this.eventCount=0;this.timeSquared=0;this.nearOutliers=[];this.outliers=[];this.preventOutliers=!1;this.preventOutliers=!!e}add(e){if(e<0)throw new Error(\\\"time may not be negative\\\");this.eventCount++,this.timeSpent+=e,this.timeSquared+=e*e,e>=Yt&&(this.nearOutliers.length<Pt||this.nearOutliers[Pt-1]<e)&&(this.nearOutliers.push(e),this.nearOutliers.sort((t,r)=>r-t)),this.checkForOutlier()}checkForOutlier(){if(this.preventOutliers||this.eventCount<4||this.nearOutliers.length==0)return;let e=this.nearOutliers[0];this.timeSpent-=e,this.timeSquared-=e*e,this.eventCount--;let t=this.average,r=e-t,n=this.variance,i=r*r/n;i>=49||this.eventCount>=8&&i>=9?(this.nearOutliers.shift(),this.outliers.push(e)):(this.timeSpent+=e,this.timeSquared+=e*e,this.eventCount++)}get average(){return this.timeSpent/this.eventCount}get variance(){let e=this.eventCount;return e<=1?NaN:this.timeSquared/e-this.timeSpent*this.timeSpent/(e*e)}get outlierTime(){let e=0;for(let t=0;t<this.outliers.length;t++)e+=this.outliers[t];return e}};h(tt,\\\"ExecutionBucket\\\");var ce=tt,rt=class rt{constructor(e,t){this.bucket=e,this.finalizer=t,this.start=performance.now()}end(){var e,t;this.finish=performance.now(),(e=this.bucket)==null||e.add(this.duration),(t=this.finalizer)==null||t.call(this)}get duration(){var e;return((e=this.finish)!=null?e:performance.now())-this.start}};h(rt,\\\"ExecutionSpan\\\");var Q=rt,nt=class nt{constructor(e,t){this.buckets={};this.deferBucket=new ce(!0);this.activeSpan=null;this.spanSinceLastDefer=null;this.trueStart=performance.now(),this.maxExecutionTime=e,this.maxTrueTime=t,this.spanSinceLastDefer=new Q}validateStart(){if(this.activeSpan)throw new Error(\\\"illegal state - span-based timer still pending\\\")}getBucket(e){e!=null||(e=-1);let t=this.buckets[e];return t||(t=this.buckets[e]=new ce),t}get executionTime(){let e=Object.values(this.buckets),t=0;for(let r of e)t+=r.timeSpent;return t}get deferredTime(){let e=Object.values(this.buckets),t=0;for(let r of e)t+=r.outlierTime;return t+=this.deferBucket.timeSpent,t}time(e,t){this.validateStart();let r=performance.now(),n=e(),i=performance.now()-r;return this.getBucket(t).add(i),n}defer(e){return D(this,null,function*(){this.validateStart(),e!=null||(e=0),this.activeSpan=new Q(this.deferBucket,()=>this.activeSpan=null),yield Ue(e),this.activeSpan.end(),this.spanSinceLastDefer=new Q})}get timeSinceLastDefer(){return this.spanSinceLastDefer.duration}start(e){this.validateStart();let t=this.getBucket(e);return this.activeSpan=new Q(t,()=>{this.activeSpan=null}),this.activeSpan}terminate(){this.maxTrueTime=0}get elapsed(){return performance.now()-this.trueStart>=this.maxTrueTime?!0:this.executionTime>=this.maxExecutionTime}};h(nt,\\\"ExecutionTimer\\\");var he=nt;var Le=h(function(o,e){return o.currentCost-e.currentCost},\\\"QUEUE_NODE_COMPARATOR\\\");var H=class H{constructor(e,t){this.toKey=h(e=>e,\\\"toKey\\\");if(t=t||(r=>r),e instanceof H){let r=e;this.calculation=r.calculation,this.currentTraversal=r.currentTraversal,this.priorInput=r.priorInput,this.toKey=r.toKey}else this.calculation=new K,this.currentTraversal=e,this.priorInput=[],this.toKey=t}get knownCost(){return this.calculation.getHeuristicFinalCost()}get inputSamplingCost(){if(this._inputCost!==void 0)return this._inputCost;{let e=v.MIN_KEYSTROKE_PROBABILITY;return this._inputCost=this.priorInput.map(t=>t.p>e?t.p:e).reduce((t,r)=>t-Math.log(r),0),this._inputCost}}get currentCost(){return v.EDIT_DISTANCE_COST_SCALE*this.knownCost+this.inputSamplingCost}buildInsertionEdges(){let e=[];for(let t of this.currentTraversal.children()){let r=t.traversal(),n={key:t.char,traversal:r},i=this.calculation.addMatchChar(n),s=new H(this);s.calculation=i,s.priorInput=this.priorInput,s.currentTraversal=r,e.push(s)}return e}buildDeletionEdges(e){let t=[];for(let r of e){if(r.p<e[0].p*Math.exp(-v.EDIT_DISTANCE_COST_SCALE))break;let n=this.calculation,i=r.sample;i.deleteLeft&&(n=n.getSubset(n.inputSequence.length-i.deleteLeft,n.matchSequence.length));let s=this.priorInput.slice(0);s.push(r);for(let a=0;a<i.insert.length;a++){let u=i.insert[a];F(u)&&(a++,u=u+i.insert[a]);let c=this.toKey(u);c&&(n=n.addInputChar({key:c}))}let l=new H(this);l.calculation=n,l.priorInput=s,t.push(l)}return t}buildSubstitutionEdges(e){let t=this.buildDeletionEdges(e),r=[];for(let n of this.currentTraversal.children())for(let i of t){let s=n.traversal(),l={key:n.char,traversal:s},a=i.calculation.addMatchChar(l),u=new H(this);u.calculation=a,u.priorInput=i.priorInput,u.currentTraversal=s,r.push(u)}return r}get pathKey(){let e=this.priorInput.map(r=>\\\"+\\\"+r.sample.insert+\\\"-\\\"+r.sample.deleteLeft).join(\\\"\\\"),t=this.calculation.matchSequence.map(r=>r.key).join(\\\"\\\");return e+N+t}get resultKey(){return this.calculation.matchSequence.map(e=>e.key).join(\\\"\\\")}get isFullReplacement(){return this.knownCost&&this.knownCost==this.priorInput.length}};h(H,\\\"SearchNode\\\");var Ee=H,it=class it{constructor(e,t){this.processed=[];if(typeof e==\\\"number\\\"){this.index=e,this.correctionQueue=new k(Le,t);return}else this.index=e.index,this.processed=[].concat(e.processed),this.correctionQueue=new k(e.correctionQueue)}increaseMaxEditDistance(){let e=this.correctionQueue.toArray();e.forEach(function(t){t.calculation=t.calculation.increaseMaxDistance()}),this.correctionQueue=new k(Le,e)}};h(it,\\\"SearchSpaceTier\\\");var pe=it,ot=class ot{constructor(e){this.resultNode=e}get inputSequence(){return this.resultNode.priorInput}get matchSequence(){return this.resultNode.calculation.matchSequence}get matchString(){return this.resultNode.resultKey}get knownCost(){return this.resultNode.knownCost}get inputSamplingCost(){return this.resultNode.inputSamplingCost}get totalCost(){return this.resultNode.currentCost}get finalTraversal(){return this.resultNode.currentTraversal}};h(ot,\\\"SearchResult\\\");var de=ot,q=class q{constructor(e){this.tierOrdering=[];this.inputSequence=[];this.minInputCost=[];this.returnedValues={};this.processedEdgeSet={};if(this.buildQueueSpaceComparator(),e instanceof q){this.inputSequence=[].concat(e.inputSequence),this.minInputCost=[].concat(e.minInputCost),this.rootNode=e.rootNode,this.completedPaths=[].concat(e.completedPaths),this.returnedValues=A({},e.returnedValues),this.processedEdgeSet=A({},e.processedEdgeSet),this.tierOrdering=e.tierOrdering.map(n=>new pe(n)),this.selectionQueue=new k(this.QUEUE_SPACE_COMPARATOR,this.tierOrdering);return}let t=e;if(t){if(!t.traverseFromRoot)throw\\\"The provided model does not implement the `traverseFromRoot` function, which is needed to support robust correction searching.\\\"}else throw\\\"The LexicalModel parameter must not be null / undefined.\\\";this.selectionQueue=new k(this.QUEUE_SPACE_COMPARATOR),this.rootNode=new Ee(t.traverseFromRoot(),t.toKey?t.toKey.bind(t):null),this.completedPaths=[this.rootNode];let r=new pe(0,[this.rootNode]);this.tierOrdering.push(r),this.selectionQueue.enqueue(r)}buildQueueSpaceComparator(){let e=this;this.QUEUE_SPACE_COMPARATOR=function(t,r){let n=t.correctionQueue.peek(),i=r.correctionQueue.peek(),s=t.index,l=r.index,a=0,u=1;if(l<s){let c=l;l=s,s=c,u=-1}for(let c=s;c<l;c++)a=a+e.minInputCost[c];return n&&i?n.currentCost-i.currentCost+u*a:i?1:-1}}increaseMaxEditDistance(){this.tierOrdering.forEach(function(e){e.increaseMaxEditDistance()})}addInput(e){this.inputSequence.push(e),this.minInputCost.push(-Math.log(e[0].p));let t=[],r=this.completedPaths.map(function(i){let s=i.buildDeletionEdges(e),l=i.buildSubstitutionEdges(e);return s.concat(l)});this.completedPaths=[],this.returnedValues={},r.forEach(function(i){t=t.concat(i)});let n=new pe(this.tierOrdering.length,t);this.tierOrdering.push(n),this.selectionQueue.enqueue(n)}removeLastInput(){}hasNextMatchEntry(){let e=this.selectionQueue.peek();return e?e.correctionQueue.count>0:!1}handleNextNode(){if(!this.hasNextMatchEntry())return{type:\\\"none\\\"};let e=this.selectionQueue.dequeue(),t=e.correctionQueue.dequeue(),r={type:\\\"intermediate\\\",cost:t.currentCost};if(this.processedEdgeSet[t.pathKey])return this.selectionQueue.enqueue(e),r;this.processedEdgeSet[t.pathKey]=!0;let n=!1;if(t.knownCost>2)return r;t.knownCost==2&&(n=!0);let i=0;for(let s=0;s<=e.index;s++)i+=this.minInputCost[s];if(t.currentCost>i+2.5*q.EDIT_DISTANCE_COST_SCALE)return r;if(!n){let s=t.buildInsertionEdges();e.correctionQueue.enqueueAll(s)}if(e.index==this.tierOrdering.length-1)return this.completedPaths.push(t),this.selectionQueue.enqueue(e),{type:\\\"complete\\\",cost:t.currentCost,finalNode:t};{let s=this.tierOrdering[e.index+1],l=s.index,a=[];n||(a=t.buildDeletionEdges(this.inputSequence[l-1]));let u=t.buildSubstitutionEdges(this.inputSequence[l-1]);s.correctionQueue.enqueueAll(a.concat(u)),this.selectionQueue=new k(this.QUEUE_SPACE_COMPARATOR,this.tierOrdering)}return r}getBestMatches(e){return Ct(this,null,function*(){let t={},r=Object.values(this.returnedValues);if(r.length>0){let n=new k(Le,r);for(;n.count>0;){let i=e.time(()=>{let s=n.dequeue();return s.isFullReplacement?null:(t[s.resultKey]=s,new de(s))},0);if(i){let s=e.start(1);yield i,s.end(),e.timeSinceLastDefer>Me&&(yield new be(e.defer()))}}}do{let n=e.time(()=>{var s,l;let i=this.handleNextNode();if(i.type==\\\"none\\\")return null;if(i.type==\\\"complete\\\"){if(i.finalNode.isFullReplacement)return null;let u=i.finalNode;if(((l=(s=t[u.resultKey])==null?void 0:s.currentCost)!=null?l:Number.MAX_VALUE)>u.currentCost)return t[u.resultKey]=u,this.returnedValues[u.resultKey]=u,new de(u)}return null},2);if(n){let i=e.start(1);yield n,i.end()}e.timeSinceLastDefer>Me&&(yield new be(e.defer()))}while(!e.elapsed&&this.hasNextMatchEntry());return null})}};h(q,\\\"SearchSpace\\\"),q.EDIT_DISTANCE_COST_SCALE=5,q.MIN_KEYSTROKE_PROBABILITY=1e-4,q.DEFAULT_ALLOTTED_CORRECTION_TIME_INTERVAL=33;var v=q;var st=class st{static isWhitespace(e){let t=/^[\\\\u0009\\\\u000A\\\\u000D\\\\u0020\\\\u00a0\\\\u1680\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u200b\\\\u2028\\\\u2029\\\\u202f\\\\u205f\\\\u3000]+$/i;return e.insert.match(t)!=null}static isBackspace(e){return e.insert==\\\"\\\"&&e.deleteLeft>0&&!e.deleteRight}static isEmpty(e){return e.insert==\\\"\\\"&&e.deleteLeft==0&&!e.deleteRight}};h(st,\\\"TransformUtils\\\");var w=st;var $t={quotesForKeepSuggestion:{open:\\\"“\\\",close:\\\"”\\\"},insertAfterWord:\\\" \\\"};function me(o){let e=$t;if(!o.punctuation)return e;let t=o.punctuation,r=t.insertAfterWord;r!==\\\"\\\"&&!r&&(r=e.insertAfterWord);let n=t.quotesForKeepSuggestion;n||(n=e.quotesForKeepSuggestion);let i=t.isRTL;return{insertAfterWord:r,quotesForKeepSuggestion:n,isRTL:i}}h(me,\\\"determinePunctuationFromModel\\\");function B(o){return e=>{if(o.wordbreaker||!o.wordbreak){let t=o.wordbreaker||R;return X(t,e)}else return o.wordbreak(e)}}h(B,\\\"determineModelWordbreaker\\\");function $(o){return e=>o.wordbreaker?se(o.wordbreaker,e):null}h($,\\\"determineModelTokenizer\\\");function It(o,e){var i;let t=o,n=B(o)(e);if(!t.languageUsesCasing)throw\\\"Invalid attempt to detect casing: languageUsesCasing is set to false\\\";if(!t.applyCasing)throw\\\"Invalid LMLayer state:  languageUsesCasing is set to true, but no applyCasing function exists\\\";return e.casingForm==\\\"upper\\\"||e.casingForm==\\\"initial\\\"?e.casingForm:t.applyCasing(\\\"lower\\\",n)==n?\\\"lower\\\":t.applyCasing(\\\"upper\\\",n)==n?n.kmwLength()>1?\\\"upper\\\":\\\"initial\\\":t.applyCasing(\\\"initial\\\",n)==n?\\\"initial\\\":(i=e.casingForm)!=null?i:null}h(It,\\\"detectCurrentCasing\\\");function at(o,e,t){let r=g(t,e),n=o(r).left,i=t.insert,s=[];for(let l=n.length-1;l>=0;l--){let a=n[l],u=a.text.length;if(u<i.length)s.unshift({insert:a.text,deleteLeft:0}),i=i.substring(0,i.length-u);else{s.unshift({insert:i,deleteLeft:t.deleteLeft});break}}return s}h(at,\\\"tokenizeTransform\\\");function Nt(o,e,t){return t.map(r=>({sample:at(o,e,r.sample),p:r.p}))}h(Nt,\\\"tokenizeTransformDistribution\\\");function At(o,e){let t=[];for(let r=0;r<o.kmwLength();r++){let i={insert:o.kmwCharAt(r),deleteLeft:0,id:e};t.push(i)}return t}h(At,\\\"textToCharTransforms\\\");var ct=class ct{};h(ct,\\\"TrackedContextSuggestion\\\");var lt=ct,ht=class ht{constructor(){this.transformDistributions=[];this.activeReplacementId=-1}get currentText(){return this.replacementText===void 0||this.replacementText===null?this.raw:this.replacementText}get replacement(){let e=this.activeReplacementId;return this.replacements.find(function(t){return t.suggestion.id==e})}revert(){delete this.activeReplacementId}updateWithBackspace(e,t){let r=At(e,t).map(function(n){return[{sample:n,p:1}]});this.raw=e,this.transformDistributions=r}update(e,t){t=t||(t===\\\"\\\"?\\\"\\\":this.raw),(e==null?void 0:e.length)>0&&this.transformDistributions.push(e),this.raw=t}};h(ht,\\\"TrackedContextToken\\\");var z=ht,Pe=class Pe{constructor(e){this.searchSpace=[];if(e instanceof Pe){let t=e;this.tokens=t.tokens.map(function(n){let i=new z;return i.raw=n.raw,i.replacements=[].concat(n.replacements),i.activeReplacementId=n.activeReplacementId,i.transformDistributions=[].concat(n.transformDistributions),n.replacementText&&(i.replacementText=n.replacementText),i}),this.indexOffset=0;let r=this.model=e.model;this.taggedContext=e.taggedContext,r!=null&&r.traverseFromRoot&&(this.searchSpace=e.searchSpace.map(n=>new v(n)))}else{let t=e;this.tokens=[],this.indexOffset=Number.MIN_SAFE_INTEGER,this.model=t,t&&t.traverseFromRoot&&(this.searchSpace=[new v(t)])}}get head(){return this.tokens[0]}get tail(){return this.tokens[this.tokens.length-1]}popHead(){this.tokens.splice(0,1),this.indexOffset-=1}pushTail(e){this.model&&this.model.traverseFromRoot?this.searchSpace=[new v(this.model)]:this.searchSpace=[],this.tokens.push(e);let t=this;t.searchSpace.length>0&&e.transformDistributions.forEach(r=>t.searchSpace[0].addInput(r))}toRawTokenization(){let e=[];for(let t of this.tokens)t.currentText!==null&&e.push(t.currentText);return e}};h(Pe,\\\"TrackedContextState\\\");var V=Pe,fe=class fe{constructor(e=fe.DEFAULT_ARRAY_SIZE){this.currentHead=0;this.currentTail=0;this.circle=Array(e)}get count(){let e=this.currentHead-this.currentTail;return e<0&&(e=e+this.circle.length),e}get maxCount(){return this.circle.length}get oldest(){if(this.count!=0)return this.item(0)}get newest(){if(this.count!=0)return this.item(this.count-1)}enqueue(e){var t=null;let r=(this.currentHead+1)%this.maxCount;return r==this.currentTail&&(t=this.circle[this.currentTail],this.currentTail=(this.currentTail+1)%this.maxCount),this.circle[this.currentHead]=e,this.currentHead=r,t}dequeue(){if(this.currentTail==this.currentHead)return null;{let e=this.circle[this.currentTail];return this.currentTail=(this.currentTail+1)%this.maxCount,e}}popNewest(){if(this.currentTail==this.currentHead)return null;{let e=this.circle[this.currentHead];return this.currentHead=(this.currentHead-1+this.maxCount)%this.maxCount,e}}item(e){if(e>=this.count)return;let t=(this.currentTail+e)%this.maxCount;return this.circle[t]}};h(fe,\\\"CircularArray\\\"),fe.DEFAULT_ARRAY_SIZE=5;var ut=fe,ge=class ge extends ut{static attemptMatchContext(e,t,r){var C,x;let n=t.toRawTokenization(),s=K.computeDistance(n.map(m=>({key:m})),e.map(m=>({key:m.text})),3).editPath();s.length==2&&s[0]==\\\"insert\\\"&&s[1]==\\\"substitute\\\"&&(s[0]=\\\"substitute\\\",s[1]=\\\"insert\\\");let l=s.indexOf(\\\"match\\\"),a=s.lastIndexOf(\\\"match\\\");if(s.length>=2&&s[s.length-2]==\\\"substitute\\\"&&s[s.length-1]==\\\"match\\\"&&(a=s.lastIndexOf(\\\"match\\\",s.length-2)),l){for(let m=l+1;m<a;m++)if(s[m]!=\\\"match\\\")return null}if(l==0&&a==s.length-1)return{state:t,baseState:t};let u=t,c,p=0;for(let m=0;m<l;m++)switch(s[m]){case\\\"delete\\\":if(c&&c!=\\\"delete\\\")return null;u==t&&(u=new V(u)),u.popHead(),p++;break;case\\\"substitute\\\":break;default:return null}let f=r&&Array.isArray(r);c=void 0;let d;for(let m=a+1;m<s.length;m++){let b=m==s.length-1;if(!f)return null;let y=m-(a+1),L=r.map(G=>({sample:G.sample[y],p:G.p})),M=f?(C=L[0])==null?void 0:C.sample:null;M&&M.insert==\\\"\\\"&&M.deleteLeft==0&&!M.deleteRight&&(M=null),b||(d=d?U(d,M):M);let qt=M&&w.isBackspace(M),te=e[m-p];switch(s[m]){case\\\"substitute\\\":b&&(u=new V(u));let G=u.tokens[m-p],S=t.tokens[m];qt?(G.updateWithBackspace(te.text,M.id),b&&(u.tokens.pop(),u.pushTail(G))):(G.update(L,te.text),b&&((x=u.searchSpace[0])==null||x.addInput(L))),u!=t&&!b&&(S.replacementText=te.text);break;case\\\"insert\\\":if(c&&c!=\\\"substitute\\\"&&c!=\\\"match\\\"&&c!=\\\"insert\\\")return null;d||(d={insert:\\\"\\\",deleteLeft:0}),u==t&&(u=new V(u));let E=new z;E.raw=te.text,M&&(E.transformDistributions=L?[L]:[]),E.isWhitespace=te.isWhitespace,u.pushTail(E);break;case\\\"match\\\":if(c==\\\"substitute\\\"&&e[e.length-1].text==\\\"\\\")continue;default:return null}c=s[m]}return{state:u,baseState:t,preservationTransform:d}}static modelContextState(e,t){let r=e.map(function(i){let s=new z;return s.raw=i.text,i.isWhitespace&&(s.isWhitespace=!0),s.raw?s.transformDistributions=At(s.raw).map(function(l){return[{sample:l,p:1}]}):s.transformDistributions=[],s}),n=new V(t);for(;r.length>0;)r.length==1&&r[0].updateWithBackspace(r[0].raw,null),n.pushTail(r.splice(0,1)[0]);if(n.tokens.length==0){let i=new z;i.raw=\\\"\\\",n.pushTail(i)}return n}analyzeState(e,t,r){if(!e.traverseFromRoot)throw\\\"This lexical model does not provide adequate data for correction algorithms and context reuse\\\";let n=$(e),i=r==null?void 0:r[0],s=0,l=null;i&&(s=at(n,t,i.sample).length,l=Nt(n,t,r),t=g(i.sample,t),l=l.filter(c=>c.sample.length==s));let a=n(t);if(a.left.length>0)for(let c=this.count-1;c>=0;c--){let p=this.item(c),f=p.taggedContext;if(f&&r&&r.length>0){if(g(r[0].sample,f).left!=t.left)continue}else if((f==null?void 0:f.left)!=t.left)continue;let d=ge.attemptMatchContext(a.left,this.item(c),l);if(d!=null&&d.state)return this.newest!=d.state&&this.newest!=p&&this.enqueue(p),d.state.taggedContext=t,d.state!=this.item(c)&&this.enqueue(d.state),d}let u=ge.modelContextState(a.left,e);return u.taggedContext=t,this.enqueue(u),{state:u,baseState:null}}clearCache(){for(;this.count>0;)this.dequeue()}};h(ge,\\\"ContextTracker\\\");var Te=ge;var Zt=.66,Ot={MAX_SEARCH_THRESHOLD:8,REPLACEMENT_SEARCH_THRESHOLD:4};function pt(o,e){let t=e.matchLevel-o.matchLevel;return t!=0?t:e.totalProb-o.totalProb}h(pt,\\\"tupleDisplayOrderSort\\\");function _t(o,e,t,r,n){return D(this,null,function*(){let i=B(e),s=r[0].sample,l=g(s,n),a=[];if(!o){let S,E=w.isWhitespace(s),Ae=w.isBackspace(s);return E?S=[{sample:s,p:1}]:S=r.map(P=>{let Se=P.sample;return w.isWhitespace(Se)&&!E||w.isBackspace(Se)&&!Ae?null:P}),S=S.filter(P=>!!P),a=Rt(e,S,n),E&&a.forEach(P=>P.preservationTransform=s),{postContextState:null,rawPredictions:a}}let{state:u}=o.analyzeState(e,n,null),c=o.analyzeState(e,n,w.isEmpty(s)?null:r),p=c.state,f=p.searchSpace[0],d=0,C=p.tokens,x=C.length-u.tokens.length;c.preservationTransform?(d=0,n=g(c.preservationTransform,n)):x<0?d=i(l).kmwLength()+s.deleteLeft:d=i(n).kmwLength();let m=C[C.length-1];m.raw==\\\"\\\"&&(d=0);let b=m.transformDistributions.length<=1,y,L={};try{for(var M=St(f.getBestMatches(t)),qt,te,G;qt=!(te=yield M.next()).done;qt=!1){let S=te.value;let E=S.matchString;if(S.matchSequence.length==0&&S.inputSequence.length!=0||S.matchSequence.length!=0&&S.matchSequence.length==S.knownCost)continue;let Ae={insert:E,deleteLeft:d,id:s.id},P=S.totalCost;b&&(P*=Z.SINGLE_CHAR_KEY_PROB_EXPONENT);let Se={sample:Ae,p:Math.exp(-P)},xe=Rt(e,[Se],n);xe.forEach(re=>re.preservationTransform=c.preservationTransform),xe.length>0&&y===void 0&&(y=P);let mt=L[S.matchString];if(mt&&(a=a.filter(re=>!mt.find(Bt=>re.prediction.sample==Bt.sample))),L[S.matchString]=xe.map(re=>re.prediction),a=a.concat(xe),Jt(y,S.totalCost,a))break}}catch(te){G=[te]}finally{try{qt&&(te=M.return)&&(yield te.call(M))}finally{if(G)throw G[0]}}return{postContextState:p,rawPredictions:a}})}h(_t,\\\"correctAndEnumerate\\\");function Jt(o,e,t){if(e>=o+Ot.MAX_SEARCH_THRESHOLD)return!0;if(t.length>=Z.MAX_SUGGESTIONS){if(e>=o+Ot.REPLACEMENT_SEARCH_THRESHOLD)return!0;if(t.sort(pt),t[Z.MAX_SUGGESTIONS-1].totalProb>Math.exp(-e))return!0}return!1}h(Jt,\\\"shouldStopSearchingEarly\\\");function Rt(o,e,t){let r=[],n=B(o);for(let i of e){let s=o.predict(i.sample,t),{sample:l,p:a}=i,u=n(g(i.sample,t)),c=s.map(p=>(l.id!==void 0&&(p.sample.transformId=l.id),{prediction:p,correction:{sample:u,p:a},totalProb:p.p*a,matchLevel:0}));r=r.concat(c)}return r}h(Rt,\\\"predictFromCorrections\\\");function Dt(o,e,t){let r=B(o),n={},i=[];for(let s of e){let l=r(g(s.prediction.sample.transform,t)),a=n[l];a?a.totalProb+=s.totalProb:n[l]=s}for(let s in n){let l=n[s];i.push(l)}return i}h(Dt,\\\"dedupeSuggestions\\\");function Ut(o,e,t,r){let{sample:n,p:i}=r,s=B(o),l=g(n,t),a=s(l),u=h(m=>o.toKey?o.toKey(m):m,\\\"keyed\\\"),c=h(m=>o.applyCasing?o.applyCasing(\\\"lower\\\",m):m,\\\"keyCased\\\"),p=u(a),f=c(a),d;for(let m of e){n.id!==void 0&&(m.prediction.sample.transformId=n.id);let b=s(g(m.prediction.sample.transform,t));u(m.correction.sample)==p?b==a?(m.matchLevel=3,d=Ie(o,m.prediction.sample,\\\"keep\\\",j.noQuotes),d.matchesModel=!0,Object.assign(m.prediction.sample,d),d=m.prediction.sample):c(b)==f?m.matchLevel=2:u(b)==p?m.matchLevel=1:m.matchLevel=0:m.matchLevel=0}if(d||a==\\\"\\\")return;let C=A({},n),x=W(C,1);x.displayAs=a,d=Ie(o,x,\\\"keep\\\"),n.id!==void 0&&(d.transformId=n.id),d.matchesModel=!1,e.unshift({totalProb:d.p,prediction:{sample:d,p:d.p},correction:{sample:a,p:i},matchLevel:3})}h(Ut,\\\"processSimilarity\\\");function Ft(o){if(o.length==0)return;let e=o[0].prediction.sample;if(e.tag==\\\"keep\\\"&&e.matchesModel){e.autoAccept=!0;return}else if(o.length==1)return;if(o=o.slice(1),o.length==1){o[0].prediction.sample.autoAccept=!0;return}let t=o[0];if(t.correction.sample.length==0||o.reduce((a,u)=>(a==null?void 0:a.correction.p)>u.correction.p?a:u,null).correction.p>t.correction.p)return;let i=t.matchLevel,s=o.reduce((a,u)=>a+(u.matchLevel==i?u.totalProb:0),0);t.totalProb/s<Zt||(t.prediction.sample.autoAccept=!0)}h(Ft,\\\"predictionAutoSelect\\\");function Wt(o,e,t,r,n){let i=me(o),s=$(o),l=e.map(a=>{let u=a.prediction;if(a.preservationTransform){let c=U(a.preservationTransform,u.sample.transform);c.id=u.sample.transformId;let p=u.sample;p.transform=c}return n?Re(A({},u.sample),{p:a.totalProb,\\\"lexical-p\\\":u.p,\\\"correction-p\\\":a.correction.p}):Re(A({},u.sample),{p:a.totalProb})});return l.forEach(a=>{let u=s(t);u&&u.caretSplitsToken?a.transform.insert+=i.insertAfterWord:t.right?i.insertAfterWord!=\\\"\\\"&&t.right.indexOf(i.insertAfterWord)!=0&&(a.transform.insert+=i.insertAfterWord):a.transform.insert+=i.insertAfterWord}),l}h(Wt,\\\"finalizeSuggestions\\\");function Ie(o,e,t,r=j.default){let n=j,i=me(o),s=n.noQuotes;(t==\\\"keep\\\"||t==\\\"revert\\\")&&(s=n.useQuotes);let l={transform:e.transform,displayAs:n.apply(r,e.displayAs,i,s),tag:t,p:e.p};return e.transformId!==void 0&&(l.transformId=e.transformId),l}h(Ie,\\\"toAnnotatedSuggestion\\\");var J=class J{constructor(e,t){this.SUGGESTION_ID_SEED=0;this.testMode=!1;this.verbose=!0;this.lexicalModel=e,e.traverseFromRoot&&(this.contextTracker=new Te),this.punctuation=me(e),this.testMode=!!t}predict(e,t){return D(this,null,function*(){var b;let r=this.lexicalModel;(b=this.activeTimer)==null||b.terminate(),e instanceof Array?e.length==0&&e.push({sample:{insert:\\\"\\\",deleteLeft:0},p:1}):e=[{sample:e,p:1}],e.sort(function(y,L){return L.p-y.p});let n=e[0].sample,i=w.isBackspace(n),s=w.isWhitespace(n),l=g(n,t),a=this.wordbreak(l),u=i||s?a:this.wordbreak(t),c=r.languageUsesCasing?It(r,l):null,p=v.DEFAULT_ALLOTTED_CORRECTION_TIME_INTERVAL,f=this.activeTimer=new he(this.testMode?Number.MAX_VALUE:p,this.testMode?Number.MAX_VALUE:p*1.5),{postContextState:d,rawPredictions:C}=yield _t(this.contextTracker,this.lexicalModel,f,e,t);this.activeTimer==f&&(this.activeTimer=null);for(let y of C)c&&c!=\\\"lower\\\"&&this.applySuggestionCasing(y.prediction.sample,u,c);let x=Dt(this.lexicalModel,C,t);Ut(this.lexicalModel,x,t,e[0]),x.sort(pt),Ft(x);let m=Wt(this.lexicalModel,x.splice(0,J.MAX_SUGGESTIONS),t,n,this.verbose);return m.forEach(y=>{y.id=this.SUGGESTION_ID_SEED,this.SUGGESTION_ID_SEED++}),d&&(d.tail.replacements=m.map(function(y){return{suggestion:y,tokenWidth:1}})),m})}applySuggestionCasing(e,t,r){let n=t.kmwLength()-e.transform.deleteLeft;n>0&&(e.transform.deleteLeft+=n,e.transform.insert=t.kmwSubstr(0,n)+e.transform.insert),e.transform.insert=this.lexicalModel.applyCasing(r,e.transform.insert),e.displayAs=this.lexicalModel.applyCasing(r,e.displayAs)}acceptSuggestion(e,t,r){let n=e.transform,i=t.left.kmwSubstr(-n.deleteLeft,n.deleteLeft),s=n.insert.kmwLength(),l={insert:i,deleteLeft:s},a=t;r&&(l=U(l,r),a=g(r,a));let u,c=this.tokenize(a);if(c){let d=c.left[c.left.length-1];u=d&&!d.isWhitespace?d.text:\\\"\\\",u+=c.caretSplitsToken?c.right[0].text:\\\"\\\"}else u=this.wordbreak(a);let p=W(l);p.displayAs=u;let f=Ie(this.lexicalModel,p,\\\"revert\\\");if(e.transformId!=null&&(f.transformId=-e.transformId),e.id!=null?f.id=-e.id:(f.id=-this.SUGGESTION_ID_SEED,this.SUGGESTION_ID_SEED++),this.contextTracker){let d=this.contextTracker.newest;d||(d=this.contextTracker.analyzeState(this.lexicalModel,t).state),d.tail.activeReplacementId=e.id;let C=g(e.transform,t);this.contextTracker.analyzeState(this.lexicalModel,C)}return f}applyReversion(e,t){return D(this,null,function*(){let r=this,n=h(function(){return D(this,null,function*(){let l=g(e.transform,t),a=yield r.predict({insert:\\\"\\\",deleteLeft:0},l);return a.forEach(function(u){u.transformId=-e.transformId,u.autoAccept=!1}),a})},\\\"fallbackSuggestions\\\");if(!this.contextTracker)return n();let i=!1;for(let l=this.contextTracker.count-1;l>=0;l--)if(this.contextTracker.item(l).tail.activeReplacementId==-e.id){i=!0;break}if(!i)return n();for(;this.contextTracker.newest.tail.activeReplacementId!=-e.id;)this.contextTracker.popNewest();this.contextTracker.newest.tail.revert();let s=this.contextTracker.newest.tail.replacements.map(function(l){return l.suggestion});return s.forEach(function(l){l.transformId=-e.transformId,l.autoAccept=!1}),s})}wordbreak(e){return B(this.lexicalModel)(e)}tokenize(e){return $(this.lexicalModel)(e)}resetContext(e){var t;(t=this.activeTimer)==null||t.terminate(),this.contextTracker&&(this.contextTracker.clearCache(),this.contextTracker.analyzeState(this.lexicalModel,e,null))}};h(J,\\\"ModelCompositor\\\"),J.MAX_SUGGESTIONS=12,J.SINGLE_CHAR_KEY_PROB_EXPONENT=16;var dt=J,Z=dt;O();var Ne=class Ne{constructor(e={importScripts:null,postMessage:null}){this._testMode=!1;this._postMessage=e.postMessage||postMessage,this._importScripts=e.importScripts||importScripts,this.setupConfigState()}error(e,t){this.cast(\\\"error\\\",{log:e,error:t&&t.stack?t.stack:void 0})}onMessage(e){let{message:t}=e.data;if(!t)throw new Error(`Missing required 'message' property: ${e.data}`);let r=e.data;if(r.message==\\\"load\\\"){let n=r,i=!1;if(this._currentModelSource&&n.source.type==this._currentModelSource.type&&(n.source.type==\\\"file\\\"&&n.source.file==this._currentModelSource.file||n.source.type==\\\"raw\\\"&&n.source.code==this._currentModelSource.code)&&(i=!0),i){typeof console!=\\\"undefined\\\"&&console.warn(\\\"Duplicate model load message detected - squashing!\\\");return}else this._currentModelSource=n.source}else r.message==\\\"unload\\\"&&(this._currentModelSource=null);this.state.handleMessage(r)}cast(e,t){let r=this._postMessage;r(A({message:e},t))}loadModel(e){try{let t=e.configure(this._platformCapabilities);t.leftContextCodePoints||(t.leftContextCodePoints=t.leftContextCodeUnits),t.rightContextCodePoints||(t.rightContextCodePoints=t.rightContextCodeUnits),t.leftContextCodePoints||(t.leftContextCodePoints=this._platformCapabilities.maxLeftContextCodePoints),t.rightContextCodePoints||(t.rightContextCodePoints=this._platformCapabilities.maxRightContextCodePoints||0),e.languageUsesCasing&&!e.applyCasing&&(e.applyCasing=we);let r=this.transitionToReadyState(e);t.wordbreaksAfterSuggestions===void 0&&(t.wordbreaksAfterSuggestions=r.punctuation.insertAfterWord!=\\\"\\\"),this.cast(\\\"ready\\\",{configuration:t})}catch(t){this.error(\\\"loadModel failed!\\\",t)}}loadModelFile(e){try{this._importScripts(e)}catch(t){this.error(\\\"Error occurred when attempting to load dictionary\\\",t)}}unloadModel(){this.transitionToLoadingState()}setupConfigState(){this.state={name:\\\"unconfigured\\\",handleMessage:e=>{if(e.message!==\\\"config\\\")throw new Error(`invalid message; expected 'config' but got ${e.message}`);this._platformCapabilities=e.capabilities,this._testMode=!!e.testMode,this.transitionToLoadingState()}}}transitionToLoadingState(){let e=this;this.state={name:\\\"modelless\\\",handleMessage:t=>{if(t.message!==\\\"load\\\")throw new Error(`invalid message; expected 'load' but got ${t.message}`);if(t.source.type==\\\"file\\\")e.loadModelFile(t.source.file);else{let r=t.source.code;new Function(\\\"LMLayerWorker\\\",\\\"models\\\",\\\"correction\\\",\\\"wordBreakers\\\",r)(e,ve,Ce,le)}}}}transitionToReadyState(e){let t=new Z(e,this._testMode);return this.state={name:\\\"ready\\\",handleMessage:r=>{switch(r.message){case\\\"predict\\\":var{transform:n,context:a}=r;t.predict(n,a).then(c=>{this.cast(\\\"suggestions\\\",{token:r.token,suggestions:c})});break;case\\\"wordbreak\\\":let u=X(e.wordbreaker||R,r.context);this.cast(\\\"currentword\\\",{token:r.token,word:u});break;case\\\"unload\\\":this.unloadModel();break;case\\\"accept\\\":var{suggestion:i,context:a,postTransform:s}=r,l=t.acceptSuggestion(i,a,s);this.cast(\\\"postaccept\\\",{token:r.token,reversion:l});break;case\\\"revert\\\":var{reversion:l,context:a}=r;t.applyReversion(l,a).then(c=>{this.cast(\\\"postrevert\\\",{token:r.token,suggestions:c})});break;case\\\"reset-context\\\":var{context:a}=r;t.resetContext(a);break;default:throw new Error(`invalid message; expected one of {'predict', 'wordbreak', 'accept', 'revert', 'reset-context', 'unload'} but got ${r.message}`)}},compositor:t},t}static install(e){let t=new Ne({postMessage:e.postMessage,importScripts:e.importScripts.bind(e)});return e.onmessage=t.onMessage.bind(t),t.self=e,e.LMLayerWorker=t,e.models=ve,e.correction=Ce,e.wordBreakers=le,t}};h(Ne,\\\"LMLayerWorker\\\");var ee=Ne;typeof self!=\\\"undefined\\\"&&\\\"postMessage\\\"in self&&\\\"importScripts\\\"in self?ee.install(self):window.LMLayerWorker=ee;})();\\n//# sourceMappingURL=worker-main.min.js.map\\n\";\n\n// Sourcemaps have been omitted for this release build.\nexport var LMLayerWorkerSourcemapComment = \"\";\n\n// --END:LMLayerWorkerCode\n",
    "import unwrap from '../unwrap.js';\r\nimport { LMLayerWorkerCode, LMLayerWorkerSourcemapComment } from \"@keymanapp/lm-worker/worker-main.wrapped.min.js\";\r\n\r\nexport default class DefaultWorker {\r\n  static constructInstance(): Worker {\r\n    return new Worker(this.asBlobURI(LMLayerWorkerCode));\r\n  }\r\n\r\n  /**\r\n   * Converts the INSIDE of a function into a blob URI that can\r\n   * be passed as a valid URI for a Worker.\r\n   * @param fn Function whose body will be referenced by a URI.\r\n   *\r\n   * This function makes the following possible:\r\n   *\r\n   *    let worker = new Worker(LMLayer.asBlobURI(function myWorkerCode () {\r\n   *      postMessage('inside Web Worker')\r\n   *      function onmessage(event) {\r\n   *        // handle message inside Web Worker.\r\n   *      }\r\n   *    }));\r\n   */\r\n  static asBlobURI(encodedSrc: string): string {\r\n    let code = unwrap(encodedSrc);\r\n\r\n    // If this is definitively set to either true or false, tree-shaking can take effect.\r\n    // An imported const variable doesn't seem to do it, though.\r\n    // if(false) {\r\n      code += '\\n' + LMLayerWorkerSourcemapComment;\r\n    // }\r\n    let blob = new Blob([code], { type: 'text/javascript' });\r\n    return URL.createObjectURL(blob);\r\n  }\r\n}",
    "import { EventEmitter } from \"eventemitter3\";\r\nimport { LMLayer } from \"@keymanapp/lexical-model-layer/web\";\r\nimport { OutputTarget, Transcription, Mock } from \"keyman/engine/js-processor\";\r\nimport { LanguageProcessorEventMap, ModelSpec, StateChangeEnum, ReadySuggestions } from 'keyman/engine/interfaces';\r\nimport ContextWindow from \"./contextWindow.js\";\r\nimport { TranscriptionCache } from \"./transcriptionCache.js\";\r\nimport { Capabilities, Configuration, Reversion, Suggestion } from '@keymanapp/common-types';\r\n\r\n/* Is more like the model configuration engine */\r\nexport class LanguageProcessor extends EventEmitter<LanguageProcessorEventMap> {\r\n  private lmEngine: LMLayer;\r\n  private currentModel?: ModelSpec;\r\n  private configuration?: Configuration;\r\n  private currentPromise?: Promise<Suggestion[]>;\r\n\r\n  private readonly recentTranscriptions: TranscriptionCache;\r\n\r\n  private _mayPredict: boolean = true;\r\n  private _mayCorrect: boolean = true;\r\n\r\n  private _state: StateChangeEnum = 'inactive';\r\n\r\n  public constructor(predictiveTextWorker: Worker, transcriptionCache: TranscriptionCache, supportsRightDeletions: boolean = false) {\r\n    super();\r\n\r\n    this.recentTranscriptions = transcriptionCache;\r\n\r\n    // Establishes KMW's platform 'capabilities', which limit the range of context a LMLayer\r\n    // model may expect.\r\n    let capabilities: Capabilities = {\r\n      maxLeftContextCodePoints: 64,\r\n      // Since the apps don't yet support right-deletions.\r\n      maxRightContextCodePoints: supportsRightDeletions ? 0 : 64\r\n    }\r\n\r\n    if(!predictiveTextWorker) {\r\n      return;\r\n    }\r\n\r\n    this.lmEngine = new LMLayer(capabilities, predictiveTextWorker);\r\n  }\r\n\r\n  public get activeModel(): ModelSpec {\r\n    return this.currentModel;\r\n  }\r\n\r\n  public get isConfigured(): boolean {\r\n    return !!this.configuration;\r\n  }\r\n\r\n  public get state(): StateChangeEnum {\r\n    return this._state;\r\n  }\r\n\r\n  public unloadModel() {\r\n    this.lmEngine.unloadModel();\r\n    delete this.currentModel;\r\n    delete this.configuration;\r\n\r\n    this._state = 'inactive';\r\n    this.emit('statechange', 'inactive');\r\n  }\r\n\r\n  loadModel(model: ModelSpec): Promise<void> {\r\n    if(!model) {\r\n      throw new Error(\"Null reference not allowed.\");\r\n    }\r\n\r\n    let specType: 'file'|'raw' = model.path ? 'file' : 'raw';\r\n    let source = specType == 'file' ? model.path : model.code;\r\n\r\n    // We pre-emptively emit so that the banner's DOM elements may update synchronously.\r\n    // Prevents an ugly \"flash of unstyled content\" layout issue during keyboard load\r\n    // on our mobile platforms when embedded.\r\n    this.currentModel = model;\r\n    if(this.mayPredict) {\r\n      this._state = 'active';\r\n      this.emit('statechange', 'active');\r\n    }\r\n\r\n    return this.lmEngine.loadModel(source, specType).then((config: Configuration) => {\r\n      this.configuration = config;\r\n      if(this.mayPredict) {\r\n        this._state = 'configured';\r\n        this.emit('statechange', 'configured');\r\n      }\r\n    }).catch((error) => {\r\n      // Does this provide enough logging information?\r\n      let message: string;\r\n      if(error instanceof Error) {\r\n        message = error.message;\r\n      } else {\r\n        message = String(error);\r\n      }\r\n      console.error(\"Could not load model '\" + model.id + \"': \" + message);\r\n\r\n      // Since the model couldn't load, immediately deactivate.  Visually, it'll look\r\n      // like the banner crashed shortly after load.\r\n      this.currentModel = null;\r\n      this._state = 'inactive';\r\n      this.emit('statechange', 'inactive');\r\n    });\r\n  }\r\n\r\n  public invalidateContext(outputTarget: OutputTarget, layerId: string): Promise<Suggestion[]> {\r\n    // Signal to any predictive text UI that the context has changed, invalidating recent predictions.\r\n    this.emit('invalidatesuggestions', 'context');\r\n\r\n    // If there's no active model, there can be no predictions.\r\n    // We'll also be missing important data needed to even properly REQUEST the predictions.\r\n    if(!this.currentModel || !this.configuration) {\r\n      return Promise.resolve([]);\r\n    }\r\n\r\n    // Don't attempt predictions when disabled!\r\n    // invalidateContext otherwise bypasses .predict()'s check against this.\r\n    if(!this.isActive) {\r\n      return Promise.resolve([]);\r\n    } else if(outputTarget) {\r\n      let transcription = outputTarget.buildTranscriptionFrom(outputTarget, null, false);\r\n      return this.predict_internal(transcription, true, layerId);\r\n    } else {\r\n      // if there's no active context source, there's nothing to\r\n      // provide suggestions for. In that case, there's no reason\r\n      // to even request suggestions, so bypass the prediction\r\n      // engine and say that there aren't any.\r\n      return Promise.resolve([]);\r\n    }\r\n  }\r\n\r\n  public wordbreak(target: OutputTarget, layerId: string): Promise<string> {\r\n    if(!this.isActive) {\r\n      return null;\r\n    }\r\n\r\n    let context = new ContextWindow(Mock.from(target, false), this.configuration, layerId);\r\n    return this.lmEngine.wordbreak(context);\r\n  }\r\n\r\n  public predict(transcription: Transcription, layerId: string): Promise<Suggestion[]> {\r\n    if(!this.isActive) {\r\n      return null;\r\n    }\r\n\r\n    // If there's no active model, there can be no predictions.\r\n    // We'll also be missing important data needed to even properly REQUEST the predictions.\r\n    if(!this.currentModel || !this.configuration) {\r\n      return null;\r\n    }\r\n\r\n    // We've already invalidated any suggestions resulting from any previously-existing Promise -\r\n    // may as well officially invalidate them via event.\r\n    this.emit(\"invalidatesuggestions\", 'new');\r\n\r\n    return this.predict_internal(transcription, false, layerId);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param suggestion\r\n   * @param outputTarget\r\n   * @param getLayerId      a function that returns the current layerId,\r\n   *                        required because layerid can be changed by PostKeystroke\r\n   * @returns\r\n   */\r\n  public applySuggestion(suggestion: Suggestion, outputTarget: OutputTarget, getLayerId: ()=>string): Promise<Reversion> {\r\n    if(!outputTarget) {\r\n      throw \"Accepting suggestions requires a destination OutputTarget instance.\"\r\n    }\r\n\r\n    if(!this.isConfigured) {\r\n      // If we're in this state, the suggestion is now outdated; the user must have swapped keyboard and model.\r\n      console.warn(\"Could not apply suggestion; the corresponding model has been unloaded\");\r\n      return null;\r\n    }\r\n\r\n    // Find the state of the context at the time the suggestion was generated.\r\n    // This may refer to the context before an input keystroke or before application\r\n    // of a predictive suggestion.\r\n    const original = this.getPredictionState(suggestion.transformId);\r\n    if(!original) {\r\n      console.warn(\"Could not apply the Suggestion!\");\r\n      return null;\r\n    } else {\r\n      // Apply the Suggestion!\r\n\r\n      // Step 1:  determine the final output text\r\n      let final = Mock.from(original.preInput, false);\r\n      final.apply(suggestion.transform);\r\n\r\n      // Step 2:  build a final, master Transform that will produce the desired results from the CURRENT state.\r\n      // In embedded mode, both Android and iOS are best served by calculating this transform and applying its\r\n      // values as needed for use with their IME interfaces.\r\n      let transform = final.buildTransformFrom(outputTarget);\r\n      outputTarget.apply(transform);\r\n\r\n      // Tell the banner that a suggestion was applied, so it can call the\r\n      // keyboard's PostKeystroke entry point as needed\r\n      this.emit('suggestionapplied', outputTarget);\r\n\r\n      // Build a 'reversion' Transcription that can be used to undo this apply() if needed,\r\n      // replacing the suggestion transform with the original input text.\r\n      let preApply = Mock.from(original.preInput, false);\r\n      preApply.apply(original.transform);\r\n\r\n      // Builds the reversion option according to the loaded lexical model's known\r\n      // syntactic properties.\r\n      let suggestionContext = new ContextWindow(original.preInput, this.configuration, getLayerId());\r\n\r\n      // We must accept the Suggestion from its original context, which was before\r\n      // `original.transform` was applied.\r\n      let reversionPromise: Promise<Reversion> = this.lmEngine.acceptSuggestion(suggestion, suggestionContext, original.transform);\r\n\r\n      // Also, request new prediction set based on the resulting context.\r\n      reversionPromise = reversionPromise.then((reversion) => {\r\n        let mappedReversion: Reversion = {\r\n          // By mapping back to the original Transcription that generated the Suggestion,\r\n          // the input will be automatically rewound to the preInput state.\r\n          transform: original.transform,\r\n          // The ID part is critical; the reversion can't be applied without it.\r\n          transformId: -original.token, // reversions use the additive inverse.\r\n          displayAs: reversion.displayAs,  // The real reason we needed to call the LMLayer.\r\n          id: reversion.id,\r\n          tag: reversion.tag\r\n        }\r\n        // // If using the version from lm-layer:\r\n        // let mappedReversion = reversion;\r\n        // mappedReversion.transformId = reversionTranscription.token;\r\n        this.predictFromTarget(outputTarget, getLayerId());\r\n        return mappedReversion;\r\n      });\r\n\r\n      return reversionPromise;\r\n    }\r\n  }\r\n\r\n  public applyReversion(reversion: Reversion, outputTarget: OutputTarget) {\r\n    if(!outputTarget) {\r\n      throw \"Accepting suggestions requires a destination OutputTarget instance.\"\r\n    }\r\n\r\n    // Find the state of the context at the time the suggestion was generated.\r\n    // This may refer to the context before an input keystroke or before application\r\n    // of a predictive suggestion.\r\n    //\r\n    // Reversions use the additive inverse of the id token of the Transcription being\r\n    // reverted to.\r\n    let original = this.getPredictionState(-reversion.transformId);\r\n    if(!original) {\r\n      console.warn(\"Could not apply the Suggestion!\");\r\n      return Promise.resolve([] as Suggestion[]);\r\n    }\r\n\r\n    // Apply the Reversion!\r\n\r\n    // Step 1:  determine the final output text\r\n    let final = Mock.from(original.preInput, false);\r\n    final.apply(reversion.transform); // Should match original.transform, actually. (See applySuggestion)\r\n\r\n    // Step 2:  build a final, master Transform that will produce the desired results from the CURRENT state.\r\n    // In embedded mode, both Android and iOS are best served by calculating this transform and applying its\r\n    // values as needed for use with their IME interfaces.\r\n    let transform = final.buildTransformFrom(outputTarget);\r\n    outputTarget.apply(transform);\r\n\r\n    // The reason we need to preserve the additive-inverse 'transformId' property on Reversions.\r\n    let promise = this.currentPromise = this.lmEngine.revertSuggestion(reversion, new ContextWindow(original.preInput, this.configuration, null))\r\n    // If the \"current Promise\" is as set above, clear it.\r\n    // If another one has been triggered since... don't.\r\n    promise.then(() => this.currentPromise = (this.currentPromise == promise) ? null : this.currentPromise);\r\n\r\n    return promise;\r\n  }\r\n\r\n  public predictFromTarget(outputTarget: OutputTarget, layerId: string): Promise<Suggestion[]> {\r\n    if(!outputTarget) {\r\n      return null;\r\n    }\r\n\r\n    let transcription = outputTarget.buildTranscriptionFrom(outputTarget, null, false);\r\n    return this.predict(transcription, layerId);\r\n  }\r\n\r\n  /**\r\n   * Called internally to do actual predictions after any relevant \"invalidatesuggestions\" events\r\n   * have been raised.\r\n   * @param transcription The triggering transcription (if it exists)\r\n   */\r\n  private predict_internal(transcription: Transcription, resetContext: boolean, layerId: string): Promise<Suggestion[]> {\r\n    if(!transcription) {\r\n      return null;\r\n    }\r\n\r\n    let context = new ContextWindow(transcription.preInput, this.configuration, layerId);\r\n    this.recordTranscription(transcription);\r\n\r\n    if(resetContext) {\r\n      this.lmEngine.resetContext(context);\r\n    }\r\n\r\n    let alternates = transcription.alternates;\r\n    if(!alternates || alternates.length == 0) {\r\n      alternates = [{\r\n        sample: transcription.transform,\r\n        p: 1.0\r\n      }];\r\n    }\r\n\r\n    let transform = transcription.transform;\r\n    var promise = this.currentPromise = this.lmEngine.predict(alternates, context);\r\n\r\n    return promise.then((suggestions: Suggestion[]) => {\r\n      if(promise == this.currentPromise) {\r\n        let result = new ReadySuggestions(suggestions, transform.id);\r\n        this.emit(\"suggestionsready\", result);\r\n        this.currentPromise = null;\r\n      }\r\n\r\n      return suggestions;\r\n    });\r\n  }\r\n\r\n  private recordTranscription(transcription: Transcription) {\r\n    this.recentTranscriptions.save(transcription);\r\n  }\r\n\r\n  /**\r\n   * Retrieves the context and output state of KMW immediately before the prediction with\r\n   * token `id` was generated.  Must correspond to a 'recent' one, as only so many are stored\r\n   * in `ModelManager`'s history buffer.\r\n   * @param id A unique identifier corresponding to a recent `Transcription`.\r\n   * @returns The matching `Transcription`, or `null` none is found.\r\n   */\r\n  public getPredictionState(id: number): Transcription {\r\n    return this.recentTranscriptions.get(id);\r\n  }\r\n\r\n  public shutdown() {\r\n    this.lmEngine.shutdown();\r\n    this.removeAllListeners();\r\n  }\r\n\r\n  public get isActive(): boolean {\r\n    if(!this.canEnable()) {\r\n      this._mayPredict = false;\r\n      return false;\r\n    }\r\n    return (this.activeModel || false) && this._mayPredict;\r\n  }\r\n\r\n  canEnable(): boolean {\r\n    // Is not initialized if there is no worker.\r\n    return !!this.lmEngine;\r\n  }\r\n\r\n  public get mayPredict() {\r\n    return this._mayPredict;\r\n  }\r\n\r\n  public set mayPredict(flag: boolean) {\r\n    if(!this.canEnable()) {\r\n      return;\r\n    }\r\n\r\n    let oldVal = this._mayPredict;\r\n    this._mayPredict = flag;\r\n\r\n    if(oldVal != flag) {\r\n      // If there's no model to be activated and we've reached this point,\r\n      // the banner should remain inactive, as it already was.\r\n      // If it there was one and we've reached this point, we're globally\r\n      // deactivating, so we're fine.\r\n      if(this.activeModel) {\r\n        // If someone toggles predictions on and off without changing the model, it is possible\r\n        // that the model is already configured!\r\n        let state: StateChangeEnum = flag ? 'active' : 'inactive';\r\n\r\n        // We always signal the 'active' state here, even if 'configured', b/c of an\r\n        // anti-banner-flicker optimization in the Android app.\r\n        this._state = state;\r\n        this.emit('statechange', state);\r\n\r\n        // Only signal `'configured'` for a previously-loaded model if we're turning\r\n        // things back on; don't send it if deactivated!\r\n        if(flag && this.isConfigured) {\r\n          this._state = 'configured';\r\n          this.emit('statechange', 'configured');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  public get mayCorrect() {\r\n    return this._mayCorrect;\r\n  }\r\n\r\n  public set mayCorrect(flag: boolean) {\r\n    this._mayCorrect = flag;\r\n  }\r\n\r\n  public get wordbreaksAfterSuggestions() {\r\n    return this.configuration.wordbreaksAfterSuggestions;\r\n  }\r\n\r\n  public tryAcceptSuggestion(source: string): boolean {\r\n    // The object below is to facilitate a pass-by-reference on the boolean flag,\r\n    // allowing the event's handler to signal if whitespace has been added via\r\n    // auto-applied suggestion that should be blocked on the next keystroke.\r\n    let returnObj = {shouldSwallow: false};\r\n    this.emit('tryaccept', source, returnObj);\r\n\r\n    return returnObj.shouldSwallow ?? false;\r\n  }\r\n\r\n  public tryRevertSuggestion(): boolean {\r\n    // If and when we do auto-revert, the suggestion is to pass this object to the event and\r\n    // denote any mutations to the contained value.\r\n    //let returnObj = {shouldSwallow: false};\r\n    this.emit('tryrevert');\r\n\r\n    return false;\r\n  }\r\n}\r\n",
    "import { Transcription } from \"keyman/engine/js-processor\";\r\n\r\nconst TRANSCRIPTION_BUFFER_SIZE = 10;\r\n\r\nexport class TranscriptionCache {\r\n  private readonly map = new Map<number, Transcription>();\r\n\r\n  public get(key: number) {\r\n    const value = this.map.get(key);\r\n\r\n    // Update the entry's 'age' / position in the keys() ordering.\r\n    if(value) {\r\n      this.save(value);\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  public save(value: Transcription) {\r\n    const key = value.token >= 0 ? value.token : -value.token;\r\n\r\n    // Resets the key's ordering in Map.keys.\r\n    this.map.delete(key);\r\n    this.map.set(key, value);\r\n\r\n    if(this.map.size > TRANSCRIPTION_BUFFER_SIZE) {\r\n      /* Deletes the oldest entry.  As per the specification of `Map.keys()`, the keys are in\r\n       * insertion order.  The earlier `map.delete` call resets a key's position in the list,\r\n       * ensuring index 0 corresponds to the entry least-recently referenced.\r\n       *\r\n       * See also:\r\n       * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/keys\r\n       */\r\n      this.map.delete(this.map.keys().next().value);\r\n    }\r\n  }\r\n}",
    "// Defines a 'polyfill' of sorts for NPM's events module\r\n\r\nimport ContextWindow from \"./contextWindow.js\";\r\nimport { LanguageProcessor }  from \"./languageProcessor.js\";\r\nimport type { ModelSpec }  from \"keyman/engine/interfaces\";\r\nimport { globalObject, DeviceSpec } from \"@keymanapp/web-utils\";\r\n\r\nimport { Codes, type Keyboard, type KeyEvent } from \"keyman/engine/keyboard\";\r\nimport {\r\n  type Alternate,\r\n  isEmptyTransform,\r\n  KeyboardInterface,\r\n  KeyboardProcessor,\r\n  Mock,\r\n  type OutputTarget,\r\n  RuleBehavior,\r\n  type ProcessorInitOptions,\r\n  SystemStoreIDs\r\n} from 'keyman/engine/js-processor';\r\n\r\nimport { TranscriptionCache } from \"./transcriptionCache.js\";\r\nimport { Transform } from '@keymanapp/common-types';\r\n\r\nexport class InputProcessor {\r\n  public static readonly DEFAULT_OPTIONS: ProcessorInitOptions = {\r\n    baseLayout: 'us'\r\n  }\r\n\r\n  /**\r\n   * Indicates the device (platform) to be used for non-keystroke events,\r\n   * such as those sent to `begin postkeystroke` and `begin newcontext`\r\n   * entry points.\r\n   */\r\n  private contextDevice: DeviceSpec;\r\n  private kbdProcessor: KeyboardProcessor;\r\n  private lngProcessor: LanguageProcessor;\r\n\r\n  private readonly contextCache = new TranscriptionCache();\r\n\r\n  constructor(device: DeviceSpec, predictiveTextWorker: Worker, options?: ProcessorInitOptions) {\r\n    if(!device) {\r\n      throw new Error('device must be defined');\r\n    }\r\n\r\n    if(!options) {\r\n      options = InputProcessor.DEFAULT_OPTIONS;\r\n    }\r\n\r\n    this.contextDevice = device;\r\n    this.kbdProcessor = new KeyboardProcessor(device, options);\r\n    this.lngProcessor = new LanguageProcessor(predictiveTextWorker, this.contextCache);\r\n  }\r\n\r\n  public get languageProcessor(): LanguageProcessor {\r\n    return this.lngProcessor;\r\n  }\r\n\r\n  public get keyboardProcessor(): KeyboardProcessor {\r\n    return this.kbdProcessor;\r\n  }\r\n\r\n  public get keyboardInterface(): KeyboardInterface {\r\n    return this.keyboardProcessor.keyboardInterface;\r\n  }\r\n\r\n  public get activeKeyboard(): Keyboard {\r\n    return this.keyboardInterface.activeKeyboard;\r\n  }\r\n\r\n  public set activeKeyboard(keyboard: Keyboard) {\r\n    this.keyboardInterface.activeKeyboard = keyboard;\r\n\r\n    // All old deadkeys and keyboard-specific cache should immediately be invalidated\r\n    // on a keyboard change.\r\n    this.resetContext();\r\n  }\r\n\r\n  public get activeModel(): ModelSpec {\r\n    return this.languageProcessor.activeModel;\r\n  }\r\n\r\n  /**\r\n   * Simulate a keystroke according to the touched keyboard button element\r\n   *\r\n   * Handles default output and keyboard processing for both OSK and physical keystrokes.\r\n   *\r\n   * @param       {Object}      keyEvent      The abstracted KeyEvent to use for keystroke processing\r\n   * @param       {Object}      outputTarget  The OutputTarget receiving the KeyEvent\r\n   * @returns     {Object}                    A RuleBehavior object describing the cumulative effects of\r\n   *                                          all matched keyboard rules.\r\n   */\r\n  processKeyEvent(keyEvent: KeyEvent, outputTarget: OutputTarget): RuleBehavior {\r\n    const kbdMismatch = keyEvent.srcKeyboard && this.activeKeyboard != keyEvent.srcKeyboard;\r\n    const trueActiveKeyboard = this.activeKeyboard;\r\n\r\n    try {\r\n      if(kbdMismatch) {\r\n        // Avoid force-reset of context per our setter above.\r\n        this.keyboardInterface.activeKeyboard = keyEvent.srcKeyboard;\r\n      }\r\n\r\n      // Support for multitap context reversion; multitap keys should act as if they were\r\n      // the first thing typed since `preInput`, the state before the original base key.\r\n      if(keyEvent.baseTranscriptionToken) {\r\n        const transcription = this.contextCache.get(keyEvent.baseTranscriptionToken);\r\n        if(transcription) {\r\n          // Has there been a context change at any point during the multitap?  If so, we need\r\n          // to revert it.  If not, we assume it's a layer-change multitap, in which case\r\n          // no such reset is needed.\r\n          if(!isEmptyTransform(transcription.transform) || !transcription.preInput.isEqual(Mock.from(outputTarget))) {\r\n            // Restores full context, including deadkeys in their exact pre-keystroke state.\r\n            outputTarget.restoreTo(transcription.preInput);\r\n          }\r\n          /*\r\n            else:\r\n            1. We don't need to restore the original context, as it's already\r\n               in-place.\r\n            2. Restoring anyway would obliterate any selected text, which is bad\r\n               if this is a purely-layer-switching multitap.  (#11230)\r\n          */\r\n        } else {\r\n          console.warn('The base context for the multitap could not be found');\r\n        }\r\n      }\r\n\r\n      return this._processKeyEvent(keyEvent, outputTarget);\r\n    } finally {\r\n      if(kbdMismatch) {\r\n        // Restore our \"current\" activeKeyboard to its setting before the mismatching KeyEvent.\r\n        this.keyboardInterface.activeKeyboard = trueActiveKeyboard;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Acts as the core of `processKeyEvent` once we're comfortable asserting that the incoming\r\n   * keystroke matches the current `activeKeyboard`.\r\n   * @param keyEvent\r\n   * @param outputTarget\r\n   * @returns\r\n   */\r\n  private _processKeyEvent(keyEvent: KeyEvent, outputTarget: OutputTarget): RuleBehavior {\r\n    let formFactor = keyEvent.device.formFactor;\r\n    let fromOSK = keyEvent.isSynthetic;\r\n\r\n    // The default OSK layout for desktop devices does not include nextlayer info, relying on modifier detection here.\r\n    // It's the OSK equivalent to doModifierPress on 'desktop' form factors.\r\n    if((formFactor == DeviceSpec.FormFactor.Desktop || !this.activeKeyboard || this.activeKeyboard.usesDesktopLayoutOnDevice(keyEvent.device)) && fromOSK) {\r\n      // If it's a desktop OSK style and this triggers a layer change,\r\n      // a modifier key was clicked.  No output expected, so it's safe to instantly exit.\r\n      if(this.keyboardProcessor.selectLayer(keyEvent)) {\r\n        return new RuleBehavior();\r\n      }\r\n    }\r\n\r\n    // Will handle keystroke-based non-layer change modifier & state keys, mapping them through the physical keyboard's version\r\n    // of state management.  `doModifierPress` must always run.\r\n    if(this.keyboardProcessor.doModifierPress(keyEvent, outputTarget, !fromOSK)) {\r\n      // If run on a desktop platform, we know that modifier & state key presses may not\r\n      // produce output, so we may make an immediate return safely.\r\n      if(!fromOSK) {\r\n        return new RuleBehavior();\r\n      }\r\n    }\r\n\r\n    // If suggestions exist AND space is pressed, accept the suggestion and do not process the keystroke.\r\n    // If a suggestion was just accepted AND backspace is pressed, revert the change and do not process the backspace.\r\n    // We check the first condition here, while the prediction UI handles the second through the try__() methods below.\r\n    if(this.languageProcessor.isActive) {\r\n      // The following code relies on JS's logical operator \"short-circuit\" properties to prevent unwanted triggering of the second condition.\r\n\r\n      // Can the suggestion UI revert a recent suggestion?  If so, do that and swallow the backspace.\r\n      if((keyEvent.kName == \"K_BKSP\" || keyEvent.Lcode == Codes.keyCodes[\"K_BKSP\"]) && this.languageProcessor.tryRevertSuggestion()) {\r\n        return new RuleBehavior();\r\n        // Can the suggestion UI accept an existing suggestion?  If so, do that and swallow the space character.\r\n      } else if((keyEvent.kName == \"K_SPACE\" || keyEvent.Lcode == Codes.keyCodes[\"K_SPACE\"]) && this.languageProcessor.tryAcceptSuggestion('space')) {\r\n        return new RuleBehavior();\r\n      }\r\n    }\r\n\r\n    // // ...end I3363 (Build 301)\r\n\r\n    // Create a \"mock\" backup of the current outputTarget in its pre-input state.\r\n    // Current, long-existing assumption - it's DOM-backed.\r\n    let preInputMock = Mock.from(outputTarget, true);\r\n\r\n    const startingLayerId = this.keyboardProcessor.layerId;\r\n\r\n    // We presently need the true keystroke to run on the FULL context.  That index is still\r\n    // needed for some indexing operations when comparing two different output targets.\r\n    let ruleBehavior = this.keyboardProcessor.processKeystroke(keyEvent, outputTarget);\r\n\r\n    // Swap layer as appropriate.\r\n    if(keyEvent.kNextLayer) {\r\n      this.keyboardProcessor.selectLayer(keyEvent);\r\n    }\r\n\r\n    // If it's a key that we 'optimize out' of our fat-finger correction algorithm,\r\n    // we MUST NOT trigger it for this keystroke.\r\n    let isOnlyLayerSwitchKey = Codes.isFrameKey(keyEvent.kName);\r\n\r\n    // Best-guess stopgap for possible custom modifier keys.\r\n    // If a key (1) does not affect the context and (2) shifts the active layer,\r\n    // we assume it's a modifier key.  (Touch keyboards may define custom modifier keys.)\r\n    //\r\n    // Note:  this will mean we won't generate alternates in the niche scenario where:\r\n    // 1.  Keypress does not alter the actual context\r\n    // 2.  It DOES emit a deadkey with an earlier processing rule.\r\n    // 3.  The FINAL processing rule does not match.\r\n    // 4.  The key ALSO signals a layer shift.\r\n    // If any of the four above conditions aren't met - no problem!\r\n    // So it's a pretty niche scenario.\r\n\r\n    if(isEmptyTransform(ruleBehavior?.transcription?.transform) && keyEvent.kNextLayer) {\r\n      isOnlyLayerSwitchKey = true;\r\n    }\r\n\r\n    const keepRuleBehavior = ruleBehavior != null;\r\n    // Should we swallow any further processing of keystroke events for this keydown-keypress sequence?\r\n    if(keepRuleBehavior) {\r\n      // alternates are our fat-finger alternate outputs. We don't build these for keys we detect as\r\n      // layer switch keys\r\n      let alternates = isOnlyLayerSwitchKey ? null : this.buildAlternates(ruleBehavior, keyEvent, preInputMock);\r\n\r\n      // Now that we've done all the keystroke processing needed, ensure any extra effects triggered\r\n      // by the actual keystroke occur.\r\n      ruleBehavior.finalize(this.keyboardProcessor, outputTarget, false);\r\n\r\n      // -- All keystroke (and 'alternate') processing is now complete.  Time to finalize everything! --\r\n\r\n      // Notify the ModelManager of new input - it's predictive text time!\r\n      if(alternates && alternates.length > 0) {\r\n        ruleBehavior.transcription.alternates = alternates;\r\n      }\r\n    } else {\r\n      // We need a dummy RuleBehavior for keys which have no output (e.g. Shift)\r\n      ruleBehavior = new RuleBehavior();\r\n      ruleBehavior.transcription = outputTarget.buildTranscriptionFrom(outputTarget, null, false);\r\n      ruleBehavior.triggersDefaultCommand = true;\r\n    }\r\n\r\n    // Multitaps operate in part by referencing 'committed' Transcriptions to rewind\r\n    // the context as necessary.\r\n    this.contextCache.save(ruleBehavior.transcription);\r\n\r\n    // The keyboard may want to take an action after all other keystroke processing is\r\n    // finished, for example to switch layers. This action may not have any output\r\n    // but may change system store or variable store values. Given this, we don't need to\r\n    // save anything about the post behavior, after finalizing it\r\n\r\n    // We need to tell the keyboard if the layer has been changed, either by a keyboard rule itself,\r\n    // or by the touch layout 'nextlayer' control.\r\n    const hasLayerChanged = ruleBehavior.setStore[SystemStoreIDs.TSS_LAYER] || keyEvent.kNextLayer;\r\n    this.keyboardProcessor.newLayerStore.set(hasLayerChanged ? this.keyboardProcessor.layerId : '');\r\n    this.keyboardProcessor.oldLayerStore.set(hasLayerChanged ? startingLayerId : '');\r\n\r\n    let postRuleBehavior = this.keyboardProcessor.processPostKeystroke(this.contextDevice, outputTarget);\r\n    if(postRuleBehavior) {\r\n      postRuleBehavior.finalize(this.keyboardProcessor, outputTarget, true);\r\n    }\r\n\r\n    // Yes, even for ruleBehavior.triggersDefaultCommand.  Those tend to change the context.\r\n    ruleBehavior.predictionPromise = this.languageProcessor.predict(ruleBehavior.transcription, this.keyboardProcessor.layerId);\r\n\r\n    // Text did not change (thus, no text \"input\") if we tabbed or merely moved the caret.\r\n    if(!ruleBehavior.triggersDefaultCommand) {\r\n      // For DOM-aware targets, this will trigger a DOM event page designers may listen for.\r\n      outputTarget.doInputEvent();\r\n    }\r\n\r\n    return keepRuleBehavior ? ruleBehavior : null;\r\n  }\r\n\r\n  private buildAlternates(ruleBehavior: RuleBehavior, keyEvent: KeyEvent, preInputMock: Mock): Alternate[] {\r\n    let alternates: Alternate[];\r\n\r\n    // If we're performing a 'default command', it's not a standard 'typing' event - don't do fat-finger stuff.\r\n    // Also, don't do fat-finger stuff if predictive text isn't enabled.\r\n    if(this.languageProcessor.isActive && !ruleBehavior.triggersDefaultCommand) {\r\n      let keyDistribution = keyEvent.keyDistribution;\r\n\r\n      // We don't need to track absolute indexing during alternate-generation;\r\n      // only position-relative, so it's better to use a sliding window for context\r\n      // when making alternates.  (Slightly worse for short text, matters greatly\r\n      // for long text.)\r\n      let contextWindow = new ContextWindow(preInputMock, ContextWindow.ENGINE_RULE_WINDOW, this.keyboardProcessor.layerId);\r\n      let windowedMock = contextWindow.toMock();\r\n\r\n      // Note - we don't yet do fat-fingering with longpress keys.\r\n      if(this.languageProcessor.isActive && keyDistribution && keyEvent.kbdLayer) {\r\n        // Tracks a 'deadline' for fat-finger ops, just in case both context is long enough\r\n        // and device is slow enough that the calculation takes too long.\r\n        //\r\n        // Consider use of https://developer.mozilla.org/en-US/docs/Web/API/Performance/now instead?\r\n        // Would allow finer-tuned control.\r\n        let TIMEOUT_THRESHOLD: number = Number.MAX_VALUE;\r\n        let _globalThis = globalObject();\r\n        let timer: () => number;\r\n\r\n        // Available by default on `window` in browsers, but _not_ on `global` in Node,\r\n        // surprisingly.  Since we can't use code dependent on `require` statements\r\n        // at present, we have to condition upon it actually existing.\r\n        if(_globalThis['performance'] && _globalThis['performance']['now']) {\r\n          timer = function() {\r\n            return _globalThis['performance']['now']();\r\n          };\r\n\r\n          TIMEOUT_THRESHOLD = timer() + 16; // + 16ms.\r\n        } // else {\r\n          // We _could_ just use Date.now() as a backup... but that (probably) only matters\r\n          // when unit testing.  So... we actually don't _need_ time thresholding when in\r\n          // a Node environment.\r\n        // }\r\n\r\n        // Tracks a minimum probability for keystroke probability.  Anything less will not be\r\n        // included in alternate calculations.\r\n        //\r\n        // Seek to match SearchSpace.EDIT_DISTANCE_COST_SCALE from the predictive-text engine.\r\n        // Reasoning for the selected value may be seen there.  Short version - keystrokes\r\n        // that _appear_ very precise may otherwise not even consider directly-neighboring keys.\r\n        let KEYSTROKE_EPSILON = Math.exp(-5);\r\n\r\n        // Sort the distribution into probability-descending order.\r\n        keyDistribution.sort((a, b) => b.p - a.p);\r\n\r\n        alternates = [];\r\n\r\n        let totalMass = 0; // Tracks sum of non-error probabilities.\r\n        for(let pair of keyDistribution) {\r\n          if(pair.p < KEYSTROKE_EPSILON) {\r\n            totalMass += pair.p;\r\n            break;\r\n          } else if(timer && timer() >= TIMEOUT_THRESHOLD) {\r\n            // Note:  it's always possible that the thread _executing_ our JS\r\n            // got paused by the OS, even if JS itself is single-threaded.\r\n            //\r\n            // The case where `alternates` is initialized (line 167) but empty\r\n            // (because of net-zero loop iterations) MUST be handled.\r\n            break;\r\n          }\r\n\r\n          let mock = Mock.from(windowedMock, false);\r\n\r\n          const altKey = pair.keySpec;\r\n          if(!altKey) {\r\n            console.warn(\"Internal error:  failed to properly filter set of keys for corrections\");\r\n            continue;\r\n          }\r\n\r\n          let altEvent = this.keyboardProcessor.activeKeyboard.constructKeyEvent(altKey, keyEvent.device, this.keyboardProcessor.stateKeys);\r\n          let alternateBehavior = this.keyboardProcessor.processKeystroke(altEvent, mock);\r\n\r\n          // If alternateBehavior.beep == true, ignore it.  It's a disallowed key sequence,\r\n          // so we expect users to never intend their use.\r\n          //\r\n          // Also possible that this set of conditions fail for all evaluated alternates.\r\n          if(alternateBehavior && !alternateBehavior.beep && pair.p > 0) {\r\n            let transform: Transform = alternateBehavior.transcription.transform;\r\n\r\n            // Ensure that the alternate's token id matches that of the current keystroke, as we only\r\n            // record the matched rule's context (since they match)\r\n            transform.id = ruleBehavior.transcription.token;\r\n            alternates.push({sample: transform, 'p': pair.p});\r\n            totalMass += pair.p;\r\n          }\r\n        }\r\n\r\n        // Renormalizes the distribution, as any error (beep) results\r\n        // will result in a distribution that doesn't sum to 1 otherwise.\r\n        // All `.p` values are strictly positive, so totalMass is\r\n        // guaranteed to be > 0 if the array has entries.\r\n        alternates.forEach(function(alt) {\r\n          alt.p /= totalMass;\r\n        });\r\n      }\r\n    }\r\n    return alternates;\r\n  }\r\n\r\n  public resetContext(outputTarget?: OutputTarget) {\r\n    // Also handles new-context events, which may modify the layer\r\n    this.keyboardProcessor.resetContext(outputTarget);\r\n    // With the layer now set, we trigger new predictions.\r\n    this.languageProcessor.invalidateContext(outputTarget, this.keyboardProcessor.layerId);\r\n  }\r\n}",
    "class DomEventTracking {\r\n  Pelem: EventTarget;\r\n  Peventname: string;\r\n  Phandler: (arg0: Object) => boolean;\r\n  PuseCapture?: boolean\r\n\r\n  constructor(Pelem: EventTarget, Peventname: string, Phandler: (arg0: Object) => boolean, PuseCapture?: boolean) {\r\n    this.Pelem = Pelem;\r\n    this.Peventname = Peventname.toLowerCase();\r\n    this.Phandler = Phandler;\r\n    this.PuseCapture = PuseCapture;\r\n  }\r\n\r\n  equals(other: DomEventTracking): boolean {\r\n    return this.Pelem == other.Pelem && this.Peventname == other.Peventname &&\r\n      this.Phandler == other.Phandler && this.PuseCapture == other.PuseCapture;\r\n  }\r\n};\r\n\r\n/**\r\n * Facilitates adding and removing event listeners to and from DOM elements in a manner\r\n * that allows widespread removal/cleanup of the listeners at a future time if and when needed.\r\n *\r\n * Said \"widespread removal\" helps to prevent separate instances of KeymanWeb from stomping on\r\n * each other during unit tests.\r\n */\r\nexport class DomEventTracker {\r\n  private domEvents: DomEventTracking[] = [];\r\n\r\n  /**\r\n   * Function     attachDOMEvent: Note for most browsers, adds an event to a chain, doesn't stop existing events\r\n   * Scope        Public\r\n   * @param       {Object}    Pelem       Element (or IFrame-internal Document) to which event is being attached\r\n   * @param       {string}    Peventname  Name of event without 'on' prefix\r\n   * @param       {function(Object)}  Phandler    Event handler for event\r\n   * @param       {boolean=}  PuseCapture True only if event to be handled on way to target element\r\n   * Description  Attaches event handler to element DOM event\r\n   */\r\n  attachDOMEvent<K extends keyof WindowEventMap>(\r\n    Pelem: Window,\r\n    Peventname: K,\r\n    Phandler: (ev: WindowEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  attachDOMEvent<K extends keyof DocumentEventMap>(\r\n    Pelem: Document,\r\n    Peventname: K,\r\n    Phandler: (ev: DocumentEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  attachDOMEvent<K extends keyof HTMLElementEventMap>(\r\n    Pelem: HTMLElement,\r\n    Peventname: K,\r\n    Phandler: (ev: HTMLElementEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  attachDOMEvent(Pelem: EventTarget, Peventname: string, Phandler: (arg0: Object) => boolean, PuseCapture?: boolean): void {\r\n    // @ts-ignore // Since the trickery unfortunately don't also clear things up for anything we call within.\r\n    // It's possible to fix, but that gets way more complex to spec out completely.\r\n    this.detachDOMEvent(Pelem, Peventname, Phandler, PuseCapture);\r\n    Pelem.addEventListener(Peventname, Phandler, PuseCapture ? true : false);\r\n\r\n    // Since we're attaching to the DOM, these events should be tracked for detachment during shutdown.\r\n    var event = new DomEventTracking(Pelem, Peventname, Phandler, PuseCapture);\r\n    this.domEvents.push(event);\r\n  }\r\n\r\n  /**\r\n   * Function     detachDOMEvent\r\n   * Scope        Public\r\n   * @param       {Object}    Pelem       Element from which event is being detached\r\n   * @param       {string}    Peventname  Name of event without 'on' prefix\r\n   * @param       {function(Object)}  Phandler    Event handler for event\r\n   * @param       {boolean=}  PuseCapture True if event was being handled on way to target element\r\n   * Description Detaches event handler from element [to prevent memory leaks]\r\n   */\r\n  detachDOMEvent<K extends keyof WindowEventMap>(\r\n    Pelem: Window,\r\n    Peventname: K,\r\n    Phandler: (ev: WindowEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  detachDOMEvent<K extends keyof DocumentEventMap>(\r\n    Pelem: Document,\r\n    Peventname: K,\r\n    Phandler: (ev: DocumentEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  detachDOMEvent<K extends keyof HTMLElementEventMap>(\r\n    Pelem: HTMLElement,\r\n    Peventname: K,\r\n    Phandler: (ev: HTMLElementEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  detachDOMEvent(Pelem: EventTarget, Peventname: string, Phandler: (arg0: Object) => boolean, PuseCapture?: boolean): void {\r\n    Pelem.removeEventListener(Peventname, Phandler, PuseCapture);\r\n\r\n    // Since we're detaching, we should drop the tracking data from the old event.\r\n    var event = new DomEventTracking(Pelem, Peventname, Phandler, PuseCapture);\r\n    for(var i = 0; i < this.domEvents.length; i++) {\r\n      if(this.domEvents[i].equals(event)) {\r\n        this.domEvents.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  shutdown() {\r\n    // Remove all events linking to elements of the original, unaltered page.\r\n    // This should sever any still-existing page ties to this instance of KMW,\r\n    // allowing browser GC to do its thing.\r\n    for(let event of this.domEvents) {\r\n      // @ts-ignore // since it's simpler this way and doesn't earn us much to re-check types.\r\n      this.detachDOMEvent(event.Pelem, event.Peventname, event.Phandler, event.PuseCapture);\r\n    }\r\n  }\r\n}",
    "import { EventEmitter } from \"eventemitter3\";\r\nimport EventNames = EventEmitter.EventNames;\r\nimport EventListener = EventEmitter.EventListener;\r\n\r\nimport { LegacyEventEmitter } from \"./legacyEventEmitter.js\";\r\n\r\ninterface EventMap<BaseEventMap extends Object> {\r\n  // Provides IntelliSense suggestions in conditionals based on the parameters!\r\n\r\n  /**\r\n   * Indicates that a listener for the named event has been registered for the\r\n   * EventEmitter being spied upon.\r\n   * @param eventName\r\n   */\r\n  listeneradded(eventName: EventNames<BaseEventMap>): void;\r\n\r\n  /**\r\n   * Indicates that a listener for the named event has been unregistered from the\r\n   * EventEmitter being spied upon.\r\n   * @param eventName\r\n   */\r\n  listenerremoved(eventName: EventNames<BaseEventMap>): void;\r\n}\r\n\r\ntype Emitter<BaseEventMap extends Object> = EventEmitter<BaseEventMap> | LegacyEventEmitter<BaseEventMap>;\r\n\r\n/**\r\n * A spy-object that wraps event-emitters in order to listen in on listener addition methods and\r\n * raise events when new listeners are attached.\r\n */\r\nexport class EmitterListenerSpy<BaseEventMap extends Object> extends EventEmitter<EventMap<BaseEventMap>> {\r\n  constructor(emitter: Emitter<BaseEventMap>) {\r\n    super();\r\n\r\n    if(emitter instanceof EventEmitter) {\r\n      emitter.on = this.listenerRegistrationSpy('listeneradded', emitter, emitter.on);\r\n      emitter.addListener = this.listenerRegistrationSpy('listeneradded', emitter, emitter.addListener);\r\n      emitter.off = this.listenerRegistrationSpy('listenerremoved', emitter, emitter.off);\r\n      emitter.removeListener = this.listenerRegistrationSpy('listenerremoved', emitter, emitter.off);\r\n    } else {\r\n      // TS gets really fussy about how the legacy event typing is a bit more\r\n      // restrictive (due to less-restricted event name types in EventEmitter)\r\n      // It's not worth the effort to make this 100% perfect at the moment.\r\n      //\r\n      // @ts-ignore\r\n      emitter.addEventListener = this.listenerRegistrationSpy('listeneradded', emitter, emitter.addEventListener);\r\n      // @ts-ignore\r\n      emitter.removeEventListener = this.listenerRegistrationSpy('listenerremoved', emitter, emitter.removeEventListener);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Given an event emitter and one of its methods used to register or unregister associated events,\r\n   * this method will construct a replacement method that calls the original AND raises the specified\r\n   * corresponding listener event provided by this class afterward.  The replacement method\r\n   * should be assigned to the emitter afterward, overwriting the original version.\r\n   *\r\n   * Refer to https://stackoverflow.com/a/10057969.\r\n   */\r\n  private listenerRegistrationSpy(\r\n    spyEventName: EventNames<EventMap<BaseEventMap>>,\r\n    emitter: Emitter<BaseEventMap>,\r\n    method: (\r\n      eventName: EventNames<BaseEventMap>,\r\n      listener: EventListener<BaseEventMap, EventNames<BaseEventMap>>,\r\n    ) => any\r\n  ): ( // returns a method of the same signature as the original implementation.\r\n    eventName: EventNames<BaseEventMap>,\r\n    listener: EventListener<BaseEventMap, EventNames<BaseEventMap>>,\r\n  ) => any {\r\n    return (eventName, listener) => {\r\n      const retVal = method.apply(emitter, [eventName, listener]);\r\n      this.emit(spyEventName, eventName);\r\n      return retVal;\r\n    }\r\n  }\r\n}\r\n\r\n/**** A code block for verifying that typing, etc checks out: ****/\r\n\r\n// interface TestMap {\r\n//   'a': (str: string) => void;\r\n//   'b': (num: number, str: string) => void;\r\n// }\r\n\r\n// const emitter = new LegacyEventEmitter<TestMap>;  // or `new EventEmitter<TestMap>`.\r\n// const emitterSpy = new EmitterListenerSpy<TestMap>(emitter);\r\n// emitterSpy.on('listeneradded', (eventName) => {\r\n//   // eventName = 'c'; // will error; there is no event 'c' in the event map.\r\n//   if(eventName == 'a') {\r\n//     // stuff\r\n//   }\r\n// })",
    "// Most of the typing below is derived from that of EventEmitter, but customized for\r\n// modeling legacy KMW events.  Including the heavy typing gets us event Intellisense\r\n// and compile-time errors if and when types don't match expectations.\r\n\r\n/**\r\n * Can define the set of events as follows:\r\n * ```\r\n * interface Test extends EventMap {\r\n *   'event': (param: {'prop': any}) => boolean;\r\n * }\r\n * ```\r\n *\r\n * Each event may have either no parameters or a single parameter of type object.\r\n * The type definition of the parameter will be utilized by TS's type-inference engine\r\n * for type checking on handlers and for raising the event.\r\n *\r\n * Note: the `extends EventMap` part is actually important for TS type inference here.\r\n */\r\nexport type LegacyEventMap = object;\r\n\r\n/**\r\n * Matches the name of any single event defined within the specified event-map definition.\r\n */\r\nexport type EventNames<T extends LegacyEventMap> = Exclude<keyof T, number | symbol>;\r\n\r\n/**\r\n * Builds a type-array of the arguments for each named event, indexed by that name.\r\n */\r\ntype ArgumentMap<T extends LegacyEventMap> = {\r\n  [K in Exclude<keyof T, number | symbol>]: T[K] extends (arg: any) => void\r\n    ? Parameters<T[K]>[0]\r\n    : (\r\n      T[K] extends Function\r\n      ? never\r\n      : T[K]\r\n    );\r\n};\r\n\r\n/**\r\n * Provides the type signature of event listeners able to handle defined events.\r\n */\r\nexport type EventListener<\r\n    T extends LegacyEventMap,\r\n    K extends EventNames<T>\r\n  > = (       // argumentMap[eventName] - retrieves the specific parameter typing for the event.\r\n        args: ArgumentMap<T>[Extract<K, keyof T>]\r\n      ) => any;\r\n\r\n/**\r\n * Provides fairly strong typing for all legacy KMW events.  Note that all events\r\n * assume a handler receiving up to one object, though that object's properties will\r\n * vary from event to event.\r\n *\r\n * Note that the behavior differs from EventEmitter events on a few points:\r\n * 1. Event functions are expected to return a boolean value - generally, `true`.\r\n *    If 'false' or `undefined` is returned, no further listeners will receive the event.\r\n * 2. These events receive up to one parameter, always of an object type.\r\n * 3. These events proactively prevent accidental event-handler recursion.  Should an event's\r\n *    handler retrigger the event, the newly-triggered event will be prevented entirely.\r\n */\r\nexport class LegacyEventEmitter<EventTypes extends LegacyEventMap> {\r\n  // An object mapping event names to individual event lists.  Maps strings to arrays.\r\n  private events: { [name: string]: ((arg0: Object) => boolean)[];} = {};\r\n  private currentEvents: string[] = [];  // The event messaging call stack.\r\n\r\n  /**\r\n   * Function    addEventListener\r\n   * Scope       Private\r\n   * @param      {string}     event     name of event prefixed by module, e.g. osk.touchmove\r\n   * @param      {function(Object)}   func      event handler\r\n   * @return     {boolean}\r\n   * Description Add (or replace) an event listener for this component\r\n   */\r\n  addEventListener<T extends EventNames<EventTypes>> (\r\n    event: T,\r\n    func: EventListener<EventTypes, T>\r\n  ): boolean {\r\n    this._removeEventListener(event, func);\r\n    // TS gets hung up on the type info here because we can potentially store\r\n    // different types of listeners for different events.\r\n    this.events[event].push(func as unknown as any);\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Function    removeEventListener\r\n   * Scope       Private\r\n   * @param      {string}     event     name of event prefixed by module, e.g. osk.touchmove\r\n   * @param      {function(Object)}   func      event handler\r\n   * @return     {boolean}\r\n   * Description Remove the specified function from the listeners for this event\r\n   */\r\n  public removeEventListener<T extends EventNames<EventTypes>> (\r\n    event: T,\r\n    func: EventListener<EventTypes, T>\r\n  ): boolean {\r\n    return this._removeEventListener(event, func);\r\n  }\r\n\r\n  // Separate, in order to prevent `addEventListener` from sending 'listenerremoved' events with\r\n  // EmitterListenerSpy.\r\n  private _removeEventListener<T extends EventNames<EventTypes>> (\r\n    event: T,\r\n    func: EventListener<EventTypes, T>\r\n  ): boolean {\r\n    if(typeof this.events[event] == 'undefined') {\r\n      this.events[event] = [];\r\n    }\r\n\r\n    for(var i=0; i<this.events[event].length; i++) {\r\n      if(this.events[event][i] == func) {\r\n        this.events[event].splice(i, 1);\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Function    callEvent\r\n   * Scope       Private\r\n   * @param      {string}     event     name of event prefixed by module, e.g. osk.touchmove\r\n   * @param      {Array}      params    parameter array for function\r\n   * @return     {boolean}    `true` only if all handlers return `true`, permitting further execution.\r\n   * Description Invoke an event using any function\r\n   */\r\n  callEvent<T extends EventNames<EventTypes>> (\r\n    event: T,\r\n    params: ArgumentMap<EventTypes>[T]\r\n  ): boolean {\r\n    if(typeof this.events[event] == 'undefined') {\r\n      return true;\r\n    }\r\n\r\n    if(this.currentEvents.indexOf(event) != -1) {\r\n      return false;  // Avoid event messaging recursion!\r\n    }\r\n\r\n    this.currentEvents.push(event);\r\n\r\n    for(var i=0; i<this.events[event].length; i++) {\r\n      var func=this.events[event][i] as EventListener<EventTypes, T>, result=false;\r\n      try {\r\n        result=func(params as any);\r\n      } catch(strExcept) {\r\n        console.error(strExcept);\r\n        result=false;\r\n      } //don't know whether to use true or false here\r\n      if(result === false) {\r\n        this.currentEvents.pop();\r\n        return false;\r\n      }\r\n    }\r\n    this.currentEvents.pop();\r\n    return true;\r\n  }\r\n\r\n  listenerCount<T extends EventNames<EventTypes>>(event: T) {\r\n    const listeners = this.events[event];\r\n    return listeners ? listeners.length : 0;\r\n  }\r\n\r\n  shutdown() {\r\n    // Remove all event-handler references rooted in KMW events.\r\n    this.events = {};\r\n  }\r\n}\r\n",
    "import { ManagedPromise } from 'keyman/engine/keyboard';\r\nimport CloudRequesterInterface from './cloud/requesterInterface.js';\r\nimport { CLOUD_MALFORMED_OBJECT_ERR, CLOUD_TIMEOUT_ERR, CLOUD_STUB_REGISTRATION_ERR } from './cloud/queryEngine.js';\r\n\r\nexport default class DOMCloudRequester implements CloudRequesterInterface {\r\n  private readonly fileLocal: boolean;\r\n\r\n  constructor(fileLocal: boolean = false) {\r\n    this.fileLocal = fileLocal;\r\n  }\r\n\r\n  request<T>(query: string) {\r\n    let promise = new ManagedPromise<T>();\r\n\r\n    // Set callback timer\r\n    const timeoutID = window.setTimeout(() => {\r\n      promise.reject(new Error(CLOUD_TIMEOUT_ERR));\r\n    }, 10000);\r\n\r\n    const tFlag='&timerid='+ timeoutID;\r\n    const fullRef = query + tFlag;\r\n\r\n    const Lscript: HTMLScriptElement = document.createElement('script');\r\n    Lscript.onload = (event: Event) => {\r\n      window.clearTimeout(timeoutID);\r\n\r\n      // This case should only happen if a returned, otherwise-valid keyboard\r\n      // script does not ever call `register`.  Also provides default handling\r\n      // should `register` fail to report results/failure correctly.\r\n      if(!promise.isResolved) {\r\n        promise.reject(new Error(CLOUD_STUB_REGISTRATION_ERR));\r\n      }\r\n    };\r\n\r\n    // Note:  at this time (24 May 2021), this is also happens for \"successful\"\r\n    //        API calls where there is no matching keyboard ID.\r\n    //\r\n    //        The returned 'error' JSON object is sent with an HTML error code (404)\r\n    //        and does not call `keyman.register`.  Even if it did the latter, the\r\n    //        404 code would likely prevent the returned script's call.\r\n    Lscript.onerror = (event: string | Event, source?: string,\r\n                        lineno?: number, colno?: number, error?: Error) => {\r\n      window.clearTimeout(timeoutID);\r\n\r\n      let msg = CLOUD_MALFORMED_OBJECT_ERR;\r\n      if(error) {\r\n        msg = msg + \": \" + error.message;\r\n      }\r\n\r\n      promise.reject(new Error(msg));\r\n    }\r\n\r\n    if(this.fileLocal) {\r\n      Lscript.src = query;\r\n    } else {\r\n      Lscript.src = fullRef;\r\n    }\r\n\r\n    try {\r\n      document.body.appendChild(Lscript);\r\n    } catch(ex) {\r\n      document.getElementsByTagName('head')[0].appendChild(Lscript);\r\n    }\r\n\r\n    promise.finally(() => {\r\n      clearTimeout(timeoutID);\r\n    });\r\n\r\n    return {\r\n      promise: promise,\r\n      queryId: timeoutID\r\n    };\r\n  }\r\n}",
    "import { type KeyEvent, type Keyboard, KeyboardKeymanGlobal } from \"keyman/engine/keyboard\";\r\nimport { OutputTarget, ProcessorInitOptions, RuleBehavior } from 'keyman/engine/js-processor';\r\nimport { DOMKeyboardLoader as KeyboardLoader } from \"keyman/engine/keyboard/dom-keyboard-loader\";\r\nimport { InputProcessor } from './headless/inputProcessor.js';\r\nimport { OSKView } from \"keyman/engine/osk\";\r\nimport { KeyboardRequisitioner, ModelCache, toUnprefixedKeyboardId as unprefixed } from \"keyman/engine/keyboard-storage\";\r\nimport { ModelSpec, PredictionContext } from \"keyman/engine/interfaces\";\r\n\r\nimport { EngineConfiguration, InitOptionSpec } from \"./engineConfiguration.js\";\r\nimport KeyboardInterface from \"./keyboardInterface.js\";\r\nimport { ContextManagerBase } from \"./contextManagerBase.js\";\r\nimport HardKeyboardBase from \"./hardKeyboard.js\";\r\nimport { LegacyAPIEvents } from \"./legacyAPIEvents.js\";\r\nimport { EventNames, EventListener, LegacyEventEmitter } from \"keyman/engine/events\";\r\nimport DOMCloudRequester from \"keyman/engine/keyboard-storage/dom-requester\";\r\nimport KEYMAN_VERSION from \"@keymanapp/keyman-version\";\r\n\r\n// From https://stackoverflow.com/a/69328045\r\ntype WithRequired<T, K extends keyof T> = T & { [P in K]-?: T[P] };\r\n// Sets two parts non-optional at this level, while they were at lower levels.\r\ntype ProcessorConfiguration = WithRequired<WithRequired<ProcessorInitOptions, 'keyboardInterface'>, 'defaultOutputRules'>;\r\n\r\nfunction determineBaseLayout(): string {\r\n  // @ts-ignore\r\n  if(typeof(window['KeymanWeb_BaseLayout']) !== 'undefined') {\r\n    // @ts-ignore\r\n    return window['KeymanWeb_BaseLayout'];\r\n  } else {\r\n    return 'us';\r\n  }\r\n}\r\n\r\nexport type KeyEventFullResultCallback = (result: RuleBehavior, error?: Error) => void;\r\nexport type KeyEventFullHandler = (event: KeyEvent, callback?: KeyEventFullResultCallback) => void;\r\n\r\nexport default class KeymanEngine<\r\n  Configuration extends EngineConfiguration,\r\n  ContextManager extends ContextManagerBase<any>,\r\n  HardKeyboard extends HardKeyboardBase\r\n> implements KeyboardKeymanGlobal {\r\n  readonly config: Configuration;\r\n  contextManager: ContextManager;\r\n  interface: KeyboardInterface<ContextManager>;\r\n  readonly core: InputProcessor;\r\n  keyboardRequisitioner: KeyboardRequisitioner;\r\n  modelCache: ModelCache;\r\n\r\n  protected legacyAPIEvents = new LegacyEventEmitter<LegacyAPIEvents>();\r\n  private _hardKeyboard: HardKeyboard;\r\n  private _osk: OSKView;\r\n\r\n  protected keyEventRefocus?: () => void;\r\n\r\n  private keyEventListener: KeyEventFullHandler = (event, callback) => {\r\n    const outputTarget = this.contextManager.activeTarget;\r\n\r\n    if(!this.contextManager.activeKeyboard || !outputTarget) {\r\n      if(callback) {\r\n        callback(null, null);\r\n      }\r\n      return;\r\n    }\r\n\r\n    if(!this.core.languageProcessor.mayCorrect) {\r\n      event.keyDistribution = [];\r\n    }\r\n\r\n    if(this.keyEventRefocus) {\r\n      // Do anything needed to guarantee that the outputTarget stays active (`app/browser`: maintains focus).\r\n      // (Interaction with the OSK may have de-focused the element providing active context;\r\n      // we want to restore it in case the user swaps back to the hardware keyboard afterward.)\r\n      this.keyEventRefocus();\r\n    }\r\n\r\n    // Clear any cached codepoint data; we can rebuild it if it's unchanged.\r\n    outputTarget.invalidateSelection();\r\n    // Deadkey matching continues to be troublesome.\r\n    // Deleting matched deadkeys here seems to correct some of the issues.   (JD 6/6/14)\r\n    outputTarget.deadkeys().deleteMatched();      // Delete any matched deadkeys before continuing\r\n\r\n    if(event.isSynthetic) {\r\n      const oskLayer = this.osk.vkbd.layerId;\r\n\r\n      // In case of modipresses.\r\n      if(oskLayer && oskLayer != this.core.keyboardProcessor.layerId) {\r\n        this.core.keyboardProcessor.layerId = oskLayer;\r\n      }\r\n    }\r\n    const result = this.core.processKeyEvent(event, outputTarget);\r\n\r\n    if(result && result.transcription?.transform) {\r\n      this.config.onRuleFinalization(result, this.contextManager.activeTarget);\r\n    }\r\n\r\n    if(callback) {\r\n      callback(result, null);\r\n    }\r\n\r\n    // No try-catch here because we don't want to mask any errors that occur during keystroke\r\n    // processing - silent failures are far harder to diagnose.\r\n  };\r\n\r\n  /**\r\n   * @param worker  A configured WebWorker to serve as the predictive-text engine's main thread.\r\n   *                Available in the following variants:\r\n   *                - sourcemapped, unminified (debug)\r\n   *                - non-sourcemapped + minified (release)\r\n   * @param config\r\n   * @param contextManager\r\n   * @param processorConfigInitializer A one-time use closure used to initialize certain critical components reliant\r\n   *                                   upon the class instance, configured by the derived class, but needed during\r\n   *                                   the superclass constructor.\r\n   */\r\n  constructor(\r\n    worker: Worker,\r\n    config: Configuration,\r\n    contextManager: ContextManager,\r\n    processorConfigInitializer: (engine: KeymanEngine<Configuration, ContextManager, HardKeyboard>) => ProcessorConfiguration\r\n  ) {\r\n    this.config = config;\r\n    this.contextManager = contextManager;\r\n\r\n    const processorConfiguration = processorConfigInitializer(this);\r\n    processorConfiguration.baseLayout = determineBaseLayout();\r\n    this.interface = processorConfiguration.keyboardInterface as KeyboardInterface<ContextManager>;\r\n    this.core = new InputProcessor(config.hostDevice, worker, processorConfiguration);\r\n\r\n    this.core.languageProcessor.on('statechange', (state) => {\r\n      // The banner controller cannot directly trigger a layout-refresh at this time,\r\n      // so we handle that here.\r\n      this.osk?.bannerController.selectBanner(state);\r\n      this.osk?.refreshLayout();\r\n    });\r\n\r\n    // The OSK does not possess a direct connection to the KeyboardProcessor's state-key\r\n    // management object; this event + handler allow us to keep the OSK's related states\r\n    // in sync.\r\n    this.core.keyboardProcessor.on('statekeychange', (stateKeys) => {\r\n      this.osk?.vkbd?.updateStateKeys(stateKeys);\r\n    })\r\n\r\n    this.contextManager.on('beforekeyboardchange', (metadata) => {\r\n      this.legacyAPIEvents.callEvent('beforekeyboardchange', {\r\n        internalName: metadata?.id,\r\n        languageCode: metadata?.langId\r\n      });\r\n    });\r\n\r\n    this.contextManager.on('keyboardchange', (kbd) => {\r\n      // Hide OSK and do not update keyboard list if using internal keyboard (desktops).\r\n      // Condition will not be met for touch form-factors; they force selection of a\r\n      // default keyboard.\r\n      if(!kbd) {\r\n        this.osk.startHide(false);\r\n      }\r\n\r\n      const prepareKeyboardSwap = () => {\r\n        this.refreshModel();\r\n        // Triggers context resets that can trigger layout stuff.\r\n        // It's not the final such context-reset, though.\r\n        this.core.activeKeyboard = kbd?.keyboard;\r\n\r\n        this.legacyAPIEvents.callEvent('keyboardchange', {\r\n          internalName: kbd?.metadata.id ?? '',\r\n          languageCode: kbd?.metadata.langId ?? ''\r\n        });\r\n      }\r\n\r\n      /*\r\n        This pattern is designed to minimize layout reflow during the keyboard-swap process.\r\n        The 'default' layer is loaded by default, but some keyboards will start on different\r\n        layers depending on the current state of the context.\r\n\r\n        If possible, we want to only perform layout operations once the correct layer is\r\n        set to active.\r\n      */\r\n      if(this.osk) {\r\n        this.osk.batchLayoutAfter(() => {\r\n          prepareKeyboardSwap();\r\n          this.osk.activeKeyboard = kbd;\r\n          // Note:  when embedded within the mobile apps, the keyboard will still be visible\r\n          // at this time.\r\n\r\n          /*\r\n            Needed to ensure the correct layer is displayed AND that deadkeys from\r\n            the old keyboard have been wiped.\r\n\r\n            Needs to be after the OSK has loaded for the keyboard in case the default\r\n            layer should be something other than \"default\" for the current context.\r\n          */\r\n          this.contextManager.resetContext();\r\n          this.osk.present();\r\n        });\r\n      } else {\r\n        prepareKeyboardSwap();\r\n        this.contextManager.resetContext();\r\n      }\r\n    });\r\n\r\n    this.contextManager.on('keyboardasyncload', (metadata) => {\r\n      /* Original implementation pre-modularization:\r\n        *\r\n        * > Force OSK display for CJK keyboards (keyboards using a pick list)\r\n        *\r\n        * A matching subcondition in the block below will ensure that the OSK activates pre-load\r\n        * for CJK keyboards.  Yes, even before a CJK picker could ever show.  We should be fine\r\n        * without the CJK check so long as a picker keyboard's OSK is kept activated post-load,\r\n        * when the picker actually needs to be kept persistently-active.\r\n        * `metadata` would be relevant a the CJK-check, which was based on language codes.\r\n        *\r\n        * Of course, as mobile devices don't have guaranteed physical keyboards... we need to\r\n        * keep the OSK visible for them, hence the actual block below.\r\n        */\r\n      if(this.config.hostDevice.touchable && this.osk?.activationModel) {\r\n        this.osk.activationModel.enabled = true;\r\n        // Also note:  the OSKView.mayDisable method returns false when hostDevice.touchable = false.\r\n        // The .startHide() call below will check that method before actually starting an OSK hide.\r\n      }\r\n\r\n      // Always (temporarily) hide the OSK when loading a new keyboard, to ensure\r\n      // that a failure to load doesn't leave the current OSK displayed\r\n      this.osk?.startHide(false);\r\n    });\r\n  }\r\n\r\n  public async init(optionSpec: Required<InitOptionSpec>){\r\n    // There may be some valid mutations possible even on repeated calls?\r\n    // The original seems to allow it.\r\n\r\n    const config = this.config;\r\n    if(config.deferForInitialization.isResolved) {\r\n      // abort!  Maybe throw an error, too.\r\n      return Promise.resolve();\r\n    }\r\n\r\n    config.initialize(optionSpec);\r\n\r\n    // Initialize supplementary plane string extensions\r\n    String.kmwEnableSupplementaryPlane(true);\r\n\r\n    // Since we're not sandboxing keyboard loads yet, we just use `window` as the jsGlobal object.\r\n    // All components initialized below require a properly-configured `config.paths` or similar.\r\n    const keyboardLoader = new KeyboardLoader(this.interface, config.applyCacheBusting);\r\n    this.keyboardRequisitioner = new KeyboardRequisitioner(keyboardLoader, new DOMCloudRequester(), this.config.paths);\r\n    this.modelCache = new ModelCache();\r\n    const kbdCache = this.keyboardRequisitioner.cache;\r\n\r\n    const keyboardProcessor = this.core.keyboardProcessor;\r\n    const predictionContext = new PredictionContext(this.core.languageProcessor, () => keyboardProcessor.layerId);\r\n    this.contextManager.configure({\r\n      resetContext: (target) => {\r\n        // Could reset the target's deadkeys here, but it's really more of a 'core' task.\r\n        // So we delegate that to keyboard.\r\n        if(this.osk) {\r\n          this.osk.batchLayoutAfter(() => {\r\n            this.core.resetContext(target);\r\n          })\r\n        } else {\r\n          this.core.resetContext(target);\r\n        }\r\n      },\r\n      predictionContext: predictionContext,\r\n      keyboardCache: this.keyboardRequisitioner.cache\r\n    });\r\n\r\n    /*\r\n     * Handler for post-processing once a suggestion has been applied.\r\n     *\r\n     * This is called after the suggestion is applied but _before_ new\r\n     * predictions are requested based on the resulting context.\r\n     */\r\n    this.core.languageProcessor.on('suggestionapplied', () => {\r\n      // Tell the keyboard that the current layer has not changed\r\n      keyboardProcessor.newLayerStore.set('');\r\n      keyboardProcessor.oldLayerStore.set('');\r\n      // Call the keyboard's entry point.\r\n      keyboardProcessor.processPostKeystroke(keyboardProcessor.contextDevice, predictionContext.currentTarget as OutputTarget)\r\n        // If we have a RuleBehavior as a result, run it on the target. This should\r\n        // only change system store and variable store values.\r\n        ?.finalize(keyboardProcessor, predictionContext.currentTarget as OutputTarget, true);\r\n    });\r\n\r\n    // #region Event handler wiring\r\n    this.config.on('spacebartext', () => {\r\n      // On change of spacebar-text mode, we currently need a layout refresh to update the\r\n      // spacebar's text.\r\n      this.osk?.refreshLayout();\r\n    });\r\n\r\n    kbdCache.on('stubadded', (stub) => {\r\n      let eventRaiser = () => {\r\n        // The corresponding event is needed in order to update UI modules as new keyboard stubs \"come online\".\r\n        this.legacyAPIEvents.callEvent('keyboardregistered', {\r\n          internalName: stub.KI,\r\n          language: stub.KL,\r\n          keyboardName: stub.KN,\r\n          languageCode: stub.KLC,\r\n          package: stub.KP\r\n        });\r\n\r\n        // If this is the first stub loaded, set it as active.\r\n        if(this.config.activateFirstKeyboard && this.keyboardRequisitioner.cache.defaultStub == stub) {\r\n          // Note:  leaving this out is super-useful for debugging issues that occur when no keyboard is active.\r\n          this.contextManager.activateKeyboard(stub.id, stub.langId, true);\r\n        }\r\n      }\r\n\r\n      if(this.config.deferForInitialization.isResolved) {\r\n        eventRaiser();\r\n      } else {\r\n        this.config.deferForInitialization.then(eventRaiser);\r\n      }\r\n    });\r\n\r\n    kbdCache.on('keyboardadded', (keyboard) => {\r\n      let eventRaiser = () => {\r\n        // Execute any external (UI) code needed after loading keyboard\r\n        this.legacyAPIEvents.callEvent('keyboardloaded', {\r\n          keyboardName: keyboard.id\r\n        });\r\n      }\r\n\r\n      if(this.config.deferForInitialization.isResolved) {\r\n        eventRaiser();\r\n      } else {\r\n        this.config.deferForInitialization.then(eventRaiser);\r\n      }\r\n    });\r\n\r\n    this.keyboardRequisitioner.cache.on('keyboardadded', (keyboard) => {\r\n      this.legacyAPIEvents.callEvent('keyboardloaded', { keyboardName: keyboard.id });\r\n    });\r\n    //\r\n    // #endregion\r\n  }\r\n\r\n  /**\r\n   * Public API:  Denotes the 'patch' component of the version of the current engine.\r\n   *\r\n   * https://help.keyman.com/developer/engine/web/current-version/reference/core/build\r\n   */\r\n  public get build(): number {\r\n    return Number.parseInt(KEYMAN_VERSION.VERSION_PATCH, 10);\r\n  }\r\n\r\n  /**\r\n   * Public API:  Denotes the major & minor components of the version of the current engine.\r\n   *\r\n   * https://help.keyman.com/developer/engine/web/current-version/reference/core/version\r\n   */\r\n  public get version(): string {\r\n    return KEYMAN_VERSION.VERSION_RELEASE;\r\n  }\r\n\r\n  public get hardKeyboard(): HardKeyboard {\r\n    return this._hardKeyboard;\r\n  }\r\n\r\n  protected set hardKeyboard(keyboard: HardKeyboard) {\r\n    if(this._hardKeyboard) {\r\n      this._hardKeyboard.off('keyevent', this.keyEventListener);\r\n    }\r\n    this._hardKeyboard = keyboard;\r\n    keyboard.on('keyevent', this.keyEventListener);\r\n  }\r\n\r\n  public get osk(): OSKView {\r\n    return this._osk;\r\n  }\r\n\r\n  public set osk(value: OSKView) {\r\n    if(this._osk) {\r\n      this._osk.off('keyevent', this.keyEventListener);\r\n      this.core.keyboardProcessor.layerStore.handler = this.osk.layerChangeHandler;\r\n    }\r\n    this._osk = value;\r\n    // As the `new context` ruleset is designed to facilitate OSK layer-change updates\r\n    // based on the context being entered, we want the keyboard processor's current\r\n    // contextDevice to match that of the active OSK.  See #11740.\r\n    this.core.keyboardProcessor.contextDevice = value?.targetDevice ?? this.config.softDevice;\r\n    if(value) {\r\n      // Don't build an OSK if no keyboard is available yet; avoid the extra flash.\r\n      if(this.contextManager.activeKeyboard) {\r\n        value.activeKeyboard = this.contextManager.activeKeyboard;\r\n      }\r\n      value.on('keyevent', this.keyEventListener);\r\n      this.core.keyboardProcessor.layerStore.handler = value.layerChangeHandler;\r\n    }\r\n  }\r\n\r\n  public getDebugInfo(): Record<string, any> {\r\n    const activeKbd = this.contextManager?.activeKeyboard;\r\n\r\n    const report = {\r\n      configReport: this.config?.debugReport(),\r\n      keyboard: {\r\n        id: unprefixed(activeKbd?.metadata?.id ?? ''),\r\n        langId: activeKbd?.metadata?.langId || '',\r\n        version: activeKbd?.keyboard?.version ?? ''\r\n      },\r\n      model: {\r\n        id: this.core?.activeModel?.id || ''\r\n      },\r\n      osk: {\r\n        banner: this.osk?.banner?.banner.type ?? '',\r\n        layer: this.osk?.vkbd?.layerId || ''\r\n      }\r\n    };\r\n\r\n    return report;\r\n  }\r\n\r\n  // Returned Promise:  gives the model-spec object.  Only resolves when any model loading or unloading\r\n  // is fully complete.\r\n  private refreshModel(): Promise<ModelSpec> {\r\n    const kbd = this.contextManager.activeKeyboard;\r\n    const model = this.modelCache.modelForLanguage(kbd?.metadata.langId);\r\n\r\n    if(this.core.activeModel != model) {\r\n      if(this.core.activeModel) {\r\n        this.core.languageProcessor.unloadModel();\r\n      }\r\n\r\n      // Semi-hacky management of banner display state.\r\n      if(model) {\r\n        return this.core.languageProcessor.loadModel(model).then(() => {\r\n          return model;\r\n        });\r\n      }\r\n    }\r\n\r\n    return Promise.resolve(model);\r\n  }\r\n\r\n  /**\r\n   * Subscribe to Keyman Engine events documented at\r\n   * https://help.keyman.com/developer/engine/web/current-version/reference/events.  Note that any OSK-related\r\n   * events should instead register on `keyman.osk.addEventListener`, not on this method.\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/addEventListener\r\n   */\r\n  public addEventListener<Name extends EventNames<LegacyAPIEvents>>(event: Name, listener: EventListener<LegacyAPIEvents, Name>) {\r\n    this.legacyAPIEvents.addEventListener(event, listener);\r\n  }\r\n\r\n  /**\r\n   * Public API: Unsubscribe from Keyman Engine events documented at\r\n   * https://help.keyman.com/developer/engine/web/current-version/reference/events.\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/removeEventListener\r\n   */\r\n  public removeEventListener<Name extends EventNames<LegacyAPIEvents>>(event: Name, listener: EventListener<LegacyAPIEvents, Name>) {\r\n    this.legacyAPIEvents.removeEventListener(event, listener);\r\n  }\r\n\r\n  shutdown() {\r\n    this.legacyAPIEvents.shutdown();\r\n    this.osk?.shutdown();\r\n  }\r\n\r\n  // API methods\r\n\r\n  // 17.0: new!  Only used by apps utilizing app/webview and one app/browser test page.\r\n  // Is not part of our 'published' API.\r\n\r\n  /**\r\n   * Registers the specified lexical model within Keyman Engine.  If a keyboard with a\r\n   * matching language code is currently activated, it will also activate the model.\r\n   *\r\n   * @param model  An object defining model ID, associated language IDs, and either the\r\n   *               model's definition or a path to a file containing it.\r\n   */\r\n  addModel(model: ModelSpec): Promise<void> {\r\n    this.modelCache.register(model);\r\n\r\n    const activeStub = this.contextManager.activeKeyboard?.metadata;\r\n    if(activeStub && model.languages.indexOf(activeStub.langId) != -1) {\r\n      return this.refreshModel().then(() => { return; });\r\n    } else {\r\n      return Promise.resolve();\r\n    }\r\n  }\r\n\r\n  // 17.0: new!  Only used by apps utilizing app/webview and one app/browser test page.\r\n\r\n  /**\r\n   * Unregisters any previously-registered lexical model with a matching ID from Keyman Engine.\r\n   * If a keyboard with a matching language code is currently activated, it will also\r\n   * deactivate the model.\r\n   *\r\n   * @param modelId  The ID for the model to be deregistered and forgotten by Keyman Engine.\r\n   */\r\n  removeModel(modelId: string) {\r\n    this.modelCache.unregister(modelId);\r\n\r\n    // Is it the active model?\r\n    if(this.core.activeModel && this.core.activeModel.id == modelId) {\r\n      this.core.languageProcessor.unloadModel();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allow to change active keyboard by (internal) keyboard name\r\n   *\r\n   * @param       {string}    PInternalName   Internal name\r\n   * @param       {string}    PLgCode         Language code\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/setActiveKeyboard\r\n   */\r\n  public async setActiveKeyboard(keyboardId: string, languageCode?: string): Promise<boolean> {\r\n    return this.contextManager.activateKeyboard(keyboardId, languageCode, true);\r\n  }\r\n\r\n  /**\r\n   * Function     getActiveKeyboard\r\n   * Scope        Public\r\n   * @return      {string}      Name of active keyboard\r\n   * Description  Return internal name of currently active keyboard\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/getActiveKeyboard\r\n   */\r\n  public getActiveKeyboard(): string {\r\n    return this.contextManager.activeKeyboard?.metadata.id ?? '';\r\n  }\r\n\r\n  /**\r\n   * Function    getActiveLanguage\r\n   * Scope       Public\r\n   * @param      {boolean=}        true to retrieve full language name, false/undefined to retrieve code.\r\n   * @return     {string}         language code\r\n   * Description Return language code for currently selected language\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/getActiveLanguage\r\n   */\r\n  public getActiveLanguage(fullName?: boolean): string {\r\n    // In short... the activeStub.\r\n    const metadata = this.contextManager.activeKeyboard?.metadata;\r\n\r\n    if(!fullName) {\r\n      return metadata?.langId ?? '';\r\n    } else {\r\n      return metadata?.langName ?? '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     isChiral\r\n   * Scope        Public\r\n   * @param       {string|Object=}   k0\r\n   * @return      {boolean}\r\n   * Description  Tests if the active keyboard (or optional argument) uses chiral modifiers.\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/isChiral\r\n   */\r\n  public isChiral(k0?: string | Keyboard) {\r\n    let kbd: Keyboard;\r\n    if(k0) {\r\n      if(typeof k0 == 'string') {\r\n        const kbdObj = this.keyboardRequisitioner.cache.getKeyboard(k0);\r\n        if(!kbdObj) {\r\n          throw new Error(`Keyboard '${k0}' has not been loaded.`);\r\n        } else {\r\n          k0 = kbdObj;\r\n        }\r\n      }\r\n\r\n      kbd = k0;\r\n    } else {\r\n      kbd = this.core.activeKeyboard;\r\n    }\r\n    return kbd.isChiral;\r\n  }\r\n\r\n  /**\r\n   * Function     resetContext\r\n   * Scope        Public\r\n   * Description  Reverts the OSK to the default layer, clears any processing caches and modifier states,\r\n   *              and clears deadkeys and prediction-processing states on the active element (if it exists)\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/resetContext\r\n   */\r\n  public resetContext() {\r\n    this.contextManager.resetContext();\r\n  };\r\n\r\n  /**\r\n   * Function     setNumericLayer\r\n   * Scope        Public\r\n   * Description  Set OSK to numeric layer if it exists\r\n   */\r\n  setNumericLayer() {\r\n    this.core.keyboardProcessor.setNumericLayer(this.config.softDevice);\r\n  };\r\n}\r\n\r\n// Intent:  define common behaviors for both primary app types; each then subclasses & extends where needed.",
    "import { Keyboard, KeyboardProperties } from 'keyman/engine/keyboard';\r\nimport { createUnselectableElement } from 'keyman/engine/dom-utils';\r\n\r\n// Base class for a banner above the keyboard in the OSK\r\n\r\nexport abstract class Banner {\r\n  private _height: number; // pixels\r\n  private _width: number; // pixels\r\n  private div: HTMLDivElement;\r\n\r\n  public static DEFAULT_HEIGHT: number = 37; // pixels; embedded apps can modify\r\n\r\n  public static readonly BANNER_CLASS: string = 'kmw-banner-bar';\r\n  public static readonly BANNER_ID: string = 'kmw-banner-bar';\r\n\r\n  /**\r\n   * Function     height\r\n   * Scope        Public\r\n   * @returns     {number} height in pixels\r\n   * Description  Returns the height of the banner in pixels\r\n   */\r\n  public get height(): number {\r\n    return this._height;\r\n  }\r\n\r\n  /**\r\n   * Function     height\r\n   * Scope        Public\r\n   * @param       {number} height   the height in pixels\r\n   * Description  Sets the height of the banner in pixels. If a negative\r\n   *              height is given, set height to 0 pixels.\r\n   *              Also updates the banner styling.\r\n   */\r\n  public set height(height: number) {\r\n    this._height = (height > 0) ?  height : 0;\r\n    this.update();\r\n  }\r\n\r\n  public get width(): number {\r\n    return this._width;\r\n  }\r\n\r\n  public set width(width: number) {\r\n    this._width = width;\r\n    this.update();\r\n  }\r\n\r\n  /**\r\n   * Function      update\r\n   * @return       {boolean}   true if the banner styling changed\r\n   * Description   Update the height and display styling of the banner\r\n   */\r\n  protected update() : boolean {\r\n    let ds = this.div.style;\r\n    let currentHeightStyle = ds.height;\r\n    let currentDisplayStyle = ds.display;\r\n\r\n    if (this._height > 0) {\r\n      ds.height = this._height + 'px';\r\n      ds.display = 'block';\r\n    } else {\r\n      ds.height = '0px';\r\n      ds.display = 'none';\r\n    }\r\n\r\n    return (!(currentHeightStyle === ds.height) ||\r\n      !(currentDisplayStyle === ds.display));\r\n  }\r\n\r\n  public constructor(height?: number) {\r\n    let d = createUnselectableElement('div');\r\n    d.id = Banner.BANNER_ID;\r\n    d.className = Banner.BANNER_CLASS;\r\n    this.div = d;\r\n\r\n    this.height = height;\r\n    this.update();\r\n  }\r\n\r\n  public appendStyleSheet() {\r\n    // TODO: add stylesheets\r\n    // See VisualKeyboard's method + 'addFontStyle' for current handling.\r\n  }\r\n\r\n  /**\r\n   * Function     getDiv\r\n   * Scope        Public\r\n   * @returns     {HTMLElement} Base element of the banner\r\n   * Description  Returns the HTMLElement of the banner\r\n   */\r\n  public getDiv(): HTMLElement {\r\n    return this.div;\r\n  }\r\n\r\n  /**\r\n   * Allows banners to adapt based on the active keyboard and related properties, such as\r\n   * associated fonts.\r\n   * @param keyboard\r\n   * @param keyboardProperties\r\n   */\r\n  public configureForKeyboard(keyboard: Keyboard, keyboardProperties: KeyboardProperties) { }\r\n\r\n  public readonly refreshLayout?: () => void;\r\n\r\n  abstract get type(): string;\r\n\r\n  public shutdown() { };\r\n}\r\n",
    "export interface LengthStyle {\r\n  val: number,\r\n  absolute: boolean,\r\n  special?: 'em' | 'rem';\r\n};\r\n\r\nexport class ParsedLengthStyle implements LengthStyle {\r\n  public readonly val: number;\r\n  public readonly absolute: boolean;\r\n  public readonly special: 'em' | 'rem';\r\n\r\n  public constructor(style: LengthStyle | string) {\r\n    let parsed: LengthStyle = (typeof style == 'string') ? ParsedLengthStyle.parseLengthStyle(style) : style;\r\n\r\n    // While Object.assign would be nice (and previously, was used), it will break\r\n    // on old but still supported versions of Android if their Chrome isn't updated.\r\n    // Requires mobile Chrome 45+, but API 21 (5.0) launches with an older browser.\r\n\r\n    // Object.assign(this, parsed);\r\n    this.val = parsed.val;\r\n    this.absolute = parsed.absolute;\r\n    if(parsed.special) {\r\n      this.special = parsed.special;\r\n    }\r\n  }\r\n\r\n  public get styleString(): string {\r\n    if(this.absolute) {\r\n      return this.val + 'px';\r\n    } else if(this.special) {\r\n      // Only 'em' and 'rem' are allowed, and both may be treated similarly.\r\n      // Both relate to font sizes, though the path to the reference element\r\n      // differs between them.\r\n      return this.val + this.special;\r\n    } else {\r\n      return (this.val * 100) + '%';\r\n    }\r\n  }\r\n\r\n  public scaledBy(scalar: number): ParsedLengthStyle {\r\n    return new ParsedLengthStyle({\r\n      val: scalar * this.val,\r\n      absolute: this.absolute\r\n    });\r\n  }\r\n\r\n  public static inPixels(val: number): ParsedLengthStyle {\r\n    return new ParsedLengthStyle({val: val, absolute: true});\r\n  }\r\n\r\n  public static inPercent(val: number): ParsedLengthStyle {\r\n    return new ParsedLengthStyle({val: val/100, absolute: false});\r\n  }\r\n\r\n  public static forScalar(val: number): ParsedLengthStyle {\r\n    return new ParsedLengthStyle({val: val, absolute: false});\r\n  }\r\n\r\n  public static special(val: number, suffix: 'em' | 'rem'): ParsedLengthStyle {\r\n    return new ParsedLengthStyle({val: val, absolute: false, special: suffix});\r\n  }\r\n\r\n  private static parseLengthStyle(spec: string): LengthStyle {\r\n    if(spec == '') {\r\n      return CONSTANT_STYLE;\r\n    }\r\n\r\n    const val = parseFloat(spec);\r\n\r\n    if(isNaN(val)) {\r\n      // Cannot parse.\r\n      console.error(\"Could not properly parse specified length style info: '\" + spec + \"'.\");\r\n      return CONSTANT_STYLE;\r\n    }\r\n\r\n    return spec.indexOf('px') != -1 ? {val: val, absolute: true} :\r\n      // 16 px ~= 12 pt.\r\n      // Reference: https://kyleschaeffer.com/css-font-size-em-vs-px-vs-pt-vs-percent\r\n      spec.indexOf('pt') != -1 ? {val: (4 * val / 3), absolute: true} :\r\n      spec.indexOf('%') != -1 ? {val: val/100, absolute: false} :\r\n      spec.indexOf('rem') != -1 ? {val: val, absolute: false, special: 'rem'} :\r\n      spec.indexOf('em') != -1 ?  {val: val, absolute: false, special: 'em'} :\r\n      // At this point, assuming either Number or number in a string without units\r\n      // Note:  this one is NOT natively handled by browsers!\r\n      //        We'll treat it as if it were 'pt', since that's likely the user's\r\n      //        most familiar font size unit.\r\n      {val: (4 * val / 3), absolute: true};\r\n  }\r\n}\r\n\r\nconst CONSTANT_STYLE = new ParsedLengthStyle('1em');",
    "import { Banner } from \"./banner.js\";\r\n\r\n/**\r\n * Function       BlankBanner\r\n * Description    A banner of height 0 that should not be shown\r\n */\r\nexport class BlankBanner extends Banner {\r\n  readonly type = 'blank';\r\n\r\n  constructor() {\r\n    super(0);\r\n  }\r\n}",
    "import { EventEmitter } from 'eventemitter3';\r\n\r\nimport { createUnselectableElement } from 'keyman/engine/dom-utils';\r\n\r\nimport { Banner } from './banner.js';\r\nimport OSKViewComponent from '../components/oskViewComponent.interface.js';\r\nimport { ParsedLengthStyle } from '../lengthStyle.js';\r\nimport { BlankBanner } from './blankBanner.js';\r\n\r\n/**\r\n * This object is used to specify options by both `BannerManager.getOptions`\r\n * and `BannerManager.setOptions`.  Refer to the latter for specification of\r\n * each field.\r\n */\r\nexport interface BannerOptions {\r\n  alwaysShow?: boolean;\r\n  imagePath?: string;\r\n}\r\n\r\nexport type BannerType = \"blank\" | \"image\" | \"suggestion\" | \"html\";\r\n\r\ninterface BannerViewEventMap {\r\n  'bannerchange': () => void;\r\n}\r\n\r\n/**\r\n * The `BannerView` module is designed to serve as the hot-swap container for the\r\n * different `Banner` types, helping KMW to avoid needless DOM element shuffling.\r\n */\r\nexport class BannerView implements OSKViewComponent {\r\n  private bannerContainer: HTMLDivElement;\r\n\r\n  /**\r\n   * The currently active banner.\r\n   */\r\n  private currentBanner: Banner;\r\n  private _activeBannerHeight: number = Banner.DEFAULT_HEIGHT;\r\n\r\n  public readonly events = new EventEmitter<BannerViewEventMap>();\r\n\r\n  constructor() {\r\n    // Step 1 - establish the container element.  Must come before this.setOptions.\r\n    this.constructContainer();\r\n  }\r\n\r\n  /**\r\n   * Constructs the <div> element used to contain hot-swapped `Banner` instances.\r\n   */\r\n  private constructContainer(): HTMLDivElement {\r\n    let d = createUnselectableElement('div');\r\n    d.id = \"keymanweb_banner_container\";\r\n    d.className = \"kmw-banner-container\";\r\n    return this.bannerContainer = d;\r\n  }\r\n\r\n  /**\r\n   * Returns the `Banner`-containing div element used to facilitate hot-swapping.\r\n   */\r\n  public get element(): HTMLDivElement {\r\n    return this.bannerContainer;\r\n  }\r\n\r\n  /**\r\n   * Applies any stylesheets needed by specific `Banner` instances.\r\n   */\r\n  public appendStyles() {\r\n    if(this.currentBanner) {\r\n      this.currentBanner.appendStyleSheet();\r\n    }\r\n  }\r\n\r\n  public get banner(): Banner {\r\n    return this.currentBanner;\r\n  }\r\n\r\n  /**\r\n   * The `Banner` actively being displayed to the user in the OSK's current state,\r\n   * whether a `SuggestionBanner` (with predictive-text active) or a different\r\n   * type for use when the predictive-text engine is inactive.\r\n   */\r\n  public set banner(banner: Banner) {\r\n    if(this.currentBanner) {\r\n      if(banner == this.currentBanner) {\r\n        return;\r\n      } else {\r\n        let prevBanner = this.currentBanner;\r\n        this.currentBanner = banner;\r\n        this.bannerContainer.replaceChild(banner.getDiv(), prevBanner.getDiv());\r\n        prevBanner.shutdown();\r\n      }\r\n    } else {\r\n      this.currentBanner = banner;\r\n      if(banner) {\r\n        this.bannerContainer.appendChild(banner.getDiv());\r\n      }\r\n    }\r\n\r\n    if(!(banner instanceof BlankBanner)) {\r\n      banner.height = this.activeBannerHeight;\r\n    }\r\n\r\n    this.events.emit('bannerchange');\r\n  }\r\n\r\n  /**\r\n   * Gets the height (in pixels) of the active `Banner` instance.\r\n   */\r\n  public get height(): number {\r\n    if(this.currentBanner) {\r\n      return this.currentBanner.height;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  public get activeBannerHeight(): number {\r\n    return this._activeBannerHeight;\r\n  }\r\n\r\n  /**\r\n   * Sets the height (in pixels) of the active 'Banner' instance.\r\n   */\r\n  public set activeBannerHeight(h: number) {\r\n    this._activeBannerHeight = h;\r\n\r\n    if (this.currentBanner && !(this.currentBanner instanceof BlankBanner)) {\r\n      this.currentBanner.height = h;\r\n    }\r\n  }\r\n\r\n  public get layoutHeight(): ParsedLengthStyle {\r\n    return ParsedLengthStyle.inPixels(this.height);\r\n  }\r\n\r\n  public get width(): number | undefined {\r\n    return this.currentBanner?.width;\r\n  }\r\n\r\n  public set width(w: number) {\r\n    if(this.currentBanner) {\r\n      this.currentBanner.width = w;\r\n    }\r\n  }\r\n\r\n  public refreshLayout() {\r\n    this.currentBanner.refreshLayout?.();\r\n  }\r\n}",
    "import { Banner } from \"./banner.js\";\r\n\r\n/**\r\n * Function       ImageBanner\r\n * @param         {string}        imagePath   Path of image to display in the banner\r\n * @param         {number}        height      If provided, the height of the banner in pixels\r\n * Description    Display an image in the banner\r\n */\r\nexport class ImageBanner extends Banner {\r\n  private img: HTMLElement;\r\n  readonly type;\r\n\r\n  constructor(imagePath: string, height?: number) {\r\n    if (imagePath.length > 0) {\r\n      super();\r\n      if (height) {\r\n        this.height = height;\r\n      }\r\n    } else {\r\n      super(0);\r\n    }\r\n\r\n    this.type = 'image';\r\n\r\n    if(imagePath.indexOf('base64') >=0) {\r\n      console.log(\"Loading img from base64 data\");\r\n    } else {\r\n      console.log(\"Loading img with src '\" + imagePath + \"'\");\r\n    }\r\n    this.img = document.createElement('img');\r\n    this.img.setAttribute('src', imagePath);\r\n    let ds = this.img.style;\r\n\r\n    // We may want to eliminate the width-spec in the future, once we're sure of\r\n    // no unintended side-effects for iOS's use of this banner.\r\n    //\r\n    // Maybe if/when we also add a style=\"background-color: #xxx\" option.\r\n    ds.width = '100%';\r\n    ds.height = '100%';\r\n    this.getDiv().appendChild(this.img);\r\n    console.log(\"Image loaded.\");\r\n  }\r\n\r\n  /**\r\n   * Function     setImagePath\r\n   * Scope        Public\r\n   * @param       {string}     imagePath   Path of image to display in the banner\r\n   * Description  Update the image in the banner\r\n   */\r\n  public setImagePath(imagePath: string) {\r\n    if (this.img) {\r\n      this.img.setAttribute('src', imagePath);\r\n    }\r\n  }\r\n}",
    "export function reportError(baseMsg: string, err: Error) {\r\n  // Our mobile-app Sentry logging will listen for this and log it.\r\n  if(err instanceof Error) {\r\n    console.error(`${baseMsg}: ${err.message}\\n\\n${err.stack}`);\r\n  } else {\r\n    console.error(baseMsg);\r\n    console.error(err);\r\n  }\r\n}",
    "import { timedPromise } from \"@keymanapp/web-utils\";\r\nimport { reportError } from \"../reportError.js\";\r\n\r\nexport type QueueClosure = () => (Promise<any> | void);\r\n\r\n/**\r\n  This class is modeled somewhat after Swift's `DispatchQueue` class, but with\r\n  the twist that each closure may return a `Promise` (in Swift: a `Future`) to\r\n  lock out further closure processing until the `Promise` resolves.\r\n*/\r\nexport class AsyncClosureDispatchQueue {\r\n  private queue: QueueClosure[];\r\n  private waitLock: Promise<any>;\r\n  private defaultWaitFactory: () => Promise<any>;\r\n\r\n  /**\r\n   *\r\n   * @param defaultWaitFactory A factory returning Promises to use for default\r\n   * delays between tasks.  If not specified, Promises corresponding to\r\n   * setTimeout(0) will be used, allowing the microqueue task to flush between\r\n   * tasks.\r\n   */\r\n  constructor(defaultWaitFactory?: () => Promise<any>) {\r\n    // We only need to trigger events if the queue has no prior entries and there isn't an\r\n    // active wait-lock; for the latter, we'll auto-trigger the next function when it unlocks.\r\n    this.queue = [];\r\n\r\n    this.defaultWaitFactory = defaultWaitFactory || (() => { return timedPromise(0) });\r\n  }\r\n\r\n  get defaultWait() {\r\n    return this.defaultWaitFactory();\r\n  }\r\n\r\n  get ready() {\r\n    return this.queue.length == 0 && !this.waitLock;\r\n  }\r\n\r\n  private async triggerNextClosure() {\r\n    if(this.queue.length == 0) {\r\n      return;\r\n    }\r\n\r\n    const functor = this.queue.shift();\r\n\r\n    // A stand-in so that `ready` doesn't report true while the closure runs.\r\n    this.waitLock = Promise.resolve();\r\n\r\n    /*\r\n      It is imperative that any errors triggered by the functor do not prevent this method from setting\r\n      the wait lock that will trigger the following event (if it exists).  Failure to do so will\r\n      result in all further queued closures never getting the opportunity to run!\r\n    */\r\n    let result: undefined | Promise<any>;\r\n    try {\r\n      // Is either undefined (return type: void) or is a Promise.\r\n      result = functor() as undefined | Promise<any>;\r\n      /* c8 ignore start */\r\n    } catch (err) {\r\n      reportError('Error from queued closure', err);\r\n    }\r\n    /* c8 ignore end */\r\n\r\n    /*\r\n      Replace the stand-in with the _true_ post-closure wait.\r\n\r\n      If the closure returns a Promise, the implication is that the further processing of queued\r\n      functions should be blocked until that Promise is fulfilled.\r\n\r\n      If not, we just add a default delay.\r\n    */\r\n    result = result ?? this.defaultWaitFactory();\r\n    this.waitLock = result;\r\n\r\n    try {\r\n      await result;\r\n    } catch(err) {\r\n      reportError('Async error from queued closure', err);\r\n    }\r\n\r\n    this.waitLock = null;\r\n    // if queue is length zero, auto-returns.\r\n    this.triggerNextClosure();\r\n  }\r\n\r\n  runAsync(closure: QueueClosure) {\r\n    // Check before putting the closure on the internal queue; the check is based in part\r\n    // upon the existing queue length.\r\n    const isReady = this.ready;\r\n\r\n    this.queue.push(closure);\r\n\r\n    // If `!isReady`, the next closure will automatically be triggered when possible.\r\n    if(isReady) {\r\n      this.triggerNextClosure();\r\n    }\r\n  }\r\n}",
    "/**\r\n * We want these to be readily and safely converted to and from\r\n * JSON (for unit test use and development)\r\n */\r\nexport interface InputSample<Type, StateToken = any> {\r\n  /**\r\n   * Represents the x-coordinate of the input sample\r\n   * in 'client' / viewport coordinates.\r\n   */\r\n  readonly clientX?: number;\r\n\r\n  /**\r\n   * Represents the x-coordinate of the input sample in\r\n   * coordinates relative to the recognizer's `targetRoot`.\r\n   */\r\n  readonly targetX: number;\r\n\r\n  /**\r\n   * Represents the y-coordinate of the input sample\r\n   * in 'client' / viewport coordinates.\r\n   */\r\n  readonly clientY?: number;\r\n\r\n  /**\r\n   * Represents the y-coordinate of the input sample in\r\n   * coordinates relative to the recognizer's `targetRoot`.\r\n   */\r\n  readonly targetY: number;\r\n\r\n  /**\r\n   * Represents the timestamp at which the input was observed\r\n   * (in ms)\r\n   */\r\n  readonly t: number;\r\n\r\n  // The following two are intentionally _not_ readonly; `stateToken`, in particular,\r\n  // may need modification by specific gesture-model implementations.\r\n\r\n  /**\r\n   * The UI/UX 'item' underneath the touchpoint for this sample.\r\n   */\r\n  item?: Type;\r\n\r\n  /**\r\n   * A token identifying the state of the consuming system associated\r\n   * with this sample's `GestureSource`, if any such association exists.\r\n   */\r\n  stateToken?: StateToken\r\n}\r\n\r\nexport type InputSampleSequence<Type, StateToken> = InputSample<Type, StateToken>[];\r\n\r\nexport function isAnInputSample<Type, StateToken>(obj: any): obj is InputSample<Type, StateToken> {\r\n  return 'targetX' in obj && 'targetY' in obj && 't' in obj;\r\n}",
    "import { InputSample, isAnInputSample } from \"./inputSample.js\";\r\n\r\n/**\r\n * Denotes one dimension utilized by touchpath input coordinates - 'x' and y' for space,\r\n * 't' for time.\r\n */\r\nexport type PathCoordAxis = 'x' | 'y' | 't';\r\n\r\n/**\r\n * Denotes a pair of dimensions utilized by touchpath input coordinates.  The two axes\r\n * (see `PathCoordAxis`) must be specified in alphabetical order.\r\n */\r\nexport type PathCoordAxisPair = 'tx' | 'ty' | 'xy';\r\n\r\n/**\r\n * Denotes one dimension or feature (velocity) that this class tracks statistics for.\r\n *\r\n * Sine and Cosine stats are currently excluded due to their necessary lack of statistical\r\n * independence.\r\n */\r\ntype StatAxis = PathCoordAxis;\r\n\r\n/**\r\n * As the name suggests, this class facilitates tracking of cumulative mathematical values, etc\r\n * useful for interpretation of a contact point's path as it relates to gestures.\r\n *\r\n * Instances of this class may be considered immutable externally.\r\n *\r\n * A subclass with properties useful for path segmentation: `RegressiblePathStats`.\r\n */\r\nexport class CumulativePathStats<Type = any> {\r\n  protected rawLinearSums  = {'x': 0, 'y': 0, 't': 0};\r\n\r\n  // Handles raw-distance stuff.\r\n  private coordArcSum: number = 0;\r\n\r\n  /**\r\n   * The base sample used to transpose all other received samples.  Use of this helps\r\n   * avoid potential \"catastrophic cancellation\" effects that can occur when diffing\r\n   * two numbers far from the sample-space's mathematical origin.\r\n   *\r\n   * Refer to https://en.wikipedia.org/wiki/Catastrophic_cancellation.\r\n   */\r\n  protected baseSample?: InputSample<Type>;\r\n\r\n  /**\r\n   * The initial sample included by this instance's computed stats.  Needed for\r\n   * the 'directness' properties.\r\n   */\r\n  private _initialSample?: InputSample<Type>;\r\n\r\n  private _lastSample?: InputSample<Type>;\r\n  protected followingSample?: InputSample<Type>;\r\n  private _sampleCount = 0;\r\n\r\n  constructor();\r\n  constructor(sample: InputSample<Type>);\r\n  constructor(instance: CumulativePathStats<Type>);\r\n  constructor(obj?: InputSample<Type> | CumulativePathStats<Type>)\r\n  constructor(obj?: InputSample<Type> | CumulativePathStats<Type>) {\r\n    if(!obj) {\r\n      return;\r\n    }\r\n\r\n    // Will worry about JSON form later.\r\n    if(obj instanceof CumulativePathStats) {\r\n      Object.assign(this, obj);\r\n\r\n      this.rawLinearSums = {...obj.rawLinearSums};\r\n    } else if(isAnInputSample(obj)) {\r\n      Object.assign(this, this.extend(obj));\r\n      /* c8 ignore next 3 */\r\n    } else {\r\n      throw new Error(\"A constructor for this input pattern has not yet been implemented\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Statistically \"observes\" a new sample point on the touchpath, accumulating values\r\n   * useful for provision of relevant statistical properties.\r\n   * @param sample A newly-sampled point on the touchpath.\r\n   * @returns A new, separate instance for the cumulative properties up to the\r\n   *          newly-sampled point.\r\n   */\r\n  public extend(sample: InputSample<any>): CumulativePathStats<Type> {\r\n    return this._extend(new CumulativePathStats(this), sample);\r\n  }\r\n\r\n  // Pattern exists to facilitate subclasses if needed in the future:  see #11079 and #11080.\r\n  protected _extend(result: CumulativePathStats<Type>, sample: InputSample<any>) {\r\n    if(!result._initialSample) {\r\n      result._initialSample = sample;\r\n      result.baseSample = sample;\r\n    }\r\n\r\n    const baseSample = result.baseSample;\r\n\r\n    // Set _after_ deep-copying this for the result.\r\n    this.followingSample = sample;\r\n\r\n    // Helps prevent \"catastrophic cancellation\" issues from floating-point computation\r\n    // for these statistical properties and properties based upon them.\r\n    const x = sample.targetX - baseSample.targetX;\r\n    const y = sample.targetY - baseSample.targetY;\r\n    const t = sample.t - baseSample.t;\r\n\r\n    result.rawLinearSums.x += x;\r\n    result.rawLinearSums.y += y;\r\n    result.rawLinearSums.t += t;\r\n\r\n    if(this.lastSample) {\r\n      // arc length stuff!\r\n      const xDelta = sample.targetX - this.lastSample.targetX;\r\n      const yDelta = sample.targetY - this.lastSample.targetY;\r\n\r\n      const coordArcDeltaSq = xDelta * xDelta + yDelta * yDelta;\r\n      const coordArcDelta = Math.sqrt(coordArcDeltaSq);\r\n\r\n      result.coordArcSum     += coordArcDelta;\r\n    }\r\n\r\n    result._lastSample = sample;\r\n    result.sampleCount = this.sampleCount + 1;\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * \"De-accumulates\" currently-accumulated values corresponding to the specified\r\n   * subset, which should represent an earlier, previously-observed part of the path.\r\n   * @param subsetStats The accumulated stats for the part of the path being removed\r\n   *                    from this instance's current accumulation.\r\n   * @returns\r\n   */\r\n  public deaccumulate(subsetStats?: CumulativePathStats<Type>): CumulativePathStats<Type> {\r\n    const result = new CumulativePathStats(this);\r\n\r\n    return this._deaccumulate(result, subsetStats);\r\n  }\r\n\r\n  protected _deaccumulate(result: CumulativePathStats<Type>, subsetStats?: CumulativePathStats<Type>): CumulativePathStats<Type> {\r\n    // Possible addition:  use `this.buildRenormalized` on the returned version\r\n    // if catastrophic cancellation effects (random, small floating point errors)\r\n    // are not sufficiently mitigated & handled by the measures currently in place.\r\n    //\r\n    // Even then, we'd need to apply such generated objects carefully - we can't\r\n    // re-merge the accumulated values or remap them to their old coordinate system\r\n    // afterward.`buildRenormalize`'s remapping maneuver is a one-way stats-abuse trick.\r\n    //\r\n    // Hint: we'd need to pay attention to the \"lingering segments\" aspects in which\r\n    // detected sub-segments might be \"re-merged\".\r\n    // - Whenever they're merged & cleared, we should be clear to recentralize\r\n    //   the cumulative stats that follow.  If any are still active, we can't\r\n    //   recentralize.\r\n\r\n    // We actually WILL accept a `null` argument; makes some of the segmentation\r\n    // logic simpler.\r\n    if(!subsetStats) {\r\n      return result;\r\n    }\r\n\r\n    /* c8 ignore next 3 */\r\n    if(!subsetStats.followingSample || !subsetStats.lastSample) {\r\n      throw 'Invalid argument:  stats missing necessary tracking variable.';\r\n    }\r\n\r\n    for(let dim in result.rawLinearSums) {\r\n      // TS refuses to infer beyond 'string' in a `let... in` construct; we can't\r\n      // even assert it directly on `dim` via declaring it early!\r\n      const d = dim as PathCoordAxis;\r\n      result.rawLinearSums[d] -= subsetStats.rawLinearSums[d];\r\n    }\r\n\r\n    // arc length stuff!\r\n    if(subsetStats.followingSample && subsetStats.lastSample) {\r\n      const xDelta = subsetStats.followingSample.targetX - subsetStats.lastSample.targetX;\r\n      const yDelta = subsetStats.followingSample.targetY - subsetStats.lastSample.targetY;\r\n\r\n      const coordArcDeltaSq = xDelta * xDelta + yDelta * yDelta;\r\n      const coordArcDelta = Math.sqrt(coordArcDeltaSq);\r\n\r\n      // Due to how arc length stuff gets segmented.\r\n      // There's the arc length within the prefix subset (operand 2 below) AND the part connecting it to the\r\n      // 'remaining' subset (operand 1 below) before the portion wholly within what remains (the result)\r\n      result.coordArcSum     -= coordArcDelta;\r\n      result.coordArcSum     -= subsetStats.coordArcSum;\r\n    }\r\n\r\n    result.sampleCount -= subsetStats.sampleCount;\r\n\r\n    // NOTE: baseSample MUST REMAIN THE SAME.  All math is based on the corresponding diff.\r\n    // Though... very long touchpoint interactions could start being affected by that \"catastrophic\r\n    // cancellation\" effect without further adjustment.  (If it matters, we'll get to that later.)\r\n    // But _probably_ not; we don't go far beyond a couple of orders of magnitude from the origin in\r\n    // ANY case except the timestamp (.t) - and even then, not far from the baseSample's timestamp value.\r\n\r\n    // initialSample, though, we need to update b/c of the 'directness' properties.\r\n    result._initialSample = subsetStats.followingSample;\r\n\r\n    return result;\r\n  }\r\n\r\n  public translateCoordSystem(functor: (sample: InputSample<Type>) => InputSample<Type>): CumulativePathStats<Type> {\r\n    const result = new CumulativePathStats(this);\r\n\r\n    return this._translateCoordSystem(result, functor);\r\n  }\r\n\r\n  protected _translateCoordSystem(result: CumulativePathStats<Type>, functor: (sample: InputSample<Type>) => InputSample<Type>): CumulativePathStats<Type> {\r\n    if(this.sampleCount == 0) {\r\n      return result;\r\n    }\r\n\r\n    const singleSample = result.initialSample == result.lastSample;\r\n\r\n    result._initialSample = functor(result.initialSample);\r\n    result.baseSample = functor(result.baseSample);\r\n    result._lastSample = singleSample ? result._initialSample : functor(result.lastSample);\r\n\r\n    return result;\r\n  }\r\n\r\n  public replaceInitialSample(sample: InputSample<Type>): CumulativePathStats<Type> {\r\n    let result = new CumulativePathStats(this);\r\n\r\n    return this._replaceInitialSample(result, sample);\r\n  }\r\n\r\n  protected _replaceInitialSample(result: CumulativePathStats<Type>, sample: InputSample<Type>) {\r\n    // if stats length == 0 or length == 1, is ezpz.  Could 'shortcut' things here.\r\n    if(this.sampleCount == 0) {\r\n      // Note:  if this error actually causes problems, 'silently failing' the call\r\n      // by insta-returning should be \"fine\" as far as actual gesture processing goes.\r\n      throw new Error(\"no sample available to replace\");\r\n      // return;\r\n    }\r\n\r\n    // Re: the block above... obviously, don't replace if there IS no initial sample yet.\r\n    // It'll happen soon enough anyway.\r\n    const originalSample = result.initialSample;\r\n    result._initialSample = sample;\r\n\r\n    if(this.sampleCount > 1) {\r\n      // Works fine re: cata-cancellation - `this.baseSample.___` cancels out.\r\n      const xDelta = sample.targetX - originalSample.targetX;\r\n      const yDelta = sample.targetY - originalSample.targetY;\r\n      const tDelta = sample.t       - originalSample.t;\r\n\r\n      result.rawLinearSums.x += xDelta;\r\n      result.rawLinearSums.y += yDelta;\r\n      result.rawLinearSums.t += tDelta;\r\n\r\n      /*\r\n       * `rawDistance` tracking.  Note:  this is kind of an approximation, as\r\n       * we aren't getting the true distance between the new first and the original\r\n       * second point.  But... it should be \"good enough\".\r\n       *\r\n       * If need be, we could always track \"second sample\" to be more precise about things\r\n       * here, though that would add a bit more logic overhead at low sample counts.\r\n       * (Note the logic interactions inherent in firstSample, secondSample, and lastSample.)\r\n       *\r\n       * This concern should be a low-priority detail for now - at the time of writing,\r\n       * rawDistance is currently only used by KeymanWeb for longpress up-flick thresholding,\r\n       * and that codepath doesn't do path-start rewriting.\r\n       */\r\n      const coordArcDeltaSq = xDelta * xDelta + yDelta * yDelta;\r\n      const coordArcDelta = Math.sqrt(coordArcDeltaSq);\r\n\r\n      result.coordArcSum     += coordArcDelta;\r\n    } else {\r\n      result._lastSample = sample;\r\n    }\r\n\r\n    // Do NOT change sampleCount; we're replacing the original.\r\n    return result;\r\n  }\r\n\r\n  public get lastSample() {\r\n    return this._lastSample;\r\n  }\r\n\r\n  public get lastTimestamp(): number {\r\n    return this.lastSample?.t;\r\n  }\r\n\r\n  public get sampleCount() {\r\n    return this._sampleCount;\r\n  }\r\n\r\n  private set sampleCount(value: number) {\r\n    this._sampleCount = value;\r\n  }\r\n\r\n  public get initialSample() {\r\n    return this._initialSample;\r\n  }\r\n\r\n  /**\r\n   * In order to mitigate the accumulation of small floating-point errors during the\r\n   * various accumulations performed by this class, the domain of incoming values\r\n   * is remapped near to the origin via axis-specific mapping constants.\r\n   * @param dim\r\n   * @returns\r\n   */\r\n  protected mappingConstant(dim: StatAxis) {\r\n    if(!this.baseSample) {\r\n      return undefined;\r\n    }\r\n\r\n    if(dim == 't') {\r\n      return this.baseSample.t;\r\n    } else if(dim == 'x') {\r\n      return this.baseSample.targetX;\r\n    } else if(dim == 'y') {\r\n      return this.baseSample.targetY;\r\n    } else {\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the statistical mean value of the samples observed during the represented\r\n   * interval on the specified axis.\r\n   * @param dim\r\n   * @returns\r\n   */\r\n  public mean(dim: StatAxis) {\r\n    // This external-facing version needs to provide values in 'external'-friendly\r\n    // coordinate space.\r\n    return this.rawLinearSums[dim] / this.sampleCount + this.mappingConstant(dim);\r\n  }\r\n\r\n  /**\r\n   * Provides the direct Euclidean distance between the start and end points of the segment\r\n   * (or curve) of the interval represented by this instance.\r\n   *\r\n   * This will likely not match the actual pixel distance traveled.\r\n   */\r\n  public get netDistance() {\r\n    // No issue with a net distance of 0 due to a single point.\r\n    if(!this.lastSample || !this.initialSample) {\r\n      return 0;\r\n    }\r\n\r\n    const xDelta = this.lastSample.targetX - this.initialSample.targetX;\r\n    const yDelta = this.lastSample.targetY - this.initialSample.targetY;\r\n\r\n    return Math.sqrt(xDelta * xDelta + yDelta * yDelta);\r\n  }\r\n\r\n  /**\r\n   * Gets the duration of the represented interval in milliseconds.\r\n   */\r\n  public get duration() {\r\n    // no issue with a duration of zero from just one sample.\r\n    if(!this.lastSample || !this.initialSample) {\r\n      return 0;\r\n    }\r\n    return (this.lastSample.t - this.initialSample.t);\r\n  }\r\n\r\n  /**\r\n   * Returns the angle (in radians) traveled by the corresponding segment clockwise\r\n   * from the unit vector <0, -1> in the DOM (the unit \"upward\" direction).\r\n   */\r\n  public get angle() {\r\n    if(this.sampleCount == 1 || !this.lastSample || !this.initialSample) {\r\n      return undefined;\r\n    } else if(this.netDistance < 1) {\r\n      // < 1 px, thus sub-pixel, means we have nothing relevant enough to base an angle on.\r\n      return undefined;\r\n    }\r\n\r\n    const xDelta = this.lastSample.targetX - this.initialSample.targetX;\r\n    const yDelta = this.lastSample.targetY - this.initialSample.targetY;\r\n    const yAngleDiff = Math.acos(-yDelta / this.netDistance);\r\n\r\n    return xDelta < 0 ? (2 * Math.PI - yAngleDiff) : yAngleDiff;\r\n  }\r\n\r\n  /**\r\n   * Returns the angle (in degrees) traveled by the corresponding segment clockwise\r\n   * from the unit vector <0, -1> in the DOM (the unit \"upward\" direction).\r\n   */\r\n  public get angleInDegrees() {\r\n    return this.angle * 180 / Math.PI;\r\n  }\r\n\r\n  /**\r\n   * Returns the cardinal or intercardinal direction on the screen that most\r\n   * closely matches the direction of movement represented by the represented\r\n   * segment.\r\n   *\r\n   * @return A string one or two letters in length (e.g:  'n', 'sw'), or\r\n             `undefined` if not enough data to determine a direction.\r\n    */\r\n  public get cardinalDirection() {\r\n    if(this.sampleCount == 1 || !this.lastSample || !this.initialSample) {\r\n      return undefined;\r\n    }\r\n\r\n    if(isNaN(this.angle) || this.angle === null || this.angle === undefined) {\r\n      return undefined;\r\n    }\r\n\r\n    const buckets = ['n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw', 'n'];\r\n\r\n    // We could be 'more efficient' and use radians here instead, but this\r\n    // version helps a bit more with easy maintainability.\r\n    const bucketIndex = Math.ceil((this.angleInDegrees - 22.5)/45);\r\n    return buckets[bucketIndex];\r\n  }\r\n\r\n  /**\r\n   * Measured in pixels per second.\r\n   * @return a speed in pixels per millisecond.  May be 0 if no movement was observed\r\n   * among the samples.\r\n   */\r\n  public get speed() {\r\n    return this.duration ? this.netDistance / this.duration : 0;\r\n  }\r\n\r\n  /**\r\n   * Provides the actual, pixel-based distance actually traveled by the represented segment.\r\n   * May not be an integer (because diagonals are a thing).\r\n   */\r\n  public get rawDistance() {\r\n    return this.coordArcSum;\r\n  }\r\n\r\n  /* c8 ignore start */\r\n  /**\r\n   * Provides a JSON.stringify()-friendly object with the properties most useful for\r\n   * debugger-based inspection and/or console-logging statements.\r\n   */\r\n  public toJSON() {\r\n    return {\r\n      angle: this.angle,\r\n      cardinal: this.cardinalDirection,\r\n      netDistance: this.netDistance,\r\n      duration: this.duration,\r\n      sampleCount: this.sampleCount,\r\n      rawDistance: this.rawDistance\r\n    }\r\n  }\r\n  /* c8 ignore end */\r\n}",
    "import * as gestures from \"../index.js\";\r\n\r\nexport interface GestureModelDefs<Type, StateToken = any> {\r\n  /**\r\n   * The full set of gesture models to be utilized by the gesture-recognition engine.\r\n   */\r\n  gestures: gestures.specs.GestureModel<Type, StateToken>[],\r\n\r\n  /**\r\n   * Sets _of sets_ of gesture models accessible as initial gesture stages while\r\n   * within various states of the gesture-engine.\r\n   *\r\n   * `'default'` must be specified, as it is the default state.\r\n   *\r\n   * A 'chain'-type model resolution has the option to specify a `selectionMode` property;\r\n   * the value set there will activate a different gesture-recognition mode _for new\r\n   * gestures_ corresponding to the sets specified here.\r\n   *\r\n   * These sets may be defined to either restrict the range of options for new incoming\r\n   * gestures or to restrict them.  Specifying an empty set will disable all incoming\r\n   * gestures while the alternate state is active, allowing one gesture to block any\r\n   * further gestures from starting until it is completed.\r\n   */\r\n  sets: {\r\n    default: string[],\r\n  } & Record<string, string[]>;\r\n}\r\n\r\n\r\nexport function getGestureModel<Type, StateToken>(defs: GestureModelDefs<Type, StateToken>, id: string): gestures.specs.GestureModel<Type, StateToken> {\r\n  const result = defs.gestures.find((spec) => spec.id == id);\r\n  if(!result) {\r\n    throw new Error(`Could not find spec for gesture with id '${id}'`);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function getGestureModelSet<Type, StateToken>(defs: GestureModelDefs<Type, StateToken>, id: string): gestures.specs.GestureModel<Type, StateToken>[] {\r\n  let idSet = defs.sets[id];\r\n  if(!idSet) {\r\n    throw new Error(`Could not find a defined gesture-set with id '${id}'`);\r\n  }\r\n\r\n  const set = defs.gestures.filter((spec) => !!idSet.find((id) => spec.id == id));\r\n  const missing = idSet.filter((id) => !set.find((spec) => spec.id == id));\r\n\r\n  if(missing.length > 0) {\r\n    throw new Error(`Set '${id}' cannot find definitions for gestures with ids ${missing}`);\r\n  }\r\n\r\n  return set;\r\n}\r\n\r\nexport const EMPTY_GESTURE_DEFS = {\r\n  gestures: [\r\n  ],\r\n  sets: {\r\n    default: []\r\n  }\r\n} as GestureModelDefs<any, any>\r\n",
    "import { RecognitionZoneSource } from \"./recognitionZoneSource.js\";\r\n\r\nexport class ViewportZoneSource implements RecognitionZoneSource {\r\n  constructor() {}\r\n\r\n  getBoundingClientRect(): DOMRect {\r\n    // Viewport dimension detection is based on https://stackoverflow.com/a/8876069.\r\n    return new DOMRect(\r\n      /*x:*/ 0,\r\n      /*y:*/ 0,\r\n      /*width:*/  Math.max(document.documentElement.clientWidth  || 0, window.innerWidth || 0),\r\n      /*height:*/ Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0)\r\n    );\r\n  }\r\n}",
    "import { RecognitionZoneSource } from \"./recognitionZoneSource.js\";\r\nimport { ViewportZoneSource } from \"./viewportZoneSource.js\";\r\n\r\nexport class PaddedZoneSource implements RecognitionZoneSource {\r\n  private readonly root: RecognitionZoneSource;\r\n\r\n  private _edgePadding: {\r\n    x: number,\r\n    y: number,\r\n    w: number,\r\n    h: number\r\n  };\r\n\r\n  public get edgePadding() {\r\n    return this._edgePadding;\r\n  }\r\n\r\n  /**\r\n   * Provides a dynamic 'padded' recognition zone based upon offsetting from the borders\r\n   * of the active page's viewport.\r\n   *\r\n   * Padding is defined using the standard CSS border & padding spec style:\r\n   * - [a]:  equal and even padding on all sides\r\n   * - [a, b]: top & bottom use `a`, left & right use `b`\r\n   * - [a, b, c]: top uses `a`, left & right use `b`, bottom uses `c`\r\n   * - [a, b, c, d]: top, right, bottom, then left.\r\n   *\r\n   * Positive padding reduces the size of the resulting zone; negative padding expands it.\r\n   *\r\n   * @param rootZoneSource The root zone source object/element to be 'padded'\r\n   * @param edgePadding A set of 1 to 4 numbers defining padding per the standard CSS border & padding spec style.\r\n   */\r\n  public constructor(edgePadding: number[]);\r\n  /**\r\n   * Provides a dynamic 'padded' recognition zone based upon offsetting from the borders\r\n   * of another defined zone.\r\n   *\r\n   * Padding is defined using the standard CSS border & padding spec style:\r\n   * - [a]:  equal and even padding on all sides\r\n   * - [a, b]: top & bottom use `a`, left & right use `b`\r\n   * - [a, b, c]: top uses `a`, left & right use `b`, bottom uses `c`\r\n   * - [a, b, c, d]: top, right, bottom, then left.\r\n   *\r\n   * Positive padding reduces the size of the resulting zone; negative padding expands it.\r\n   *\r\n   * @param rootZoneSource The root zone source object/element to be 'padded'\r\n   * @param edgePadding A set of 1 to 4 numbers defining padding per the standard CSS border & padding spec style.\r\n   */\r\n  public constructor(rootZoneSource: RecognitionZoneSource, edgePadding?: number[]);\r\n  public constructor(rootZoneSource: RecognitionZoneSource | number[], edgePadding?: number[]) {\r\n    // Disambiguate which constructor style was intended.\r\n    if(Array.isArray(rootZoneSource)) {\r\n      edgePadding = rootZoneSource;\r\n      rootZoneSource = new ViewportZoneSource();\r\n    }\r\n\r\n    this.root = rootZoneSource;\r\n    // In case it isn't yet defined.\r\n    edgePadding = edgePadding || [0, 0, 0, 0];\r\n\r\n    this.updatePadding(edgePadding);\r\n  }\r\n\r\n  /**\r\n   * Provides a dynamic 'padded' recognition zone based upon offsetting from the borders\r\n   * of another defined zone.\r\n   *\r\n   * Padding is defined using the standard CSS border & padding spec style:\r\n   * - [a]:  equal and even padding on all sides\r\n   * - [a, b]: top & bottom use `a`, left & right use `b`\r\n   * - [a, b, c]: top uses `a`, left & right use `b`, bottom uses `c`\r\n   * - [a, b, c, d]: top, right, bottom, then left.\r\n   *\r\n   * Positive padding reduces the size of the resulting zone; negative padding expands it.\r\n   *\r\n   * @param rootZoneSource The root zone source object/element to be 'padded'\r\n   * @param edgePadding A set of 1 to 4 numbers defining padding per the standard CSS border & padding spec style.\r\n   */\r\n  updatePadding(edgePadding: number[]) {\r\n\r\n    // Modeled after CSS styling definitions... just with preprocessed numbers, not strings.\r\n    switch(edgePadding.length) {\r\n      case 1:\r\n        // all sides equal\r\n        const val = edgePadding[0];\r\n        this._edgePadding = {\r\n          x: val,\r\n          y: val,\r\n          w: 2 * val,\r\n          h: 2 * val\r\n        };\r\n        break;\r\n      case 2:\r\n        // top & bottom, left & right\r\n        this._edgePadding = {\r\n          x: edgePadding[1],\r\n          y: edgePadding[0],\r\n          w: 2 * edgePadding[1],\r\n          h: 2 * edgePadding[0]\r\n        };\r\n        break;\r\n      case 3:\r\n        // top, left & right, bottom\r\n        this._edgePadding = {\r\n          x: edgePadding[1],\r\n          y: edgePadding[0],\r\n          w: 2 * edgePadding[1],\r\n          h: edgePadding[0] + edgePadding[2]\r\n        };\r\n        break;\r\n      case 4:\r\n        // top, right, bottom, left\r\n        this._edgePadding = {\r\n          x: edgePadding[3],\r\n          y: edgePadding[0],\r\n          w: edgePadding[1] + edgePadding[3],\r\n          h: edgePadding[0] + edgePadding[2]\r\n        }\r\n        break;\r\n      default:\r\n        throw new Error(\"Invalid values for PaddedZoneSource's edgePadding - must be between 1 to 4 `number` values.\");\r\n    }\r\n  }\r\n\r\n  getBoundingClientRect(): DOMRect {\r\n    const rootZone = this.root.getBoundingClientRect();\r\n\r\n    // Chrome 35:  x, y do not exist on the returned rect, but left & top do.\r\n    return new DOMRect(\r\n      /*x:*/ rootZone.left + this.edgePadding.x,\r\n      /*y:*/ rootZone.top + this.edgePadding.y,\r\n      /*width:*/  rootZone.width  - this.edgePadding.w,\r\n      /*height:*/ rootZone.height - this.edgePadding.h\r\n    );\r\n  }\r\n}",
    "// Note:  we may add properties in the future that aren't explicitly readonly;\r\n// it's just that the ELEMENTS and zone definitions involved shouldn't be shifting\r\n// after configuration.\r\n\r\nimport { InputSample } from \"../headless/inputSample.js\";\r\nimport { Mutable } from \"../mutable.js\";\r\nimport { Nonoptional } from \"../nonoptional.js\";\r\nimport { PaddedZoneSource } from \"./paddedZoneSource.js\";\r\nimport { RecognitionZoneSource } from \"./recognitionZoneSource.js\";\r\n\r\nexport type ItemIdentifier<ItemType, StateToken> = (coord: Omit<InputSample<any, StateToken>, 'item'>, target: EventTarget) => ItemType;\r\n\r\n// For example, customization of a longpress timer's length need not be readonly.\r\nexport interface GestureRecognizerConfiguration<HoveredItemType, StateToken = any> {\r\n  /**\r\n   * Specifies the element that mouse input listeners should be attached to.  If\r\n   * not specified, `eventRoot` will be set equal to `targetRoot`.\r\n   */\r\n  readonly mouseEventRoot?: HTMLElement;\r\n\r\n  /**\r\n   * Specifies the element that touch input listeners should be attached to.  If\r\n   * not specified, `eventRoot` will be set equal to `targetRoot`.\r\n   */\r\n  readonly touchEventRoot?: HTMLElement;\r\n\r\n  /**\r\n   * Specifies the most specific common ancestor element of any event target\r\n   * that the `InputEventEngine` should consider.\r\n   */\r\n  readonly targetRoot: HTMLElement;\r\n\r\n  /**\r\n   * A boundary constraining the legal coordinates for supported touchstart and mousedown\r\n   * events.  If not specified, this will be set to `targetRoot`.\r\n   */\r\n  readonly inputStartBounds?: RecognitionZoneSource;\r\n\r\n  /**\r\n   * A boundary constraining the maximum range that an ongoing input may travel before it\r\n   * is forceably canceled.  If not specified, this will be set to `targetRoot`.\r\n   */\r\n  readonly maxRoamingBounds?: RecognitionZoneSource;\r\n\r\n  /**\r\n   * A boundary constraining the \"safe range\" for ongoing touch events.  Events that leave a\r\n   * safe boundary that did not start outside its respective \"padded\" bound will be canceled.\r\n   *\r\n   * If not specified, this will be based on the active viewport, padded internally by 2px on\r\n   * all sides.\r\n   */\r\n  readonly safeBounds?: RecognitionZoneSource;\r\n\r\n  /**\r\n   * Used to define a \"boundary\" slightly more constrained than `safeBounds`.  Events that\r\n   * start within this pixel range from a safe bound will disable that bound for the duration\r\n   * of its corresponding input sequence.  May be a number or an array of 1, 2, or 4 numbers,\r\n   * as with CSS styling.\r\n   *\r\n   * If not specified, this will default to a padding of 3px inside the standard safeBounds\r\n   * unless `paddedSafeBounds` is defined.\r\n   *\r\n   * If `paddedSafeBounds` was specified initially, this will be set to `undefined`.\r\n   */\r\n  readonly safeBoundPadding?: number | number[];\r\n\r\n  /**\r\n   * Used to define when an input coordinate is \"close\" to `safeBounds` borders via exclusion.\r\n   * If this is not defined while `safeBoundPadding` is, this will be built automatically to\r\n   * match the spec set by `safeBoundPadding`.\r\n   *\r\n   * Defining this directly will cause `safeBoundPadding` to be ignored in favor of the bounds\r\n   * set here.\r\n   */\r\n  readonly paddedSafeBounds?: RecognitionZoneSource;\r\n\r\n  /**\r\n   * Allows the gesture-recognizer client to specify the most relevant, identifying UI \"item\"\r\n   * (as perceived by users / relevant for gesture discrimination) underneath the touchpoint's\r\n   * current location based when processing input events.\r\n   *\r\n   * For applications in the DOM, simply returning `target` itself may be sufficient.\r\n   * @param coord   The current touchpath coordinate; its .targetX and .targetY values should be\r\n   *                interpreted as offsets from `targetRoot`.\r\n   *\r\n   *                Its `stateToken` will match the most recently set value for its corresponding\r\n   *                `GestureSource` if continuing one; otherwise, it'll use the one currently set\r\n   *                at the gesture-engine level.\r\n   * @param target  The `EventTarget` (`Node` or `Element`) provided by the corresponding input event,\r\n   *                if available.  May be `null/undefined`.\r\n   * @returns\r\n   */\r\n  readonly itemIdentifier?: ItemIdentifier<HoveredItemType, StateToken>;\r\n\r\n  /**\r\n   * When `true`, the engine will persistently record all coordinates visited by each `GestureSource`\r\n   * during its lifetime.  This is useful for debugging and for generating input recordings for\r\n   * use in automated testing.\r\n   */\r\n  readonly recordingMode?: boolean;\r\n\r\n  /**\r\n   * If greater than zero, preserves this amount of previously-seen touches and gestures before\r\n   * permanently clearing them.\r\n   */\r\n  readonly historyLength?: number;\r\n}\r\n\r\nexport function preprocessRecognizerConfig<HoveredItemType, StateToken = any>(\r\n  config: GestureRecognizerConfiguration<HoveredItemType, StateToken>\r\n): Nonoptional<GestureRecognizerConfiguration<HoveredItemType, StateToken>> {\r\n  // Allows configuration pre-processing during this method.\r\n  let processingConfig: Mutable<Nonoptional<GestureRecognizerConfiguration<HoveredItemType, StateToken>>> = {...config} as\r\n    Nonoptional<GestureRecognizerConfiguration<HoveredItemType, StateToken>>;\r\n\r\n  processingConfig.mouseEventRoot = processingConfig.mouseEventRoot ?? processingConfig.targetRoot;\r\n  processingConfig.touchEventRoot = processingConfig.touchEventRoot ?? processingConfig.targetRoot;\r\n\r\n  processingConfig.inputStartBounds = processingConfig.inputStartBounds ?? processingConfig.targetRoot;\r\n  processingConfig.maxRoamingBounds = processingConfig.maxRoamingBounds ?? processingConfig.targetRoot;\r\n  processingConfig.safeBounds       = processingConfig.safeBounds       ?? new PaddedZoneSource([2]);\r\n\r\n  processingConfig.itemIdentifier   = processingConfig.itemIdentifier   ?? (() => null);\r\n  processingConfig.recordingMode = !!processingConfig.recordingMode;\r\n  processingConfig.historyLength = (processingConfig.historyLength ?? 0) > 0 ? processingConfig.historyLength : 0;\r\n\r\n  if(!config.paddedSafeBounds) {\r\n    let paddingArray = config.safeBoundPadding;\r\n    if(typeof paddingArray == 'number') {\r\n      paddingArray = [ paddingArray ];\r\n    }\r\n    paddingArray = paddingArray ?? [3];\r\n\r\n    processingConfig.paddedSafeBounds = new PaddedZoneSource(processingConfig.safeBounds, paddingArray);\r\n  } else {\r\n    // processingConfig.paddedSafeBounds is already set via the spread operator above.\r\n    delete processingConfig.safeBoundPadding;\r\n  }\r\n\r\n  return processingConfig;\r\n}",
    "import { EventEmitter } from \"eventemitter3\";\r\nimport { InputSample } from \"./inputSample.js\";\r\nimport { CumulativePathStats } from \"./cumulativePathStats.js\";\r\n\r\ninterface EventMap<Type, StateToken> {\r\n  'step': (sample: InputSample<Type, StateToken>) => void,\r\n  'complete': () => void,\r\n  'invalidated': () => void\r\n}\r\n\r\n/**\r\n * Models the path over time through coordinate space taken by a touchpoint during\r\n * its active lifetime.\r\n *\r\n *  _Supported events_:\r\n *\r\n * `'step'`: a new Event has been observed for this touchpoint, extending the path.\r\n * - Parameters:\r\n *   - `sample: InputSample` - the coordinate & timestamp of the new observation.\r\n *\r\n * `'complete'`: the touchpoint is no longer active; a touch-end has been observed.\r\n *   - Provides no parameters.\r\n *   - Will be the last event raised by its instance, after any final 'segmentation'\r\n *     events.\r\n *   - Still precedes resolution Promise fulfillment on the `Segment` provided by\r\n *     the most recently-preceding 'segmentation' event.\r\n *     - And possibly recognition Promise fulfillment.\r\n *\r\n * `'invalidated'`: the touchpoint is no longer active; the path has crossed\r\n * gesture-recognition boundaries and is no longer considered valid.\r\n *   - Provides no parameters.\r\n *   - Will precede the final 'segmentation' event for the 'end' segment\r\n *   - Will precede resolution Promise fulfillment on the `Segment` provided by\r\n *     the most recently-preceding 'segmentation' event.\r\n *     - And possibly recognition Promise fulfillment.\r\n */\r\nexport class GesturePath<Type, StateToken = any> extends EventEmitter<EventMap<Type, StateToken>> {\r\n  protected _isComplete: boolean = false;\r\n  protected _wasCancelled?: boolean;\r\n\r\n  protected _stats: CumulativePathStats<Type>;\r\n\r\n  public get stats() {\r\n    // Is (practically) immutable, so it's safe to expose the instance directly.\r\n    return this._stats;\r\n  }\r\n\r\n  /**\r\n   * Initializes an empty path intended for tracking a newly-activated touchpoint.\r\n   */\r\n  constructor() {\r\n    super();\r\n\r\n    this._stats = new CumulativePathStats();\r\n  }\r\n\r\n  public clone(): GesturePath<Type, StateToken> {\r\n    const instance = new GesturePath<Type, StateToken>();\r\n    instance._isComplete = this._isComplete;\r\n    instance._wasCancelled = this._wasCancelled;\r\n    instance._stats = new CumulativePathStats<Type>(this._stats);\r\n\r\n    return instance;\r\n  }\r\n\r\n  /**\r\n   * Indicates whether or not the corresponding touchpoint is no longer active -\r\n   * either due to cancellation or by the user's direct release of the touchpoint.\r\n   */\r\n  public get isComplete() {\r\n    return this._isComplete;\r\n  }\r\n\r\n  public get wasCancelled() {\r\n    return this._wasCancelled;\r\n  }\r\n\r\n  /**\r\n   * Builds a new instance with equal stats and with translated initialSample and\r\n   * lastSample coordinates.  Further accumulation will be based upon the new\r\n   * coordinate system as well.\r\n   * @param functor\r\n   */\r\n  public translateCoordSystem(functor: (sample: InputSample<Type, StateToken>) => InputSample<Type, StateToken>) {\r\n    this._stats = this._stats.translateCoordSystem(functor);\r\n  }\r\n\r\n  /**\r\n   * Builds a new instance with its initial sample replaced and stats updated\r\n   * to reflect the alternate starting position.\r\n   *\r\n   * Note that `rawDistance` adjustments are an approximation, not exact.  To\r\n   * be precise, for stats representing two more more samples, the distance\r\n   * between the original and new initial samples is added as a flat amount.\r\n   * @param sample\r\n   */\r\n  public replaceInitialSample(sample: InputSample<Type, StateToken>) {\r\n    this._stats = this._stats.replaceInitialSample(sample);\r\n  }\r\n\r\n  /**\r\n   * Extends the path with a newly-observed coordinate.\r\n   * @param sample\r\n   */\r\n  extend(sample: InputSample<Type, StateToken>) {\r\n    /* c8 ignore next 3 */\r\n    if(this._isComplete) {\r\n      throw new Error(\"Invalid state:  this GesturePath has already terminated.\");\r\n    }\r\n\r\n    // The tracked path should emit InputSample events before Segment events and\r\n    // resolution of Segment Promises.\r\n    this._stats = this._stats.extend(sample);\r\n    this.emit('step', sample);\r\n  }\r\n\r\n  /**\r\n   * Finalizes the path.\r\n   * @param cancel Whether or not this finalization should trigger cancellation.\r\n   */\r\n  terminate(cancel: boolean = false) {\r\n    /* c8 ignore next 3 */\r\n    if(this._isComplete) {\r\n      return;\r\n    }\r\n\r\n    this._wasCancelled = cancel;\r\n    this._isComplete = true;\r\n\r\n    // If cancelling, do so before finishing segments\r\n    if(cancel) {\r\n      this.emit('invalidated');\r\n    } else {\r\n      // If not cancelling, signal completion after finishing segments.\r\n      this.emit('complete');\r\n    }\r\n\r\n    this.removeAllListeners();\r\n  }\r\n\r\n  public toJSON(): any {\r\n    return {\r\n      // Replicate array and its entries, but with certain fields of each entry missing.\r\n      // No .clientX, no .clientY.\r\n      stats: this.stats,\r\n      wasCancelled: this.wasCancelled\r\n    }\r\n  }\r\n}",
    "import { InputSample } from \"./inputSample.js\";\r\nimport { CumulativePathStats } from \"./cumulativePathStats.js\";\r\nimport { Mutable } from \"../mutable.js\";\r\nimport { GesturePath } from \"./gesturePath.js\";\r\n\r\n/**\r\n * Documents the expected typing of serialized versions of the `GesturePath` class.\r\n */\r\nexport type SerializedGesturePath<Type, StateToken> = {\r\n  coords: Mutable<InputSample<Type, StateToken>>[]; // ensures type match with public class property.\r\n  wasCancelled?: boolean;\r\n  stats?: CumulativePathStats\r\n}\r\n\r\n/**\r\n * Models the path over time through coordinate space taken by a touchpoint during\r\n * its active lifetime.\r\n *\r\n *  _Supported events_:\r\n *\r\n * `'step'`: a new Event has been observed for this touchpoint, extending the path.\r\n * - Parameters:\r\n *   - `sample: InputSample` - the coordinate & timestamp of the new observation.\r\n *\r\n * `'complete'`: the touchpoint is no longer active; a touch-end has been observed.\r\n *   - Provides no parameters.\r\n *   - Will be the last event raised by its instance, after any final 'segmentation'\r\n *     events.\r\n *   - Still precedes resolution Promise fulfillment on the `Segment` provided by\r\n *     the most recently-preceding 'segmentation' event.\r\n *     - And possibly recognition Promise fulfillment.\r\n *\r\n * `'invalidated'`: the touchpoint is no longer active; the path has crossed\r\n * gesture-recognition boundaries and is no longer considered valid.\r\n *   - Provides no parameters.\r\n *   - Will precede the final 'segmentation' event for the 'end' segment\r\n *   - Will precede resolution Promise fulfillment on the `Segment` provided by\r\n *     the most recently-preceding 'segmentation' event.\r\n *     - And possibly recognition Promise fulfillment.\r\n */\r\nexport class GestureDebugPath<Type, StateToken = any> extends GesturePath<Type, StateToken> {\r\n  private samples: InputSample<Type, StateToken>[] = [];\r\n\r\n  public clone(): GestureDebugPath<Type, StateToken> {\r\n    const instance = new GestureDebugPath<Type, StateToken>();\r\n    instance.samples = [].concat(this.samples);\r\n\r\n    instance._isComplete = this._isComplete;\r\n    instance._wasCancelled = this._wasCancelled;\r\n    instance._stats = new CumulativePathStats<Type>(this._stats);\r\n\r\n    return instance;\r\n  }\r\n\r\n  /**\r\n   * Deserializes a GesturePath instance from its corresponding JSON.parse() object.\r\n   * @param jsonObj\r\n   */\r\n  static deserialize<Type, StateToken>(jsonObj: SerializedGesturePath<Type, StateToken>): GestureDebugPath<Type, StateToken> {\r\n    const instance = new GestureDebugPath<Type, StateToken>();\r\n\r\n    instance.samples = [].concat(jsonObj.coords.map((obj) => ({...obj} as InputSample<Type, StateToken>)));\r\n    instance._isComplete = true;\r\n    instance._wasCancelled = jsonObj.wasCancelled;\r\n\r\n    let stats = instance.samples.reduce((stats: CumulativePathStats<Type>, sample) => stats.extend(sample), new CumulativePathStats<Type>());\r\n    instance._stats = stats;\r\n\r\n    return instance;\r\n  }\r\n\r\n  /**\r\n   * Extends the path with a newly-observed coordinate.\r\n   * @param sample\r\n   */\r\n  extend(sample: InputSample<Type, StateToken>) {\r\n    /* c8 ignore next 3 */\r\n    if(this.isComplete) {\r\n      throw new Error(\"Invalid state:  this GesturePath has already terminated.\");\r\n    }\r\n\r\n    // The tracked path should emit InputSample events before Segment events and\r\n    // resolution of Segment Promises.\r\n    this.samples.push(sample);\r\n    super.extend(sample);\r\n  }\r\n\r\n\r\n  public translateCoordSystem(functor: (sample: InputSample<Type, StateToken>) => InputSample<Type, StateToken>) {\r\n    super.translateCoordSystem(functor);\r\n\r\n    for(let i=0; i < this.samples.length; i++) {\r\n      this.samples[i] = functor(this.samples[i]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns all coordinate + timestamp pairings observed for the corresponding\r\n   * touchpoint's path over its lifetime thus far.\r\n   */\r\n  public get coords(): readonly InputSample<Type, StateToken>[] {\r\n    return this.samples;\r\n  }\r\n\r\n  /**\r\n   * Creates a serialization-friendly version of this instance for use by\r\n   * `JSON.stringify`.\r\n   */\r\n  toJSON() {\r\n    let jsonClone: SerializedGesturePath<Type, StateToken> = {\r\n      // Replicate array and its entries, but with certain fields of each entry missing.\r\n      // No .clientX, no .clientY.\r\n      coords: [].concat(this.samples.map((obj) => ({\r\n        targetX: obj.targetX,\r\n        targetY: obj.targetY,\r\n        t:       obj.t,\r\n        item:    obj.item\r\n      }))),\r\n      wasCancelled: this.wasCancelled,\r\n      stats: this.stats\r\n    }\r\n\r\n    // Removes components of each sample that we don't want serialized.\r\n    for(let sample of jsonClone.coords) {\r\n      delete sample.clientX;\r\n      delete sample.clientY;\r\n\r\n      // No point in serializing an `undefined` 'item' entry.\r\n      if(sample.item === undefined) {\r\n        delete sample.item;\r\n      }\r\n    }\r\n\r\n    return jsonClone;\r\n  }\r\n}",
    "import { InputSample } from \"./inputSample.js\";\r\nimport { GesturePath } from \"./gesturePath.js\";\r\nimport { GestureRecognizerConfiguration, preprocessRecognizerConfig } from \"../configuration/gestureRecognizerConfiguration.js\";\r\nimport { Nonoptional } from \"../nonoptional.js\";\r\nimport { MatcherSelector } from \"./gestures/matchers/matcherSelector.js\";\r\nimport { SerializedGesturePath } from \"./gestureDebugPath.js\";\r\n\r\nexport function buildGestureMatchInspector<Type, StateToken>(selector: MatcherSelector<Type, StateToken>) {\r\n  return (source: GestureSource<Type, StateToken>) => {\r\n    return selector.potentialMatchersForSource(source).map((matcher) => matcher.model.id);\r\n  };\r\n}\r\n\r\n/**\r\n * Documents the expected typing of serialized versions of the `GestureSource` class.\r\n */\r\nexport type SerializedGestureSource<HoveredItemType = any, StateToken = any> = {\r\n  isFromTouch: boolean;\r\n  path: SerializedGesturePath<HoveredItemType, StateToken>;\r\n  stateToken?: StateToken;\r\n  identifier?: string;\r\n  // identifier is not included b/c it's only needed during live processing.\r\n}\r\n\r\n\r\n/**\r\n * Represents all metadata needed internally for tracking a single \"touch contact point\" / \"touchpoint\"\r\n * involved in a potential / recognized gesture as tracked over time.\r\n *\r\n * Each instance corresponds to one unique contact point as recognized by `Touch.identifier` or to\r\n * one 'cursor-point' as represented by mouse-based motion.\r\n *\r\n * Refer to https://developer.mozilla.org/en-US/docs/Web/API/Touch and\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Navigator/maxTouchPoints re \"touch contact point\".\r\n *\r\n * May be one-to-many with recognized gestures:  a keyboard longpress interaction generally only has one\r\n * contact point but will have multiple realized gestures / components:\r\n * - longpress:  Enough time has elapsed\r\n * - subkey:  Subkey from the longpress subkey menu has been selected.\r\n *\r\n * Thus, it is a \"gesture source\".  This is the level needed to model a single contact point, while some\r\n * gestures expect multiple, hence \"simple\".\r\n *\r\n */\r\nexport class GestureSource<\r\n  HoveredItemType,\r\n  StateToken=any,\r\n  /**\r\n   * Not intended for non-default types outside of gesture-recognizer internals.  Is used to facilitate\r\n   * 'debug-mode' / 'recording-mode' paths.\r\n   */\r\n  PathType extends GesturePath<HoveredItemType, StateToken> = GesturePath<HoveredItemType, StateToken>\r\n> {\r\n  /**\r\n   * Indicates whether or not this tracked point's original source is a DOM `Touch`.\r\n   */\r\n  public readonly isFromTouch: boolean;\r\n\r\n  /**\r\n   * The numeric form of this point's identifier as seen in events (or as emulated for mouse events)\r\n   */\r\n  public readonly rawIdentifier: number;\r\n\r\n  // A full, uninterrupted recording of all samples observed during the lifetime of the touchpoint.\r\n  protected _path: PathType;\r\n\r\n  protected _baseItem: HoveredItemType;\r\n\r\n  // Assertion:  must always contain an index 0 - the base recognizer config.\r\n  protected recognizerConfigStack: Nonoptional<GestureRecognizerConfiguration<HoveredItemType, StateToken>>[];\r\n\r\n  /**\r\n   * Usable by the gesture-recognizer library's consumer to track a token identifying specific states\r\n   * of the consuming system if desired.\r\n   */\r\n  public stateToken: StateToken = null;\r\n\r\n  /**\r\n   * Tracks the coordinates and timestamps of each update for the lifetime of this `GestureSource`.\r\n   */\r\n  public get path(): PathType {\r\n    return this._path;\r\n  }\r\n\r\n  /**\r\n   * Allows the GestureSource to report on its remaining potential GestureModel matches for the\r\n   * current gesture stage.\r\n   *\r\n   * Would be nice to have it required in the constructor, but that would greatly complicate certain\r\n   * automated testing patterns.\r\n   */\r\n  private _matchInspectionClosure: (source: GestureSource<HoveredItemType, StateToken>) => string[];\r\n\r\n  /**\r\n   * For internal gesture-engine use only.  Will throw an error if called more than once during the\r\n   * GestureSource's lifetime.\r\n   */\r\n  public setGestureMatchInspector(closure: typeof GestureSource.prototype._matchInspectionClosure) {\r\n    if(this._matchInspectionClosure) {\r\n      throw new Error(\"Invalid state:  the match-inspection closure has already been set\");\r\n    }\r\n\r\n    this._matchInspectionClosure = closure;\r\n  }\r\n\r\n  /**\r\n   * Constructs a new GestureSource instance for tracking updates to an active input point over time.\r\n   * @param identifier     The system identifier for the input point's events.\r\n   * @param initialHoveredItem  The initiating event's original target element\r\n   * @param isFromTouch    `true` if sourced from a `TouchEvent`; `false` otherwise.\r\n   * @param pathConstructor  A default, parameterless constructor for the `GesturePath` variant\r\n   *                         specified for the `PathType` generic parameter.\r\n   */\r\n  constructor(\r\n    identifier: number,\r\n    recognizerConfig: Nonoptional<GestureRecognizerConfiguration<HoveredItemType, StateToken>>\r\n      | Nonoptional<GestureRecognizerConfiguration<HoveredItemType, StateToken>>[],\r\n    isFromTouch: boolean,\r\n    // Sadly, `typeof PathType` isn't TS-legal.  This is the best way forward as a result.\r\n    pathConstructor?: typeof GesturePath\r\n  ) {\r\n    this.rawIdentifier = identifier;\r\n    this.isFromTouch = isFromTouch;\r\n    this._path = (pathConstructor ? new pathConstructor() : new GesturePath()) as PathType;\r\n\r\n    this.recognizerConfigStack = Array.isArray(recognizerConfig) ? recognizerConfig : [recognizerConfig];\r\n  }\r\n\r\n  public update(sample: InputSample<HoveredItemType, StateToken>) {\r\n    this.path.extend(sample);\r\n    this._baseItem ||= sample.item;\r\n  }\r\n\r\n  /**\r\n   * The 'base item' for the path of this `GestureSource`.\r\n   *\r\n   * May be set independently after construction for cases where one GestureSource conceptually\r\n   * \"succeeds\" another one, as with multitap gestures.  (Though, those generally constrain\r\n   * new paths to have the same base item.)\r\n   */\r\n  public get baseItem(): HoveredItemType {\r\n    return this._baseItem;\r\n  }\r\n\r\n  public set baseItem(value: HoveredItemType) {\r\n    this._baseItem = value;\r\n  }\r\n\r\n  /**\r\n   * The most recent path sample (coordinate) under consideration for this `GestureSource`.\r\n   */\r\n  public get currentSample(): InputSample<HoveredItemType, StateToken> {\r\n    return this.path.stats.lastSample;\r\n  }\r\n\r\n  /**\r\n   * Returns an array of IDs for gesture models that are still valid for the `GestureSource`'s\r\n   * current state.  They will be specified in descending `resolutionPriority` order.\r\n   */\r\n  public get potentialModelMatchIds(): string[] {\r\n    return this._matchInspectionClosure(this);\r\n  }\r\n\r\n  /**\r\n   * Creates a 'subview' of the current GestureSource.  It will be updated as the underlying\r\n   * source continues to receive updates until disconnected.\r\n   *\r\n   * @param startAtEnd If `true`, the 'subview' will appear to start at the most recently-observed\r\n   * path coordinate.  If `false`, it will have full knowledge of the current path.\r\n   * @param preserveBaseItem If `true`, the 'subview' will denote its base item as the same\r\n   * as its source.  If `false`, the base item for the 'subview' will be set to the `item` entry\r\n   * from the most recently-observed path coordinate.\r\n   * @param stateTokenOverride  Setting this to a 'truthy' value will remap all included samples, using that as\r\n   *                            the new state token.\r\n   * @returns\r\n   */\r\n  public constructSubview(\r\n    startAtEnd: boolean,\r\n    preserveBaseItem: boolean,\r\n    stateTokenOverride?: StateToken\r\n  ): GestureSourceSubview<HoveredItemType, StateToken, PathType> {\r\n    return new GestureSourceSubview(this, this.recognizerConfigStack, startAtEnd, preserveBaseItem, stateTokenOverride);\r\n  }\r\n\r\n  /**\r\n   * Terminates all tracking for the modeled contact point.  Passing `true` as a parameter will\r\n   * treat the touchpath as if it were cancelled; `false` and `undefined` will treat it as if\r\n   * the touchpath has completed its standard lifecycle.\r\n   * @param cancel\r\n   */\r\n  public terminate(cancel?: boolean) {\r\n    this.path.terminate(cancel);\r\n  }\r\n\r\n  /**\r\n   * Denotes if the contact point's path either was cancelled or completed its standard\r\n   * lifecycle.\r\n   */\r\n  public get isPathComplete(): boolean {\r\n    return this.path.isComplete;\r\n  }\r\n\r\n  /**\r\n   * Gets a fully-unique string-based identifier, even for edge cases where both mouse and touch input\r\n   * are received simultaneously.\r\n   */\r\n  public get identifier(): string {\r\n    const prefix = this.isFromTouch ? 'touch' : 'mouse';\r\n    return `${prefix}:${this.rawIdentifier}`;\r\n  }\r\n\r\n  public pushRecognizerConfig(config: Omit<GestureRecognizerConfiguration<HoveredItemType, StateToken>, 'touchEventRoot'| 'mouseEventRoot'>) {\r\n    const configToProcess = {...config,\r\n      mouseEventRoot: this.recognizerConfigStack[0].mouseEventRoot,\r\n      touchEventRoot: this.recognizerConfigStack[0].touchEventRoot\r\n    }\r\n    this.recognizerConfigStack.push(preprocessRecognizerConfig(configToProcess));\r\n  }\r\n\r\n  public popRecognizerConfig() {\r\n    if(this.recognizerConfigStack.length == 1) {\r\n      throw new Error(\"Cannot 'pop' the original recognizer-configuration for this GestureSource.\")\r\n    }\r\n\r\n    return this.recognizerConfigStack.pop();\r\n  }\r\n\r\n  public get currentRecognizerConfig() {\r\n    return this.recognizerConfigStack[this.recognizerConfigStack.length-1];\r\n  }\r\n\r\n /**\r\n  * Creates a serialization-friendly version of this instance for use by\r\n  * `JSON.stringify`.\r\n  */\r\n /* c8 ignore start */\r\n toJSON(): SerializedGestureSource {\r\n   let jsonClone: SerializedGestureSource = {\r\n     identifier: this.identifier,\r\n     isFromTouch: this.isFromTouch,\r\n     path: this.path.toJSON(),\r\n     stateToken: this.stateToken\r\n   };\r\n\r\n   return jsonClone;\r\n   /* c8 ignore stop */\r\n   /* c8 ignore next 2 */\r\n   // esbuild or tsc seems to mangle the 'ignore stop' if put outside the ending brace.\r\n }\r\n}\r\n\r\nexport class GestureSourceSubview<\r\n  HoveredItemType,\r\n  StateToken = any,\r\n  PathType extends GesturePath<HoveredItemType, StateToken> = GesturePath<HoveredItemType, StateToken>\r\n> extends GestureSource<HoveredItemType, StateToken, PathType> {\r\n  private _baseSource: GestureSource<HoveredItemType, StateToken>\r\n  private _baseStartIndex: number;\r\n  private subviewDisconnector: () => void;\r\n\r\n  /**\r\n   * Constructs a new \"Subview\" into an existing GestureSource instance.  Future updates of the base\r\n   * GestureSource will automatically be included until this instance's `disconnect` method is called.\r\n   * @param source         The \"original\" GestureSource for this \"subview\".\r\n   * @param configStack    `source.recognizerConfigStack`.  Must be separately provided due to TS limitations.\r\n   * @param startAtEnd     `true` if only the latest sample should be included in the \"subview\".\r\n   *                       `false` includes all samples from `source` instead.\r\n   * @param preserveBaseItem  `true` if `source`'s base item should be preserved; `false` if it should be reset\r\n   *                          based upon the latest sample.\r\n   * @param stateTokenOverride  Setting this to a 'truthy' value will remap all included samples, using that as\r\n   *                            the new state token.\r\n   */\r\n  constructor(\r\n    source: GestureSource<HoveredItemType>,\r\n    configStack: typeof GestureSource.prototype['recognizerConfigStack'],\r\n    startAtEnd: boolean,\r\n    preserveBaseItem: boolean,\r\n    stateTokenOverride?: StateToken\r\n  ) {\r\n    let start = 0;\r\n    let length = source.path.stats.sampleCount;\r\n    if(source instanceof GestureSourceSubview) {\r\n      start = source._baseStartIndex;\r\n    }\r\n\r\n    // While it'd be nice to validate that a previous subview, if used, has all 'current'\r\n    // entries, this gets tricky; race conditions are possible in which an extra input event\r\n    // occurs before subviews can be spun up when starting a model-matcher in some scenarios.\r\n\r\n    super(source.rawIdentifier, configStack, source.isFromTouch, Object.getPrototypeOf(source.path).constructor);\r\n\r\n    const baseSource = this._baseSource = source instanceof GestureSourceSubview ? source._baseSource : source;\r\n    this.stateToken = stateTokenOverride ?? source.stateToken;\r\n\r\n    /**\r\n     * Provides a coordinate-system translation for source subviews.\r\n     * The base version still needs to use the original coord system, though.\r\n     */\r\n    const translateSample = (sample: InputSample<HoveredItemType, StateToken>) => {\r\n      const translation = this.recognizerTranslation;\r\n      // Provide a coordinate-system translation for source subviews.\r\n      // The base version still needs to use the original coord system, though.\r\n      const transformedSample = {\r\n        ...sample,\r\n        targetX: sample.targetX - translation.x,\r\n        targetY: sample.targetY - translation.y\r\n      };\r\n\r\n      if(this.stateToken) {\r\n        transformedSample.stateToken = this.stateToken;\r\n      }\r\n\r\n      // If the subview is operating from the perspective of a different state token than its base source,\r\n      // its samples' item fields will need correction.\r\n      //\r\n      // This can arise during multitap-like scenarios.\r\n      if(this.stateToken != baseSource.stateToken || this.stateToken != source.stateToken) {\r\n        transformedSample.item = this.currentRecognizerConfig.itemIdentifier(\r\n          transformedSample,\r\n          null\r\n        );\r\n      }\r\n\r\n      return transformedSample;\r\n    }\r\n\r\n    // Will hold the last sample _even if_ we don't save every coord that comes through.\r\n    const lastSample = source.path.stats.lastSample;\r\n\r\n    // Are we 'chop'ping off the existing path or preserving it?  This sets the sample-copying\r\n    // configuration accordingly.\r\n    if(startAtEnd) {\r\n      this._baseStartIndex = start = Math.max(start + length - 1, 0);\r\n      length = length > 0 ? 1 : 0;\r\n    } else {\r\n      this._baseStartIndex = start;\r\n    }\r\n\r\n    // For consistent handling both in and out of 'debugMode' - stats should be built solely\r\n    // based on existing stats.  Could try to add an assertion that the stats reasonably match\r\n    // when in debug mode, though.\r\n    if(startAtEnd) {\r\n      // The easy case:  we don't need to do any fancy stats-object manipulation.\r\n      if(source.path.stats.sampleCount) {\r\n        // Use the existing, empty one built by the .super() call and start anew.\r\n        // Do not pre-translate... for consistency with the translate call below.\r\n        this._path.extend(source.path.stats.lastSample);\r\n      }\r\n    } else {\r\n      // Inherit the path.\r\n      this._path = source.path.clone() as PathType;\r\n    }\r\n    this._path.translateCoordSystem(translateSample);\r\n\r\n    if(preserveBaseItem) {\r\n      // IMPORTANT:  inherits the _subview's_ base item, not the baseSource's version thereof.\r\n      // This allows gesture models based upon 'sustain timers' to have a different base item\r\n      // than concurrent models that aren't sustain-followups.\r\n      this._baseItem = source.baseItem;\r\n    } else {\r\n      this._baseItem = lastSample?.item;\r\n    }\r\n\r\n    // Ensure that this 'subview' is updated whenever the \"source of truth\" is.\r\n    const completeHook    = ()       => this.path.terminate(false);\r\n    const invalidatedHook = ()       => this.path.terminate(true);\r\n    const stepHook        = (sample: InputSample<HoveredItemType, StateToken>) => {\r\n      super.update(translateSample(sample));\r\n    };\r\n    baseSource.path.on('complete',    completeHook);\r\n    baseSource.path.on('invalidated', invalidatedHook);\r\n    baseSource.path.on('step',        stepHook);\r\n\r\n    // But make sure we can \"disconnect\" it later once the gesture being matched\r\n    // with the subview has fully matched; it's good to have a snapshot left over.\r\n    this.subviewDisconnector = () => {\r\n      baseSource.path.off('complete',    completeHook);\r\n      baseSource.path.off('invalidated', invalidatedHook);\r\n      baseSource.path.off('step',        stepHook);\r\n    }\r\n\r\n    // If the path was already completed, that should be reflected here, too.\r\n    if(baseSource.isPathComplete) {\r\n      this.path.terminate((baseSource.path.wasCancelled));\r\n      this.disconnect();\r\n    }\r\n  }\r\n\r\n  private get recognizerTranslation() {\r\n    // Allowing a 'null' config greatly simplifies many of our unit-test specs.\r\n    if(this.recognizerConfigStack.length == 1 || !this.currentRecognizerConfig) {\r\n      return {\r\n        x: 0,\r\n        y: 0\r\n      };\r\n    }\r\n\r\n    // Could compute all of this a single time & cache the value whenever a recognizer-config is pushed or popped.\r\n    const currentRecognizer = this.currentRecognizerConfig;\r\n    const currentClientRect = currentRecognizer.targetRoot.getBoundingClientRect();\r\n    const baseClientRect = this.recognizerConfigStack[0].targetRoot.getBoundingClientRect();\r\n\r\n    return {\r\n      // x, y not available in Chrome 35... but left and top are.\r\n      x: currentClientRect.left - baseClientRect.left,\r\n      y: currentClientRect.top - baseClientRect.top\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The original GestureSource this subview is based upon.  Note that the coordinate system may\r\n   * differ if a gesture stage/component has occurred that triggered a change to the active\r\n   * recognizer configuration.  (e.g. a subkey menu is being displayed for a longpress interaction)\r\n   */\r\n  public get baseSource() {\r\n    return this._baseSource;\r\n  }\r\n\r\n  /**\r\n   * This disconnects this subview from receiving further updates from the the underlying\r\n   * source without causing it to be cancelled or treated as completed.\r\n   */\r\n  public disconnect() {\r\n    if(this.subviewDisconnector) {\r\n      this.subviewDisconnector();\r\n      this.subviewDisconnector = null;\r\n    }\r\n  }\r\n\r\n  public pushRecognizerConfig(config: Omit<GestureRecognizerConfiguration<HoveredItemType, StateToken>, \"touchEventRoot\" | \"mouseEventRoot\">): void {\r\n    throw new Error(\"Pushing and popping of recognizer configurations should only be called on the base GestureSource\");\r\n  }\r\n\r\n  public popRecognizerConfig(): Nonoptional<GestureRecognizerConfiguration<HoveredItemType, StateToken>> {\r\n    throw new Error(\"Pushing and popping of recognizer configurations should only be called on the base GestureSource\");\r\n  }\r\n\r\n  public update(sample: InputSample<HoveredItemType, StateToken>): void {\r\n    throw new Error(\"Updates should be provided through the base GestureSource.\")\r\n  }\r\n\r\n  /**\r\n   * Like `disconnect`, but this will also terminate the baseSource and prevent further\r\n   * updates for the true, original `GestureSource` instance.  If the gesture-model\r\n   * and gesture-matching algorithm has determined this should be called, full path-update\r\n   * termination is correct, even if called against a subview into the instance.\r\n   */\r\n  public terminate(cancel?: boolean) {\r\n    this.baseSource.terminate(cancel);\r\n  }\r\n}",
    "import { GestureRecognizerConfiguration } from \"../configuration/gestureRecognizerConfiguration.js\";\r\nimport { Nonoptional } from \"../nonoptional.js\";\r\nimport { GestureDebugPath } from \"./gestureDebugPath.js\";\r\nimport { GestureSource, SerializedGestureSource } from \"./gestureSource.js\";\r\n/**\r\n * Represents all metadata needed internally for tracking a single \"touch contact point\" / \"touchpoint\"\r\n * involved in a potential / recognized gesture as tracked over time.\r\n *\r\n * Each instance corresponds to one unique contact point as recognized by `Touch.identifier` or to\r\n * one 'cursor-point' as represented by mouse-based motion.\r\n *\r\n * Refer to https://developer.mozilla.org/en-US/docs/Web/API/Touch and\r\n * https://developer.mozilla.org/en-US/docs/Web/API/Navigator/maxTouchPoints re \"touch contact point\".\r\n *\r\n * May be one-to-many with recognized gestures:  a keyboard longpress interaction generally only has one\r\n * contact point but will have multiple realized gestures / components:\r\n * - longpress:  Enough time has elapsed\r\n * - subkey:  Subkey from the longpress subkey menu has been selected.\r\n *\r\n * Thus, it is a \"gesture source\".  This is the level needed to model a single contact point, while some\r\n * gestures expect multiple, hence \"simple\".\r\n *\r\n */\r\nexport class GestureDebugSource<HoveredItemType, StateToken=any> extends GestureSource<HoveredItemType, StateToken, GestureDebugPath<HoveredItemType, StateToken>> {\r\n  // Assertion:  must always contain an index 0 - the base recognizer config.\r\n  private static _jsonIdSeed: -1;\r\n\r\n  /**\r\n   * Usable by the gesture-recognizer library's consumer to track a token identifying specific states\r\n   * of the consuming system if desired.\r\n   */\r\n  public stateToken: StateToken = null;\r\n\r\n  /**\r\n   * Constructs a new GestureDebugSource instance for tracking updates to an active input point over time.\r\n   * @param identifier     The system identifier for the input point's events.\r\n   * @param initialHoveredItem  The initiating event's original target element\r\n   * @param isFromTouch    `true` if sourced from a `TouchEvent`; `false` otherwise.\r\n   */\r\n  constructor(\r\n    identifier: number,\r\n    recognizerConfig: Nonoptional<GestureRecognizerConfiguration<HoveredItemType, StateToken>>\r\n      | Nonoptional<GestureRecognizerConfiguration<HoveredItemType, StateToken>>[],\r\n    isFromTouch: boolean\r\n  ) {\r\n    super(identifier, recognizerConfig, isFromTouch, GestureDebugPath);\r\n  }\r\n\r\n  protected initPath(): GestureDebugPath<HoveredItemType, StateToken> {\r\n    return new GestureDebugPath();\r\n  }\r\n\r\n  /**\r\n   * Deserializes a GestureSource instance from its serialized-JSON form.\r\n   * @param jsonObj  The JSON representation to deserialize.\r\n   * @param identifier The unique identifier to assign to this instance.\r\n   */\r\n  public static deserialize(jsonObj: SerializedGestureSource, identifier: number) {\r\n    const id = identifier !== undefined ? identifier : this._jsonIdSeed++;\r\n    const isFromTouch = jsonObj.isFromTouch;\r\n    const path = GestureDebugPath.deserialize(jsonObj.path);\r\n\r\n    const instance = new GestureDebugSource(id, null, isFromTouch);\r\n    instance._path = path;\r\n    return instance;\r\n  }\r\n}",
    "import { EventEmitter } from \"eventemitter3\";\r\n\r\nimport { GestureRecognizerConfiguration } from \"../configuration/gestureRecognizerConfiguration.js\";\r\nimport { Nonoptional } from \"../nonoptional.js\";\r\nimport { GestureDebugSource } from \"./gestureDebugSource.js\";\r\nimport { GestureSource } from \"./gestureSource.js\";\r\n\r\ninterface EventMap<HoveredItemType, StateToken> {\r\n  /**\r\n   * Indicates that a new, ongoing touchpoint or mouse interaction has begun.\r\n   * @param input The instance that tracks all future updates over the lifetime of the touchpoint / mouse interaction.\r\n   */\r\n  'pointstart': (input: GestureSource<HoveredItemType, StateToken>) => void;\r\n\r\n  // // idea for line below: to help multitouch gestures keep touchpaths in sync, rather than updated separately\r\n  // 'eventcomplete': () => void;\r\n}\r\n\r\n/**\r\n * This serves as an abstract, headless-capable base class for handling incoming touch-path data for\r\n * gesture recognition as it is either generated (in the DOM) or replayed during automated tests\r\n * (headlessly).\r\n */\r\nexport abstract class InputEngineBase<HoveredItemType, StateToken = any> extends EventEmitter<EventMap<HoveredItemType, StateToken>> {\r\n  private _activeTouchpoints: GestureSource<HoveredItemType>[] = [];\r\n\r\n  // Touch interactions in the browser actually _re-use_ touch IDs once they lapse; the IDs are not lifetime-unique.\r\n  // This gesture-engine desires lifetime-unique IDs, though, so we map them within this engine to remedy that problem.\r\n  private readonly identifierMap: Record<number, number> = {};\r\n  private static IDENTIFIER_SEED = 0;\r\n\r\n  public stateToken: StateToken;\r\n\r\n  protected readonly config: Nonoptional<GestureRecognizerConfiguration<HoveredItemType, StateToken>>;\r\n  private sourceConstructor: typeof GestureSource<HoveredItemType, StateToken, any>;\r\n\r\n  public constructor(config: Nonoptional<GestureRecognizerConfiguration<HoveredItemType, StateToken>>) {\r\n    super();\r\n    this.config = config;\r\n    this.sourceConstructor = (config?.recordingMode ?? true) ? GestureDebugSource : GestureSource;\r\n  }\r\n\r\n  createTouchpoint(identifier: number, isFromTouch: boolean) {\r\n    // IDs provided to `GestureSource` should be engine-unique.  Unfortunately, the base identifier patterns provided by\r\n    // browsers don't do this, so we map the browser ID to an engine-internal one.\r\n    const unique_id = InputEngineBase.IDENTIFIER_SEED++;\r\n\r\n    this.identifierMap[identifier] = unique_id;\r\n\r\n    // If debug mode is enabled, will enable persistent coordinate tracking.  Is off by default.\r\n    const source = new this.sourceConstructor(unique_id, this.config, isFromTouch);\r\n    source.stateToken = this.stateToken;\r\n\r\n    // Do not add here; it needs special managing for unit tests.\r\n\r\n    return source;\r\n  }\r\n\r\n  public fulfillInputStart(touchpoint: GestureSource<HoveredItemType, StateToken>) {}\r\n\r\n  /**\r\n   * Calls to this method will cancel any touchpoints whose internal IDs are _not_ included in the parameter.\r\n   * Designed to facilitate recovery from error cases and peculiar states that sometimes arise when debugging.\r\n   * @param identifiers\r\n   */\r\n  maintainTouchpoints(touchpoints: GestureSource<HoveredItemType, StateToken>[]) {\r\n    touchpoints ||= [];\r\n    this._activeTouchpoints\r\n      .filter((source) => !touchpoints.includes(source))\r\n      // Will trigger `.dropTouchpoint` later in the event chain.\r\n      .forEach((source) => source.terminate(true));\r\n  }\r\n\r\n  /**\r\n   * @param identifier The identifier number corresponding to the input sequence.\r\n   */\r\n  hasActiveTouchpoint(identifier: number) {\r\n    return this.identifierMap[identifier] !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the GestureSource (corresponding to a single touchpoint) corresponding\r\n   * to the specified internal identifier.  Internal ID -> unique ID mapping is\r\n   * performed here.\r\n   * @param identifier\r\n   * @returns\r\n   */\r\n  protected getTouchpointWithId(identifier: number) {\r\n    const id = this.identifierMap[identifier];\r\n    return this._activeTouchpoints.find((point) => point.rawIdentifier == id);\r\n  }\r\n\r\n  /**\r\n   * During the lifetime of a GestureSource (a continuous path for a single touchpoint),\r\n   * it is possible that the legal area for the path may change.  This function allows\r\n   * us to find the appropriate set of constraints for the path if any changes have been\r\n   * requested - say, for a subkey menu after a longpress.\r\n   * @param identifier\r\n   * @returns\r\n   */\r\n  protected getConfigForId(identifier: number) {\r\n    // protected - so, used internally only within the input engines.\r\n    // `getTouchpointWithId` will perform the internal -> external ID mapping.\r\n    return this.getTouchpointWithId(identifier).currentRecognizerConfig;\r\n  }\r\n\r\n  protected getStateTokenForId(identifier: number) {\r\n    // protected - so, used internally only within the input engines.\r\n    // `getTouchpointWithId` will perform the internal -> external ID mapping.\r\n    return this.getTouchpointWithId(identifier).stateToken ?? null;\r\n  }\r\n\r\n  protected dropTouchpoint(point: GestureSource<HoveredItemType>) {\r\n    const id = point.rawIdentifier;\r\n\r\n    this._activeTouchpoints = this._activeTouchpoints.filter((pt) => point != pt);\r\n    for(const key of Object.keys(this.identifierMap)) {\r\n      const keyVal = Number.parseInt(key, 10);\r\n      if(this.identifierMap[keyVal] == id) {\r\n        delete this.identifierMap[keyVal];\r\n      }\r\n    }\r\n  }\r\n\r\n  protected addTouchpoint(touchpoint: GestureSource<HoveredItemType, StateToken>) {\r\n    this._activeTouchpoints.push(touchpoint);\r\n  }\r\n\r\n  public get activeSources(): GestureSource<HoveredItemType, StateToken>[] {\r\n    return [].concat(this._activeTouchpoints);\r\n  }\r\n}",
    "import { InputEngineBase } from \"./headless/inputEngineBase.js\";\r\nimport { InputSample } from \"./headless/inputSample.js\";\r\nimport { GestureSource } from \"./headless/gestureSource.js\";\r\nimport { GestureRecognizerConfiguration } from \"./index.js\";\r\nimport { reportError } from \"./reportError.js\";\r\n\r\nexport function processSampleClientCoords<Type, StateToken>(config: GestureRecognizerConfiguration<Type>, clientX: number, clientY: number) {\r\n  const targetRect = config.targetRoot.getBoundingClientRect();\r\n  return {\r\n    clientX: clientX,\r\n    clientY: clientY,\r\n    targetX: clientX - targetRect.left,\r\n    targetY: clientY - targetRect.top\r\n  } as InputSample<Type, StateToken>;\r\n}\r\n\r\nexport abstract class InputEventEngine<ItemType, StateToken> extends InputEngineBase<ItemType, StateToken> {\r\n  abstract registerEventHandlers(): void;\r\n  abstract unregisterEventHandlers(): void;\r\n\r\n  protected buildSampleFor(clientX: number, clientY: number, target: EventTarget, timestamp: number, source: GestureSource<ItemType, StateToken>): InputSample<ItemType, StateToken> {\r\n    const sample: InputSample<ItemType, StateToken> = {\r\n      ...processSampleClientCoords(this.config, clientX, clientY),\r\n      t: timestamp,\r\n      stateToken: source?.stateToken ?? this.stateToken\r\n    };\r\n\r\n    const itemIdentifier = source?.currentRecognizerConfig.itemIdentifier ?? this.config.itemIdentifier;\r\n    const hoveredItem = itemIdentifier(sample, target);\r\n    sample.item = hoveredItem;\r\n\r\n    return sample;\r\n  }\r\n\r\n  protected onInputStart(identifier: number, sample: InputSample<ItemType, StateToken>, target: EventTarget, isFromTouch: boolean) {\r\n    const touchpoint = this.createTouchpoint(identifier, isFromTouch);\r\n    touchpoint.update(sample);\r\n\r\n    this.addTouchpoint(touchpoint);\r\n\r\n    // External objects may desire to directly terminate handling of\r\n    // input sequences under specific conditions.\r\n    touchpoint.path.on('invalidated', () => {\r\n      this.dropTouchpoint(touchpoint);\r\n    });\r\n\r\n    touchpoint.path.on('complete', () => {\r\n      this.dropTouchpoint(touchpoint);\r\n    });\r\n\r\n    try {\r\n      this.emit('pointstart', touchpoint);\r\n    } catch(err) {\r\n      reportError('Engine-internal error while initializing gesture matching for new source', err);\r\n    }\r\n\r\n    return touchpoint;\r\n  }\r\n\r\n  protected onInputMove(touchpoint: GestureSource<ItemType, StateToken>, sample: InputSample<ItemType, StateToken>, target: EventTarget) {\r\n    if(!touchpoint) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      touchpoint.update(sample);\r\n    } catch(err) {\r\n      reportError('Error occurred while updating source', err);\r\n    }\r\n  }\r\n\r\n  protected onInputMoveCancel(touchpoint: GestureSource<ItemType, StateToken>, sample: InputSample<ItemType, StateToken>, target: EventTarget) {\r\n    if(!touchpoint) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      touchpoint.update(sample);\r\n      touchpoint.path.terminate(true);\r\n    } catch(err) {\r\n      reportError('Error occurred while cancelling further input for source', err);\r\n    }\r\n  }\r\n\r\n  protected onInputEnd(touchpoint: GestureSource<ItemType, StateToken>, target: EventTarget) {\r\n    if(!touchpoint) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      touchpoint.path.terminate(false);\r\n    } catch(err) {\r\n      reportError('Error occurred while finalizing input for source', err);\r\n    }\r\n  }\r\n}",
    "import { GestureRecognizerConfiguration } from \"./gestureRecognizerConfiguration.js\";\r\nimport { InputSample } from \"../headless/inputSample.js\";\r\nimport { Nonoptional } from \"../nonoptional.js\";\r\nimport { RecognitionZoneSource } from \"./recognitionZoneSource.js\";\r\n\r\nexport class ZoneBoundaryChecker {\r\n  // This class exists for static methods & fields.\r\n  private constructor() { }\r\n\r\n  public static readonly FAR_TOP   : 0x0008 = 0x0008;\r\n  public static readonly FAR_LEFT  : 0x0004 = 0x0004;\r\n  public static readonly FAR_BOTTOM: 0x0002 = 0x0002;\r\n  public static readonly FAR_RIGHT : 0x0001 = 0x0001;\r\n\r\n  /**\r\n   * Determines the relationship of an input coordinate to one of the gesture engine's\r\n   * active recognition zones and returns a bitmask indicating which boundary (or\r\n   * boundaries) the input coordinate lies outside of.\r\n   *\r\n   * @param coord         An input coordinate\r\n   * @param zone          An object defining a 'recognition zone' of the gesture engine.\r\n   * @param ignoreBitmask A bitmask indicating select boundaries to ignore for the check.\r\n   */\r\n  static getCoordZoneBitmask(coord: InputSample<any>, zone: RecognitionZoneSource): number {\r\n    const bounds = zone.getBoundingClientRect();\r\n\r\n    let bitmask = 0;\r\n    bitmask |= (coord.clientX < bounds.left)   ? ZoneBoundaryChecker.FAR_LEFT   : 0;\r\n    bitmask |= (coord.clientX > bounds.right)  ? ZoneBoundaryChecker.FAR_RIGHT  : 0;\r\n    bitmask |= (coord.clientY < bounds.top)    ? ZoneBoundaryChecker.FAR_TOP    : 0;\r\n    bitmask |= (coord.clientY > bounds.bottom) ? ZoneBoundaryChecker.FAR_BOTTOM : 0;\r\n\r\n    return bitmask; // returns zero if effectively 'within bounds'.\r\n  }\r\n\r\n  /**\r\n   * Confirms whether or not the input coordinate lies within the accepted coordinate bounds\r\n   * for a gesture input sequence's first coordinate.\r\n   */\r\n  static inputStartOutOfBoundsCheck(coord: InputSample<any>, config: Nonoptional<GestureRecognizerConfiguration<any>>): boolean {\r\n    return !!this.getCoordZoneBitmask(coord, config.inputStartBounds); // true if out of bounds.\r\n  }\r\n\r\n  /**\r\n   * Call this method to determine which safe-boundary edges, if any, the initial coordinate\r\n   * indicates should be disabled for its sequence's future updates.\r\n   *\r\n   * This value should be provided as the third argument to `inputMoveCancellationCheck` for\r\n   * updated input coordinates for the current input sequence.\r\n   */\r\n  static inputStartSafeBoundProximityCheck(coord: InputSample<any>, config: Nonoptional<GestureRecognizerConfiguration<any>>): number {\r\n    return this.getCoordZoneBitmask(coord, config.paddedSafeBounds);\r\n  }\r\n\r\n  static inputMoveCancellationCheck(coord: InputSample<any>,\r\n                                    config: Nonoptional<GestureRecognizerConfiguration<any>>,\r\n                                    ignoredSafeBoundFlags?: number): boolean {\r\n    ignoredSafeBoundFlags = ignoredSafeBoundFlags || 0;\r\n\r\n    // If the coordinate lies outside the maximum supported range, fail the boundary check.\r\n    if(!!(this.getCoordZoneBitmask(coord, config.maxRoamingBounds))) {\r\n      return true;\r\n    }\r\n\r\n    let borderProximityBitmask = this.getCoordZoneBitmask(coord, config.safeBounds);\r\n\r\n    // If the active input sequence started close enough to a safe zone border, we\r\n    // disable that part of the said border for any cancellation checks.\r\n    return !!(borderProximityBitmask & ~ignoredSafeBoundFlags);\r\n  }\r\n}",
    "import { GestureRecognizerConfiguration } from \"./configuration/gestureRecognizerConfiguration.js\";\r\nimport { InputEventEngine } from \"./inputEventEngine.js\";\r\nimport { Nonoptional } from \"./nonoptional.js\";\r\nimport { ZoneBoundaryChecker } from \"./configuration/zoneBoundaryChecker.js\";\r\nimport { GestureSource } from \"./headless/gestureSource.js\";\r\n\r\n// Does NOT use the AsyncClosureDispatchQueue... simply because there can only ever be one mouse touchpoint.\r\nexport class MouseEventEngine<ItemType, StateToken = any> extends InputEventEngine<ItemType, StateToken> {\r\n  private readonly _mouseStart: typeof MouseEventEngine.prototype.onMouseStart;\r\n  private readonly _mouseMove:  typeof MouseEventEngine.prototype.onMouseMove;\r\n  private readonly _mouseEnd:   typeof MouseEventEngine.prototype.onMouseEnd;\r\n\r\n  private hasActiveClick: boolean = false;\r\n  private disabledSafeBounds: number = 0;\r\n\r\n  private currentSource: GestureSource<ItemType, StateToken> = null;\r\n  private readonly activeIdentifier = 0;\r\n\r\n  public constructor(config: Nonoptional<GestureRecognizerConfiguration<ItemType, StateToken>>) {\r\n    super(config);\r\n\r\n    // We use this approach, rather than .bind, because _this_ version allows hook\r\n    // insertion for unit tests via prototype manipulation.  The .bind version doesn't.\r\n    this._mouseStart = (event: MouseEvent) => this.onMouseStart(event);\r\n    this._mouseMove  = (event: MouseEvent) => this.onMouseMove(event);\r\n    this._mouseEnd   = (event: MouseEvent) => this.onMouseEnd(event);\r\n  }\r\n\r\n  private get eventRoot(): HTMLElement {\r\n    return this.config.mouseEventRoot;\r\n  }\r\n\r\n  registerEventHandlers() {\r\n    this.eventRoot.addEventListener('mousedown', this._mouseStart, true);\r\n    this.eventRoot.addEventListener('mousemove',  this._mouseMove, false);\r\n    // The listener below fails to capture when performing automated testing checks in Chrome emulation unless 'true'.\r\n    this.eventRoot.addEventListener('mouseup',   this._mouseEnd, true);\r\n  }\r\n\r\n  unregisterEventHandlers() {\r\n    this.eventRoot.removeEventListener('mousedown', this._mouseStart, true);\r\n    this.eventRoot.removeEventListener('mousemove',  this._mouseMove, false);\r\n    this.eventRoot.removeEventListener('mouseup',   this._mouseEnd, true);\r\n  }\r\n\r\n  private preventPropagation(e: MouseEvent) {\r\n    // Standard event maintenance\r\n    e.preventDefault();\r\n    e.cancelBubble=true;\r\n    e.returnValue=false; // I2409 - Avoid focus loss for visual keyboard events\r\n\r\n    if(typeof e.stopImmediatePropagation == 'function') {\r\n      e.stopImmediatePropagation();\r\n    } else if(typeof e.stopPropagation == 'function') {\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private buildSampleFromEvent(event: MouseEvent) {\r\n    // WILL be null for newly-starting `GestureSource`s / contact points.\r\n    return this.buildSampleFor(event.clientX, event.clientY, event.target, performance.now(), this.currentSource);\r\n  }\r\n\r\n  onMouseStart(event: MouseEvent) {\r\n    // If it's not an event we'd consider handling, do not prevent event\r\n    // propagation!  Just don't process it.\r\n    if(!this.config.targetRoot.contains(event.target as Node)) {\r\n      return;\r\n    }\r\n\r\n    this.preventPropagation(event);\r\n\r\n    const sample = this.buildSampleFromEvent(event);\r\n\r\n    if(!ZoneBoundaryChecker.inputStartOutOfBoundsCheck(sample, this.config)) {\r\n      // If we started very close to a safe zone border, remember which one(s).\r\n      // This is important for input-sequence cancellation check logic.\r\n      this.disabledSafeBounds = ZoneBoundaryChecker.inputStartSafeBoundProximityCheck(sample, this.config);\r\n    }\r\n\r\n    const touchpoint = this.onInputStart(this.activeIdentifier, sample, event.target, false);\r\n    this.currentSource = touchpoint;\r\n\r\n    const cleanup = () => {\r\n      this.currentSource = null;\r\n    }\r\n\r\n    touchpoint.path.on('complete', cleanup);\r\n    touchpoint.path.on('invalidated', cleanup);\r\n  }\r\n\r\n  onMouseMove(event: MouseEvent) {\r\n    const source = this.currentSource;\r\n    if(!source) {\r\n      return;\r\n    }\r\n\r\n    const sample = this.buildSampleFromEvent(event);\r\n\r\n    if(!event.buttons) {\r\n      if(this.hasActiveClick) {\r\n        this.hasActiveClick = false;\r\n        this.onInputMoveCancel(source, sample, event.target);\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.preventPropagation(event);\r\n    const config = source.currentRecognizerConfig;\r\n\r\n    if(!ZoneBoundaryChecker.inputMoveCancellationCheck(sample, config, this.disabledSafeBounds)) {\r\n      this.onInputMove(source, sample, event.target);\r\n    } else {\r\n      this.onInputMoveCancel(source, sample, event.target);\r\n    }\r\n  }\r\n\r\n  onMouseEnd(event: MouseEvent) {\r\n    const source = this.currentSource;\r\n    if(!source) {\r\n      return;\r\n    }\r\n\r\n    if(!event.buttons) {\r\n      this.hasActiveClick = false;\r\n    }\r\n\r\n    this.onInputEnd(source, event.target);\r\n  }\r\n}",
    "import { GestureRecognizerConfiguration } from \"./configuration/gestureRecognizerConfiguration.js\";\r\nimport { InputEventEngine } from \"./inputEventEngine.js\";\r\nimport { Nonoptional } from \"./nonoptional.js\";\r\nimport { ZoneBoundaryChecker } from \"./configuration/zoneBoundaryChecker.js\";\r\nimport { GestureSource } from \"./headless/gestureSource.js\";\r\nimport { ManagedPromise } from \"@keymanapp/web-utils\";\r\nimport { AsyncClosureDispatchQueue } from \"./headless/asyncClosureDispatchQueue.js\";\r\nimport { GesturePath } from \"./index.js\";\r\n\r\nfunction touchListToArray(list: TouchList) {\r\n  const arr: Touch[] = [];\r\n\r\n  for(let i=0; i < list.length; i++) {\r\n    arr.push(list.item(i));\r\n  }\r\n\r\n  return arr;\r\n}\r\nexport class TouchEventEngine<ItemType, StateToken = any> extends InputEventEngine<ItemType, StateToken> {\r\n  private readonly _touchStart: typeof TouchEventEngine.prototype.onTouchStart;\r\n  private readonly _touchMove:  typeof TouchEventEngine.prototype.onTouchMove;\r\n  private readonly _touchEnd:   typeof TouchEventEngine.prototype.onTouchEnd;\r\n\r\n  protected readonly eventDispatcher = new AsyncClosureDispatchQueue();\r\n\r\n  private safeBoundMaskMap: {[id: number]: number} = {};\r\n  // This map works synchronously with the actual event handlers.\r\n  private pendingSourcePromises: Map<number, ManagedPromise<GestureSource<ItemType, StateToken>>> = new Map();\r\n  private inputStartSignalMap: Map<GestureSource<ItemType, StateToken>, ManagedPromise<void>> = new Map();\r\n\r\n  public constructor(config: Nonoptional<GestureRecognizerConfiguration<ItemType, StateToken>>) {\r\n    super(config);\r\n\r\n    // We use this approach, rather than .bind, because _this_ version allows hook\r\n    // insertion for unit tests via prototype manipulation.  The .bind version doesn't.\r\n    this._touchStart = (event: TouchEvent) => this.onTouchStart(event);\r\n    this._touchMove  = (event: TouchEvent) => this.onTouchMove(event);\r\n    this._touchEnd   = (event: TouchEvent) => this.onTouchEnd(event);\r\n  }\r\n\r\n  private get eventRoot(): HTMLElement {\r\n    return this.config.touchEventRoot;\r\n  }\r\n\r\n  registerEventHandlers() {\r\n    // The 'passive' property ensures we can prevent MouseEvent followups from TouchEvents.\r\n    // It is only specified during `addEventListener`, not during `removeEventListener`.\r\n    this.eventRoot.addEventListener('touchstart', this._touchStart, {capture: true, passive: false});\r\n    this.eventRoot.addEventListener('touchmove',  this._touchMove, {capture: false, passive: false});\r\n    // The listener below fails to capture when performing automated testing checks in Chrome emulation unless 'true'.\r\n    this.eventRoot.addEventListener('touchend',   this._touchEnd, {capture: true, passive: false});\r\n  }\r\n\r\n  unregisterEventHandlers() {\r\n    this.eventRoot.removeEventListener('touchstart', this._touchStart, true);\r\n    this.eventRoot.removeEventListener('touchmove',  this._touchMove, false);\r\n    this.eventRoot.removeEventListener('touchend',   this._touchEnd, true);\r\n  }\r\n\r\n  private preventPropagation(e: TouchEvent) {\r\n    // Standard event maintenance\r\n    if(e.cancelable) {\r\n      // Chrome generates error-log messages if this is attempted while\r\n      // the condition is false.\r\n      e.preventDefault();\r\n    }\r\n\r\n    if(typeof e.stopImmediatePropagation == 'function') {\r\n      e.stopImmediatePropagation();\r\n    } else if(typeof e.stopPropagation == 'function') {\r\n      e.stopPropagation();\r\n    }\r\n  }\r\n\r\n  public dropTouchpoint(source: GestureSource<ItemType>) {\r\n    super.dropTouchpoint(source);\r\n\r\n    for(const key of Object.keys(this.safeBoundMaskMap)) {\r\n      const keyVal = Number.parseInt(key, 10);\r\n      if(this.getTouchpointWithId(keyVal) == source) {\r\n        delete this.safeBoundMaskMap[keyVal];\r\n      }\r\n    }\r\n  }\r\n\r\n  public fulfillInputStart(touchpoint: GestureSource<ItemType, StateToken, GesturePath<ItemType, StateToken>>) {\r\n    const lock = this.inputStartSignalMap.get(touchpoint);\r\n    if(lock) {\r\n      this.inputStartSignalMap.delete(touchpoint);\r\n      lock.resolve();\r\n    }\r\n  };\r\n\r\n  public hasActiveTouchpoint(identifier: number): boolean {\r\n    const baseResult = super.hasActiveTouchpoint(identifier);\r\n    return baseResult || !!this.pendingSourcePromises.has(identifier);\r\n  }\r\n\r\n  private buildSampleFromTouch(touch: Touch, timestamp: number, source: GestureSource<ItemType, StateToken>) {\r\n    // WILL be null for newly-starting `GestureSource`s / contact points.\r\n    return this.buildSampleFor(touch.clientX, touch.clientY, touch.target, timestamp, source);\r\n  }\r\n\r\n  onTouchStart(event: TouchEvent) {\r\n    // If it's not an event we'd consider handling, do not prevent event\r\n    // propagation!  Just don't process it.\r\n    if(!this.config.targetRoot.contains(event.target as Node)) {\r\n      return;\r\n    }\r\n\r\n    this.preventPropagation(event);\r\n\r\n    // In case a touch ID is reused, we can pre-emptively filter it for special cases to cancel the old version,\r\n    // noting that it's included by a changedTouch.  (Only _new_ contact points are included in .changedTouches\r\n    // during a touchstart.)\r\n    const allTouches = touchListToArray(event.touches);\r\n    const newTouches = touchListToArray(event.changedTouches);\r\n    const oldTouches = allTouches.filter((touch1) => {\r\n      return newTouches.findIndex(touch2 => touch1.identifier == touch2.identifier) == -1;\r\n    });\r\n\r\n    // Any 'old touches' should have pre-existing entries in our promise-map that are still current, as\r\n    // the promise-map is maintained 100% synchronously with incoming events.\r\n    const oldSourcePromises = oldTouches.map((touch) => this.pendingSourcePromises.get(touch.identifier));\r\n\r\n    this.eventDispatcher.runAsync(async () => {\r\n      const oldSources = await Promise.all(oldSourcePromises);\r\n      // Maintain all touches in the `.touches` array that are NOT marked as `.changedTouches` (and therefore, new)\r\n      this.maintainTouchpoints(oldSources);\r\n\r\n      return this.eventDispatcher.defaultWait;\r\n    });\r\n\r\n    /*\r\n      We create Promises that can be set and retrieved synchronously with the actual event handlers\r\n      in order to prevent issues from tricky asynchronous identifier-to-source mapping attempts.\r\n\r\n      As these Promises are set (and thus, retrievable) synchronously with the actual event handlers,\r\n      we can closure-capture them for use in the internally-asynchronous processing closures.\r\n\r\n      `capturedSourcePromises` will be useful for closure-capture binding the new Promise(s) to\r\n      the closure to be queued.  `this.pendingSourcePromises` facilitates similar closure-capture\r\n      patterns within the touchMove and touchEnd handlers for their queued closures.\r\n    */\r\n    const capturedSourcePromises = new Map<number, ManagedPromise<GestureSource<ItemType, StateToken>>>();\r\n    for(let i=0; i < event.changedTouches.length; i++) {\r\n      const touch = event.changedTouches.item(i);\r\n      const promise = new ManagedPromise<GestureSource<ItemType, StateToken>>();\r\n      this.pendingSourcePromises.set(touch.identifier, promise);\r\n      capturedSourcePromises.set(touch.identifier, promise);\r\n    }\r\n\r\n    /*\r\n      When multiple touchpoints are active, we need to ensure a specific order of events.\r\n      The easiest way to ensure the exact order involves programmatic delay of their\r\n      processing, essentially \"sequentializing\" the events into a deterministic order.\r\n\r\n      It also helps to ensure that any path updates are only emitted when all listeners\r\n      for that path have been prepared - and other parts of the engine cause that to happen\r\n      asynchronously in certain situations.  Within KMW, one such case is when a simple-tap\r\n      with `nextLayer` defined is auto-completed by a new incoming touch, triggering an\r\n      instant layer-change.\r\n    */\r\n    this.eventDispatcher.runAsync(() => {\r\n      // Ensure the same timestamp is used for all touches being updated.\r\n      const timestamp = performance.now();\r\n      let touchpoint: GestureSource<ItemType, StateToken> = null;\r\n\r\n      // During a touch-start, only _new_ touch contact points are listed here;\r\n      // we shouldn't signal \"input start\" for any previously-existing touch points,\r\n      // so `.changedTouches` is the best way forward.\r\n      for(let i=0; i < event.changedTouches.length; i++) {\r\n        const touch = event.changedTouches.item(i);\r\n        const touchId = touch.identifier;\r\n        const sample = this.buildSampleFromTouch(touch, timestamp, null);\r\n\r\n        if(!ZoneBoundaryChecker.inputStartOutOfBoundsCheck(sample, this.config)) {\r\n          // If we started very close to a safe zone border, remember which one(s).\r\n          // This is important for input-sequence cancellation check logic.\r\n          this.safeBoundMaskMap[touchId] = ZoneBoundaryChecker.inputStartSafeBoundProximityCheck(sample, this.config);\r\n        } else {\r\n          // This touchpoint shouldn't be considered; do not signal a touchstart for it.\r\n          let sourcePromise = capturedSourcePromises.get(touchId);\r\n          sourcePromise.resolve(null);\r\n          continue;\r\n        }\r\n\r\n        touchpoint = this.onInputStart(touchId, sample, event.target, true);\r\n\r\n        /*\r\n          We use the closure-captured version bound to this specific closure, rather than the\r\n          most recent one for the touch-identifier - under heavy rapid typing, it's possible that\r\n          the touch-identifier has been reused.\r\n\r\n          The resolved Promise may then be used to retrieve the correct source in the other event\r\n          handlers' closures.\r\n        */\r\n        let sourcePromise = capturedSourcePromises.get(touchId);\r\n        sourcePromise.resolve(touchpoint);\r\n\r\n        /*\r\n          Ensure we only do the cleanup if and when it hasn't already been replaced by new events later.\r\n\r\n          Must be done for EACH source - we can't risk leaving a lingering entry once we've dismissed\r\n          processing for the source.  Failure to do so may result in blocking touch events that should\r\n          no longer be manipulated by this engine by affecting `hasActiveTouchpoint`.\r\n        */\r\n        const cleanup = () => {\r\n          /*\r\n            If delays accumulate significantly, it is possible that when this queued closure is run,\r\n            a different touchpoint is reusing the same identifier.  Don't delete the entry if our\r\n            entry has been replaced.\r\n          */\r\n          if(this.pendingSourcePromises.get(touchId) == sourcePromise) {\r\n            this.pendingSourcePromises.delete(touchId);\r\n          }\r\n        }\r\n\r\n        touchpoint.path.on('complete', cleanup);\r\n        touchpoint.path.on('invalidated', cleanup);\r\n      }\r\n\r\n      if(touchpoint) {\r\n        // This 'lock' should only be released when the last simultaneously-registered touch is published via\r\n        // gesture-recognizer event.\r\n        let eventSignalPromise = new ManagedPromise<void>();\r\n        this.inputStartSignalMap.set(touchpoint, eventSignalPromise);\r\n\r\n        return eventSignalPromise.corePromise;\r\n      } else {\r\n        return Promise.resolve();\r\n      }\r\n    });\r\n  }\r\n\r\n  onTouchMove(event: TouchEvent) {\r\n    for(let i = 0; i < event.touches.length; i++) {\r\n      const touch = event.touches.item(i);\r\n      if(this.hasActiveTouchpoint(touch.identifier)) {\r\n        this.preventPropagation(event);\r\n        break;\r\n      }\r\n    }\r\n\r\n    /*\r\n      Using the Promise map built in touchStart, we can retrieve a Promise for the source linked\r\n      to this event and closure-capture it for the closure queued below.\r\n    */\r\n    const capturedSourcePromises = new Map<number, Promise<GestureSource<ItemType, StateToken>>>();\r\n    for(let i = 0; i < event.touches.length; i++) {\r\n      const touchId = event.touches.item(i).identifier;\r\n      // If the source's gesture is finalized or cancelled but touch events are ongoing,\r\n      // with no delay between event and its processing, the map entry here will be cleared.\r\n      capturedSourcePromises.set(touchId, this.pendingSourcePromises.get(touchId)?.corePromise);\r\n    }\r\n\r\n    this.eventDispatcher.runAsync(async () => {\r\n      const touches = await Promise.all(capturedSourcePromises.values());\r\n      this.maintainTouchpoints(touches);\r\n\r\n      return this.eventDispatcher.defaultWait;\r\n    });\r\n\r\n    /*\r\n      When multiple touchpoints are active, we need to ensure a specific order of events.\r\n      The easiest way to ensure the exact order involves programmatic delay of their\r\n      processing, essentially \"sequentializing\" the events into a deterministic order.\r\n\r\n      It also helps to ensure that any path updates are only emitted when all listeners\r\n      for that path have been prepared - and other parts of the engine cause that to happen\r\n      asynchronously in certain situations.  Within KMW, one such case is when a simple-tap\r\n      with `nextLayer` defined is auto-completed by a new incoming touch, triggering an\r\n      instant layer-change.\r\n    */\r\n    this.eventDispatcher.runAsync(async () => {\r\n      // Ensure the same timestamp is used for all touches being updated.\r\n      const timestamp = performance.now();\r\n\r\n      // Do not change to `changedTouches` - we need a sample for all active touches in order\r\n      // to facilitate path-update synchronization for multi-touch gestures.\r\n      //\r\n      // May be worth doing changedTouches _first_ though.\r\n      for(let i=0; i < event.touches.length; i++) {\r\n        const touch = event.touches.item(i);\r\n        const touchId = touch.identifier;\r\n\r\n\r\n        // Only lists touch contact points that have been lifted; touchmove is\r\n        // raised separately if any movement occurred.\r\n        //\r\n        // If the promise object could not be assigned, we `await undefined` -\r\n        // which JS converts to `await Promise.resolve(undefined)`.  It's safe.\r\n        const source = await capturedSourcePromises.get(touchId);\r\n        if(!source || source.isPathComplete) {\r\n          continue;\r\n        }\r\n\r\n        const config = source.currentRecognizerConfig;\r\n        const sample = this.buildSampleFromTouch(touch, timestamp, source);\r\n\r\n        if(!ZoneBoundaryChecker.inputMoveCancellationCheck(sample, config, this.safeBoundMaskMap[touchId])) {\r\n          this.onInputMove(source, sample, touch.target);\r\n        } else {\r\n          this.onInputMoveCancel(source, sample, touch.target);\r\n        }\r\n      }\r\n\r\n      /*\r\n        Since we're operating within an async function, a Promise return-type\r\n        is implied.  That cancels out the default wait, but we want to ensure\r\n        that the default wait is applied here.\r\n      */\r\n      return this.eventDispatcher.defaultWait;\r\n    });\r\n  }\r\n\r\n  onTouchEnd(event: TouchEvent) {\r\n    for(let i = 0; i < event.changedTouches.length; i++) {\r\n      const touch = event.changedTouches.item(i);\r\n      if(this.hasActiveTouchpoint(touch.identifier)) {\r\n        this.preventPropagation(event);\r\n        break;\r\n      }\r\n    }\r\n\r\n    /*\r\n      Using the Promise map built in touchStart, we can retrieve a Promise for the source linked\r\n      to this event and closure-capture it for the closure queued below.\r\n    */\r\n    const capturedSourcePromises = new Map<number, Promise<GestureSource<ItemType, StateToken>>>();\r\n    // Any ending touches don't show up in event.touches - only in event.changedTouches!\r\n    for(let i = 0; i < event.changedTouches.length; i++) {\r\n      const touchId = event.changedTouches.item(i).identifier;\r\n      // If the source's gesture is finalized or cancelled but touch events are ongoing,\r\n      // with no delay between event and its processing, the map entry here will be cleared.\r\n      const promiseToCapture = this.pendingSourcePromises.get(touchId)?.corePromise;\r\n      capturedSourcePromises.set(touchId, promiseToCapture);\r\n    }\r\n\r\n    this.eventDispatcher.runAsync(async () => {\r\n      // Only lists touch contact points that have been lifted; touchmove is\r\n      // raised separately if any movement occurred.\r\n      //\r\n      // If the promise object could not be assigned, we `await undefined` -\r\n      // which JS converts to `await Promise.resolve(undefined)`.  It's safe.\r\n      for(let i=0; i < event.changedTouches.length; i++) {\r\n        const touch = event.changedTouches.item(i);\r\n\r\n        const source = await capturedSourcePromises.get(touch.identifier);\r\n        if(!source || source.isPathComplete) {\r\n          continue;\r\n        }\r\n\r\n        this.onInputEnd(source, event.target);\r\n      }\r\n\r\n      return this.eventDispatcher.defaultWait;\r\n    });\r\n  }\r\n}",
    "import { CumulativePathStats } from \"../../cumulativePathStats.js\";\r\nimport { GestureSource, GestureSourceSubview } from \"../../gestureSource.js\";\r\nimport { ContactModel } from \"../specs/contactModel.js\";\r\nimport { ManagedPromise, TimeoutPromise } from \"@keymanapp/web-utils\";\r\n\r\nexport type FulfillmentCause = 'path' | 'timer' | 'item' | 'cancelled';\r\n\r\nexport interface PathMatchResolution {\r\n  type: 'resolve',\r\n  cause: FulfillmentCause\r\n}\r\n\r\nexport interface PathMatchRejection {\r\n  type: 'reject'\r\n  cause: FulfillmentCause\r\n}\r\n\r\nexport interface PathNotFulfilled {\r\n  type: 'continue'\r\n}\r\n\r\ntype PathMatchResult = PathMatchRejection | PathMatchResolution;\r\ntype PathUpdateResult = PathMatchResult | PathNotFulfilled;\r\n\r\nexport class PathMatcher<Type, StateToken = any> {\r\n  private timerPromise?: TimeoutPromise;\r\n  public readonly model: ContactModel<Type, StateToken>;\r\n\r\n  // During execution, source.path is fine... but once this matcher's role is done,\r\n  // `source` will continue to receive edits and may even change the instance\r\n  // underlying the `path` field.\r\n  public readonly source: GestureSource<Type>;\r\n\r\n  /**\r\n   * Holds the stats for the inherited portion of the path.\r\n   */\r\n  private readonly inheritedStats: CumulativePathStats<Type>;\r\n\r\n  /**\r\n   * Holds the path's stats at the time of the last `update()` call, as needed\r\n   * by PathModel's `evaluate` function.\r\n   */\r\n  // In regard to KeymanWeb, this exists to enhance flick-resetting behaviors.\r\n  private lastStats: CumulativePathStats<Type>;\r\n\r\n  private readonly publishedPromise: ManagedPromise<PathMatchResult>\r\n  private _result: PathMatchResult;\r\n\r\n  public get promise() {\r\n    return this.publishedPromise.corePromise;\r\n  }\r\n\r\n  constructor(model: ContactModel<Type, StateToken>, source: GestureSource<Type>, basePathStats?: CumulativePathStats<Type>) {\r\n    /* c8 ignore next 3 */\r\n    if(!model || !source) {\r\n      throw new Error(\"A gesture-path source and contact-path model must be specified.\");\r\n    }\r\n\r\n    this.model = model;\r\n    this.publishedPromise = new ManagedPromise<PathMatchResult>();\r\n    this.source = source;\r\n    this.inheritedStats = basePathStats;\r\n    this.lastStats = null;\r\n\r\n    if(model.timer) {\r\n      const offset = model.timer.inheritElapsed ? Math.min(source.path.stats.duration, model.timer.duration) : 0;\r\n      this.timerPromise = new TimeoutPromise(model.timer.duration - offset);\r\n\r\n      this.publishedPromise.then(() => {\r\n        this.timerPromise.resolve(false);\r\n        // but make sure that simultaneous path resolution continues even if the timer's is mismatched.\r\n      });\r\n\r\n      this.timerPromise.then((result) => {\r\n        const trueSource = source instanceof GestureSourceSubview ? source.baseSource : source;\r\n        const timestamp = performance.now();\r\n\r\n        /* It's entirely possible that this will be triggered at a timestamp unaligned with the\r\n         * standard timing for input sampling.  It's best to ensure that the reported path\r\n         * duration (on path.stats) satisfies the timer threshold, so we add an artificial\r\n         * sample here that will enforce that desire.\r\n         */\r\n        if(!trueSource.isPathComplete && trueSource.currentSample.t != timestamp) {\r\n          trueSource.path.extend({\r\n            ...trueSource.currentSample,\r\n            t: timestamp\r\n          });\r\n        }\r\n\r\n        if(result != model.timer.expectedResult) {\r\n          this.finalize(false, 'timer');\r\n        }\r\n\r\n        // Check for validation as needed.\r\n        this.finalize(true, 'timer');\r\n      });\r\n    }\r\n  }\r\n\r\n  private finalize(result: boolean, cause: FulfillmentCause): PathMatchResult {\r\n    if(this.publishedPromise.isFulfilled) {\r\n      return this._result;\r\n    }\r\n\r\n    const model = this.model;\r\n\r\n    // Check for validation as needed.\r\n    if(model.validateItem && result) {\r\n      // If we're finalizing on a positive note but there's an item-validation check, we need\r\n      // to obey the results of that check.\r\n      result = model.validateItem(this.source.path.stats.lastSample.item, this.baseItem);\r\n    }\r\n\r\n    let retVal: PathMatchResult;\r\n    if(result) {\r\n      retVal = {\r\n        type: model.pathResolutionAction,\r\n        cause: cause\r\n      };\r\n    } else {\r\n      retVal = {\r\n        type: 'reject',\r\n        cause: cause\r\n      };\r\n    }\r\n    this.publishedPromise.resolve(retVal)\r\n    this._result = retVal;\r\n\r\n    return retVal;\r\n  }\r\n\r\n  get stats() {\r\n    return this.source.path.stats;\r\n  }\r\n\r\n  get baseItem() {\r\n    return this.source.baseItem;\r\n  }\r\n\r\n  get lastItem() {\r\n    return this.source.currentSample.item;\r\n  }\r\n\r\n  update(): PathUpdateResult {\r\n    const model = this.model;\r\n    const source = this.source;\r\n\r\n    if(source.path.wasCancelled) {\r\n      return this.finalize(false, 'path');\r\n    }\r\n\r\n    // For certain unit-test setups, we may have a zero-length path when this is called during test init.\r\n    // It's best to have that path-coord-length check in place, just in case.\r\n    if(model.itemChangeAction && source.path.stats.sampleCount > 0 && source.currentSample.item != source.baseItem) {\r\n      const result = model.itemChangeAction == 'resolve';\r\n\r\n      return this.finalize(result, 'item');\r\n    } else {\r\n      // Note:  is current path, not 'full path'.\r\n      const result = model.pathModel.evaluate(source.path, this.lastStats, source.baseItem, this.inheritedStats) || 'continue';\r\n      this.lastStats = source.path.stats;\r\n\r\n      if(result != 'continue') {\r\n        return this.finalize(result == 'resolve', 'path');\r\n      } else if(source.path.isComplete) {\r\n        // If the PathModel said to 'continue' but the path is done, we default\r\n        // to rejecting the model; there will be no more changes, after all.\r\n        return this.finalize(false, 'path');\r\n      }\r\n\r\n      return {\r\n        type: 'continue'\r\n      };\r\n    }\r\n  }\r\n}",
    "import { GestureSource, GestureSourceSubview } from \"../../gestureSource.js\";\r\n\r\nimport { GestureModel, GestureResolution, GestureResolutionSpec, RejectionDefault, RejectionReplace, ResolutionItemSpec } from \"../specs/gestureModel.js\";\r\n\r\nimport { ManagedPromise, TimeoutPromise } from \"@keymanapp/web-utils\";\r\nimport { FulfillmentCause, PathMatcher } from \"./pathMatcher.js\";\r\nimport { CumulativePathStats } from \"../../cumulativePathStats.js\";\r\nimport { processSampleClientCoords } from \"../../../inputEventEngine.js\";\r\n\r\n/**\r\n * This interface specifies the minimal data necessary for setting up gesture-selection\r\n * among a set of gesture models that will conceptually follow from the most\r\n * recently-matched gesture-model.  The most standard implementation of this is the\r\n * `GestureMatcher` class.\r\n *\r\n * Up until very recently, KeymanWeb would delegate certain gestures to be handled by\r\n * host apps when it was in an embedded state.  While that pattern has been dropped,\r\n * the abstraction gained from reaching compatibility with it is useful.  Either way,\r\n * for such scenarios, as long as fulfilled gestures can be linked to an implementation\r\n * of this interface, they can be integrated into the gesture-sequence staging system -\r\n * even if not matched directly by the recognizer itself.\r\n */\r\nexport interface PredecessorMatch<Type, StateToken> {\r\n  readonly sources: GestureSource<Type>[];\r\n  readonly allSourceIds: string[];\r\n  readonly primaryPath: GestureSource<Type, StateToken>;\r\n  readonly result: MatchResult<Type>;\r\n  readonly model?: GestureModel<Type, any>;\r\n  readonly baseItem: Type;\r\n  readonly predecessor?: PredecessorMatch<Type, StateToken>;\r\n}\r\n\r\nexport interface MatchResult<Type> {\r\n  readonly matched: boolean,\r\n  readonly action: GestureResolution<Type>\r\n}\r\n\r\nexport interface MatchResultSpec {\r\n  readonly matched: boolean,\r\n  readonly action: GestureResolutionSpec\r\n}\r\n\r\nexport class GestureMatcher<Type, StateToken = any> implements PredecessorMatch<Type, StateToken> {\r\n  private sustainTimerPromise?: TimeoutPromise;\r\n  public readonly model: GestureModel<Type, StateToken>;\r\n\r\n  private readonly pathMatchers: PathMatcher<Type>[];\r\n\r\n  public get sources(): GestureSource<Type>[] {\r\n    return this.pathMatchers.map((pathMatch, index) => {\r\n      if(this.model.contacts[index].resetOnInstantFulfill) {\r\n        return undefined;\r\n      } else {\r\n        return pathMatch.source;\r\n      }\r\n    }).filter((entry) => !!entry);\r\n  }\r\n\r\n  private _isCancelled: boolean = false;\r\n\r\n  readonly predecessor?: PredecessorMatch<Type, StateToken>;\r\n\r\n  private readonly publishedPromise: ManagedPromise<MatchResult<Type>>; // unsure on the actual typing at the moment.\r\n  private _result: MatchResult<Type>;\r\n\r\n  public get promise() {\r\n    return this.publishedPromise.corePromise;\r\n  }\r\n\r\n  constructor(\r\n    model: GestureModel<Type, StateToken>,\r\n    sourceObj: GestureSource<Type> | PredecessorMatch<Type, StateToken>\r\n  ) {\r\n    /* c8 ignore next 5 */\r\n    if(!model || !sourceObj) {\r\n      throw new Error(\"Construction of GestureMatcher requires a gesture-model spec and a source for related contact points.\");\r\n    } else if(!model.sustainTimer && !sourceObj) {\r\n      throw new Error(\"If the provided gesture-model spec lacks a sustain timer, there must be an active contact point.\");\r\n    }\r\n\r\n    // We condition on ComplexGestureSource since some unit tests mock the other type without\r\n    // instantiating the actual type.\r\n    const predecessor = sourceObj instanceof GestureSource ? null : sourceObj;\r\n    const source = predecessor ? null : (sourceObj as GestureSource<Type>);\r\n\r\n    this.predecessor = predecessor;\r\n    this.publishedPromise = new ManagedPromise();\r\n\r\n    this.model = model;\r\n    if(model.sustainTimer) {\r\n      this.sustainTimerPromise = new TimeoutPromise(model.sustainTimer.duration);\r\n      this.sustainTimerPromise.then((elapsed) => {\r\n        const shouldResolve = model.sustainTimer.expectedResult == elapsed;\r\n        this.finalize(shouldResolve, 'timer');\r\n      });\r\n    }\r\n\r\n    this.pathMatchers = [];\r\n\r\n    const unfilteredSourceTouchpoints: GestureSource<Type>[] = source\r\n      ? [ source ]\r\n      : predecessor.sources;\r\n\r\n    const sourceTouchpoints = unfilteredSourceTouchpoints.map((entry) => {\r\n      if(source && entry == source) {\r\n        // Due to internal delays that can occur when an incoming tap triggers\r\n        // completion of a previously-existing gesture but is not included in it\r\n        // (`resetOnInstantFulfill` mechanics), it is technically possible for a very\r\n        // quick tap to be 'complete' by the time we start trying to match\r\n        // against it on some devices.  We should still try in such cases.\r\n        return source;\r\n      } else {\r\n        return entry.isPathComplete ? null : entry;\r\n      }\r\n    }).reduce((cleansed, entry) => {\r\n      return entry ? cleansed.concat(entry) : cleansed;\r\n    }, [] as GestureSource<Type>[]);\r\n\r\n    if(model.sustainTimer && sourceTouchpoints.length > 0) {\r\n      // If a sustain timer is set, it's because we expect to have NO gesture-source _initially_.\r\n      // If we actually have one, that's cause for rejection.\r\n      //\r\n      this.finalize(false, 'path');\r\n      return;\r\n    } else if(!model.sustainTimer && sourceTouchpoints.length == 0) {\r\n      // If no sustain timer is set, we don't start against the specified set; that'll happen\r\n      // once there's an actual source to support the modeled gesture.\r\n      this.finalize(false, 'path');\r\n    }\r\n\r\n    for(let touchpointIndex = 0; touchpointIndex < sourceTouchpoints.length; touchpointIndex++) {\r\n      const srcContact = sourceTouchpoints[touchpointIndex];\r\n\r\n      if(srcContact instanceof GestureSourceSubview) {\r\n        srcContact.disconnect();  // prevent further updates from mangling tracked path info.\r\n      }\r\n\r\n      // No need to filter out already-matched contact points, and doing so is more trouble\r\n      // than its worth.\r\n\r\n      const contactSpec = model.contacts[touchpointIndex];\r\n      /* c8 ignore next 3 */\r\n      if(!contactSpec) {\r\n        throw new Error(`No contact model for inherited path: gesture \"${model.id}', entry ${touchpointIndex}`);\r\n      }\r\n      const inheritancePattern = contactSpec?.model.pathInheritance ?? 'chop';\r\n\r\n      let preserveBaseItem: boolean = false;\r\n\r\n      let contact: GestureSourceSubview<Type>;\r\n      switch(inheritancePattern) {\r\n        case 'reject':\r\n          this.finalize(false, 'path');\r\n          return;\r\n        case 'full':\r\n          contact = srcContact.constructSubview(false, true);\r\n          this.addContactInternal(contact, srcContact.path.stats, true);\r\n          continue;\r\n        case 'partial':\r\n          preserveBaseItem = true;\r\n          // Intentional fall-through\r\n        case 'chop':\r\n          contact = srcContact.constructSubview(true, preserveBaseItem);\r\n          this.addContactInternal(contact, srcContact.path.stats, true);\r\n          break;\r\n      }\r\n    }\r\n  }\r\n\r\n  public cancel() {\r\n    this._isCancelled = true;\r\n    if(!this._result) {\r\n      this.finalize(false, 'cancelled');\r\n    }\r\n  }\r\n\r\n  public get isCancelled(): boolean {\r\n    return this._isCancelled;\r\n  }\r\n\r\n  private finalize(matched: boolean, cause: FulfillmentCause): MatchResult<Type> {\r\n    if(this.publishedPromise.isFulfilled) {\r\n      return this._result;\r\n    }\r\n\r\n    try {\r\n      // Determine the correct action-spec that should result from the finalization.\r\n      let action: GestureResolutionSpec | ((RejectionDefault | RejectionReplace) & ResolutionItemSpec);\r\n      if(matched) {\r\n        // Easy peasy - resolutions only need & have the one defined action type.\r\n        action = this.model.resolutionAction;\r\n      } else {\r\n        /*\r\n          Some gesture types may wish to restart with a new base item if they fail due to\r\n          it changing during its lifetime or due to characteristics of the contact-point's\r\n          path.\r\n\r\n          If a gesture model match is outright-cancelled, matcher restarts should be completely\r\n          blocked.  One notable reason:  if a model-match is _immediately_ cancelled due to\r\n          initial conditions, reattempting it can cause an infinite (async) loop!\r\n        */\r\n        if(cause != 'cancelled' && this.model.rejectionActions?.[cause]) {\r\n          action = this.model.rejectionActions[cause];\r\n          action.item = 'none';\r\n        }\r\n\r\n        // Rejection for other reasons, or if no special action is defined for item rejection:\r\n        action = action || {\r\n          type: 'none',\r\n          item: 'none'\r\n        };\r\n      }\r\n\r\n      // Determine the item source for the item to be reported for this gesture, if any.\r\n      let resolutionItem: Type;\r\n      const itemSource = action.item ?? 'current';\r\n      switch(itemSource) {\r\n        case 'none':\r\n          resolutionItem = null;\r\n          break;\r\n        case 'base':\r\n          resolutionItem = this.primaryPath.baseItem;\r\n          break;\r\n        case 'current':\r\n          resolutionItem = this.primaryPath.currentSample.item;\r\n          break;\r\n      }\r\n\r\n      // Do actual resolution now that we can convert the spec into a proper resolution object.\r\n      let resolveObj: MatchResult<Type> = {\r\n        matched: matched,\r\n        action: {\r\n          ...action,\r\n          item: resolutionItem\r\n        }\r\n      };\r\n\r\n      this.publishedPromise.resolve(resolveObj);\r\n\r\n      this._result = resolveObj;\r\n      return resolveObj;\r\n      /* c8 ignore next 3 */\r\n    } catch(err) {\r\n      this.publishedPromise.reject(err);\r\n      return {\r\n        matched: false,\r\n        action: {\r\n          type: 'none',\r\n          item: null\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Applies any source-finalization specified by the model based on whether or not it was matched.\r\n   * It is invalid to call this method before model evaluation is complete.\r\n   *\r\n   * Additionally, this should only be applied for \"selected\" gesture models - those that \"win\"\r\n   * and are accepted as part of a GestureSequence.\r\n   */\r\n  public finalizeSources() {\r\n    if(!this._result) {\r\n      throw Error(\"Invalid state for source-finalization - the matcher's evaluation of the gesture model is not yet complete\");\r\n    }\r\n\r\n    const matched = this._result.matched;\r\n    for(let i = 0; i < this.pathMatchers.length; i++) {\r\n      const matcher = this.pathMatchers[i];\r\n      const contactSpec = this.model.contacts[i];\r\n\r\n      /* Future TODO:\r\n       * This should probably include \"committing\" the state token and items used by the subview,\r\n       * should they differ from the base source's original values.\r\n       *\r\n       * That said, this is only a 'polish' task, as we aren't actually relying on the base source\r\n       * once we've started identifying gestures.  It'll likely only matter if external users\r\n       * desire to utilize the recognizer.\r\n       */\r\n\r\n      // If the path already terminated, no need to evaluate further for this contact point.\r\n      if(matcher.source.isPathComplete) {\r\n        continue;\r\n      }\r\n\r\n      if(matched && contactSpec.endOnResolve) {\r\n        matcher.source.terminate(false);\r\n      } else if(!matched && contactSpec.endOnReject) {\r\n        matcher.source.terminate(false);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determines the active path-matcher best suited to serve as the \"primary\" path for the gesture.\r\n   *\r\n   * This is needed for the following logic roles:\r\n   * - If accepting a new contact point, `allowsInitialState` needs an existing path's sample for\r\n   *   comparison.\r\n   * - When resolving, the \"primary\" path determines what item (if any) is generated for the gesture.\r\n   *\r\n   * If no matcher is active, but the currently-evaluating gesture has a direct ancestor, the best\r\n   * matcher from the predecessor may be used instead.\r\n   */\r\n  public get primaryPath(): GestureSource<Type> {\r\n    let bestMatcher: PathMatcher<Type>;\r\n    let highestPriority = Number.NEGATIVE_INFINITY;\r\n    for(let matcher of this.pathMatchers) {\r\n      if(matcher.model.itemPriority > highestPriority) {\r\n        highestPriority = matcher.model.itemPriority;\r\n        bestMatcher = matcher;\r\n      }\r\n    }\r\n\r\n    // Example case:  multitap, with the current stage of the chain having zero active touchpaths...\r\n    // but a previous 'link' having had a valid touchpath.\r\n    //\r\n    // Here, the best answer is to use the 'comparisonPath' from the prior link; it'll contain\r\n    // the path-samples we'd intuitively expect to use for comparison, after all.\r\n    if(!bestMatcher && this.predecessor) {\r\n      return this.predecessor.primaryPath;\r\n    }\r\n\r\n    return bestMatcher?.source;\r\n  }\r\n\r\n  public get baseItem(): Type {\r\n    return this.primaryPath.baseItem;\r\n  }\r\n\r\n  public get currentItem(): Type {\r\n    return this.primaryPath.currentSample.item;\r\n  }\r\n\r\n  /*\r\n   * Gets the GestureSource identifier corresponding to the gesture being matched\r\n   * and all predecessor stages.  All are relevant for resolving gesture-selection;\r\n   * predecessor IDs become relevant for gesture stages that start without an\r\n   * active GestureSource.  (One that's not already finished its path)\r\n   *\r\n   * In theory, just one predecessor previous should be fine, rather than\r\n   * 'all'... but that'd take a little extra work.\r\n   */\r\n  public get allSourceIds(): string[] {\r\n    // Do not include any to-be-reset (thus, excluded) sources here.\r\n    let currentIds = this.sources.map((entry) => entry.identifier);\r\n    const predecessorIds = this.predecessor ? this.predecessor.allSourceIds : [];\r\n\r\n    // Each ID should only be listed once, regardless of source.\r\n    currentIds = currentIds.filter((entry) => predecessorIds.indexOf(entry) == -1);\r\n\r\n    return currentIds.concat(predecessorIds);\r\n  }\r\n\r\n  mayAddContact(): boolean {\r\n    return this.pathMatchers.length < this.model.contacts.length;\r\n  }\r\n\r\n  // for new incoming GestureSource\r\n  addContact(simpleSource: GestureSource<Type>) {\r\n    const existingContacts = this.pathMatchers.length;\r\n    /* c8 ignore next 3 */\r\n    if(!this.mayAddContact()) {\r\n      throw new Error(`The specified gesture model does not support more than ${existingContacts} contact points.`);\r\n    }\r\n\r\n    this.addContactInternal(simpleSource.constructSubview(false, true), null);\r\n  }\r\n\r\n  public get result() {\r\n    return this._result;\r\n  }\r\n\r\n  private addContactInternal(simpleSource: GestureSourceSubview<Type>, basePathStats: CumulativePathStats<Type>, whileInitializing?: boolean) {\r\n    // The number of already-active contacts tracked for this gesture\r\n    const existingContacts = this.pathMatchers.length;\r\n\r\n    const contactSpec = this.model.contacts[existingContacts];\r\n    const contactModel = new PathMatcher(contactSpec.model, simpleSource, new CumulativePathStats(basePathStats));\r\n    // Add it early, as we need it to be accessible for reference via .primaryPath stuff below.\r\n    this.pathMatchers.push(contactModel);\r\n\r\n    let ancestorSource: GestureSource<Type> = null;\r\n    let baseItem: Type = null;\r\n    // If there were no existing contacts but a predecessor exists and a sustain timer\r\n    // has been specified, it needs special base-item handling.\r\n    if(!existingContacts && this.predecessor && this.model.sustainTimer) {\r\n      ancestorSource = this.predecessor.primaryPath;\r\n      const baseItemMode = this.model.sustainTimer.baseItem ?? 'result';\r\n      let baseStateToken: StateToken;\r\n\r\n      switch(baseItemMode) {\r\n        case 'none':\r\n          baseItem = null;\r\n          break;\r\n        case 'base':\r\n          baseItem = this.predecessor.primaryPath.baseItem;\r\n          baseStateToken = this.predecessor.primaryPath.stateToken;\r\n          break;\r\n        case 'result':\r\n          baseItem = this.predecessor.result.action.item;\r\n          baseStateToken = this.predecessor.primaryPath.currentSample.stateToken;\r\n          break;\r\n      }\r\n\r\n      // Under 'sustain timer' mode, the concept is that the first new source is the\r\n      // continuation and successor to `predecessor.primaryPath`. Its base `item`\r\n      // should reflect this.\r\n      simpleSource.baseItem = baseItem ?? simpleSource.baseItem;\r\n      simpleSource.stateToken = baseStateToken;\r\n      simpleSource.currentSample.stateToken = baseStateToken;\r\n\r\n      // May be missing during unit tests.\r\n      if(simpleSource.currentRecognizerConfig) {\r\n        simpleSource.currentSample.item = simpleSource.currentRecognizerConfig.itemIdentifier(\r\n          simpleSource.currentSample,\r\n          null\r\n        );\r\n      }\r\n    } else {\r\n      // just use the highest-priority item source's base item and call it a day.\r\n      // There's no need to refer to some previously-existing source for comparison.\r\n      baseItem = this.primaryPath.baseItem;\r\n      ancestorSource = this.primaryPath;\r\n    }\r\n\r\n\r\n    if(contactSpec.model.baseCoordReplacer) {\r\n      const originalStats = simpleSource.path.stats;\r\n      const replacementSampleBase = contactSpec.model.baseCoordReplacer(originalStats, baseItem);\r\n\r\n      if(replacementSampleBase) {\r\n        // 1. Complete the sample\r\n        const replacementSample = {\r\n          ...processSampleClientCoords(\r\n            simpleSource.currentRecognizerConfig,\r\n            replacementSampleBase.clientX,\r\n            replacementSampleBase.clientY\r\n          ),\r\n          t: (replacementSampleBase.t || replacementSampleBase.t === 0) ? replacementSampleBase.t : originalStats.initialSample.t,\r\n          item: baseItem,\r\n          stateToken: simpleSource.stateToken\r\n        };\r\n\r\n        // 2. Replace it within the source's path-stats.\r\n        simpleSource.path.replaceInitialSample(replacementSample);\r\n      }\r\n    }\r\n\r\n    // Check that initial \"item\" and \"state\" properties are legal for this type of gesture.\r\n    if(contactSpec.model.allowsInitialState) {\r\n      const initialStateCheck = contactSpec.model.allowsInitialState(\r\n        simpleSource.currentSample,\r\n        ancestorSource.currentSample,\r\n        baseItem,\r\n        ancestorSource.stateToken\r\n      );\r\n\r\n      if(!initialStateCheck) {\r\n        // The initial state check failed, and we should not permanently establish a\r\n        // pathMatcher for a source that failed to meet initial conditions.\r\n        this.pathMatchers.pop();\r\n\r\n        /*\r\n          To prevent any further retries for the model (via rejectionActions), we list the\r\n          cause as 'cancelled'.  'Cancelled' match attempts will never be retried, and we\r\n          wish to prevent an infinite (async) loop from retrying something we know will\r\n          auto-cancel.  (That loop would automatically end upon a different model's match\r\n          or upon all possible models failing to match at the same time, but it's still\r\n          far from ideal.)\r\n\r\n          The rejection-action mechanism in MatcherSelector's `replacer` method (refer to\r\n          https://github.com/keymanapp/keyman/blob/be867604e4b2650a60e69dc6bbe0b6115315efff/common/web/gesture-recognizer/src/engine/headless/gestures/matchers/matcherSelector.ts#L559-L575)\r\n          already blocks paths that are rejected synchronously by this method.  Use of\r\n          'cancelled' is thus not necessary for avoiding the loop-scenario, but it does\r\n          add an extra layer of protection.  Also, it's more explicit about the fact that\r\n          we _are_ permanently cancelling any and all future attempts to match against\r\n          it in the future for the affected `GestureSource`(s).\r\n\r\n          If we weren't using 'cancelled', 'item' would correspond best with a rejection\r\n          here, as the decision is made due to a validation check against the initial item.\r\n        */\r\n        this.finalize(false, 'cancelled');\r\n\r\n        /*\r\n         * There's no need to process the gesture-model any further... and the\r\n         * invalid state may correspond to assumptions in the path-model that\r\n         * will be invalidated if we continue.\r\n         */\r\n        return;\r\n      }\r\n    }\r\n\r\n    /*\r\n      Now that we've done the initial-state check, we can check for instantly-matching and\r\n      instantly-rejecting path models... particularly from from causes other than initial-item\r\n      and state, such as rejection due to an extra touch.\r\n\r\n      KMW example:  longpresses cancel when a new touch comes in during the longpress timer;\r\n      they should never become valid again for that base touch.\r\n    */\r\n    const result = contactModel.update();\r\n    if(result?.type == 'reject') {\r\n      /*\r\n        Refer to the earlier comment in this method re: use of 'cancelled'; we\r\n        need to prevent any and all further attempts to match against this model\r\n        We'd instantly reject it anyway due to its rejected initial state.\r\n        Failing to do so can cause an infinite async loop.\r\n\r\n        If we weren't using 'cancelled', 'path' would correspond best with a\r\n        rejection here, as the decision is made due to the GestureSource's\r\n        current path being rejected by one of the `PathModel`s comprising the\r\n        `GestureModel`.\r\n\r\n        If the model's already been initialized, it's possible that a _new_\r\n        incoming touch needs special handling.  We'll allow one reset.  In the\r\n        case that it would try to restart itself, the restarted model will\r\n        instantly fail and thus cancel.\r\n      */\r\n      this.finalize(false, whileInitializing ? 'cancelled' : 'path');\r\n      return;\r\n    }\r\n\r\n    // Standard path:  trigger either resolution or rejection when the contact model signals either.\r\n    contactModel.promise.then((resolution) => {\r\n      this.finalize(resolution.type == 'resolve', resolution.cause);\r\n    });\r\n  }\r\n\r\n  update() {\r\n    this.pathMatchers.forEach((matcher) => {\r\n      try {\r\n        matcher.update();\r\n      } catch(err) {\r\n        console.error(err);\r\n        this.finalize(false, 'cancelled');\r\n      }\r\n    });\r\n  }\r\n}",
    "import { EventEmitter } from \"eventemitter3\";\r\n\r\nimport { ManagedPromise, timedPromise } from \"@keymanapp/web-utils\";\r\n\r\nimport { GestureSource, GestureSourceSubview } from \"../../gestureSource.js\";\r\nimport { GestureMatcher, MatchResult, PredecessorMatch } from \"./gestureMatcher.js\";\r\nimport { GestureModel } from \"../specs/gestureModel.js\";\r\n\r\ninterface GestureSourceTracker<Type, StateToken> {\r\n  /**\r\n   * Should be the actual GestureSource instance, not a subview thereof.\r\n   * Each `GestureMatcher` will construct its own 'subview' into the GestureSource\r\n   * based on its model's needs.\r\n   */\r\n  source: GestureSource<Type>;\r\n  matchPromise: ManagedPromise<MatcherSelection<Type, StateToken>>;\r\n  /**\r\n   * Set to `true` during the timeout period needed to complete existing trackers &\r\n   * initialize new ones.  Once that process is complete, set to false.\r\n   *\r\n   * This is needed to ensure that failure to extend an existing gesture doesn't\r\n   * result in outright selection-failure before attempting to match as a\r\n   * newly-started gesture.\r\n   */\r\n  preserve: boolean;\r\n}\r\n\r\nexport interface MatcherSelection<Type, StateToken = any> {\r\n  matcher: PredecessorMatch<Type, StateToken>,\r\n  result: MatchResult<Type>\r\n}\r\n\r\ninterface EventMap<Type, StateToken> {\r\n  'rejectionwithaction': (\r\n    selection: MatcherSelection<Type, StateToken>,\r\n    replaceModelWith: (replacementModel: GestureModel<Type, StateToken>) => void) => void;\r\n}\r\n\r\n/**\r\n * Because returning an unresolved Promise from an await func will await that Promise.\r\n *\r\n * This allows us to bypass that, resolving yet providing a pending Promise.\r\n */\r\ninterface SelectionSetupResults<Type> {\r\n  selectionPromise: Promise<MatcherSelection<Type, any>>;\r\n  sustainModeWithoutMatch?: boolean;\r\n}\r\n\r\n/**\r\n * This class is used to \"select\" successfully-matched gesture models from among an\r\n * active set of potential GestureMatchers.  There may be multiple GestureSources /\r\n * contact-points active; it is able to resolve when they are correlated and how\r\n * resolution should proceed based upon the \"selected\" gesture model.\r\n *\r\n * When at least one \"match\" for a gesture model occurs, this engine ensures that the\r\n * highest-priority one that matched is selected.  It will be returned via Promise along\r\n * with the specified match \"action\".  If, instead, no model ends up matching a\r\n * GestureSource, the Promise will resolve when the last potential model is rejected,\r\n * providing values indicating match failure and the action to be taken.\r\n */\r\nexport class MatcherSelector<Type, StateToken = any> extends EventEmitter<EventMap<Type, StateToken>> {\r\n  private _sourceSelector: GestureSourceTracker<Type, StateToken>[] = [];\r\n  private potentialMatchers: GestureMatcher<Type, StateToken>[] = [];\r\n\r\n  public stateToken: StateToken;\r\n\r\n  public readonly baseGestureSetId: string;\r\n\r\n  /**\r\n   * Used to force synchronization during `matchGesture` setup in case\r\n   * of two simultaneous inputs that both require deferral to previously-\r\n   * existing matchers that could resolve first.\r\n   */\r\n  private pendingMatchSetup?: Promise<void>;\r\n\r\n  private sustainMode: boolean = false;\r\n\r\n  constructor(baseSetId?: string) {\r\n    super();\r\n    this.baseGestureSetId = baseSetId || 'default';\r\n  }\r\n\r\n  /**\r\n   * Returns all active `GestureMatcher`s that are currently active for the specified `GestureSource`.\r\n   * They will be specified in descending `resolutionPriority` order.\r\n   * @param source\r\n   * @returns\r\n   */\r\n  public potentialMatchersForSource(source: GestureSource<Type>) {\r\n    return this.potentialMatchers.filter((matcher) => matcher.allSourceIds.find((id) => id == source.identifier));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns An array of all sources that will live on in `sustainWhenNested` mode.\r\n   */\r\n  public cascadeTermination(): GestureSource<Type, any>[] {\r\n    const potentialMatchers = this.potentialMatchers;\r\n    const matchersToCancel = potentialMatchers.filter((matcher) => !matcher.model.sustainWhenNested);\r\n\r\n    // Leave any matchers for models that specify `sustainWhenNested`.\r\n    const matchersToPreserve = potentialMatchers.filter((matcher) => matcher.model.sustainWhenNested);\r\n    this.potentialMatchers = matchersToPreserve;\r\n\r\n    // Now, we need to clean up any `matchGesture` calls that no longer have valid models to match\r\n    // (because none specified `sustainWhenNested`).\r\n    //\r\n    // Easiest way:  first, identify any GestureSources tied to match attempts that DO involve\r\n    // a `sustainWhenNested` model.\r\n    // 1. Find the source IDs referenced for each case... (map)\r\n    // 2. Then flatten + deduplicate the entries of the resulting array. (reduce)\r\n    const sourceIdsToPreserve = matchersToPreserve.map((matcher) => matcher.allSourceIds).reduce((compactArray, current) => {\r\n      for(const entry of current) {\r\n        if(compactArray.indexOf(entry) == -1) {\r\n          compactArray.push(entry);\r\n        }\r\n      }\r\n\r\n      return compactArray;\r\n    }, [] as string[]);\r\n\r\n    // Any source not in the previous array no longer has an active reference; no matches\r\n    // can occur for it any longer.\r\n    const sourcesToCancel = this._sourceSelector.filter((sourceTracker) => {\r\n      return !sourceIdsToPreserve.find((id) => id == sourceTracker.source.identifier);\r\n    });\r\n\r\n    // Now we can actually trigger proper cancellation - both for the model-match attempts\r\n    // and for the `matchGesture` call that referenced the cancelled model-match attempts.\r\n    sourcesToCancel.forEach((sourceTracker) => {\r\n      sourceTracker.matchPromise.resolve({\r\n        matcher: null,\r\n        result: {\r\n          matched: false,\r\n          action: {\r\n            type: 'complete',\r\n            item: null\r\n          }\r\n        }\r\n      });\r\n\r\n      const index = this._sourceSelector.indexOf(sourceTracker);\r\n      if(index > -1) {\r\n        this._sourceSelector.splice(index, 1);\r\n      }\r\n    });\r\n\r\n    matchersToCancel.forEach((matcher) => matcher.cancel());\r\n    this.sustainMode = true;\r\n\r\n    return this._sourceSelector.map((data) => data.source);\r\n  }\r\n\r\n  /**\r\n   * Aims to match the gesture-source's path against the specified set of gesture models.  The\r\n   * returned Promise will resolve either when a match is found or all models have rejected the path.\r\n   *\r\n   * In order to facilitate state management when an incoming source triggers a match for a\r\n   * previously-existing gesture but is not considered part of it, this method involves two levels\r\n   * of asynchronicity.\r\n   *\r\n   * 1. A source must wait for such \"triggered matches\" to fully resolve before new gesture models\r\n   *    based solely upon it may be built, as stateToken updates may occur as a result.\r\n   *\r\n   *    `await` statements against this method will resolve when all valid model types for the source\r\n   *    have been initialized.\r\n   *\r\n   * 2. The object returned via the `await` Promise provides a `.selectionPromise`; this will resolve\r\n   *    once the best gesture-model match has been determined.\r\n   * @param source\r\n   * @param gestureModelSet\r\n   */\r\n  public async matchGesture(\r\n    source: GestureSource<Type, StateToken>,\r\n    gestureModelSet: GestureModel<Type, StateToken>[]\r\n  ): Promise<SelectionSetupResults<Type>>;\r\n\r\n  /**\r\n   * Facilitates matching a new stage in an ongoing gesture-stage sequence based on a previously-\r\n   * matched stage and the specified models for stages that may follow it.\r\n   *\r\n   * In order to facilitate state management when an incoming source triggers a match for a\r\n   * previously-existing gesture but is not considered part of it, this method involves two levels\r\n   * of asynchronicity.\r\n   *\r\n   * 1. A source must wait for such \"triggered matches\" to fully resolve before new gesture models\r\n   *    based solely upon it may be built, as stateToken updates may occur as a result.\r\n   *\r\n   *    `await` statements against this method will resolve when all valid model types for the source\r\n   *    have been initialized.\r\n   *\r\n   * 2. The object returned via the `await` Promise provides a `.selectionPromise`; this will resolve\r\n   *    once the best gesture-model match has been determined.\r\n   * @param source\r\n   * @param gestureModelSet\r\n   */\r\n  public async matchGesture(\r\n    priorStageMatcher: PredecessorMatch<Type, StateToken>,\r\n    gestureModelSet: GestureModel<Type, StateToken>[]\r\n  ): Promise<SelectionSetupResults<Type>>;\r\n\r\n  public async matchGesture(\r\n    source: GestureSource<Type> | PredecessorMatch<Type, StateToken>,\r\n    gestureModelSet: GestureModel<Type, StateToken>[]\r\n  ): Promise<SelectionSetupResults<Type>> {\r\n    /*\r\n     * To be clear, this _starts_ the source-tracking process.  It's an async process, though.\r\n     *\r\n     * Operate based upon the actual GestureSource, not a subview.  Subviews can get\r\n     * 'detached', a state not compatible with the needs of this method.\r\n     */\r\n    const sourceNotYetStaged = source instanceof GestureSource;\r\n\r\n    const determinePredecessorSources = (source: PredecessorMatch<Type, StateToken>): GestureSource<Type>[] => {\r\n      const directSources = (source.sources as GestureSourceSubview<Type>[]).map((source => source.baseSource));\r\n\r\n      if(directSources && directSources.length > 0) {\r\n        return directSources;\r\n      } else if(!source.predecessor) {\r\n        return [];\r\n      } else {\r\n        return determinePredecessorSources(source.predecessor);\r\n      }\r\n    }\r\n\r\n    const sources = sourceNotYetStaged\r\n      ? [source instanceof GestureSourceSubview ? source.baseSource : source]\r\n      : determinePredecessorSources(source);\r\n\r\n    // Defining these as locals helps the TS type-checker better infer types within\r\n    // this method; a later assignment to `source` will remove its ability to infer\r\n    // `source`'s type at this point.\r\n    const unmatchedSource = sourceNotYetStaged ? source : null;\r\n    const priorMatcher = sourceNotYetStaged ? null: source;\r\n\r\n    // matchGesture calls should be queued and act atomically, in sequence.\r\n    if(this.pendingMatchSetup) {\r\n      const parentLockPromise = this.pendingMatchSetup;\r\n      const childLock = new ManagedPromise<void>();\r\n\r\n      this.pendingMatchSetup = childLock.corePromise;\r\n\r\n      // If a prior call is still waiting on the `await` below, wait for it to clear\r\n      // entirely before proceeding; there could be effects for how the next part below is processed.\r\n\r\n      await parentLockPromise;\r\n\r\n      if(this.pendingMatchSetup == childLock.corePromise) {\r\n        this.pendingMatchSetup = null;\r\n      }\r\n      childLock.resolve(); // allow the next matchGesture call through.\r\n    }\r\n\r\n    if(sourceNotYetStaged) {\r\n      // Cancellation before a first stage is possible; in this case, there's no sequence\r\n      // to trigger cleanup.  We can do that here.\r\n      unmatchedSource.path.on('invalidated', () => {\r\n        this.dropSourcesWithIds([unmatchedSource.identifier]);\r\n      })\r\n    }\r\n\r\n    const matchPromise = new ManagedPromise<MatcherSelection<Type, StateToken>>();\r\n\r\n    /*\r\n     * First...\r\n     * 1. Verify no duplicate sources (even if subviews)\r\n     * 2. Set up source 'trackers' used for synchronization & result-reporting.\r\n     */\r\n    const sourceTrackers = sources.map((src) => {\r\n      // TODO: Assertion check - there's no version of the source currently being actively matched.\r\n\r\n      // Even if a component path is already completed, TRACK IT.  It's by far the easiest way\r\n      // to handle gesture stages that start without active sources - such as multitap stages after\r\n      // the initial tap.\r\n\r\n      // Sets up source selectors - the object that matches a source against its Promise.\r\n      // Promises only resolve once, after all - once called, a \"selection\" has been made.\r\n      const sourceSelectors: GestureSourceTracker<Type, StateToken> = {\r\n        source: src,\r\n        matchPromise: matchPromise,\r\n        preserve: true\r\n      };\r\n      this._sourceSelector.push(sourceSelectors);\r\n\r\n      return sourceSelectors;\r\n    });\r\n\r\n    const synchronizationSet = sourceTrackers.map((track) => track.matchPromise);\r\n\r\n    /**\r\n     * If we received a single gesture-source on its own that's just starting out, it may be able\r\n     * to fulfill secondary `contacts` entries for in-process gesture-models.\r\n     *\r\n     * If we're following up a previous gesture stage, meaning the contacts are already part of\r\n     * an ongoing gesture-sequence and have known associations already... they're not allowed to\r\n     * change their committed links; bypass this section.\r\n     */\r\n    if(sourceNotYetStaged) {\r\n      const extendableMatcherSet = this.potentialMatchers.filter((matcher) => matcher.mayAddContact());\r\n      extendableMatcherSet.forEach((matcher) => {\r\n        // TODO:  do we alter the resolution priority in any way, now that there's an extra touchpoint?\r\n        // Answer is not yet clear; perhaps work on gesture-staging will help indicate if this would\r\n        // be useful... and how it should act, if so.\r\n\r\n        matcher.addContact(unmatchedSource);\r\n        matcher.promise.then(this.matcherSelectionFilter(matcher, synchronizationSet));\r\n      });\r\n\r\n      if(extendableMatcherSet.length > 0) {\r\n        const originalStateToken = this.stateToken;\r\n\r\n        /* We need to wait for any and all pending promises to resolve after the previous loop -\r\n         * if any gesture models have resolved, it is possible that our consumer may alter the\r\n         * active state token as a consequence... and expect that to be used for the source if it\r\n         * corresponds to a newly-starting gesture.  See #7173 and compare with the simple-tap\r\n         * shortcut in which a new second tap instantly resolves the first.  (If the resolved\r\n         * tap changes the active layer - the 'state token' here - that's what this addresses.)\r\n         *\r\n         * The easiest and cleanest way to ensure all Promises that can resolve, do so before\r\n         * proceeding:  `setTimeout` uses the macrotask queue, while `Promise`s resolve on the\r\n         * microtask queue.  Thus, awaiting completion of a 0-sec timeout lets everything\r\n         * that can fulfill do so before this proceeds.\r\n         *\r\n         * Reference: https://javascript.info/event-loop\r\n         */\r\n\r\n        const matchingLock = new ManagedPromise<void>();\r\n        this.pendingMatchSetup = matchingLock.corePromise;\r\n\r\n        await timedPromise(0);\r\n        // A second one, in case of a deferred modipress completion (via awaitNested)\r\n        // (which itself needs a macroqueue wait)\r\n        await timedPromise(0);\r\n\r\n        // Only clear the promise if no extra entries were added to the implied `matchGesture` queue.\r\n        if(this.pendingMatchSetup == matchingLock.corePromise) {\r\n          this.pendingMatchSetup = null;\r\n        }\r\n\r\n        matchingLock.resolve();\r\n\r\n        // stateToken may have shifted by the time we regain control here.\r\n        const incomingStateToken = this.stateToken;\r\n\r\n        /* If we've reached this point, we should assume that the incoming source may act\r\n         * independently as the start of a new gesture.\r\n         *\r\n         * Accordingly, if there's a new state token in place, we should ensure the source\r\n         * reflects THAT token, rather than the default one it was given.\r\n         *\r\n         * If it ends up as part of an already-existing gesture, the 'subview' mechanic will\r\n         * ensure that it is viewed correctly therein - as the 'subview' will have been\r\n         * built before the code below takes effect and since the change below will not\r\n         * propagate.\r\n         */\r\n\r\n        if(originalStateToken != incomingStateToken) {\r\n          const currentSample = unmatchedSource.currentSample;\r\n          unmatchedSource.stateToken = incomingStateToken;\r\n          currentSample.stateToken = incomingStateToken;\r\n\r\n          currentSample.item = source.currentRecognizerConfig.itemIdentifier(currentSample, null);\r\n          unmatchedSource.baseItem = currentSample.item;\r\n        }\r\n\r\n        const newlyMatched = extendableMatcherSet.find((entry) => entry.result);\r\n\r\n        // If the incoming Source triggered a match AND is included in the model,\r\n        // do not build new independent models for it.\r\n        if(newlyMatched && newlyMatched.allSourceIds.includes(source.identifier)) {\r\n          matchPromise.resolve({\r\n            matcher: null,\r\n            result: {\r\n              matched: false,\r\n              action: {\r\n                type: 'complete',\r\n                item: null\r\n              }\r\n            }\r\n          });\r\n\r\n          return {\r\n            selectionPromise: matchPromise.corePromise\r\n          };\r\n        }\r\n      }\r\n    }\r\n\r\n    sourceTrackers.forEach((tracker) => {\r\n      tracker.preserve = false;\r\n    })\r\n\r\n    // If in a sustain mode, no models for new sources may launch;\r\n    // only existing sequences are allowed to continue.\r\n    if(this.sustainMode && unmatchedSource) {\r\n      matchPromise.resolve({\r\n        matcher: null,\r\n        result: {\r\n          matched: false,\r\n          action: {\r\n            type: 'complete',\r\n            item: null\r\n          }\r\n        }\r\n      });\r\n\r\n      return { selectionPromise: matchPromise.corePromise, sustainModeWithoutMatch: true };\r\n    }\r\n\r\n    /**\r\n     * In either case, time to spin up gesture models limited to new sources,\r\n     * that don't combine with already-active ones.  This could be the first\r\n     * stage in a sequence or a followup to a prior stage.\r\n     */\r\n    let newMatchers = gestureModelSet.map((model) => {\r\n      try {\r\n        /*\r\n          Spinning up a new gesture model means running code for that model and\r\n          path, which are defined outside of the engine.  We should not allow\r\n          errors from engine-external code to prevent us from continuing with\r\n          unaffected models.\r\n\r\n          It's also important to keep the overall flow going; this code is run\r\n          during touch-start spinup.  An abrupt stop due to an unhandled error\r\n          here can lock up the AsyncDispatchQueue for touch events, locking up\r\n          the engine!\r\n         */\r\n        return new GestureMatcher(model, unmatchedSource || priorMatcher)\r\n      } catch (err) {\r\n        console.error(err);\r\n        return null;\r\n      }\r\n      // Filter out any models that failed to 'spin-up' due to exceptions.\r\n    }).filter((entry) => !!entry);\r\n\r\n    // If any newly-activating models are disqualified due to initial conditions, don't add them.\r\n    newMatchers = newMatchers.filter((matcher) => !matcher.result || matcher.result.matched !== false);\r\n\r\n    for(const matcher of newMatchers) {\r\n      matcher.promise.then(this.matcherSelectionFilter(matcher, synchronizationSet));\r\n    }\r\n\r\n    // Were all the new potential models disqualified?  If not, add them; if so, instantly say that none\r\n    // could be selected.\r\n    if(newMatchers.length > 0) {\r\n      this.potentialMatchers = this.potentialMatchers.concat(newMatchers);\r\n    } else {\r\n      matchPromise.resolve({\r\n        matcher: null,\r\n        result: {\r\n          matched: false,\r\n          action: {\r\n            type: 'complete',\r\n            item: null\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    /*\r\n     * Easiest way to ensure resolution priorities are respected:  keep 'em sorted in descending order.\r\n     * When we iterate through on update-steps, we go sequentially; the first Promise to be marked\r\n     * 'resolved' wins.\r\n     */\r\n    this.potentialMatchers.sort((a, b) => b.model.resolutionPriority - a.model.resolutionPriority);\r\n\r\n    // Now that all GestureMatchers are built, reset ALL of our sync-update-check hooks.\r\n    this.resetSourceHooks();\r\n\r\n    return { selectionPromise: matchPromise.corePromise };\r\n  }\r\n\r\n  private readonly attemptSynchronousUpdate = () => {\r\n    // Determine the most recent timestamp for all active sources.  Sources no longer active should be\r\n    // ignored, so we filter those out of this array.\r\n    //\r\n    // We maintain them because they can be relevant for certain 'sustain' scenarios, like for a\r\n    // multitap following from a simple tap - referencing that base simple tap is important.\r\n    const legalSources = this._sourceSelector.filter((tracker) => !tracker.source.isPathComplete);\r\n\r\n    const sourceCurrentTimestamps = legalSources.map((tracker) => tracker.source.currentSample.t);\r\n    const t = sourceCurrentTimestamps[0];\r\n\r\n    // Ignore timestamps from already-terminated paths; they should not block synchronicity checks.\r\n    if(sourceCurrentTimestamps.find((t2) => (t != t2))) {\r\n      return;\r\n    }\r\n\r\n    this.potentialMatchers.forEach((matcher) => matcher.update());\r\n  };\r\n\r\n  private resetSourceHooks() {\r\n    const resetHooks = (gestureSource: GestureSource<Type>) => {\r\n      // GestureSourceSubviews stay synchronized with their 'base' via event handlers.\r\n      // We want GestureMatchers to receive all updates before we attempt a sync'd update.\r\n      const baseSource = gestureSource;\r\n\r\n      // So, a resetHooks call says to remove the old handler...\r\n      baseSource.path.off('step', this.attemptSynchronousUpdate);\r\n      baseSource.path.off('complete', this.attemptSynchronousUpdate);\r\n      baseSource.path.off('invalidated', this.attemptSynchronousUpdate);\r\n\r\n      // And re-add it, but at the end of the handler list.\r\n      baseSource.path.on('step', this.attemptSynchronousUpdate);\r\n      baseSource.path.on('complete', this.attemptSynchronousUpdate);\r\n      baseSource.path.on('invalidated', this.attemptSynchronousUpdate);\r\n    }\r\n\r\n    // Make sure our source-watching hooks are the last handler for the event;\r\n    // matcher-handlers should go first.  (Due to how subview synchronization works)\r\n    this._sourceSelector.forEach((entry) => resetHooks(entry.source));\r\n  }\r\n\r\n  public dropSourcesWithIds(idsToClean: string[]) {\r\n    for(const id of idsToClean) {\r\n      const index = this._sourceSelector.findIndex((entry) => entry.source.identifier == id);\r\n      if(index > -1) {\r\n        // Ensure that any pending MatcherSelector and/or GestureSequence promises dependent\r\n        // on the source fully resolve (with cancellation).\r\n        const droppedSelector = this._sourceSelector.splice(index, 1)[0];\r\n        droppedSelector.matchPromise.resolve({\r\n          matcher: null,\r\n          result: {\r\n            matched: false,\r\n            action: {\r\n              type: 'none',\r\n              item: null\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private matchersForSource(source: GestureSource<Type>) {\r\n    return this.potentialMatchers.filter((matcher) => {\r\n      return !!matcher.sources.find((src) => src.identifier == source.identifier)\r\n    });\r\n  }\r\n\r\n  private matcherSelectionFilter(matcher: GestureMatcher<Type, StateToken>, matchSynchronizers: ManagedPromise<any>[]) {\r\n    // Returns a closure-captured Promise-resolution handler used by individual GestureMatchers managed\r\n    // by this class instance.\r\n    return async (result: MatchResult<Type>) => {\r\n      // Note:  is only called by GestureMatcher Promises that are resolving.\r\n\r\n      // Do not bypass match handling just because a synchronization promise is fulfilled.\r\n      // If a source was force-cancelled, cascading to a call of this handler, we still\r\n      // need to perform internal state cleanup.\r\n\r\n      if(matcher.isCancelled) {\r\n        result = {\r\n          matched: false,\r\n          action: {\r\n            type: 'none',\r\n            item: null\r\n          }\r\n        };\r\n      } else {\r\n        // Since we've selected this matcher, it should apply any model-specified finalization necessary.\r\n        matcher.finalizeSources();\r\n      }\r\n\r\n      // Find ALL associated match-promises for sources matched by the matcher.\r\n      const matchedContactIds = matcher.allSourceIds;\r\n\r\n      const sourceMetadata = matchedContactIds.map((id) => {\r\n        return this._sourceSelector.find((metadata) => metadata.source.identifier == id);\r\n      }).filter((entry) => !!entry); // remove `undefined` entries, as they're irrelevant.\r\n\r\n      // We have a result for this matcher; go ahead and remove it from the 'potential' list.\r\n      const matcherIndex = this.potentialMatchers.indexOf(matcher);\r\n      if(matcherIndex == -1) {\r\n        // It's already been handled; do not re-attempt.\r\n        return;\r\n      }\r\n\r\n      this.potentialMatchers.splice(matcherIndex, 1);\r\n\r\n      /*\r\n       * This is the common case for failed gesture matches.  It should never be set\r\n       * for a successful gesture match.  This is a \"didn't match\" signal, so we don't\r\n       * do any gesture-staging stuff here or enter a state where we need to ignore\r\n       * other matchers.\r\n       */\r\n      if(result.action.type == 'none') {\r\n        this.finalizeMatcherlessTrackers(sourceMetadata);\r\n\r\n        /* We allow any other matchers against the represented sources to REMAIN AS THEY ARE.\r\n         * Special handling is only needed once none are left, which is what the\r\n         * `finalizeMatcherlessTrackers` call represents.\r\n         *\r\n         * This isn't generally a \"no matches available case; it's a \"_this_ model didn't match\"\r\n         * case that only _sometimes_ happens to be the final \"match not available\" case.\r\n         */\r\n        return;\r\n      }\r\n\r\n      if(!result.matched) {\r\n        // There is an action to be resolved...\r\n        // But we didn't actually MATCH a gesture.\r\n        const replacer = (replacementModel: GestureModel<Type, StateToken>) => {\r\n         if(this.sustainMode && !replacementModel.sustainWhenNested) {\r\n            this.finalizeMatcherlessTrackers(sourceMetadata);\r\n            return;\r\n          }\r\n\r\n          const replacementMatcher = new GestureMatcher(replacementModel, matcher);\r\n\r\n          /* IMPORTANT: verify that the replacement model is initially valid.\r\n           *\r\n           * If the model would be 'spun up' for matching in a state where, even initially,\r\n           * it cannot match, cancel the replacement.  (Otherwise, we could near-instantly\r\n           * re-trigger further replacements that will also fail!)\r\n           *\r\n           * In particular, a multitap operation involves a state with no contact points,\r\n           * while a longpress would fail when the state is reached.  Longpress models\r\n           * will fail when in the state... and should _permanently_ fail for a\r\n           * GestureSequence containing a finished GestureSource once said state is reached.\r\n           */\r\n          if(replacementMatcher.result && replacementMatcher.result.matched == false) {\r\n            // If this occurs, and it was the last possible tracker, we need to resolve its\r\n            // `matchGesture` promise.\r\n            this.finalizeMatcherlessTrackers(sourceMetadata);\r\n            return;\r\n          }\r\n\r\n          replacementMatcher.promise.then(this.matcherSelectionFilter(replacementMatcher, sourceMetadata.map((entry) => entry.matchPromise)));\r\n          this.potentialMatchers.push(replacementMatcher);\r\n\r\n          this.resetSourceHooks();\r\n        };\r\n\r\n        // So we emit an event to signal the rejection & allow its replacement via the closure above.\r\n        this.emit('rejectionwithaction', {matcher, result}, replacer);\r\n        return;\r\n      } else /* if(result.matched) */ {\r\n        for(const tracker of sourceMetadata) {\r\n          // If we have a successful gesture match, we should proactively clear out the matchers\r\n          // that (a) didn't win and (b) use at least one source in common with the winner.\r\n          const losingMatchers = this.matchersForSource(tracker.source);\r\n          this.potentialMatchers = this.potentialMatchers.filter((matcher) => {\r\n            return !losingMatchers.find((matcher2) => matcher == matcher2);\r\n          });\r\n\r\n          /*\r\n          * While the 'synchronizer' setup will perfectly handle most cases, we need this block to catch\r\n          * a somewhat niche case:  if a second source was added to the matcher at a later point in time,\r\n          * there are two separate Promise handlers - with separate synchronization sets.  We use the\r\n          * `cancel` method to ensure that cancellation from one set propagates to the other handler.\r\n          * (It seems the simplest & most straightforward approach to do ensure localized, per-matcher\r\n          * consistency without mangling any matchers that shouldn't be affected.)\r\n          *\r\n          * This can arise if a modipress is triggered at the same time a new touchpoint begins, which\r\n          * could trigger a simple-tap.\r\n          */\r\n          losingMatchers.forEach((matcher) => {\r\n            // Triggers resolution of remaining matchers for the model-match, but that's\r\n            // asynchronous.\r\n            matcher.cancel();\r\n          });\r\n\r\n          // Drop the newly-cancelled trackers.\r\n          this._sourceSelector = this._sourceSelector.filter((a) => !sourceMetadata.find((b) => a == b));\r\n\r\n          // And now for one line with some \"heavy lifting\":\r\n\r\n          /*\r\n           * Fulfills the contract set by `matchGesture`.\r\n           */\r\n          tracker.matchPromise.resolve({matcher, result});\r\n        }\r\n\r\n        // No use of `finalizeMatcherlessTrackers` here; this is the path where we DO get\r\n        // and signal (that last resolve above) a successful gesture-model match.\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * This internal method provides common-case finalization for cases in which\r\n   * all available gesture models for at least one source have resolved with none\r\n   * matching it.  This includes triggering resolution of `Promise`s returned by the\r\n   * `matchGesture` call(s) corresponding to the now-unmatchable source(s).\r\n   *\r\n   * In short, this method should be called at any point where the Selector\r\n   * may go from having one or more potential active matchers to zero for at\r\n   * least one GestureSource.\r\n   * @param trackers\r\n   * @returns\r\n   */\r\n  private finalizeMatcherlessTrackers(trackers: GestureSourceTracker<Type, StateToken>[]) {\r\n    // Check - are there any remaining matchers compatible with the rejected matcher's sources?\r\n    const remainingMatcherStats = trackers.map((tracker) => {\r\n      return {\r\n        tracker: tracker,\r\n        // We need to inspect each matcher's `contacts` entries for references to the source.\r\n        pendingCount: this.potentialMatchers.filter((matcher) => {\r\n          return !!matcher.allSourceIds.find((id) => tracker.source.identifier == id);\r\n        }).length // and tally up a count at the end.\r\n      };\r\n    });\r\n\r\n    // If we just rejected the last possible matcher for a tracked gesture-source...\r\n    // then, for each such affected source...\r\n    for(const stat of remainingMatcherStats) {\r\n      if(stat.pendingCount == 0 && !stat.tracker.preserve) {\r\n        // ... report the failure and signal to close-out that source / stop tracking it.\r\n        stat.tracker.matchPromise.resolve({\r\n          matcher: null,\r\n          result: {\r\n            matched: false,\r\n            action: {\r\n              type: 'complete',\r\n              item: null\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n}",
    "import { EventEmitter } from \"eventemitter3\";\r\n\r\nimport { GestureModelDefs, getGestureModel } from \"../specs/gestureModelDefs.js\";\r\nimport { GestureSourceSubview } from \"../../gestureSource.js\";\r\nimport { MatchResult } from \"./gestureMatcher.js\";\r\nimport { GestureModel, GestureResolution } from \"../specs/gestureModel.js\";\r\nimport { MatcherSelection, MatcherSelector } from \"./matcherSelector.js\";\r\nimport { GestureRecognizerConfiguration, TouchpointCoordinator } from \"../../../index.js\";\r\nimport { ManagedPromise, timedPromise } from \"@keymanapp/web-utils\";\r\n\r\nexport class GestureStageReport<Type, StateToken = any> {\r\n  /**\r\n   * The id of the GestureModel spec that was matched at this stage of the\r\n   * GestureSequence.\r\n   */\r\n  public readonly matchedId: string;\r\n\r\n  /**\r\n   * The set id of gesture models that were allowed for this stage of the\r\n   * GestureSequence.\r\n   */\r\n  public readonly gestureSetId: string;\r\n\r\n  public readonly linkType: MatchResult<Type>['action']['type'];\r\n  /**\r\n   * The `item`, if any, specified for selection by the matched gesture model.\r\n   */\r\n  public readonly item: Type;\r\n  /**\r\n   * The set of GestureSource contact points matched to this stage of the GestureSequence.\r\n   * The first one listed (index 0) will be the entry responsible for selection of the\r\n   * `item` field.\r\n   */\r\n  public readonly sources: GestureSourceSubview<Type>[];\r\n\r\n  public readonly allSourceIds: string[];\r\n\r\n  constructor(selection: MatcherSelection<Type, StateToken>, gestureSetId: string) {\r\n    const { matcher, result } = selection;\r\n    this.gestureSetId = gestureSetId;\r\n    this.matchedId = matcher?.model.id;\r\n    this.linkType = result.action.type;\r\n    this.item = result.action.item;\r\n\r\n    // Assumption:  GestureMatcher always builds the Subview type when constructing each PathMatcher.\r\n    // This assumption currently holds, though we could always do a quick instanceof-check to build a\r\n    // subview if it isn't already one.\r\n    //\r\n    // Each entry has a .baseSource property that may be used to refer to the non-snapshotted version\r\n    // of the source by consumers of this object.\r\n    this.sources = matcher?.sources as GestureSourceSubview<Type>[];\r\n\r\n    // Just to be extra-sure they don't continue to update.\r\n    // Alternatively, we could just make an extra copy and then instantly \"disconnect\" the new instance.\r\n    this.sources?.forEach((source) => source.disconnect());\r\n    // Make sure that the `primaryPath` source ends up as the first entry.\r\n    this.sources?.sort((a, b) => {\r\n      if(matcher?.primaryPath == a) {\r\n        return -1;\r\n      } else if(matcher?.primaryPath == b) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    })\r\n\r\n    this.allSourceIds = matcher?.allSourceIds || [];\r\n  }\r\n}\r\n\r\ninterface PushConfig<Type> {\r\n  type: 'push',\r\n  config: GestureRecognizerConfiguration<Type>\r\n}\r\n\r\n// I don't think we currently need this option, but it fits as part of the overall conceptual\r\n// model and is good for generality.\r\ninterface PopConfig {\r\n  type: 'pop',\r\n  count: number\r\n}\r\n\r\nexport type ConfigChangeClosure<Type> = (configStackCommand: PushConfig<Type> | PopConfig) => void;\r\n\r\ninterface EventMap<Type, StateToken> {\r\n  stage: (\r\n    stageReport: GestureStageReport<Type, StateToken>,\r\n    changeConfiguration: ConfigChangeClosure<Type>\r\n  ) => void;\r\n  complete: () => void;\r\n}\r\n\r\nexport class GestureSequence<Type, StateToken = any> extends EventEmitter<EventMap<Type, StateToken>> {\r\n  public stageReports: GestureStageReport<Type, StateToken>[];\r\n\r\n  // It's not specific to just this sequence... but it does have access to\r\n  // the potential next stages.\r\n  private selector: MatcherSelector<Type, StateToken>;\r\n\r\n  // We need this reference in order to properly handle 'setchange' resolution actions when staging.\r\n  private touchpointCoordinator: TouchpointCoordinator<Type>;\r\n  // Selectors have locked-in 'base gesture sets'; this is only non-null if\r\n  // in a 'setchange' action.\r\n  private pushedSelector?: MatcherSelector<Type, StateToken>;\r\n\r\n  private gestureConfig: GestureModelDefs<Type, StateToken>;\r\n  private markedComplete: boolean = false;\r\n\r\n  // Note:  the first stage will be available under `stageReports` after awaiting a simple Promise.resolve().\r\n  constructor(\r\n    firstSelectionMatch: MatcherSelection<Type, StateToken>,\r\n    gestureModelDefinitions: GestureModelDefs<Type, StateToken>,\r\n    selector: MatcherSelector<Type, StateToken>,\r\n    touchpointCoordinator: TouchpointCoordinator<Type>\r\n  ) {\r\n    super();\r\n\r\n    this.stageReports = [];\r\n    this.selector = selector;\r\n    this.selector.on('rejectionwithaction', this.modelResetHandler);\r\n    this.once('complete', () => {\r\n      if(this.pushedSelector) {\r\n        // The `popSelector` method is responsible for triggering cascading cancellations if\r\n        // there are nested GestureSequences.\r\n        //\r\n        // As this tends to affect which gestures are permitted, it's important this is done\r\n        // any time the GestureSequence is cancelled or completed, for any reason.\r\n        this.touchpointCoordinator?.popSelector(this.pushedSelector);\r\n        this.pushedSelector = null;\r\n      }\r\n\r\n      this.selector.off('rejectionwithaction', this.modelResetHandler);\r\n      this.selector.dropSourcesWithIds(this.allSourceIds);\r\n\r\n      // Dropping the reference here gives us two benefits:\r\n      // 1.  Allows garbage collection to do its thing; this might be the last reference left to the selector instance.\r\n      // 2.  Acts as an obvious flag / indicator of sequence completion.\r\n      this.selector = null;\r\n    });\r\n    this.gestureConfig = gestureModelDefinitions;\r\n\r\n    // So that we can...\r\n    // 1. push a different selector as active (and restore it later) - say, for modipress\r\n    //    - 'push' & corresponding pop-like resolution behaviors\r\n    // 2. push a different default gesture set ID (and restore it later)\r\n    this.touchpointCoordinator = touchpointCoordinator;\r\n\r\n    // Adds a slight delay; a constructed Sequence will provide a brief window of time -\r\n    // until the event queue next 'ticks' - to receive data about the base stage via the\r\n    // same 'stage' event raised for all subsequent stages.\r\n    Promise.resolve().then(() => this.selectionHandler(firstSelectionMatch));\r\n  }\r\n\r\n  public get allSourceIds(): string[] {\r\n    // Note:  there is a brief window of time - between construction & the deferred first\r\n    // 'stage' event - during which this array may be of length 0.\r\n    return this.stageReports[this.stageReports.length - 1]?.allSourceIds ?? [];\r\n  }\r\n\r\n  private get baseGestureSetId(): string {\r\n    return this.selector?.baseGestureSetId ?? null;\r\n  }\r\n\r\n  /**\r\n   * Returns an array of IDs for gesture models that are still valid for the `GestureSource`'s\r\n   * current state.  They will be specified in descending `resolutionPriority` order.\r\n   */\r\n    public get potentialModelMatchIds(): string[] {\r\n      // If `this.selector` is null, it's because no further matches are possible.\r\n      // We've already emitted the 'complete' event as well.\r\n      if(!this.selector) {\r\n        return [];\r\n      }\r\n\r\n      const selectors = [ this.selector ];\r\n      if(this.pushedSelector) {\r\n        selectors.push(this.pushedSelector);\r\n      }\r\n\r\n      // The new round of model-matching is based on the sources used by the previous round.\r\n      // This is important; 'sustainTimer' gesture models may rely on a now-terminated source\r\n      // from that previous round (like with multitaps).\r\n      const lastStageReport = this.stageReports[this.stageReports.length-1];\r\n      const trackedSources = lastStageReport.sources;\r\n\r\n      const potentialMatches = trackedSources.map((source) => {\r\n        return selectors.map((selector) => selector.potentialMatchersForSource(source)\r\n          .map((matcher) => matcher.model.id)\r\n        )\r\n      }).reduce((flattened, arr) => flattened.concat(arr))\r\n      .reduce((deduplicated, arr) => {\r\n        for(let entry of arr) {\r\n          if(deduplicated.indexOf(entry) == -1) {\r\n            deduplicated.push(entry);\r\n          }\r\n        }\r\n        return deduplicated;\r\n      }, [] as string[]);\r\n\r\n      return potentialMatches;\r\n    }\r\n\r\n  private readonly selectionHandler = async (selection: MatcherSelection<Type, StateToken>) => {\r\n    const gestureSet = this.pushedSelector?.baseGestureSetId || this.selector?.baseGestureSetId;\r\n    const matchReport = new GestureStageReport<Type, StateToken>(selection, gestureSet);\r\n    if(selection.matcher) {\r\n      this.stageReports.push(matchReport);\r\n    }\r\n\r\n    const sourceTracker = selection.matcher ?? this.stageReports[this.stageReports.length-1];\r\n    const sources = sourceTracker?.sources.map((matchSource) => {\r\n      return matchSource instanceof GestureSourceSubview ? matchSource.baseSource : matchSource;\r\n    }) ?? [];\r\n\r\n    const actionType = selection.result.action.type;\r\n    if(actionType == 'complete' || actionType == 'none') {\r\n      sources.forEach((source) => {\r\n        if(!source.isPathComplete) {\r\n          source.terminate(actionType == 'none');\r\n        }\r\n      });\r\n\r\n      if(!selection.result.matched) {\r\n        if(!this.markedComplete) {\r\n          this.markedComplete = true;\r\n          this.emit('complete');\r\n        }\r\n        return;\r\n      }\r\n    }\r\n\r\n    if(actionType == 'complete' && this.touchpointCoordinator && this.pushedSelector) {\r\n      // Cascade-terminade all nested selectors, but don't remove / pop them yet.\r\n      // Their selection mode remains valid while their gestures are sustained.\r\n      const sustainedSources = this.touchpointCoordinator?.sustainSelectorSubstack(this.pushedSelector);\r\n\r\n      const sustainCompletionPromises = sustainedSources.map((source) => {\r\n        const promise = new ManagedPromise<void>();\r\n        source.path.on('invalidated', () => promise.resolve());\r\n        source.path.on('complete', () => promise.resolve());\r\n        return promise.corePromise;\r\n      });\r\n\r\n      if(sustainCompletionPromises.length > 0 && selection.result.action.awaitNested) {\r\n        await Promise.all(sustainCompletionPromises);\r\n        // Ensure all nested gestures finish resolving first before continuing by\r\n        // waiting against the macroqueue.\r\n        await timedPromise(0);\r\n      }\r\n\r\n      // Actually drops the selection-mode state once all is complete.\r\n      // The drop MUST come after the `await` above.\r\n      this.touchpointCoordinator?.popSelector(this.pushedSelector);\r\n\r\n        // May still need it active?\r\n        // this.pushedSelector.off('rejectionwithaction', this.modelResetHandler);\r\n      this.pushedSelector = null;\r\n    }\r\n\r\n    // Raise the event, providing a functor that allows the listener to specify an alt config for the next stage.\r\n    // Example case:  longpress => subkey selection - the subkey menu has different boundary conditions.\r\n    this.emit('stage', matchReport, (command) => {\r\n      // Assertion:  each Source may only be part of one GestureSequence.\r\n      // As such, pushed and popped configs may only come from one influence - the GestureSequence's\r\n      // staging transitions.\r\n      if(command.type == 'pop') {\r\n        sources.forEach((source) => source.popRecognizerConfig());\r\n      } else /* if(command.type == 'push') */ {\r\n        sources.forEach((source) => source.pushRecognizerConfig(command.config));\r\n      }\r\n    });\r\n\r\n    // ... right, the gesture-definitions.\r\n\r\n    // In some automated tests, `this.touchpointCoordinator` may be `null`.\r\n    let selectorNotCurrent = false;\r\n    if(this.touchpointCoordinator) {\r\n      selectorNotCurrent = !this.touchpointCoordinator.selectorStackIncludes(this.selector);\r\n    }\r\n\r\n    let nextModels = modelSetForAction(selection.result.action, this.gestureConfig, this.baseGestureSetId);\r\n    if(selectorNotCurrent) {\r\n      // If this sequence's selector isn't current, we're in an unrooted state; the parent, base gesture\r\n      // whose state we were in when the gesture began has ended.)\r\n      //\r\n      // Example:  we're a gesture that was triggered under a modipress state, but the modipress itself\r\n      // has ended.  Subkey selection should be allowed to continue, but not much else.\r\n      nextModels = nextModels.filter((model) => model.sustainWhenNested);\r\n    }\r\n\r\n    if(nextModels.length > 0) {\r\n      // Note:  resolve selection-mode changes FIRST, before building the next GestureModel in the sequence.\r\n      // If a selection-mode change is triggered, any openings for new contacts on the next model can only\r\n      // be fulfilled if handled by the corresponding (pushed) selector, rather than the sequence's base selector.\r\n\r\n      // Handling 'setchange' resolution actions (where one gesture enables a different gesture set for others\r\n      // while active.  Example case: modipress.)\r\n      if(actionType == 'chain' && selection.result.action.selectionMode == this.pushedSelector?.baseGestureSetId) {\r\n        // do nothing; maintain the existing 'selectionMode' behavior\r\n      } else {\r\n        // pop the old one, if it exists - if it matches our expectations for a current one.\r\n        if(this.pushedSelector) {\r\n          this.pushedSelector.off('rejectionwithaction', this.modelResetHandler);\r\n          this.touchpointCoordinator?.popSelector(this.pushedSelector);\r\n          this.pushedSelector = null;\r\n        }\r\n\r\n        /* Note:  we do not change the instance held by this class - it gets to maintain access\r\n         * to its original selector regardless.\r\n         *\r\n         * Example use-case: during subkey selection, which is the intended followup for a longpress,\r\n         * either...\r\n         *\r\n         * 1. No other gestures (new touch contact points) should be allowed and/or trigger interactions\r\n         * 2. OR such attempts should automatically cancel the subkey-selection process.\r\n         *\r\n         * For approach 1, we 'allow' an empty set of gestures, disabling all of them.\r\n         *\r\n         * For approach 2, we permit a single type of new gesture; when triggered, the gesture consumer\r\n         * can then use that to trigger cancellation of the subkey-selection mode.\r\n         */\r\n\r\n        if(actionType == 'chain') {\r\n          const targetSet = selection.result.action.selectionMode;\r\n          if(targetSet) {\r\n            // push the new one.\r\n            const changedSetSelector = new MatcherSelector<Type, StateToken>(targetSet);\r\n            changedSetSelector.on('rejectionwithaction', this.modelResetHandler);\r\n            this.pushedSelector = changedSetSelector;\r\n            this.touchpointCoordinator?.pushSelector(changedSetSelector);\r\n          }\r\n        }\r\n      }\r\n\r\n      /* If a selector has been pushed, we need to delegate the next gesture model in the chain\r\n       * to it in case it has extra contacts, as those will be processed under the pushed selector.\r\n       *\r\n       * Example case:  a modipress + multitap key should prevent further multitap if a second,\r\n       * unrelated key is tapped.  Detecting that second tap is only possible via the pushed\r\n       * selector.\r\n       *\r\n       * Future models in the chain are still drawn from the _current_ selector.\r\n       */\r\n      const nextStageSelector = this.pushedSelector ?? this.selector;\r\n\r\n      // Note:  if a 'push', that should be handled by an event listener from the main engine driver (or similar)\r\n      const modelingSpinupPromise = nextStageSelector.matchGesture(selection.matcher, nextModels);\r\n      modelingSpinupPromise.then(async (selectionHost) => this.selectionHandler(await selectionHost.selectionPromise));\r\n    } else {\r\n      // Any extra finalization stuff should go here, before the event, if needed.\r\n      if(!this.markedComplete) {\r\n        this.markedComplete = true;\r\n        this.emit('complete');\r\n      }\r\n    }\r\n  }\r\n\r\n  private readonly modelResetHandler = (\r\n    selection: MatcherSelection<Type, StateToken>,\r\n    replaceModelWith: (model: GestureModel<Type, StateToken>) => void\r\n  ) => {\r\n    const sourceIds = selection.matcher.allSourceIds;\r\n\r\n    // If none of the sources involved match a source already included in the sequence, bypass\r\n    // this handler; it belongs to a different sequence or one that's beginning.\r\n    //\r\n    // This works even for multitaps because we include the most recent ancestor sources in\r\n    // `allSourceIds` - that one will match here.\r\n    //\r\n    // Also sufficiently handles cases where selection is delegated to the pushedSelector,\r\n    // since new gestures under the alternate state won't include a source id from the base\r\n    // sequence.\r\n    if(this.allSourceIds.find((a) => sourceIds.indexOf(a) == -1)) {\r\n      return;\r\n    }\r\n\r\n    if(selection.result.action.type == 'replace') {\r\n      replaceModelWith(getGestureModel(this.gestureConfig, selection.result.action.replace));\r\n    } else {\r\n      throw new Error(\"Missed a case in implementation!\");\r\n    }\r\n  };\r\n\r\n  public cancel() {\r\n    const sources = this.stageReports[this.stageReports.length - 1].sources;\r\n    sources.forEach((src) => src.baseSource.isPathComplete || src.baseSource.terminate(true));\r\n    if(!this.markedComplete) {\r\n      this.markedComplete = true;\r\n      this.emit('complete');\r\n    }\r\n  }\r\n\r\n  public toJSON(): any {\r\n    return this.stageReports;\r\n  }\r\n}\r\n\r\nexport function modelSetForAction<Type, StateToken>(\r\n  action: GestureResolution<Type>,\r\n  gestureModelDefinitions: GestureModelDefs<Type, StateToken>,\r\n  activeSetId: string\r\n): GestureModel<Type, StateToken>[] {\r\n  switch(action.type) {\r\n    case 'none':\r\n    case 'complete':\r\n      return [];\r\n    case 'replace':\r\n      return [getGestureModel(gestureModelDefinitions, action.replace)];\r\n    case 'chain':\r\n      return [getGestureModel(gestureModelDefinitions, action.next)];\r\n    default:\r\n      throw new Error(\"Unexpected case arose within `processGestureAction` method\");\r\n  }\r\n}",
    "import { EventEmitter } from \"eventemitter3\";\r\nimport { InputEngineBase } from \"./inputEngineBase.js\";\r\nimport { GestureSource } from \"./gestureSource.js\";\r\nimport { MatcherSelection, MatcherSelector } from \"./gestures/matchers/matcherSelector.js\";\r\nimport { GestureSequence } from \"./gestures/matchers/gestureSequence.js\";\r\nimport { GestureModelDefs, getGestureModel, getGestureModelSet } from \"./gestures/specs/gestureModelDefs.js\";\r\nimport { GestureModel } from \"./gestures/specs/gestureModel.js\";\r\nimport { InputSample } from \"./inputSample.js\";\r\nimport { GestureDebugPath } from \"./gestureDebugPath.js\";\r\nimport { reportError } from \"../reportError.js\";\r\n\r\ninterface EventMap<HoveredItemType, StateToken> {\r\n  /**\r\n   * Indicates that a new potential gesture has begun.\r\n   * @param input\r\n   * @returns\r\n   */\r\n  'inputstart': (input: GestureSource<HoveredItemType, StateToken>) => void;\r\n\r\n  'recognizedgesture': (sequence: GestureSequence<HoveredItemType, StateToken>) => void;\r\n}\r\n\r\n/**\r\n * This class is responsible for interpreting the output of the various input-engine types\r\n * and facilitating the detection of related gestures.  Its role is to serve as a headless\r\n * version of the main `GestureRecognizer` class, avoiding its DOM and DOM-event dependencies.\r\n *\r\n * Of particular note: when a gesture involves multiple touchpoints - like a multitap - this class\r\n * is responsible for linking related touchpoints together for the detection of that gesture.\r\n */\r\nexport class TouchpointCoordinator<HoveredItemType, StateToken=any> extends EventEmitter<EventMap<HoveredItemType, StateToken>> {\r\n  private inputEngines: InputEngineBase<HoveredItemType, StateToken>[];\r\n  private selectorStack: MatcherSelector<HoveredItemType, StateToken>[] = [new MatcherSelector()];\r\n\r\n  private gestureModelDefinitions: GestureModelDefs<HoveredItemType, StateToken>;\r\n\r\n  private _activeSources: GestureSource<HoveredItemType>[] = [];\r\n  private _activeGestures: GestureSequence<HoveredItemType, StateToken>[] = [];\r\n\r\n  private _stateToken: StateToken;\r\n\r\n  private _history: (GestureSource<HoveredItemType> | GestureSequence<HoveredItemType, StateToken>)[] = [];\r\n  private historyMax: number;\r\n\r\n  public constructor(gestureModelDefinitions: GestureModelDefs<HoveredItemType, StateToken>, inputEngines?: InputEngineBase<HoveredItemType, StateToken>[], historyLength?: number) {\r\n    super();\r\n\r\n    this.historyMax = historyLength > 0 ? historyLength : 0;\r\n\r\n    this.gestureModelDefinitions = gestureModelDefinitions;\r\n    this.inputEngines = [];\r\n    if(inputEngines) {\r\n      for(let engine of inputEngines) {\r\n        this.addEngine(engine);\r\n      }\r\n    }\r\n\r\n    this.selectorStack[0].on('rejectionwithaction', this.modelResetHandler)\r\n  }\r\n\r\n  private readonly modelResetHandler = (\r\n    selection: MatcherSelection<HoveredItemType, StateToken>,\r\n    replaceModelWith: (model: GestureModel<HoveredItemType, StateToken>) => void\r\n  ) => {\r\n    const sourceIds = selection.matcher.allSourceIds;\r\n\r\n    // If there's an active gesture that uses a source noted in the selection, it's the responsibility\r\n    // of an existing GestureSequence to handle this one.  The handler should bypass it for this round.\r\n    if(this.activeGestures.find((sequence) => {\r\n      return sequence.allSourceIds.find((a) => sourceIds.indexOf(a) != -1);\r\n    })) {\r\n      return;\r\n    }\r\n\r\n    if(selection.result.action.type == 'replace') {\r\n      replaceModelWith(getGestureModel(this.gestureModelDefinitions, selection.result.action.replace));\r\n    } else {\r\n      throw new Error(\"Missed a case in implementation!\");\r\n    }\r\n  };\r\n\r\n  public pushSelector(selector: MatcherSelector<HoveredItemType, StateToken>) {\r\n    this.selectorStack.push(selector);\r\n    selector.on('rejectionwithaction', this.modelResetHandler);\r\n  }\r\n\r\n  public sustainSelectorSubstack(selector: MatcherSelector<HoveredItemType, StateToken>) {\r\n    if(!selector) {\r\n      return [];\r\n    }\r\n\r\n    // If it's already been popped, just silently return.\r\n    const index = this.selectorStack.indexOf(selector);\r\n    if(index == -1) {\r\n      return [];\r\n    }\r\n\r\n    /* c8 ignore start */\r\n    if(this.selectorStack.length <= 1) {\r\n      throw new Error(\"May not force the original, base gesture selector into sustain mode.\");\r\n    }\r\n    /* c8 ignore end */\r\n\r\n    let sustainedSources: GestureSource<HoveredItemType, any>[] = [];\r\n\r\n    for(let i = index; i < this.selectorStack.length; i++) {\r\n      selector = this.selectorStack[i];\r\n\r\n      // If there are any models active with the `sustainWhenNested` property,\r\n      // the following Promise resolves once those are also completed.\r\n      sustainedSources = sustainedSources.concat(selector.cascadeTermination());\r\n    }\r\n\r\n    return sustainedSources;\r\n  }\r\n\r\n  public popSelector(selector: MatcherSelector<HoveredItemType, StateToken>) {\r\n    if(!selector) {\r\n      return;\r\n    }\r\n\r\n    // If it's already been popped, just silently return.\r\n    const index = this.selectorStack.indexOf(selector);\r\n    if(index == -1) {\r\n      return;\r\n    }\r\n\r\n    /* c8 ignore start */\r\n    if(this.selectorStack.length <= 1) {\r\n      throw new Error(\"May not pop the original, base gesture selector.\");\r\n    }\r\n    /* c8 ignore end */\r\n\r\n    while(index < this.selectorStack.length) {\r\n      selector = this.selectorStack[index];\r\n      selector.off('rejectionwithaction', this.modelResetHandler);\r\n\r\n      this.selectorStack.splice(index, 1);\r\n    }\r\n\r\n    // Should be fine as-is for now b/c modipress is always a base-selector gesture and is\r\n    // the only thing modifying stateToken within KeymanWeb.  May need an async/await in\r\n    // the future if other things become able to manipulate state tokens with this engine.\r\n\r\n    // Make sure the current state token is set at this stage.\r\n    this.currentSelector.stateToken = this.stateToken;\r\n  }\r\n\r\n  public selectorStackIncludes(selector: MatcherSelector<HoveredItemType, StateToken>): boolean {\r\n    return this.selectorStack.includes(selector);\r\n  }\r\n\r\n  public get currentSelector() {\r\n    return this.selectorStack[this.selectorStack.length-1];\r\n  }\r\n\r\n  private buildGestureMatchInspector(selector: MatcherSelector<HoveredItemType, StateToken>) {\r\n    return (source: GestureSource<HoveredItemType, StateToken>) => {\r\n      // Get the selectors at the time of the call, not at the time of the functor's construction.\r\n      const selectorIndex = this.selectorStack.indexOf(selector);\r\n      const selectors = this.selectorStack.slice(selectorIndex);\r\n\r\n      return selectors.map((selector) => selector.potentialMatchersForSource(source).map((matcher) => matcher.model.id))\r\n                      .reduce((flattened, entry) => flattened.concat(entry));\r\n    };\r\n  }\r\n\r\n  protected addEngine(engine: InputEngineBase<HoveredItemType, StateToken>) {\r\n    engine.on('pointstart', this.onNewTrackedPath);\r\n    this.inputEngines.push(engine);\r\n  }\r\n\r\n  private recordHistory(gesture: typeof this._history[0]) {\r\n    const histMax = this.historyMax;\r\n    if(histMax > 0) {\r\n      if(this._history.length == histMax) {\r\n        this._history.shift();\r\n      }\r\n      this._history.push(gesture);\r\n    }\r\n  }\r\n\r\n  private readonly onNewTrackedPath = async (touchpoint: GestureSource<HoveredItemType>) => {\r\n    this.addSimpleSourceHooks(touchpoint);\r\n    const modelDefs = this.gestureModelDefinitions;\r\n\r\n    let potentialSelector: MatcherSelector<HoveredItemType, StateToken>;\r\n    let selectionPromise: Promise<MatcherSelection<HoveredItemType, StateToken>>;\r\n    do {\r\n      potentialSelector = this.currentSelector;\r\n\r\n      /* We wait for the source to fully pass through the gesture-model spin-up phase; there's\r\n      * a chance that the new source will complete an existing gesture instantly without being\r\n      * locked to it, resulting in activation of a different `stateToken`.\r\n      *\r\n      * This, in turn, can affect what the initial 'item' for the new gesture will be.\r\n      */\r\n      const modelingSpinupPromise = potentialSelector.matchGesture(touchpoint, getGestureModelSet(modelDefs, potentialSelector.baseGestureSetId));\r\n      const modelingSpinupResults = await modelingSpinupPromise;\r\n\r\n      if(modelingSpinupResults.sustainModeWithoutMatch) {\r\n\r\n        const correctSample = (sample: InputSample<HoveredItemType, StateToken>) => {\r\n          sample.stateToken = this.stateToken;\r\n          sample.item = touchpoint.currentRecognizerConfig.itemIdentifier(sample, null);\r\n        };\r\n\r\n        /* May need to do a state-token change check & update the item; an `awaitNested` 'complete' action\r\n         * may have been pending in the meantime that could have triggered a change.\r\n         *\r\n         * (The MatcherSelector's state token will not have been updated b/c it will have already been popped,\r\n         * and because it's popped, it should not be responsible for managing the new GestureSource -\r\n         * including shifts in state token.)\r\n         *\r\n         * Current actual use-case:  deferred modipress due to ongoing flick, auto-completed by new incoming touch.\r\n         */\r\n        if(touchpoint.path instanceof GestureDebugPath) {\r\n          touchpoint.path.coords.forEach(correctSample);\r\n        }\r\n\r\n        // Don't forget to also correct the `stateToken` and `baseItem`!\r\n        touchpoint.stateToken = this.stateToken;\r\n        touchpoint.baseItem = touchpoint.path.stats.initialSample.item;\r\n\r\n        // Also, in case a contact model's path-eval references data via stats...\r\n        correctSample(touchpoint.path.stats.initialSample);\r\n        correctSample(touchpoint.path.stats.lastSample);\r\n        continue;\r\n      } else {\r\n        selectionPromise = modelingSpinupResults.selectionPromise;\r\n        break;\r\n      }\r\n\r\n      // Can only happen if a `sustainWhenNested` model state is resolved, nested within\r\n      // a gesture whose completion action requests `awaitNested`.\r\n    } while(potentialSelector != this.currentSelector);\r\n\r\n    const selector = this.currentSelector;\r\n\r\n    touchpoint.setGestureMatchInspector(this.buildGestureMatchInspector(selector));\r\n\r\n    const preGestureScribe = () => {\r\n      this.recordHistory(touchpoint);\r\n    }\r\n\r\n    /*\r\n      If there's an error in code receiving this event, we must not let that break the flow of\r\n      event input processing - we may still have a locking Promise corresponding to our active\r\n      GestureSource.  (See: next comment)\r\n    */\r\n    try {\r\n      touchpoint.path.on('invalidated', preGestureScribe);\r\n      this.emit('inputstart', touchpoint);\r\n    } catch (err) {\r\n      reportError(\"Error from 'inputstart' event listener\", err);\r\n    }\r\n\r\n    /*\r\n      If an `InputEventEngine` internally utilizes the `AsyncClosureDispatchQueue`, this is the point\r\n      at which we are now safe to process further events.  The correct 'stateToken' has been identified\r\n      and all GestureMatcher possibilities for the source have been launched; path updates may resume _and_\r\n      new incoming paths may now be safely handled.  As such, we can now fulfill any Promise returned by\r\n      a closure defined within its `inputStart` method for the `GestureSource` under consideration.\r\n\r\n      It is quite important that we _do_ fulfill the `Promise` if it exists - further event processing will\r\n      be blocked for such engines until this is done!  (Hence the try-catch above)\r\n    */\r\n    this.inputEngines.forEach((engine) => {\r\n      engine.fulfillInputStart(touchpoint);\r\n    });\r\n\r\n    // ----------------------------------------\r\n\r\n    // All gesture-matching is prepared; now we await the source's first gesture model match.\r\n    const selection = await selectionPromise;\r\n\r\n    // Any related 'push' mechanics that may still be lingering are currently handled by GestureSequence\r\n    // during its 'completion' processing.  (See `GestureSequence.selectionHandler`.)\r\n    if(!selection || selection.result.matched == false) {\r\n      return;\r\n    }\r\n\r\n    // For multitouch gestures, only report the gesture **once**.\r\n    const sourceIDs = selection.matcher.allSourceIds;\r\n    for(let sequence of this._activeGestures) {\r\n      if(!!sequence.allSourceIds.find((id1) => !!sourceIDs.find((id2) => id1 == id2))) {\r\n        // We've already established (and thus, already reported) a GestureSequence for this selection.\r\n        return;\r\n      }\r\n    }\r\n\r\n    const gestureSequence = new GestureSequence(selection, modelDefs, this.currentSelector, this);\r\n    this._activeGestures.push(gestureSequence);\r\n    gestureSequence.on('complete', () => {\r\n      // When the GestureSequence is fully complete and all related `firstSelectionPromise`s have\r\n      // had the chance to resolve, drop the reference; prevent memory leakage.\r\n      const index = this._activeGestures.indexOf(gestureSequence);\r\n      if(index != -1) {\r\n        this._activeGestures.splice(index, 1);\r\n      }\r\n    });\r\n\r\n    // Could track sequences easily enough; the question is how to tell when to 'let go'.\r\n\r\n    // No try-catch because only there's no critical code after it.\r\n    if(!touchpoint.path.wasCancelled) {\r\n      touchpoint.path.off('invalidated', preGestureScribe);\r\n      gestureSequence.on('complete', () => this.recordHistory(gestureSequence));\r\n    }\r\n    this.emit('recognizedgesture', gestureSequence);\r\n  }\r\n\r\n  public get activeGestures(): GestureSequence<HoveredItemType, StateToken>[] {\r\n    return [].concat(this._activeGestures);\r\n  }\r\n\r\n  public get activeSources(): GestureSource<HoveredItemType, StateToken>[] {\r\n    return [].concat(this.inputEngines.map((engine) => engine.activeSources).reduce((merged, arr) => merged.concat(arr), []));\r\n  }\r\n\r\n  public get history() {\r\n    return this._history;\r\n  }\r\n\r\n  public get historyJSON() {\r\n    const sanitizingReplacer = function (key: string, value: any) {\r\n      if(key == 'item') {\r\n        // KMW 'key' elements involve circular refs.\r\n        // Just return the key ID.  (Assumes use in KMW)\r\n        return value?.id;\r\n      } else {\r\n        return value;\r\n      }\r\n    }\r\n\r\n    return JSON.stringify(this.history, sanitizingReplacer, 2);\r\n  }\r\n\r\n  /**\r\n   * The current 'state token' to be set for newly-starting gestures for use by gesture-recognizer\r\n   * consumers, their item-identifier lookup functions, and their gesture model definitions.\r\n   *\r\n   * Use of this feature is intended to be strictly optional and only used in scenarios where\r\n   * the recognizer's consumer needs some sort of system-state to be associated with ongoing gestures.\r\n   */\r\n  public get stateToken(): StateToken {\r\n    return this._stateToken;\r\n  }\r\n\r\n  public set stateToken(token: StateToken) {\r\n    this._stateToken = token;\r\n    this.inputEngines.forEach((engine) => engine.stateToken = token);\r\n    this.currentSelector.stateToken = token;\r\n  }\r\n\r\n  private addSimpleSourceHooks(touchpoint: GestureSource<HoveredItemType>) {\r\n\r\n    touchpoint.path.on('invalidated', () => {\r\n      // GestureSequence _should_ handle any other cleanup internally as fallout\r\n      // from the path being cancelled.\r\n      //\r\n      // That said, it's handled asynchronously... but we can give a synchronous signal\r\n      // through the next block of code, allowing cleanup to occur earlier during\r\n      // recovery states.\r\n\r\n      const owningSequence = this.activeGestures.find((entry) => entry.allSourceIds.includes(touchpoint.identifier));\r\n      if(owningSequence) {\r\n        owningSequence.cancel();\r\n      }\r\n\r\n      // To consider: should it specially mark if it 'completed' due to cancellation,\r\n      // or is that safe to infer from the tracked GestureSource(s)?\r\n      // Currently, we're going with the latter.\r\n\r\n      // Also mark the touchpoint as no longer active.\r\n      let i = this._activeSources.indexOf(touchpoint);\r\n      this._activeSources = this._activeSources.splice(i, 1);\r\n    });\r\n    touchpoint.path.on('complete', () => {\r\n      // Also mark the touchpoint as no longer active.\r\n      let i = this._activeSources.indexOf(touchpoint);\r\n      this._activeSources = this._activeSources.splice(i, 1);\r\n    });\r\n  }\r\n}",
    "export * from './contactModel.js';\r\nexport * from './gestureModel.js';\r\nexport * from './gestureModelDefs.js';\r\n// Do NOT export from modelDefValidator here.  That's top-level only,\r\n// making it far easier to tree-shake.\r\nexport * from './pathModel.js';",
    "import { GestureRecognizerConfiguration, preprocessRecognizerConfig } from \"./configuration/gestureRecognizerConfiguration.js\";\r\nimport { MouseEventEngine } from \"./mouseEventEngine.js\";\r\nimport { Nonoptional } from \"./nonoptional.js\";\r\nimport { TouchEventEngine } from \"./touchEventEngine.js\";\r\nimport { TouchpointCoordinator } from \"./headless/touchpointCoordinator.js\";\r\nimport { EMPTY_GESTURE_DEFS, GestureModelDefs } from \"./headless/gestures/specs/index.js\";\r\n\r\nexport class GestureRecognizer<HoveredItemType, StateToken = any> extends TouchpointCoordinator<HoveredItemType, StateToken> {\r\n  public readonly config: Nonoptional<GestureRecognizerConfiguration<HoveredItemType, StateToken>>;\r\n\r\n  private readonly mouseEngine: MouseEventEngine<HoveredItemType>;\r\n  private readonly touchEngine: TouchEventEngine<HoveredItemType>;\r\n\r\n  public constructor(gestureModelDefinitions: GestureModelDefs<HoveredItemType, StateToken>, config: GestureRecognizerConfiguration<HoveredItemType, StateToken>) {\r\n    const preprocessedConfig = preprocessRecognizerConfig(config);\r\n\r\n    // Possibly just a stop-gap measure... but this provides an empty gesture-spec set definition\r\n    // that allows testing the path-constrainment functionality without invoking gesture-processing\r\n    // overhead.\r\n    gestureModelDefinitions = gestureModelDefinitions || EMPTY_GESTURE_DEFS;\r\n\r\n    super(gestureModelDefinitions, null, preprocessedConfig.historyLength);\r\n    this.config = preprocessedConfig;\r\n\r\n    this.mouseEngine = new MouseEventEngine<HoveredItemType>(this.config);\r\n    this.touchEngine = new TouchEventEngine<HoveredItemType>(this.config);\r\n\r\n    this.mouseEngine.registerEventHandlers();\r\n    this.touchEngine.registerEventHandlers();\r\n\r\n    this.addEngine(this.mouseEngine);\r\n    this.addEngine(this.touchEngine);\r\n  }\r\n\r\n  public destroy() {\r\n    // When shutting down the gesture engine, we should go ahead and clear out all related\r\n    // gesture-source tracking.\r\n    this.activeGestures.forEach((sequence) => sequence.cancel());\r\n    this.activeSources.forEach((source) => source.terminate(true));\r\n\r\n    this.mouseEngine.unregisterEventHandlers();\r\n    this.touchEngine.unregisterEventHandlers();\r\n\r\n    // Because these two fields are marked readonly, we can't directly delete them.\r\n    // Because they're private, we can't apply Mutable to make them deletable.\r\n    // So... awkward cast + assignment it is.\r\n    (this.mouseEngine as any) = null;\r\n    (this.touchEngine as any) = null;\r\n  }\r\n}",
    "export * as specs from \"./specs/index.js\";\r\nexport * as matchers from \"./matchers/index.js\";",
    "export { GestureMatcher } from './gestureMatcher.js';\r\nexport { GestureSequence, GestureStageReport, modelSetForAction } from './gestureSequence.js';\r\nexport { MatcherSelection, MatcherSelector } from './matcherSelector.js';\r\nexport { PathMatcher } from './pathMatcher.js';",
    "import { ActiveKeyBase, KeyDistribution } from \"keyman/engine/keyboard\";\r\nimport { CorrectionLayout } from \"./correctionLayout.js\";\r\n\r\n/**\r\n * Computes a squared 'pseudo-distance' for the touch from each key.  (Not a proper metric.)\r\n * Intended for use in generating a probability distribution over the keys based on the touch input.\r\n * @param touchCoords A proportional (x, y) coordinate of the touch within the keyboard's geometry.\r\n *                           Should be within <0, 0> to <1, 1>.\r\n * @param correctiveLayout  The corrective-layout mappings for keys under consideration\r\n *                          by a correction algorithm, also within <0, 0> to <1, 1>.\r\n * @returns A mapping of key IDs to the 'squared pseudo-distance' of the touchpoint to each key.\r\n */\r\nexport function keyTouchDistances(touchCoords: {x: number, y: number}, correctiveLayout: CorrectionLayout): Map<ActiveKeyBase, number> {\r\n  let keyDists: Map<ActiveKeyBase, number> = new Map<ActiveKeyBase, number>();\r\n\r\n  // This loop computes a pseudo-distance for the touch from each key. Quite useful for\r\n  // generating a probability distribution.\r\n  correctiveLayout.keys.forEach((entry) => {\r\n    // These represent the within-key distance of the touch from the key's center.\r\n    // Both should be on the interval [0, 0.5].\r\n    let dx = Math.abs(touchCoords.x - entry.centerX);\r\n    let dy = Math.abs(touchCoords.y - entry.centerY);\r\n\r\n    // If the touch isn't within the key, these store the out-of-key distance\r\n    // from the closest point on the key being checked.\r\n    let distX: number, distY: number;\r\n\r\n    if(dx > 0.5 * entry.width) {\r\n      distX = (dx - 0.5 * entry.width);\r\n      dx = 0.5;\r\n    } else {\r\n      distX = 0;\r\n      dx /= entry.width;\r\n    }\r\n\r\n    if(dy > 0.5 * entry.height) {\r\n      distY = (dy - 0.5 * entry.height);\r\n      dy = 0.5;\r\n    } else {\r\n      distY = 0;\r\n      dy /= entry.height;\r\n    }\r\n\r\n    // Now that the differentials are computed, it's time to do distance scaling.\r\n    //\r\n    // For out-of-key distance, we scale the X component by the keyboard's aspect ratio\r\n    // to get the actual out-of-key distance rather than proportional.\r\n    distX *= correctiveLayout.kbdScaleRatio;\r\n\r\n    // While the keys are rarely perfect squares, we map all within-key distance\r\n    // to a square shape.  (ALT/CMD should seem as close to SPACE as a 'B'.)\r\n    //\r\n    // For that square, we take the rowHeight as its edge lengths.\r\n    distX += dx * entry.height;\r\n    distY += dy * entry.height;\r\n\r\n    const distance = distX * distX + distY * distY;\r\n    keyDists.set(entry.keySpec, distance);\r\n  });\r\n\r\n  return keyDists;\r\n}\r\n\r\n/**\r\n * @param squaredDistMap A map of key-id to the squared distance of the original touch from each key under\r\n * consideration.\r\n * @returns\r\n */\r\nexport function distributionFromDistanceMaps(squaredDistMaps: Map<ActiveKeyBase, number> | Map<ActiveKeyBase, number>[]): KeyDistribution {\r\n  const keyProbs = new Map<ActiveKeyBase, number>();\r\n  let totalMass = 0;\r\n\r\n  if(!Array.isArray(squaredDistMaps)) {\r\n    squaredDistMaps = [squaredDistMaps];\r\n  }\r\n\r\n  for(let squaredDistMap of squaredDistMaps) {\r\n    // Should we wish to allow multiple different transforms for distance -> probability, use a function parameter in place\r\n    // of the formula in the loop below.\r\n    for(let key of squaredDistMap.keys()) {\r\n      // We've found that in practice, dist^-4 seems to work pretty well.  (Our input has dist^2.)\r\n      // (Note:  our rule of thumb here has only been tested for layout-based distances.)\r\n      //\r\n      // The 3e-5 fudge-factor may seem a bit high, but it has two purposes:\r\n      // 1. Prevent div-by-0 errors\r\n      // 2. Ensures that the main key's probability doesn't get SO high that we don't\r\n      //    consider correcting to immediate neighbors, even if perfectly accurate.\r\n      const entry = 1 / (Math.pow(squaredDistMap.get(key), 2) + 3e-5);\r\n      totalMass += entry;\r\n\r\n      // In case of duplicate key IDs; this can occur if multiple sets are specified.\r\n      keyProbs.set(key, keyProbs.get(key) ?? 0 + entry);\r\n    }\r\n  }\r\n\r\n  const list: {keySpec: ActiveKeyBase, p: number}[] = [];\r\n\r\n  for(let key of keyProbs.keys()) {\r\n    list.push({keySpec: key, p: keyProbs.get(key) / totalMass});\r\n  }\r\n\r\n  return list.sort(function(a, b) {\r\n    return b.p - a.p; // Largest probability keys should be listed first.\r\n  });\r\n}\r\n",
    "import { type KeyElement } from '../../../keyElement.js';\r\nimport VisualKeyboard from '../../../visualKeyboard.js';\r\n\r\nimport { ActiveKey, ActiveKeyBase, ActiveSubKey, KeyDistribution, KeyEvent } from 'keyman/engine/keyboard';\r\nimport { ConfigChangeClosure, CumulativePathStats, GestureRecognizerConfiguration, GestureSequence, GestureSource, GestureSourceSubview, InputSample, RecognitionZoneSource } from '@keymanapp/gesture-recognizer';\r\nimport { GestureHandler } from '../gestureHandler.js';\r\nimport { distributionFromDistanceMaps } from '../../../corrections.js';\r\nimport { GestureParams } from '../specsForLayout.js';\r\nimport { GesturePreviewHost } from '../../../keyboard-layout/gesturePreviewHost.js';\r\nimport { TouchLayout } from '@keymanapp/common-types';\r\n\r\nexport const OrderedFlickDirections = ['n', 'ne', 'e', 'se', 's', 'sw', 'w', 'nw'] as const;\r\n\r\nconst PI = Math.PI;\r\n\r\nexport const FlickNameCoordMap = (() => {\r\n  const map = new Map<typeof OrderedFlickDirections[number], [number, number]>();\r\n\r\n  const angleIncrement = PI / 4;\r\n  for(let i = 0; i < OrderedFlickDirections.length; i++) {\r\n    map.set(OrderedFlickDirections[i], [angleIncrement * i, 1]);\r\n  }\r\n\r\n  return map;\r\n})();\r\n\r\nexport function lockedAngleForDir(lockedDir: typeof OrderedFlickDirections[number]) {\r\n  return Math.PI / 4 * OrderedFlickDirections.indexOf(lockedDir);\r\n}\r\n\r\nexport function calcLockedDistance(pathStats: CumulativePathStats<any>, lockedDir: typeof OrderedFlickDirections[number]) {\r\n  const lockedAngle = lockedAngleForDir(lockedDir);\r\n\r\n  const rootCoord = pathStats.initialSample;\r\n  const deltaX = pathStats.lastSample.targetX - rootCoord.targetX;\r\n  const deltaY = pathStats.lastSample.targetY - rootCoord.targetY;\r\n\r\n  const projY = Math.max(0, -deltaY * Math.cos(lockedAngle));\r\n  const projX = Math.max(0,  deltaX * Math.sin(lockedAngle));\r\n\r\n  // For intercardinals, note that Math.cos and Math.sin essentially result in component factors of sqrt(2);\r\n  // essentially, we've already taken the sqrt of distance.\r\n  return projX + projY;\r\n}\r\n\r\nexport function buildFlickScroller(\r\n  source: GestureSource<KeyElement>,\r\n  lockedDir: typeof OrderedFlickDirections[number],\r\n  previewHost: GesturePreviewHost,\r\n  gestureParams: GestureParams\r\n): (coord: InputSample<KeyElement>) => void {\r\n  return (coord: InputSample<KeyElement>) => {\r\n    const lockedAngle = lockedAngleForDir(lockedDir);\r\n\r\n    const maxProgressDist = gestureParams.flick.triggerDist - gestureParams.flick.dirLockDist;\r\n    let progressDist =  Math.max(0, calcLockedDistance(source.path.stats, lockedDir) - gestureParams.flick.dirLockDist);\r\n\r\n    // Make progress appear slightly less than it really is; 'near complete' slides thus actually are, so\r\n    // the user doesn't get aggrevated by 'near misses' in that regard.\r\n    //\r\n    // With 0.7, a flick-slide that looks 70% complete will actually be 100% complete.\r\n    // This is about when the flick's key-cap preview starts becoming \"mostly visible\".\r\n    const FUDGE_SCALE_FACTOR = 0.7;\r\n    // Prevent overshoot\r\n    let slidePc = Math.min(1, FUDGE_SCALE_FACTOR * progressDist / maxProgressDist);\r\n\r\n    const previewX =  Math.sin(lockedAngle) * slidePc;\r\n    const previewY = -Math.cos(lockedAngle) * slidePc;\r\n\r\n    previewHost?.scrollFlickPreview(previewX, previewY);\r\n  }\r\n}\r\n\r\n/**\r\n * The maximum angle-difference, in radians, allowed before a potential flick\r\n * is to be considered less likely than its base key.\r\n *\r\n * A 60 degree tolerance (Math.PI / 3) + a 'n' flick will consider most angles\r\n * north of the x-axis more likely than the base key - thus including\r\n * 'nw' and 'ne' and some 'w' and 'e' paths.\r\n */\r\nexport const MAX_TOLERANCE_ANGLE_SKEW = Math.PI / 3;\r\n\r\n/**\r\n * Represents a flick gesture's implementation within KeymanWeb, including\r\n * its predictive-text correction aspects.\r\n */\r\nexport default class Flick implements GestureHandler {\r\n  readonly directlyEmitsKeys = true;\r\n\r\n  private readonly sequence: GestureSequence<KeyElement, string>;\r\n  private readonly gestureParams: GestureParams;\r\n\r\n  private readonly baseSpec: ActiveKey;\r\n  readonly hasModalVisualization: false;\r\n\r\n  private baseKeyDistances: Map<ActiveKeyBase, number>;\r\n  private computedFlickDistribution: KeyDistribution;\r\n  private lockedDir: typeof OrderedFlickDirections[number];\r\n  private lockedSelectable: ActiveSubKey;\r\n  private flickScroller: (coord: InputSample<KeyElement, any>) => void;\r\n\r\n  constructor(\r\n    sequence: GestureSequence<KeyElement, string>,\r\n    configChanger: ConfigChangeClosure<KeyElement>,\r\n    vkbd: VisualKeyboard,\r\n    e: KeyElement,\r\n    gestureParams: GestureParams,\r\n    previewHost: GesturePreviewHost\r\n  ) {\r\n    this.sequence = sequence;\r\n    this.gestureParams = gestureParams;\r\n    this.baseSpec = e.key.spec as ActiveKey;\r\n\r\n    // May be worth a temporary alt config:  global roaming, rather than auto-canceling.\r\n\r\n    this.baseKeyDistances = vkbd.getSimpleTapCorrectionDistances(sequence.stageReports[0].sources[0].path.stats.initialSample, this.baseSpec)\r\n    const baseSource = sequence.stageReports[0].sources[0].baseSource;\r\n    let source: GestureSource<KeyElement> = baseSource;\r\n\r\n    sequence.on('complete', () => {\r\n      previewHost?.cancel()\r\n    });\r\n\r\n    this.sequence.on('stage', (result) => {\r\n      const pathStats = source.path.stats;\r\n      this.computedFlickDistribution = this.flickDistribution(pathStats, true);\r\n\r\n      const baseSelection = this.computedFlickDistribution[0].keySpec;\r\n\r\n      if(result.matchedId == 'flick-restart') {\r\n        // The gesture-engine's already done this, but we need an analogue for it here.\r\n        source.path.replaceInitialSample(result.sources[0].path.stats.initialSample);\r\n        // Part of the flick-reset process.\r\n        return;\r\n      } if(result.matchedId == 'flick-reset-centering') {\r\n        // Part of the flick-reset process.\r\n        source = baseSource.constructSubview(true, true);\r\n        return;\r\n      } else if(result.matchedId == 'flick-reset-end') {\r\n        this.emitKey(vkbd, this.baseSpec, source.path.stats);\r\n        return;\r\n      } else if(result.matchedId == 'flick-reset') {\r\n        // Instant transitions to flick-mid state; entry indicates a lock \"reset\".\r\n        // Cancel the flick-viz bit.\r\n        if(this.flickScroller) {\r\n          this.flickScroller(source.currentSample);\r\n          // Clear any previously-set scroller.\r\n          source.path.off('step', this.flickScroller);\r\n        }\r\n        this.lockedDir = null;\r\n        this.lockedSelectable = null;\r\n\r\n        // Chops off the prior part of the path\r\n        if(source instanceof GestureSourceSubview) {\r\n          // Clean up the handlers; we're replacing the subview.\r\n          source.disconnect();\r\n        }\r\n        return;\r\n      } else if(result.matchedId == 'flick-mid') {\r\n        if(baseSelection == this.baseSpec) {\r\n          // Do not store a locked direction; the direction we WOULD lock has\r\n          // no valid flick available.\r\n          return;\r\n        }\r\n\r\n        const dir = Object.keys(this.baseSpec.flick).find(\r\n          (dir) => this.baseSpec.flick[dir as keyof TouchLayout.TouchLayoutFlick] == baseSelection\r\n        ) as typeof OrderedFlickDirections[number];\r\n\r\n        this.lockedDir = dir;\r\n        this.lockedSelectable = baseSelection;\r\n\r\n        if(this.flickScroller) {\r\n          // Clear any previously-set scroller.\r\n          source.path.off('step', this.flickScroller);\r\n        }\r\n\r\n        this.flickScroller = buildFlickScroller(source, dir, previewHost, this.gestureParams);\r\n        this.flickScroller(source.currentSample);\r\n        source.path.on('step', this.flickScroller);\r\n\r\n        return;\r\n      }\r\n\r\n      const selection = this.lockedSelectable ?? baseSelection;\r\n      this.emitKey(vkbd, selection, pathStats);\r\n    });\r\n\r\n    // Be sure to extend roaming bounds a bit more than usual for flicks, as they can be quick motions.\r\n    const altConfig = this.buildPopupRecognitionConfig(vkbd);\r\n    configChanger({\r\n      type: 'push',\r\n      config: altConfig\r\n    });\r\n  }\r\n\r\n  private emitKey(vkbd: VisualKeyboard, selection: ActiveKeyBase, pathStats: CumulativePathStats<any>) {\r\n    let keyEvent: KeyEvent;\r\n    const projectedDistance = calcLockedDistance(pathStats, this.lockedDir);\r\n    if(projectedDistance > this.gestureParams.flick.triggerDist) {\r\n      keyEvent = vkbd.keyEventFromSpec(selection);\r\n    } else {\r\n      // Even if mid-way between base key and actual key.\r\n      keyEvent = vkbd.keyEventFromSpec(this.baseSpec);\r\n    }\r\n\r\n    keyEvent.keyDistribution = this.currentStageKeyDistribution(this.baseKeyDistances);\r\n\r\n    // emit the keystroke\r\n    vkbd.raiseKeyEvent(keyEvent, null);\r\n  }\r\n\r\n  private buildPopupRecognitionConfig(vkbd: VisualKeyboard): GestureRecognizerConfiguration<KeyElement, string> {\r\n    const roamBounding: RecognitionZoneSource = {\r\n      getBoundingClientRect() {\r\n        // We don't want to actually use Number.NEGATIVE_INFINITY or Number.POSITIVE_INFINITY\r\n        // because that produces a DOMRect with a few NaN fields, and we don't want _that_.\r\n\r\n        // Way larger than any screen resolution should ever be.\r\n        const base = Number.MAX_SAFE_INTEGER;\r\n        return new DOMRect(-base, -base, 2*base, 2*base);\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...vkbd.gestureEngine.config,\r\n      maxRoamingBounds: roamBounding,\r\n      safeBounds: roamBounding // if embedded, ensure top boundary extends outside the WebView!\r\n    }\r\n  }\r\n\r\n  cancel() {\r\n    // Cancel any flick-specific visualization stuff.\r\n  }\r\n\r\n  /**\r\n   * Builds a probability distribution for the likelihood of any key-supported flick\r\n   * (or lack thereof) being intended given the path properties specified.\r\n   * @param pathStats\r\n   * @returns\r\n   */\r\n  flickDistribution(pathStats: CumulativePathStats, ignoreThreshold?: boolean) {\r\n    // NOTE:  does not consider flick direction-locking.\r\n    const flickSet = this.baseSpec.flick;\r\n\r\n    /* Time to compute flick corrections!\r\n     *\r\n     * The best way to define a \"flick distance\"... the polar coordinate system, which\r\n     * uses (angle, dist) instead of (x, y), with dist clamped at the net distance\r\n     * threshold.  This way, a diagonal flick doesn't have odd effects due to\r\n     * \"corner of the square\" positioning if hard-bounding on x & y instead.\r\n     *\r\n     * The greater the net distance, the less likely that the base key will be selected,\r\n     * no matter which flick is actually picked.  In the case that only one flick is\r\n     * supported, and in the opposite direction from the actual input, both the flick\r\n     * and base key will be considered equally likely.  (One due to direction, the\r\n     * other due to distance.)\r\n     *\r\n     * We do this even if pred-text is disabled:  it's the easiest way to pick a\r\n     * 'nearest-neighbor' flick if the direction doesn't fall perfectly within a\r\n     * defined bucket.  (It lets us 'fudge' the boundaries a bit.)\r\n     */\r\n\r\n    // Step 1:  build the list of supported flicks, including the base key as a fallback.\r\n    let keys: {\r\n      spec: ActiveKeyBase,\r\n      coord: [number, number]\r\n    }[] = [{\r\n      spec: this.baseSpec,\r\n      coord: [NaN, 0]\r\n    }];\r\n\r\n    keys = keys.concat(Object.keys(flickSet).map((dir) => {\r\n      return {\r\n        spec: flickSet[dir as typeof OrderedFlickDirections[number]] as ActiveSubKey,\r\n        coord: FlickNameCoordMap.get(dir as typeof OrderedFlickDirections[number])\r\n      };\r\n    }));\r\n\r\n    const angle = pathStats.angle;\r\n\r\n    // Determine whether or not the flick distance-threshold has been passed...\r\n    // and how close it is to being passed if not yet passed.\r\n    const TRIGGER_DIST = this.gestureParams.flick.triggerDist;\r\n    const baseDist = Math.min(TRIGGER_DIST, ignoreThreshold ? TRIGGER_DIST : pathStats.netDistance);\r\n    const distThresholdRatio = baseDist / TRIGGER_DIST;\r\n\r\n    let totalMass = 0;\r\n    const distribution: KeyDistribution = keys.map((entry) => {\r\n      let angleDist = 0;\r\n      const coord = entry.coord;\r\n      if(!isNaN(coord[0])) {\r\n        const angleDelta1 = angle - coord[0];\r\n        const angleDelta2 = 2 * PI + coord[0] - angle; // because of angle wrap-around.\r\n\r\n        // NOTE:  max linear angle dist:  PI.  (Angles are between 0 and 2*PI.)\r\n        angleDist = Math.min(angleDelta1 * angleDelta1, angleDelta2 * angleDelta2);\r\n      }\r\n\r\n      /*\r\n       * Max linear geometric distance: 1.  We should weight it for better comparison\r\n       * to angleDist.\r\n       *\r\n       * MAX_TOLERANCE_ANGLE_SKEW is a perfect conversion factor.  Being off by a\r\n       * dist of 1 then converts into angle-equivalent distance of the skew, making\r\n       * it an equal contributor to overall distance.\r\n       */\r\n      const geoDelta = MAX_TOLERANCE_ANGLE_SKEW * (coord[1] - distThresholdRatio);\r\n\r\n      const geoDist = (geoDelta * geoDelta);\r\n      const mass = 1 / (angleDist + geoDist + 1e-6); // prevent div-by-zero\r\n      totalMass += mass;\r\n\r\n      return {\r\n        keySpec: entry.spec,\r\n        p: mass\r\n      }\r\n    });\r\n\r\n    const normalizer = 1.0 / totalMass;\r\n    distribution.forEach((entry) => entry.p *= normalizer);\r\n\r\n    // Sort in descending probability order.\r\n    return distribution.sort((a, b) => b.p - a.p);\r\n  }\r\n\r\n  currentStageKeyDistribution(baseDistMap: Map<ActiveKeyBase, number>): KeyDistribution {\r\n    const baseSpec = this.baseSpec;\r\n    const baseDistances = this.baseKeyDistances;\r\n    const flickDistrib = this.computedFlickDistribution;\r\n    const entry = baseDistances.get(baseSpec);\r\n\r\n    if(!entry) {\r\n      const best = flickDistrib[0];\r\n      return [\r\n        {\r\n          keySpec: best.keySpec,\r\n          p: 1\r\n        }\r\n      ];\r\n    }\r\n\r\n    // Corrections are enabled:  return a full distribution\r\n    const baseKeyFlickProbIndex = flickDistrib.findIndex((entry) => entry.keySpec == baseSpec);\r\n    // Remove the base-key entry from the flick distribution but save its probability.\r\n    // We'll scale the base distribution down so that its sum equals that value, enabling\r\n    // us to merge the distributions while preserving normalization.\r\n    const baseKeyFlickProb = flickDistrib.splice(baseKeyFlickProbIndex, 1)[0].p;\r\n\r\n    const baseDistribution = distributionFromDistanceMaps(baseDistances);\r\n    return flickDistrib.concat(baseDistribution.map((entry) => {\r\n      return {\r\n        keySpec: entry.keySpec,\r\n        // Scale down all base key probabilities by how likely the base key's selection from\r\n        // the flick itself is.\r\n        p: entry.p * baseKeyFlickProb\r\n      }\r\n    }));\r\n  }\r\n}",
    "import {\r\n  gestures,\r\n  GestureModelDefs,\r\n  CumulativePathStats\r\n} from '@keymanapp/gesture-recognizer';\r\n\r\nimport {\r\n  TouchLayout\r\n} from '@keymanapp/common-types';\r\nimport ButtonClasses = TouchLayout.TouchLayoutKeySp;\r\n\r\nimport {\r\n  ActiveLayout,\r\n  deepCopy\r\n} from 'keyman/engine/keyboard';\r\n\r\nimport { type KeyElement } from '../../keyElement.js';\r\n\r\nimport { calcLockedDistance, lockedAngleForDir, MAX_TOLERANCE_ANGLE_SKEW, type OrderedFlickDirections } from './browser/flick.js';\r\n\r\nimport specs = gestures.specs;\r\n\r\nexport interface GestureParams {\r\n  readonly longpress: {\r\n    /**\r\n     * The minimum _net_ distance traveled before a longpress flick-shortcut will cancel any\r\n     * conflicting flick models.\r\n     */\r\n    flickDistStart: number,\r\n\r\n    /**\r\n     * The minimum _net_ distance traveled before a longpress flick-shortcut will trigger.\r\n     */\r\n    flickDistFinal: number,\r\n\r\n    /**\r\n     * The maximum amount of raw-distance movement allowed for a longpress before it is\r\n     * aborted in favor of roaming touch and/or a timer reset.  Only applied when\r\n     * roaming touch behaviors are permitted / when flicks are disabled.\r\n     *\r\n     * This threshold is not applied if the movement meets all criteria to trigger a\r\n     * flick-shortcut but the distance traveled.\r\n     */\r\n    noiseTolerance: number,\r\n\r\n    /**\r\n     * The duration (in ms) that the base key must be held before the subkey menu will be\r\n     * displayed should the up-flick shortcut not be utilized.\r\n     */\r\n    waitLength: number\r\n  },\r\n  readonly multitap: {\r\n    /**\r\n     * The duration (in ms) permitted between taps.  Taps with a greater time interval\r\n     * between them will be considered separate.\r\n     */\r\n    waitLength: number;\r\n\r\n    /**\r\n     * The duration (in ms) permitted for a tap to be held before it will no longer\r\n     * be considered part of a multitap.\r\n     */\r\n    holdLength: number;\r\n  },\r\n  readonly flick: {\r\n    /**\r\n     * The minimum _net_ touch-path distance that must be traversed to \"lock in\" on\r\n     * a flick gesture.  When keys support both longpresses and flicks, this distance\r\n     * must be traversed before the longpress timer elapses.\r\n     *\r\n     * This distance does _not_ trigger an actual flick keystroke; it is intended to\r\n     * ensure that paths meeting this criteria have the chance to meet the full\r\n     * distance criteria for a flick even if longpresses are also supported on a key.\r\n     */\r\n    startDist: number,\r\n\r\n    /**\r\n     * The minimum _net_ touch-path distance that must be traversed for flicks\r\n     * to be triggered.\r\n     */\r\n    triggerDist: number,\r\n\r\n    /**\r\n     * The minimum _net_ touch-path distance after which the direction will be locked.\r\n     *\r\n     * Is currently also used as the max radius for valid flick-reset recentering targets.\r\n     */\r\n    dirLockDist: number\r\n  }\r\n}\r\n\r\nexport interface FullGestureParams<Item = any> extends GestureParams {\r\n  readonly longpress: GestureParams[\"longpress\"] & {\r\n    /**\r\n     * Allows enabling or disabling the longpress up-flick shortcut for\r\n     * keyboards that do not include any defined flick gestures.\r\n     *\r\n     * Will be ignored (in favor of `false`) for keyboards that do have defined\r\n     * flicks.\r\n     *\r\n     * Note:  this is automatically overwritten during keyboard initialization\r\n     * to match the keyboard's properties.\r\n     */\r\n    permitsFlick: (item?: Item) => boolean\r\n  },\r\n  /**\r\n   * Indicates whether roaming-touch oriented behaviors should be enabled.\r\n   */\r\n  roamingEnabled?: boolean;\r\n}\r\n\r\nexport const DEFAULT_GESTURE_PARAMS: GestureParams = {\r\n  longpress: {\r\n    // Note:  actual runtime value is determined at runtime based upon row height.\r\n    // See `VisualKeyboard.refreshLayout`, CTRL-F \"Step 3\".\r\n    flickDistStart: 8,\r\n    flickDistFinal: 40,\r\n    waitLength: 500,\r\n    noiseTolerance: 10\r\n  },\r\n  multitap: {\r\n    waitLength: 300,\r\n    holdLength: 150\r\n  },\r\n  // Note:  all actual runtime values are determined at runtime based upon row height.\r\n  // See `VisualKeyboard.refreshLayout`, CTRL-F \"Step 3\".\r\n  flick: {\r\n    startDist: 10,\r\n    dirLockDist: 25,\r\n    triggerDist: 40 // should probably be based on row-height?\r\n  }\r\n}\r\n\r\n/**\r\n * Gets the centroid (in client coordinates) of a key's element.\r\n *\r\n * Assumes that the key's layer is in the DOM and actively displayed.\r\n * @param key\r\n */\r\nfunction getKeyCentroid(key: KeyElement) {\r\n  // We don't layer-shift at present while a flick is active, so it's valid\r\n  // for current use-cases.  May need extension to closure in something\r\n  // to force the layer to be active in the future, though.\r\n  const keyRect = key.getBoundingClientRect();\r\n\r\n  return {\r\n    clientX: keyRect.left + keyRect.width/2,\r\n    clientY: keyRect.top + keyRect.height/2\r\n  };\r\n}\r\n\r\n// Is kept separate from prior method in case it becomes a closure in the future\r\n// & needs to be passed in as a parameter.\r\nfunction buildDistFromKeyCentroidFunctor(key: KeyElement) {\r\n  const keyCentroid = getKeyCentroid(key);\r\n\r\n  return (a: CumulativePathStats) => {\r\n    const dx = a.lastSample.clientX - keyCentroid.clientX;\r\n    const dy = a.lastSample.clientY - keyCentroid.clientY;\r\n    return Math.sqrt(dx*dx + dy*dy);\r\n  }\r\n}\r\n\r\nexport function keySupportsModipress(key: KeyElement) {\r\n  const keySpec = key.key.spec;\r\n\r\n  // A key cannot reasonably support both longpresses and modipresses.\r\n  // It'd be quite ugly to overlay the subkey menu over the new layer during a modipress.\r\n  if(keySpec.sk) {\r\n    return false;\r\n  }\r\n\r\n  const modifierKeyIds = ['K_SHIFT', 'K_ALT', 'K_CTRL', 'K_NUMERALS', 'K_SYMBOLS', 'K_CURRENCIES'];\r\n  for(const modKeyId of modifierKeyIds) {\r\n\r\n    if(keySpec.id == modKeyId) {\r\n      return true;\r\n    }\r\n  }\r\n\r\n  // Allows special-formatted keys with a next-layer property to be modipressable.\r\n  if(!keySpec.nextlayer) {\r\n    return false;\r\n  } else {\r\n    switch(keySpec.sp) {\r\n      case ButtonClasses.special:\r\n      case ButtonClasses.specialActive:\r\n      case ButtonClasses.customSpecial:\r\n      case ButtonClasses.customSpecialActive:\r\n        return true;\r\n      default: // .normal, .spacer, .blank, .deadkey\r\n        return false;\r\n    }\r\n  }\r\n}\r\n\r\ninterface LayoutGestureSupportFlags {\r\n  hasFlicks: boolean,\r\n  hasMultitaps: boolean,\r\n  hasLongpresses: boolean\r\n}\r\n\r\n// Simple compile-time validation that OSKLayerGroup's spec object provides the fields expected above.\r\nlet dummy: ActiveLayout;\r\n// @ts-ignore // so that we don't trigger \"unused local\" warnings.\r\nlet dummy2: LayoutGestureSupportFlags = dummy;\r\n\r\n/**\r\n * Defines the set of gestures appropriate for use with the specified Keyman\r\n * keyboard.\r\n * @param layerGroup  The active keyboard's layer group\r\n * @param paramObj    A set of tweakable gesture parameters.  It will be\r\n *                    closure-captured and referred to by reference; changes to\r\n *                    its values will take immediate effect during gesture\r\n *                    processing.\r\n * @returns\r\n */\r\nexport function gestureSetForLayout(flags: LayoutGestureSupportFlags, paramObj: GestureParams): GestureModelDefs<KeyElement, string> {\r\n  // To be used among the `allowsInitialState` contact-model specifications as needed.\r\n  const gestureKeyFilter = (key: KeyElement, gestureId: string) => {\r\n    if(!key) {\r\n      return false;\r\n    }\r\n\r\n    const keySpec = key.key.spec;\r\n    switch(gestureId) {\r\n      case 'modipress-start':\r\n        return keySupportsModipress(key);\r\n      case 'special-key-start':\r\n        return ['K_LOPT', 'K_ROPT', 'K_BKSP'].indexOf(keySpec.baseKeyID) != -1;\r\n      case 'longpress':\r\n        // Always allow longpresses to start; we validate them at timer-end.\r\n        // This facilitates roaming+longpress interactions.\r\n        return true;\r\n      case 'multitap-start':\r\n      case 'modipress-multitap-start':\r\n        if(flags.hasMultitaps) {\r\n          return !!keySpec.multitap;\r\n        } else {\r\n          return false;\r\n        }\r\n      case 'flick-start':\r\n        // This is a gesture-start check; there won't yet be any directional info available.\r\n        return !!keySpec.flick;\r\n      default:\r\n        return true;\r\n    }\r\n  };\r\n\r\n  const params = paramObj as FullGestureParams;\r\n\r\n  // Override any prior entries for keyboard-specific configuration.\r\n  params.longpress.permitsFlick = (key) => {\r\n    const flickSpec = key?.key.spec.flick;\r\n    return !flickSpec || !(flickSpec.n || flickSpec.nw || flickSpec.ne);\r\n  };\r\n  const doRoaming = params.roamingEnabled = !flags.hasFlicks;\r\n\r\n  const _initialTapModel: GestureModel<KeyElement> = deepCopy(!doRoaming ? initialTapModel(params) : initialTapModelWithReset(params));\r\n  const _simpleTapModel: GestureModel<KeyElement> = deepCopy(!doRoaming ? simpleTapModel(params) : simpleTapModelWithReset(params));\r\n  // Ensure all deep-copy operations for longpress modeling occur before the property-redefining block.\r\n  const _longpressModel: GestureModel<KeyElement> = withKeySpecFiltering(deepCopy(longpressModel(params, true, doRoaming)), 0);\r\n  const _multitapStartModel: GestureModel<KeyElement> = withKeySpecFiltering(multitapStartModel(params), 0);\r\n  const _modipressMultitapStartModel: GestureModel<KeyElement> = withKeySpecFiltering(modipressMultitapStartModel(params), 0);\r\n\r\n  // `deepCopy` does not preserve property definitions, instead raw-copying its value.\r\n  // We need to re-instate the longpress delay property here.\r\n  Object.defineProperty(_longpressModel.contacts[0].model.timer, 'duration', {\r\n    get: () => params.longpress.waitLength\r\n  });\r\n  Object.defineProperty(_multitapStartModel.sustainTimer, 'duration', {\r\n    get: () => params.multitap.waitLength\r\n  });\r\n  Object.defineProperty(_modipressMultitapStartModel.sustainTimer, 'duration', {\r\n    get: () => params.multitap.waitLength\r\n  });\r\n\r\n  // #region Functions for implementing and/or extending path initial-state checks\r\n  function withKeySpecFiltering(model: GestureModel<KeyElement>, contactIndices: number | number[]) {\r\n    // Creates deep copies of the model specifications that are safe to customize to the\r\n    // keyboard layout.\r\n    model = deepCopy(model);\r\n    const modelId = model.id;\r\n\r\n    if(typeof contactIndices == 'number') {\r\n      contactIndices = [contactIndices];\r\n    }\r\n\r\n    model.contacts.forEach((contact, index) => {\r\n      if((contactIndices as number[]).indexOf(index) != -1) {\r\n        const baseInitialStateCheck = contact.model.allowsInitialState ?? (() => true);\r\n\r\n        contact.model = {\r\n          ...contact.model,\r\n          allowsInitialState: (sample, ancestorSample, key) => {\r\n            return gestureKeyFilter(key, modelId) && baseInitialStateCheck(sample, ancestorSample, key);\r\n          }\r\n        };\r\n      }\r\n    });\r\n\r\n    return model;\r\n  }\r\n  // #endregion\r\n\r\n  const specialStartModel = specialKeyStartModel();\r\n  const _modipressStartModel = modipressStartModel();\r\n  const gestureModels: GestureModel<KeyElement>[] = [\r\n    _longpressModel,\r\n    _multitapStartModel,\r\n    multitapEndModel(params),\r\n    _initialTapModel,\r\n    _simpleTapModel,\r\n    withKeySpecFiltering(specialStartModel, 0),\r\n    specialKeyEndModel(params),\r\n    subkeySelectModel(),\r\n    withKeySpecFiltering(_modipressStartModel, 0),\r\n    modipressHoldModel(params),\r\n    modipressEndModel(),\r\n    modipressMultitapTransitionModel(),\r\n    _modipressMultitapStartModel,\r\n    modipressMultitapEndModel(params),\r\n    modipressMultitapLockModel()\r\n  ];\r\n\r\n  const defaultSet = [\r\n    _longpressModel.id, _initialTapModel.id, _modipressStartModel.id, specialStartModel.id\r\n  ];\r\n\r\n  if(!doRoaming) {\r\n    gestureModels.push(withKeySpecFiltering(flickStartModel(params), 0));\r\n    gestureModels.push(flickMidModel(params));\r\n    gestureModels.push(flickResetModel(params));\r\n    gestureModels.push(flickResetCenteringModel(params));\r\n    gestureModels.push(flickRestartModel(params));\r\n    gestureModels.push(flickResetEndModel());\r\n    gestureModels.push(flickEndModel(params));\r\n\r\n    defaultSet.push('flick-start');\r\n  } else {\r\n    // A post-roam version of longpress with the up-flick shortcut disabled but roaming still on.\r\n    gestureModels.push(withKeySpecFiltering(longpressModelAfterRoaming(params), 0));\r\n    // Allows reactivation of longpress-eval when the base key changes if the timer elapses on\r\n    // a subkey-less key.\r\n    gestureModels.push(longpressRoamRestoration());\r\n  }\r\n\r\n  return {\r\n    gestures: gestureModels,\r\n    sets: {\r\n      default: defaultSet,\r\n      modipress: defaultSet.filter((entry) => entry != _modipressStartModel.id), // no nested modipressing\r\n      none: []\r\n    }\r\n  }\r\n}\r\n\r\n// #region Definition of models for paths comprising gesture-stage models\r\n\r\n// Note:  as specified below, none of the raw specs actually need access to KeyElement typing.\r\n\r\ntype ContactModel = specs.ContactModel<any>;\r\n\r\nexport function instantContactRejectionModel(): ContactModel {\r\n  return {\r\n    itemPriority: 0,\r\n    pathResolutionAction: 'reject',\r\n    pathModel: {\r\n      evaluate: (path) => 'resolve'\r\n    }\r\n  };\r\n}\r\n\r\nexport function instantContactResolutionModel(): ContactModel {\r\n  return {\r\n    itemPriority: 0,\r\n    pathResolutionAction: 'resolve',\r\n    pathModel: {\r\n      evaluate: (path) => 'resolve'\r\n    }\r\n  };\r\n}\r\n\r\nexport function flickStartContactModel(params: FullGestureParams): gestures.specs.ContactModel<KeyElement, any> {\r\n  const flickParams = params.flick;\r\n\r\n  return {\r\n    itemPriority: 1,\r\n    pathModel: {\r\n      evaluate: (path, _, item) => {\r\n        const stats = path.stats;\r\n        const keySpec = item?.key.spec;\r\n\r\n        if(keySpec && keySpec.sk) {\r\n          const flickSpec = keySpec.flick;\r\n          const hasUpFlick = flickSpec.nw || flickSpec.n || flickSpec.ne;\r\n\r\n          if(!hasUpFlick) {\r\n            // Check for possible conflict with the longpress up-flick shortcut;\r\n            // it's supported on this key, as there is no true northish flick.\r\n            const baseDistance = stats.netDistance;\r\n            const angle = stats.angle; // from <0, -1> (straight up) going clockwise.\r\n            const verticalDistance = baseDistance * Math.cos(angle);\r\n            if(verticalDistance > params.longpress.flickDistStart) {\r\n              return 'reject';\r\n            }\r\n          }\r\n        }\r\n\r\n        return stats.netDistance > flickParams.startDist ? 'resolve' : null;\r\n      }\r\n    },\r\n    pathResolutionAction: 'resolve',\r\n    pathInheritance: 'partial'\r\n  }\r\n}\r\n\r\n/*\r\n * Determines the best direction to use for flick-locking and the total net distance\r\n * traveled in that direction.\r\n */\r\nfunction determineLockFromStats(pathStats: CumulativePathStats<KeyElement>, baseItem: KeyElement) {\r\n  const flickSpec = baseItem.key.spec.flick;\r\n\r\n  const supportedDirs = Object.keys(flickSpec) as (typeof OrderedFlickDirections[number])[];\r\n  let bestDir: typeof supportedDirs[number];\r\n  let bestLockedDist = 0;\r\n\r\n  for(const dir of supportedDirs) {\r\n    const lockedDist = calcLockedDistance(pathStats, dir);\r\n    if(lockedDist > bestLockedDist) {\r\n      bestLockedDist = lockedDist;\r\n      bestDir = dir;\r\n    }\r\n  }\r\n\r\n  return {\r\n    dir: bestDir,\r\n    dist: bestLockedDist\r\n  }\r\n}\r\n\r\nexport function flickMidContactModel(params: FullGestureParams): gestures.specs.ContactModel<KeyElement, any> {\r\n  return {\r\n    itemPriority: 1,\r\n    pathModel: {\r\n      evaluate: (path, priorStats, baseItem) => {\r\n        /*\r\n         * Check whether or not there is a valid flick for which the path crosses the flick-dist\r\n         * threshold while at a supported angle for flick-locking by the flick handler.\r\n         */\r\n        const { dir, dist } = determineLockFromStats(path.stats, baseItem);\r\n\r\n        // If the best supported flick direction meets the 'direction lock' threshold criteria,\r\n        // only then do we allow transitioning to the 'locked flick' state.\r\n        if(dist > params.flick.dirLockDist) {\r\n          const trueAngle = path.stats.angle;\r\n          const lockAngle = lockedAngleForDir(dir);\r\n          const dist1 = Math.abs(trueAngle - lockAngle);\r\n          const dist2 = Math.abs(2 * Math.PI + lockAngle - trueAngle); // because of angle wrap-around.\r\n\r\n          if(dist1 <= MAX_TOLERANCE_ANGLE_SKEW || dist2 <= MAX_TOLERANCE_ANGLE_SKEW) {\r\n            return 'resolve';\r\n          }\r\n        } else if(path.isComplete) {\r\n          return 'reject';\r\n        }\r\n\r\n        return undefined;\r\n      }\r\n    },\r\n    pathResolutionAction: 'resolve',\r\n    pathInheritance: 'full'\r\n  }\r\n}\r\n\r\n\r\nexport function flickEndContactModel(params: FullGestureParams): ContactModel {\r\n  return {\r\n    itemPriority: 1,\r\n    pathModel: {\r\n      evaluate: (path, priorStats, baseItem, baseStats) => {\r\n        if(path.isComplete) {\r\n          // The Flick handler class will sort out the mess once the path is complete.\r\n          // Note:  if we wanted auto-triggering once the threshold distance were met,\r\n          // we'd need to move its related logic into this method.\r\n          return 'resolve';\r\n        } else {\r\n          const { dir } = determineLockFromStats(baseStats, baseItem);\r\n          if(calcLockedDistance(path.stats, dir) < params.flick.dirLockDist) {\r\n            return 'reject';\r\n          }\r\n        }\r\n        return undefined;\r\n      }\r\n    },\r\n    pathResolutionAction: 'resolve',\r\n    pathInheritance: 'full'\r\n  }\r\n}\r\n\r\nexport function longpressContactModel(params: FullGestureParams, enabledFlicks: boolean, resetForRoaming: boolean): ContactModel {\r\n  const spec = params.longpress;\r\n\r\n  return {\r\n    itemPriority: 0,\r\n    pathResolutionAction: 'resolve',\r\n    timer: {\r\n      // Needs to be a getter so that it dynamically updates if the backing value is changed.\r\n      get duration() { return spec.waitLength },\r\n      expectedResult: true\r\n    },\r\n    validateItem: (_: KeyElement, baseKey: KeyElement) => !!baseKey?.key.spec.sk,\r\n    pathModel: {\r\n      evaluate: (path) => {\r\n        const stats = path.stats;\r\n\r\n        /* The flick-dist threshold may be higher than the noise tolerance,\r\n         * so we don't check the latter if we're in the right direction for\r\n         * the flick shortcut to trigger.\r\n         *\r\n         * The 'indexOf' allows 'n', 'nw', and 'ne' - approx 67.5 degrees on\r\n         * each side of due N in total.\r\n         */\r\n        if((enabledFlicks && spec.permitsFlick(stats.lastSample.item)) && (stats.cardinalDirection?.indexOf('n') != -1 ?? false)) {\r\n          const baseDistance = stats.netDistance;\r\n          const angle = stats.angle; // from <0, -1> (straight up) going clockwise.\r\n          const verticalDistance = baseDistance * Math.cos(angle);\r\n          if(verticalDistance > spec.flickDistFinal) {\r\n            return 'resolve';\r\n          }\r\n        } else if(resetForRoaming) {\r\n          // If roaming, reject if the path has moved significantly (so that we restart)\r\n          if(stats.rawDistance > spec.noiseTolerance || stats.lastSample.item != stats.initialSample.item) {\r\n            return 'reject';\r\n          }\r\n        } else {\r\n          // If not roaming, reject when the base key changes.\r\n          if(stats.lastSample.item != stats.initialSample.item) {\r\n            return 'reject';\r\n          }\r\n        }\r\n\r\n        if(path.isComplete) {\r\n          return 'reject';\r\n        }\r\n\r\n        return null;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function modipressContactStartModel(): ContactModel {\r\n  return {\r\n    itemPriority: -1,\r\n    pathResolutionAction: 'resolve',\r\n    pathModel: {\r\n      // Consideration of whether the underlying item supports the corresponding\r\n      // gesture will be handled elsewhere.\r\n      evaluate: (path) => 'resolve'\r\n    }\r\n  };\r\n}\r\n\r\nexport function modipressContactHoldModel(): ContactModel {\r\n  return {\r\n    itemPriority: -1,\r\n    itemChangeAction: 'resolve',\r\n    pathResolutionAction: 'resolve',\r\n    pathModel: {\r\n      evaluate: (path) => {\r\n        if(path.isComplete) {\r\n          return 'reject';\r\n        }\r\n        return undefined;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function modipressContactEndModel(): ContactModel {\r\n  return {\r\n    itemPriority: -1,\r\n    itemChangeAction: 'resolve',\r\n    pathResolutionAction: 'resolve',\r\n    pathModel: {\r\n      evaluate: (path) => {\r\n        if(path.isComplete) {\r\n          return 'resolve';\r\n        }\r\n        return undefined;\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport function simpleTapContactModel(params: FullGestureParams, isNotInitial?: boolean): ContactModel {\r\n  // Snapshot at model construction; do not update if changed.\r\n  const roamingEnabled = params?.roamingEnabled ?? true; // ?? true - used by the banner.\r\n\r\n  return {\r\n    itemPriority: 0,\r\n    itemChangeAction: roamingEnabled ? 'reject' : undefined,\r\n    pathResolutionAction: 'resolve',\r\n    // if roaming, a tap reset should set the base key.\r\n    // if not, block path resets.\r\n    pathInheritance: (!roamingEnabled && isNotInitial) ? 'full' : 'chop',\r\n    pathModel: {\r\n      evaluate: (path) => {\r\n        if(path.isComplete && !path.wasCancelled) {\r\n          return 'resolve';\r\n        }\r\n\r\n        return undefined;\r\n      }\r\n    }\r\n  };\r\n}\r\n\r\nexport function subkeySelectContactModel(): ContactModel {\r\n  return {\r\n    itemPriority: 0,\r\n    pathResolutionAction: 'resolve',\r\n    pathModel: {\r\n      evaluate: (path) => {\r\n        if(path.isComplete && !path.wasCancelled) {\r\n          return 'resolve';\r\n        }\r\n        return undefined;\r\n      }\r\n    }\r\n  }\r\n}\r\n// #endregion\r\n\r\n// #region Gesture-stage model definitions\r\n\r\n// Note:  as specified below, most of the raw specs actually need access to KeyElement typing.\r\n// That only becomes relevant with some of the modifier functions in the `gestureSetForLayout`\r\n// func at the top.\r\ntype GestureModel<Type> = specs.GestureModel<Type>;\r\n\r\nexport function specialKeyStartModel(): GestureModel<KeyElement> {\r\n  return {\r\n    id: 'special-key-start',\r\n    resolutionPriority: 0,\r\n    contacts : [\r\n      {\r\n        model: {\r\n          ...instantContactResolutionModel(),\r\n          // Filtering is done via `gestureKeyFilter` as defined within `gestureSetForLayout` above.\r\n          // If we've gotten to this point, we're already safe to assume the base key is valid.\r\n        },\r\n        endOnResolve: false  // keyboard-selection longpress - would be nice to not need to lift the finger\r\n                            // in app/browser form.\r\n      }\r\n    ],\r\n    resolutionAction: {\r\n      type: 'chain',\r\n      next: 'special-key-end',\r\n      item: 'current'\r\n    }\r\n  };\r\n}\r\n\r\nexport function specialKeyEndModel(params: FullGestureParams): GestureModel<any> {\r\n  return {\r\n    id: 'special-key-end',\r\n    resolutionPriority: 0,\r\n    contacts : [\r\n      {\r\n        model: {\r\n          ...simpleTapContactModel(params),\r\n          itemChangeAction: 'resolve'\r\n        },\r\n        endOnResolve: true,\r\n      }\r\n    ],\r\n    resolutionAction: {\r\n      type: 'complete',\r\n      item: 'none'\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * The base model for longpresses, with considerable configurability.\r\n *\r\n * @param params         The common gesture configuration object for the gesture set under construction.\r\n * @param allowShortcut  If `true` and certain conditions are also met, enables an 'up-flick shortcut' to\r\n *                       bypass the longpress timer.\r\n *\r\n *                       Conditions:\r\n *                       - the key has no northish flicks (nw, n, ne)\r\n *                       - the common gesture configuration permits the shortcut where supported\r\n * @param allowRoaming   Indicates whether \"roaming touch\" mode should be supported.\r\n */\r\nexport function longpressModel(params: FullGestureParams, allowShortcut: boolean, allowRoaming: boolean): GestureModel<any> {\r\n  const base: GestureModel<any> = {\r\n    id: 'longpress',\r\n    // Needs to beat flick-start priority.\r\n    resolutionPriority: 4,\r\n    contacts: [\r\n      {\r\n        model: {\r\n          ...longpressContactModel(params, allowShortcut, allowRoaming),\r\n          itemPriority: 1,\r\n          pathInheritance: 'chop'\r\n        },\r\n        endOnResolve: false\r\n      }, {\r\n        model: instantContactRejectionModel(),\r\n        resetOnInstantFulfill: true\r\n      }\r\n    ],\r\n    resolutionAction: {\r\n      type: 'chain',\r\n      next: 'subkey-select',\r\n      selectionMode: 'none',\r\n      item: 'none'\r\n    },\r\n  }\r\n\r\n  if(allowRoaming) {\r\n    return {\r\n      ...base,\r\n      rejectionActions: {\r\n        path: {\r\n          type: 'replace',\r\n          replace: 'longpress-roam'\r\n        },\r\n        // The timer can fail if the key doesn't support subkeys.\r\n        // If it legit timed out, the gesture can't be continued anyway.\r\n        timer: {\r\n          type: 'replace',\r\n          replace: 'longpress-roam-restore'\r\n        }\r\n      }\r\n    }\r\n  } else {\r\n    return base;\r\n  }\r\n}\r\n\r\n/**\r\n * For use for transitioning out of roaming-touch.\r\n */\r\nexport function longpressModelAfterRoaming(params: FullGestureParams): GestureModel<any> {\r\n  // The longpress-shortcut is always disabled for keys reached by roaming (param 2)\r\n  // Only used when roaming is permitted; continued roaming should be allowed. (param 3)\r\n  const base = longpressModel(params, false, true);\r\n\r\n  return {\r\n    ...base,\r\n    id: 'longpress-roam'\r\n  }\r\n}\r\n\r\n// For reactivating longpress processing after changing base key (during roaming),\r\n// should the timer have elapsed on a key not supporting longpresses.\r\nexport function longpressRoamRestoration(): GestureModel<any> {\r\n  return {\r\n    id: 'longpress-roam-restore',\r\n    contacts: [\r\n      {\r\n        model: {\r\n          pathModel: {\r\n            evaluate: (path) => {\r\n              // pretty much a placeholder.\r\n              return null;\r\n            }\r\n          },\r\n          // The actual trigger.\r\n          itemChangeAction: 'reject',\r\n          pathInheritance: 'full',\r\n          pathResolutionAction: 'reject',\r\n          itemPriority: 0\r\n        }\r\n      }\r\n    ],\r\n    resolutionPriority: -1,\r\n    // We rely on THIS path so it doesn't affect longpress logic, which currently expects the initial\r\n    // stage to be a successful longpress.\r\n    rejectionActions: {\r\n      item: {\r\n        type: 'replace',\r\n        replace: 'longpress-roam'\r\n      }\r\n    },\r\n    // is required by the type.\r\n    resolutionAction: {\r\n      type: 'chain',\r\n      next: 'longpress-roam'\r\n    }\r\n  }\r\n}\r\n\r\nexport function flickStartModel(params: FullGestureParams): GestureModel<any> {\r\n  return {\r\n    id: 'flick-start',\r\n    resolutionPriority: 3,\r\n    contacts: [\r\n      {\r\n        model: flickStartContactModel(params)\r\n      }\r\n    ],\r\n    resolutionAction: {\r\n      type: 'chain',\r\n      item: 'none',\r\n      next: 'flick-mid',\r\n    },\r\n  }\r\n}\r\n\r\nexport function flickRestartModel(params: FullGestureParams): GestureModel<KeyElement> {\r\n  const base = flickStartModel(params);\r\n  return {\r\n    ...base,\r\n    contacts: [\r\n      {\r\n        ...base.contacts[0],\r\n        model: {\r\n          ...base.contacts[0].model,\r\n          baseCoordReplacer: (stats, key) => {\r\n            const keyCentroid = getKeyCentroid(key);\r\n            const calcDist = buildDistFromKeyCentroidFunctor(key);\r\n\r\n            const coord = stats.initialSample;\r\n            const distFromCenter = calcDist(stats);\r\n\r\n            // If the current coord is far off key and would trigger a flick, just recenter\r\n            // and let the intermediate models 'fall through', displaying the new target flick\r\n            // if possible.\r\n            if(distFromCenter > params.flick.triggerDist) {\r\n              return keyCentroid;\r\n            }\r\n\r\n            const dirLockDist = params.flick.dirLockDist;\r\n\r\n            // If we landed within the distance that'd trigger a direction-lock,\r\n            // no need to fully recenter; the current coord is \"good enough\".\r\n            if(distFromCenter < dirLockDist) {\r\n              return coord;\r\n            }\r\n\r\n            const projectionScalar = dirLockDist / distFromCenter;\r\n\r\n            // If the user didn't land close to the key's center, their \"perceived\"\r\n            // center for the gesture is likely different than the 'true' center.\r\n            const dx = coord.clientX - keyCentroid.clientX;\r\n            const dy = coord.clientY - keyCentroid.clientY;\r\n\r\n            // Maps the current coord to a coord on the edge of a circle centered\r\n            // on the key centroid at a radius of `dirLockDist` away.\r\n            return {\r\n              clientX: keyCentroid.clientX + dx * projectionScalar,\r\n              clientY: keyCentroid.clientY + dy * projectionScalar\r\n            };\r\n          }\r\n        }\r\n      }\r\n    ],\r\n    id: 'flick-restart',\r\n    sustainWhenNested: true,\r\n    rejectionActions: {\r\n      // Only 'rejects' in this form if the path is completed before direction-locking state.\r\n      path: {\r\n        type: 'replace',\r\n        replace: 'flick-reset-end'\r\n      }\r\n    },\r\n  }\r\n}\r\n\r\nexport function flickMidModel(params: FullGestureParams): GestureModel<any> {\r\n  return {\r\n    id: 'flick-mid',\r\n    resolutionPriority: 0,\r\n    contacts: [\r\n      {\r\n        model: flickMidContactModel(params),\r\n        endOnReject: true,\r\n      }, {\r\n        model: instantContactRejectionModel(),\r\n        resetOnInstantFulfill: true,\r\n      }\r\n    ],\r\n    rejectionActions: {\r\n      // Only 'rejects' in this form if the path is completed before direction-locking state.\r\n      path: {\r\n        type: 'replace',\r\n        replace: 'flick-reset-end'\r\n      }\r\n    },\r\n    resolutionAction: {\r\n      type: 'chain',\r\n      item: 'none',\r\n      next: 'flick-end'\r\n    },\r\n    sustainWhenNested: true\r\n  }\r\n}\r\n\r\n// Clears existing flick-scrolling & primes the flick-reset recentering mechanism.\r\nexport function flickResetModel(params: FullGestureParams): GestureModel<any> {\r\n  return {\r\n    id: 'flick-reset',\r\n    resolutionPriority: 1,\r\n    contacts: [\r\n      {\r\n        model: {\r\n          ...instantContactResolutionModel(),\r\n          pathInheritance: 'partial', // keep base item, but reset the path-stats.\r\n        },\r\n      }\r\n    ],\r\n    resolutionAction: {\r\n      type: 'chain',\r\n      next: 'flick-reset-centering'\r\n    },\r\n    sustainWhenNested: true\r\n  };\r\n}\r\n\r\nexport function flickResetCenteringModel(params: FullGestureParams): GestureModel<KeyElement> {\r\n  return {\r\n    id: 'flick-reset-centering',\r\n    resolutionPriority: 1,\r\n    contacts: [\r\n      {\r\n        model: {\r\n          pathModel: {\r\n            evaluate(path, priorStats, baseItem) {\r\n              priorStats ||= path.stats;\r\n\r\n              const calcDist = buildDistFromKeyCentroidFunctor(baseItem);\r\n\r\n              const newDist = calcDist(path.stats);\r\n              const oldDist = calcDist(priorStats);\r\n\r\n              if(oldDist < newDist) {\r\n                return 'resolve';\r\n              }\r\n\r\n              return undefined;\r\n            },\r\n          },\r\n          itemPriority: 0,\r\n          pathResolutionAction: 'resolve',\r\n          pathInheritance: 'full', // no need to re-reset.\r\n        },\r\n      }\r\n    ],\r\n    resolutionAction: {\r\n      type: 'chain',\r\n      next: 'flick-restart'\r\n    },\r\n    sustainWhenNested: true\r\n  };\r\n}\r\n\r\nexport function flickResetEndModel(): GestureModel<any> {\r\n  return {\r\n    id: 'flick-reset-end',\r\n    resolutionPriority: 1,\r\n    contacts: [],\r\n    sustainTimer: {\r\n      duration: 0,\r\n      expectedResult: true\r\n    },\r\n    resolutionAction: {\r\n      type: 'complete',\r\n      item: 'base'\r\n    },\r\n    sustainWhenNested: true\r\n  };\r\n};\r\n\r\nexport function flickEndModel(params: FullGestureParams): GestureModel<any> {\r\n  return {\r\n    id: 'flick-end',\r\n    resolutionPriority: 0,\r\n    contacts: [\r\n      {\r\n        model: flickEndContactModel(params)\r\n      },\r\n      {\r\n        model: instantContactResolutionModel(),\r\n        resetOnInstantFulfill: true\r\n      }\r\n    ],\r\n    rejectionActions: {\r\n      path: {\r\n        type: 'replace',\r\n        replace: 'flick-reset'\r\n      }\r\n    },\r\n    resolutionAction: {\r\n      type: 'complete',\r\n      item: 'current'\r\n    },\r\n    sustainWhenNested: true\r\n  }\r\n}\r\n\r\nexport function multitapStartModel(params: FullGestureParams): GestureModel<any> {\r\n  return {\r\n    id: 'multitap-start',\r\n    resolutionPriority: 2,\r\n    contacts: [\r\n      {\r\n        model: {\r\n          ...instantContactResolutionModel(),\r\n          itemPriority: 1,\r\n          pathInheritance: 'reject',\r\n          allowsInitialState(incomingSample, comparisonSample, baseItem) {\r\n            return incomingSample.item == baseItem;\r\n          },\r\n        },\r\n      }\r\n    ],\r\n    sustainTimer: {\r\n      duration: params.multitap.waitLength,\r\n      expectedResult: false,\r\n      baseItem: 'base'\r\n    },\r\n    resolutionAction: {\r\n      type: 'chain',\r\n      next: 'multitap-end',\r\n      item: 'current'\r\n    }\r\n  }\r\n}\r\n\r\nexport function multitapEndModel(params: FullGestureParams): GestureModel<any> {\r\n  return {\r\n    id: 'multitap-end',\r\n    resolutionPriority: 2,\r\n    contacts: [\r\n      {\r\n        model: {\r\n          ...simpleTapContactModel(params),\r\n          itemPriority: 1,\r\n          timer: {\r\n            duration: params.multitap.holdLength,\r\n            expectedResult: false\r\n          }\r\n        },\r\n        endOnResolve: true\r\n      }, {\r\n        model: instantContactResolutionModel(),\r\n        resetOnInstantFulfill: true\r\n      }\r\n    ],\r\n    rejectionActions: {\r\n      timer: {\r\n        type: 'replace',\r\n        replace: 'simple-tap'\r\n      }\r\n    },\r\n    resolutionAction: {\r\n      type: 'chain',\r\n      next: 'multitap-start',\r\n      item: 'none'\r\n    }\r\n  }\r\n}\r\n\r\nexport function initialTapModel(params: FullGestureParams): GestureModel<any> {\r\n  return {\r\n    id: 'initial-tap',\r\n    resolutionPriority: 1,\r\n    contacts: [\r\n      {\r\n        model: {\r\n          ...simpleTapContactModel(params),\r\n          pathInheritance: 'chop',\r\n          itemPriority: 1,\r\n          timer: {\r\n            duration: params.multitap.holdLength,\r\n            expectedResult: false\r\n          },\r\n        },\r\n        endOnResolve: true\r\n      }, {\r\n        model: instantContactResolutionModel(),\r\n        resetOnInstantFulfill: true\r\n      }\r\n    ],\r\n    sustainWhenNested: true,\r\n    rejectionActions: {\r\n      timer: {\r\n        type: 'replace',\r\n        replace: 'simple-tap'\r\n      }\r\n    },\r\n    resolutionAction: {\r\n      type: 'chain',\r\n      next: 'multitap-start',\r\n      item: 'base'\r\n    }\r\n  }\r\n}\r\n\r\nexport function simpleTapModel(params: FullGestureParams): GestureModel<any> {\r\n  return {\r\n    id: 'simple-tap',\r\n    resolutionPriority: 1,\r\n    contacts: [\r\n      {\r\n        model: {\r\n          ...simpleTapContactModel(params, true),\r\n          itemPriority: 1\r\n        },\r\n        endOnResolve: true\r\n      }, {\r\n        model: instantContactResolutionModel(),\r\n        resetOnInstantFulfill: true\r\n      }\r\n    ],\r\n    sustainWhenNested: true,\r\n    resolutionAction: {\r\n      type: 'complete',\r\n      item: 'base'\r\n    }\r\n  };\r\n}\r\n\r\nexport function initialTapModelWithReset(params: FullGestureParams): GestureModel<any> {\r\n  const base = initialTapModel(params);\r\n  return {\r\n    ...base,\r\n    rejectionActions: {\r\n      ...base.rejectionActions,\r\n      item: {\r\n        type: 'replace',\r\n        replace: 'initial-tap'\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function simpleTapModelWithReset(params: FullGestureParams): GestureModel<any> {\r\n  const simpleModel = simpleTapModel(params);\r\n  return {\r\n    ...simpleModel,\r\n    rejectionActions: {\r\n      ...simpleModel.rejectionActions,\r\n      item: {\r\n        type: 'replace',\r\n        replace: 'simple-tap'\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function subkeySelectModel(): GestureModel<any> {\r\n  return {\r\n    id: 'subkey-select',\r\n    resolutionPriority: 0,\r\n    contacts: [\r\n      {\r\n        model: {\r\n          ...subkeySelectContactModel(),\r\n          pathInheritance: 'full',\r\n          itemPriority: 1\r\n        },\r\n        endOnResolve: true,\r\n        endOnReject: true\r\n      }\r\n    ],\r\n    resolutionAction: {\r\n      type: 'complete',\r\n      item: 'current'\r\n    },\r\n    sustainWhenNested: true\r\n  };\r\n}\r\n\r\nexport function modipressStartModel(): GestureModel<KeyElement> {\r\n  return {\r\n    id: 'modipress-start',\r\n    resolutionPriority: 5,\r\n    contacts: [\r\n      {\r\n        model: {\r\n          ...modipressContactStartModel(),\r\n          allowsInitialState(incomingSample, comparisonSample, baseItem) {\r\n            return keySupportsModipress(baseItem);\r\n          },\r\n          itemChangeAction: 'reject',\r\n          itemPriority: 1\r\n        }\r\n      }\r\n    ],\r\n    resolutionAction: {\r\n      type: 'chain',\r\n      next: 'modipress-hold',\r\n      selectionMode: 'modipress',\r\n      item: 'current' // return the modifier key ID so that we know to shift to it!\r\n    }\r\n  }\r\n}\r\n\r\nexport function modipressHoldModel(params: FullGestureParams): GestureModel<any> {\r\n  return {\r\n    id: 'modipress-hold',\r\n    resolutionPriority: 5,\r\n    contacts: [\r\n      {\r\n        model: {\r\n          ...modipressContactHoldModel(),\r\n          itemChangeAction: 'reject',\r\n          pathInheritance: 'full',\r\n          timer: {\r\n            duration: params.multitap.holdLength,\r\n            expectedResult: true,\r\n            // If entered due to 'reject' on 'modipress-multitap-end',\r\n            // we want to immediately resolve.\r\n            inheritElapsed: true\r\n          }\r\n        }\r\n      }, {\r\n        // If a new touchpoint comes in while in this state, lock in the modipress\r\n        // and prevent multitapping on it, as a different key has been tapped before\r\n        // the multitap base key since the latter's release.\r\n        model: {\r\n          ...instantContactResolutionModel(),\r\n        },\r\n        // The incoming tap belongs to a different gesture; we just care to know that it\r\n        // happened.\r\n        resetOnInstantFulfill: true\r\n      }\r\n    ],\r\n    // To be clear:  any time modipress-hold is triggered and the timer duration elapses,\r\n    // we disable any potential to multitap on the modipress key.\r\n    resolutionAction: {\r\n      type: 'chain',\r\n      next: 'modipress-end',\r\n      selectionMode: 'modipress',\r\n      // Key was already emitted from the 'modipress-start' stage.\r\n      item: 'none'\r\n    },\r\n    rejectionActions: {\r\n      path: {\r\n        type: 'replace',\r\n        // Because SHIFT -> CAPS multitap is a thing.  Shift gets handled as a modipress first.\r\n        // Modipresses resolve before multitaps... unless there's a model designed to handle & disambiguate both.\r\n        replace: 'modipress-end-multitap-transition'\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function modipressMultitapTransitionModel(): GestureModel<any> {\r\n  return {\r\n    id: 'modipress-end-multitap-transition',\r\n    resolutionPriority: 5,\r\n    contacts: [\r\n      // None.  This exists as an intermediate state to transition from\r\n      // a basic modipress into a combined multitap + modipress.\r\n    ],\r\n    sustainTimer: {\r\n      duration: 0,\r\n      expectedResult: true\r\n    },\r\n    resolutionAction: {\r\n      type: 'chain',\r\n      next: 'modipress-multitap-start',\r\n      item: 'none'\r\n    }\r\n  }\r\n}\r\n\r\nexport function modipressEndModel(): GestureModel<any> {\r\n  return {\r\n    id: 'modipress-end',\r\n    resolutionPriority: 5,\r\n    contacts: [\r\n      {\r\n        model: {\r\n          ...modipressContactEndModel(),\r\n          itemChangeAction: 'reject',\r\n          pathInheritance: 'full'\r\n        }\r\n      }\r\n    ],\r\n    resolutionAction: {\r\n      type: 'complete',\r\n      // Key was already emitted from the 'modipress-start' stage.\r\n      item: 'none',\r\n      awaitNested: true\r\n    }\r\n  }\r\n}\r\n\r\nexport function modipressMultitapStartModel(params: FullGestureParams): GestureModel<KeyElement> {\r\n  return {\r\n    id: 'modipress-multitap-start',\r\n    resolutionPriority: 6,\r\n    contacts: [\r\n      {\r\n        model: {\r\n          ...modipressContactStartModel(),\r\n          pathInheritance: 'reject',\r\n          allowsInitialState(incomingSample, comparisonSample, baseItem) {\r\n            if(incomingSample.item != baseItem) {\r\n              return false;\r\n            }\r\n\r\n            return keySupportsModipress(baseItem);\r\n          },\r\n          itemChangeAction: 'reject',\r\n          itemPriority: 1\r\n        }\r\n      }\r\n    ],\r\n    sustainTimer: {\r\n      duration: params.multitap.waitLength,\r\n      expectedResult: false,\r\n      baseItem: 'base'\r\n    },\r\n    resolutionAction: {\r\n      type: 'chain',\r\n      next: 'modipress-multitap-end',\r\n      selectionMode: 'modipress',\r\n      item: 'current' // return the modifier key ID so that we know to shift to it!\r\n    }\r\n  }\r\n}\r\n\r\nexport function modipressMultitapEndModel(params: FullGestureParams): GestureModel<any> {\r\n  return {\r\n    id: 'modipress-multitap-end',\r\n    resolutionPriority: 5,\r\n    contacts: [\r\n      {\r\n        model: {\r\n          ...modipressContactEndModel(),\r\n          itemChangeAction: 'reject',\r\n          pathInheritance: 'full',\r\n          timer: {\r\n            duration: params.multitap.holdLength,\r\n            expectedResult: false\r\n          }\r\n        }\r\n      }, {\r\n        model: {\r\n          // If a new touchpoint comes in while in this state, lock in the modipress\r\n          // and prevent multitapping on it, as a different key has been tapped before\r\n          // the multitap base key since the latter's release.\r\n          ...instantContactRejectionModel()\r\n        },\r\n        // The incoming tap belongs to a different gesture; we just care to know that it\r\n        // happened.\r\n        resetOnInstantFulfill: true\r\n      }\r\n    ],\r\n    resolutionAction: {\r\n      type: 'chain',\r\n      // Because SHIFT -> CAPS multitap is a thing.  Shift gets handled as a modipress first.\r\n      next: 'modipress-multitap-start',\r\n      // Key was already emitted from the 'modipress-start' stage.\r\n      item: 'none'\r\n    },\r\n    rejectionActions: {\r\n      timer: {\r\n        type: 'replace',\r\n        replace: 'modipress-multitap-lock-transition'\r\n      },\r\n      path: {\r\n        type: 'replace',\r\n        replace: 'modipress-multitap-lock-transition'\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function modipressMultitapLockModel(): GestureModel<any> {\r\n  return {\r\n    id: 'modipress-multitap-lock-transition',\r\n    resolutionPriority: 5,\r\n    contacts: [\r\n      // This exists as an intermediate state to transition from\r\n      // a modipress-multitap into a plain modipress without further\r\n      // multitap rota behavior.\r\n      {\r\n        model: {\r\n          ...instantContactResolutionModel(),\r\n          pathResolutionAction: 'resolve' // doesn't end the path; just lets it continue.\r\n        },\r\n      }\r\n    ],\r\n    resolutionAction: {\r\n      type: 'chain',\r\n      next: 'modipress-end',\r\n      selectionMode: 'modipress',\r\n      item: 'none'\r\n    }\r\n  };\r\n}\r\n// #endregion",
    "import { deepCopy } from '@keymanapp/web-utils';\r\n\r\nimport {\r\n  gestures,\r\n  GestureModelDefs\r\n} from '@keymanapp/gesture-recognizer';\r\n\r\nimport { BannerSuggestion } from './suggestionBanner.js';\r\nimport { simpleTapModelWithReset } from \"../input/gestures/specsForLayout.js\";\r\n\r\nexport const BannerSimpleTap: gestures.specs.GestureModel<BannerSuggestion> = {\r\n  ...deepCopy(simpleTapModelWithReset(null)),\r\n  resolutionAction: {\r\n    type: 'complete',\r\n    item: 'current'\r\n  }\r\n};\r\n\r\nexport const BANNER_GESTURE_SET: GestureModelDefs<BannerSuggestion> = {\r\n  gestures: [\r\n    BannerSimpleTap\r\n  ],\r\n  sets: {\r\n    default: [BannerSimpleTap.id]\r\n  }\r\n}",
    "import { DeviceSpec } from \"@keymanapp/web-utils\";\r\nimport { ParsedLengthStyle } from \"./lengthStyle.js\";\r\n\r\nexport function getFontSizeStyle(e: HTMLElement|string): {val: number, absolute: boolean} {\r\n  var fs: string;\r\n\r\n  if(typeof e == 'string') {\r\n    fs = e;\r\n  } else {\r\n    fs = e.style.fontSize;\r\n    if(!fs) {\r\n      fs = getComputedStyle(e).fontSize;\r\n    }\r\n  }\r\n\r\n  return new ParsedLengthStyle(fs);\r\n}\r\n\r\nexport function defaultFontSize(device: DeviceSpec, computedHeight: number, isEmbedded: boolean): ParsedLengthStyle {\r\n  if(device.touchable) {\r\n    const fontScale = device.formFactor == 'phone'\r\n      ? 1.6 * (isEmbedded ? 0.65 : 0.6) * 1.2  // Combines original scaling factor with one previously applied to the layer group.\r\n      : 2; // iPad or Android tablet\r\n    return ParsedLengthStyle.special(fontScale, 'em');\r\n  } else {\r\n    return computedHeight ? ParsedLengthStyle.inPixels(computedHeight / 8) : undefined;\r\n  }\r\n}",
    "import { getFontSizeStyle } from \"../fontSizeUtils.js\";\r\n\r\nlet metricsCanvas: HTMLCanvasElement;\r\n\r\n/**\r\n * Uses canvas.measureText to compute and return the width of the given text of given font in pixels.\r\n *\r\n * @param {String} text The text to be rendered.\r\n * @param emScale The absolute `px` size expected to match `1em`.\r\n * @param {String} style The CSSStyleDeclaration for an element to measure against, without modification.\r\n *\r\n * @see https://stackoverflow.com/questions/118241/calculate-text-width-with-javascript/21015393#21015393\r\n * This version has been substantially modified to work for this particular application.\r\n */\r\nexport function getTextMetrics(text: string, emScale: number, style: {fontFamily?: string, fontSize: string}): TextMetrics {\r\n  // Since we may mutate the incoming style, let's make sure to copy it first.\r\n  // Only the relevant properties, though.\r\n  style = {\r\n    fontFamily: style.fontFamily,\r\n    fontSize: style.fontSize\r\n  };\r\n\r\n  // A final fallback - having the right font selected makes a world of difference.\r\n  if(!style.fontFamily) {\r\n    style.fontFamily = getComputedStyle(document.body).fontFamily;\r\n  }\r\n\r\n  if(!style.fontSize || style.fontSize == \"\") {\r\n    style.fontSize = '1em';\r\n  }\r\n\r\n  let fontFamily = style.fontFamily;\r\n  let fontSpec = getFontSizeStyle(style.fontSize);\r\n\r\n  var fontSize: string;\r\n  if(fontSpec.absolute) {\r\n    // We've already got an exact size - use it!\r\n    fontSize = fontSpec.val + 'px';\r\n  } else {\r\n    fontSize = fontSpec.val * emScale + 'px';\r\n  }\r\n\r\n  // re-use canvas object for better performance\r\n  metricsCanvas = metricsCanvas ?? document.createElement(\"canvas\");\r\n\r\n  var context = metricsCanvas.getContext(\"2d\");\r\n  context.font = fontSize + \" \" + fontFamily;\r\n  var metrics = context.measureText(text);\r\n\r\n  return metrics;\r\n}",
    "import { InputSample } from \"@keymanapp/gesture-recognizer\";\r\n\r\n/**\r\n * The amount of coordinate 'noise' allowed during a scroll-enabled touch\r\n * before interpreting the currently-ongoing touch command as having scrolled.\r\n */\r\nconst HAS_SCROLLED_FUDGE_FACTOR = 10;\r\n\r\n/**\r\n * This class was added to facilitate scroll handling for overflow-x elements, though it could\r\n * be extended in the future to accept overflow-y if needed.\r\n *\r\n * This is necessary because of the OSK's need to use `.preventDefault()` for stability; that\r\n * same method blocks native handling of overflow scrolling for touch browsers.\r\n */\r\nexport class BannerScrollState {\r\n  totalLength = 0;\r\n\r\n  baseCoord: InputSample<any>;\r\n  curCoord: InputSample<any>;\r\n  baseScrollLeft: number;\r\n\r\n  constructor(coord: InputSample<any>, baseScrollLeft: number) {\r\n    this.baseCoord = coord;\r\n    this.curCoord = coord;\r\n    this.baseScrollLeft = baseScrollLeft;\r\n\r\n    this.totalLength = 0;\r\n  }\r\n\r\n  updateTo(coord: InputSample<any>): number {\r\n    let prevCoord = this.curCoord;\r\n    this.curCoord = coord;\r\n\r\n    let delta = this.baseCoord.targetX - this.curCoord.targetX + this.baseScrollLeft;\r\n    // Track the total amount of scrolling used, even if just a pixel-wide back and forth wiggle.\r\n    this.totalLength += Math.abs(this.curCoord.targetX - prevCoord.targetX);\r\n\r\n    return delta;\r\n  }\r\n\r\n  public get hasScrolled(): boolean {\r\n    // Allow an accidental fudge-factor for overflow element noise during a touch, but not much.\r\n    return this.totalLength > HAS_SCROLLED_FUDGE_FACTOR;\r\n  }\r\n}",
    "\r\nimport { type PredictionContext } from 'keyman/engine/interfaces';\r\nimport { createUnselectableElement } from 'keyman/engine/dom-utils';\r\n\r\nimport {\r\n  GestureRecognizer,\r\n  GestureRecognizerConfiguration,\r\n  GestureSource,\r\n  InputSample,\r\n  PaddedZoneSource,\r\n  RecognitionZoneSource\r\n} from '@keymanapp/gesture-recognizer';\r\n\r\nimport { BANNER_GESTURE_SET } from './bannerGestureSet.js';\r\n\r\nimport { DeviceSpec, Keyboard, KeyboardProperties, timedPromise } from 'keyman/engine/keyboard';\r\nimport { Banner } from './banner.js';\r\nimport { ParsedLengthStyle } from '../lengthStyle.js';\r\nimport { getFontSizeStyle } from '../fontSizeUtils.js';\r\nimport { getTextMetrics } from '../keyboard-layout/getTextMetrics.js';\r\nimport { BannerScrollState } from './bannerScrollState.js';\r\nimport { Suggestion } from '@keymanapp/common-types';\r\n\r\nconst TOUCHED_CLASS: string = 'kmw-suggest-touched';\r\nconst BANNER_SCROLLER_CLASS = 'kmw-suggest-banner-scroller';\r\n\r\nconst BANNER_VERT_ROAMING_HEIGHT_RATIO = 0.666;\r\n\r\n/**\r\n * The style to temporarily apply when updating suggestion text in order to prevent\r\n * fade transitions at that time.\r\n */\r\nconst FADE_SWALLOW_STYLE = 'swallow-fade-transition';\r\n\r\n/**\r\n * Defines various parameters used by `BannerSuggestion` instances for layout and formatting.\r\n * This object is designed first and foremost for use with `BannerSuggestion.update()`.\r\n */\r\ninterface BannerSuggestionFormatSpec {\r\n  /**\r\n   * Sets a minimum width to use for the `BannerSuggestion`'s element; this overrides any\r\n   * and all settings that would otherwise result in a narrower final width.\r\n   */\r\n  minWidth?: number;\r\n\r\n  /**\r\n   * Sets the width of padding around the text of each suggestion.  This should generally match\r\n   * the 'width' of class = `.kmw-suggest-option::before` and class = `.kmw-suggest-option::after`\r\n   * elements as defined in kmwosk.css.\r\n   */\r\n  paddingWidth: number,\r\n\r\n  /**\r\n   * The default font size to use for calculations based on relative font-size specs\r\n   */\r\n  emSize: number,\r\n\r\n  /**\r\n   * The font style (font-size, font-family) to use for suggestion-banner display text.\r\n   */\r\n  styleForFont: {\r\n    fontSize:   typeof CSSStyleDeclaration.prototype.fontSize,\r\n    fontFamily: typeof CSSStyleDeclaration.prototype.fontFamily\r\n  },\r\n\r\n  /**\r\n   * Sets a target width to use when 'collapsing' suggestions.  Only affects those long\r\n   * enough to need said 'collapsing'.\r\n   */\r\n  collapsedWidth?: number\r\n}\r\n\r\nexport class BannerSuggestion {\r\n  div: HTMLDivElement;\r\n  container: HTMLDivElement;\r\n  private display: HTMLSpanElement;\r\n\r\n  private _collapsedWidth: number;\r\n  private _textWidth: number;\r\n  private _minWidth: number;\r\n  private _paddingWidth: number;\r\n\r\n  public readonly rtl: boolean;\r\n\r\n  private _suggestion: Suggestion;\r\n\r\n  private index: number;\r\n\r\n  static readonly BASE_ID = 'kmw-suggestion-';\r\n\r\n  constructor(index: number, isRTL: boolean) {\r\n    this.index = index;\r\n    this.rtl = isRTL ?? false;\r\n\r\n    this.constructRoot();\r\n\r\n    // Provides an empty, base SPAN for text display.  We'll swap these out regularly;\r\n    // `Suggestion`s will have varying length and may need different styling.\r\n    let display = this.display = createUnselectableElement('span');\r\n    display.className = 'kmw-suggestion-text';\r\n    this.container.appendChild(display);\r\n  }\r\n\r\n  get computedStyle() {\r\n    return getComputedStyle(this.display);\r\n  }\r\n\r\n  private constructRoot() {\r\n    // Add OSK suggestion labels\r\n    let div = this.div = createUnselectableElement('div');\r\n    div.className = \"kmw-suggest-option\";\r\n    div.id = BannerSuggestion.BASE_ID + this.index;\r\n\r\n    // @ts-ignore // Tags the element with its backing object.\r\n    this.div['suggestion'] = this;\r\n\r\n    let container = this.container = document.createElement('div');\r\n    container.className = \"kmw-suggestion-container\";\r\n\r\n    // Ensures that a reasonable default width, based on % is set. (Since it's not yet in the DOM, we may not yet have actual width info.)\r\n    let usableWidth = 100 - SuggestionBanner.MARGIN * (SuggestionBanner.LONG_SUGGESTION_DISPLAY_LIMIT - 1);\r\n\r\n    let widthpc = usableWidth / (SuggestionBanner.LONG_SUGGESTION_DISPLAY_LIMIT);\r\n    container.style.minWidth = widthpc + '%';\r\n\r\n    div.appendChild(container);\r\n  }\r\n\r\n  public matchKeyboardProperties(keyboardProperties: KeyboardProperties) {\r\n    const div = this.div;\r\n\r\n    if(keyboardProperties) {\r\n      if (keyboardProperties['KLC']) {\r\n        div.lang = keyboardProperties['KLC'];\r\n      }\r\n\r\n      // Establish base font settings\r\n      let font = keyboardProperties['KFont'];\r\n      if(font && font.family && font.family != '') {\r\n        div.style.fontFamily = font.family;\r\n      }\r\n    }\r\n  }\r\n\r\n  get suggestion(): Suggestion {\r\n    return this._suggestion;\r\n  }\r\n\r\n  /**\r\n   * Function update\r\n   * @param {Suggestion} suggestion   Suggestion from the lexical model\r\n   * @param {BannerSuggestionFormatSpec} format Formatting metadata to use for the Suggestion\r\n   *\r\n   * Update the ID and text of the BannerSuggestionSpec\r\n   */\r\n  public update(suggestion: Suggestion, format: BannerSuggestionFormatSpec) {\r\n    this._suggestion = suggestion;\r\n\r\n    let display = this.generateSuggestionText(this.rtl);\r\n    this.container.replaceChild(display, this.display);\r\n    this.display = display;\r\n\r\n    // Set internal properties for use in format calculations.\r\n    if(format.minWidth !== undefined) {\r\n      this._minWidth = format.minWidth;\r\n    }\r\n\r\n    this._paddingWidth = format.paddingWidth;\r\n    this._collapsedWidth = format.collapsedWidth;\r\n\r\n    if(suggestion && suggestion.displayAs) {\r\n      const rawMetrics = getTextMetrics(suggestion.displayAs, format.emSize, format.styleForFont);\r\n      this._textWidth = rawMetrics.width;\r\n    } else {\r\n      this._textWidth = 0;\r\n    }\r\n\r\n    this.currentWidth = this.collapsedWidth;\r\n    this.highlight(suggestion?.autoAccept);\r\n    this.updateLayout();\r\n  }\r\n\r\n  public updateLayout() {\r\n    if(!this.suggestion && this.index != 0) {\r\n      this.div.style.width='0px';\r\n      return;\r\n    } else {\r\n      this.div.style.width='';\r\n    }\r\n\r\n    const collapserStyle = this.container.style;\r\n    collapserStyle.minWidth = this.collapsedWidth + 'px';\r\n\r\n    if(this.rtl) {\r\n      collapserStyle.marginRight = (this.collapsedWidth - this.expandedWidth) + 'px';\r\n    } else {\r\n      collapserStyle.marginLeft  = (this.collapsedWidth - this.expandedWidth) + 'px';\r\n    }\r\n\r\n    this.updateFade();\r\n  }\r\n\r\n  public updateFade() {\r\n    // Note:  selected suggestion fade transitions are handled purely by CSS.\r\n    // We want to prevent them when updating a suggestion, though.\r\n    this.div.classList.add(FADE_SWALLOW_STYLE);\r\n    // Be sure that our fade-swallow mechanism is able to trigger once;\r\n    // we'll remove it after the current animation frame.\r\n    window.requestAnimationFrame(() => {\r\n      this.div.classList.remove(FADE_SWALLOW_STYLE);\r\n    })\r\n\r\n    // Never apply fading to the side that doesn't overflow.\r\n    this.div.classList.add(`kmw-hide-fade-${this.rtl ? 'left' : 'right'}`);\r\n\r\n    // Matches the side that overflows, depending on if LTR or RTL.\r\n    const fadeClass = `kmw-hide-fade-${this.rtl ? 'right' : 'left'}`;\r\n\r\n    // Is the suggestion already its ideal width?.\r\n    if(!(this.expandedWidth - this.collapsedWidth)) {\r\n      // Yes?  Don't do any fading.\r\n      this.div.classList.add(fadeClass);\r\n    } else {\r\n      this.div.classList.remove(fadeClass);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Denotes the threshold at which the banner suggestion will no longer gain width\r\n   * in its default form, resulting in two separate states:  \"collapsed\" and \"expanded\".\r\n   */\r\n  public get targetCollapsedWidth(): number {\r\n    return this._collapsedWidth;\r\n  }\r\n\r\n  /**\r\n   * The raw width needed to display the suggestion's display text without triggering overflow.\r\n   */\r\n  public get textWidth(): number {\r\n    return this._textWidth;\r\n  }\r\n\r\n  /**\r\n   * Width of the padding to apply equally on both sides of the suggestion's display text.\r\n   * Is the sum of both, rather than the value applied to each side.\r\n   */\r\n  public get paddingWidth(): number {\r\n    return this._paddingWidth;\r\n  }\r\n\r\n  /**\r\n   * The absolute minimum width to allow for the represented suggestion's banner element.\r\n   */\r\n  public get minWidth(): number {\r\n    return this._minWidth;\r\n  }\r\n\r\n  /**\r\n   * The absolute minimum width to allow for the represented suggestion's banner element.\r\n   */\r\n  public set minWidth(val: number) {\r\n    this._minWidth = val;\r\n  }\r\n\r\n  /**\r\n   * The total width taken by the suggestion's banner element when fully expanded.\r\n   * This may equal the `collapsed` width for sufficiently short suggestions.\r\n   */\r\n  public get expandedWidth(): number {\r\n    // minWidth must be defined AND greater for the conditional to return this.minWidth.\r\n    return this.minWidth > this.spanWidth ? this.minWidth : this.spanWidth;\r\n  }\r\n\r\n  /**\r\n   * The total width used by the internal contents of the suggestion's banner element when not obscured.\r\n   */\r\n  public get spanWidth(): number {\r\n    let spanWidth = this.textWidth ?? 0;\r\n    if(spanWidth) {\r\n      spanWidth += this.paddingWidth ?? 0;\r\n    }\r\n\r\n    return spanWidth;\r\n  }\r\n\r\n  /**\r\n   * The actual width to be used for the `BannerSuggestion`'s display element when in the 'collapsed'\r\n   * state and not transitioning.\r\n   */\r\n  public get collapsedWidth(): number {\r\n    // Allow shrinking a suggestion's width if it has excess whitespace.\r\n    let utilizedWidth = this.spanWidth < this.targetCollapsedWidth ? this.spanWidth : this.targetCollapsedWidth;\r\n    // If a minimum width has been specified, enforce that minimum.\r\n    let maxWidth = utilizedWidth < this.expandedWidth ? utilizedWidth : this.expandedWidth;\r\n\r\n    // Will return maxWidth if this.minWidth is undefined.\r\n    return (this.minWidth > maxWidth ? this.minWidth : maxWidth);\r\n  }\r\n\r\n  /**\r\n   * The actual width currently utilized by the `BannerSuggestion`'s display element, regardless of\r\n   * current state.\r\n   */\r\n  public get currentWidth(): number {\r\n    return this.div.offsetWidth;\r\n  }\r\n\r\n  /**\r\n   * The actual width currently utilized by the `BannerSuggestion`'s display element, regardless of\r\n   * current state.\r\n   */\r\n  public set currentWidth(val: number) {\r\n    // TODO:  probably should set up errors or something here...\r\n    if(val < this.collapsedWidth) {\r\n      val = this.collapsedWidth;\r\n    } else if(val > this.expandedWidth) {\r\n      val = this.expandedWidth;\r\n    }\r\n\r\n    if(this.rtl) {\r\n      this.container.style.marginRight = `${val - this.expandedWidth}px`;\r\n    } else {\r\n      this.container.style.marginLeft = `${val - this.expandedWidth}px`;\r\n    }\r\n  }\r\n\r\n  public highlight(on: boolean) {\r\n    const elem = this.div;\r\n\r\n    if(on) {\r\n      elem.classList.add(TOUCHED_CLASS);\r\n    } else {\r\n      elem.classList.remove(TOUCHED_CLASS);\r\n    }\r\n  }\r\n\r\n  public isEmpty(): boolean {\r\n    return !this._suggestion;\r\n  }\r\n\r\n  /**\r\n   * Function generateSuggestionText\r\n   * @return {HTMLSpanElement}  Span element of the suggestion\r\n   * Description   Produces a HTMLSpanElement with the key's actual text.\r\n   */\r\n  //\r\n  public generateSuggestionText(rtl: boolean): HTMLSpanElement {\r\n    let suggestion = this._suggestion;\r\n    var suggestionText: string;\r\n\r\n    var s=createUnselectableElement('span');\r\n    s.className = 'kmw-suggestion-text';\r\n\r\n    if(suggestion == null) {\r\n      return s;\r\n    }\r\n\r\n    if(suggestion.displayAs == null || suggestion.displayAs == '') {\r\n      suggestionText = '\\xa0';  // default:  nbsp.\r\n    } else {\r\n      // Default the LTR ordering to match that of the active keyboard.\r\n      let orderCode = rtl ? 0x202e /* RTL */ : 0x202d /* LTR */;\r\n      suggestionText = String.fromCharCode(orderCode) + suggestion.displayAs;\r\n    }\r\n\r\n    // TODO:  Dynamic suggestion text resizing.  (Refer to OSKKey.getTextWidth in visualKeyboard.ts.)\r\n\r\n    // Finalize the suggestion text\r\n    s.innerHTML = suggestionText;\r\n    return s;\r\n  }\r\n}\r\n\r\n/**\r\n * Function     SuggestionBanner\r\n * Scope        Public\r\n * @param {number} height - If provided, the height of the banner in pixels\r\n * Description  Display lexical model suggestions in the banner\r\n */\r\nexport class SuggestionBanner extends Banner {\r\n  public static readonly SUGGESTION_LIMIT: number = 8;\r\n  public static readonly LONG_SUGGESTION_DISPLAY_LIMIT: number = 3;\r\n  public static readonly MARGIN = 1;\r\n\r\n  public readonly type = \"suggestion\";\r\n\r\n  private currentSuggestions: Suggestion[] = [];\r\n\r\n  private options : BannerSuggestion[] = [];\r\n  private separators: HTMLElement[] = [];\r\n\r\n  private isRTL: boolean = false;\r\n\r\n  /**\r\n   * The banner 'container', which is also the root element for banner scrolling.\r\n   */\r\n  private readonly container: HTMLElement;\r\n  private highlightAnimation: SuggestionExpandContractAnimation;\r\n\r\n  private gestureEngine: GestureRecognizer<BannerSuggestion>;\r\n  private scrollState: BannerScrollState;\r\n  private selectionBounds: RecognitionZoneSource;\r\n\r\n  private _predictionContext: PredictionContext;\r\n\r\n  constructor(hostDevice: DeviceSpec, height?: number) {\r\n    super(height || Banner.DEFAULT_HEIGHT);\r\n\r\n    this.getDiv().className = this.getDiv().className + ' ' + SuggestionBanner.BANNER_CLASS;\r\n\r\n    this.container = document.createElement('div');\r\n    this.container.className = BANNER_SCROLLER_CLASS;\r\n    this.getDiv().appendChild(this.container);\r\n    this.buildInternals(false);\r\n\r\n    this.gestureEngine = this.setupInputHandling();\r\n  }\r\n\r\n  shutdown() {\r\n    this.gestureEngine.destroy();\r\n  }\r\n\r\n  buildInternals(rtl: boolean) {\r\n    this.isRTL = rtl;\r\n    if(this.options.length > 0) {\r\n      this.options = [];\r\n      this.separators = [];\r\n    }\r\n\r\n    for (var i=0; i<SuggestionBanner.SUGGESTION_LIMIT; i++) {\r\n      let d = new BannerSuggestion(i, rtl);\r\n      this.options[i] = d;\r\n    }\r\n\r\n    /* LTR behavior:  the default (index 0) suggestion should be at the left\r\n      * RTL behavior:  the default (index 0) suggestion should be at the right\r\n      *\r\n      * The cleanest way to make it work - simply invert the order in which\r\n      * the elements are inserted for RTL.  This allows the banner to be RTL\r\n      * for visuals/UI while still being internally LTR.\r\n      */\r\n    for (var i=0; i<SuggestionBanner.SUGGESTION_LIMIT; i++) {\r\n      let indexToInsert = rtl ? SuggestionBanner.SUGGESTION_LIMIT - i - 1 : i;\r\n      this.container.appendChild(this.options[indexToInsert].div);\r\n\r\n      // RTL should start right-aligned, thus @ max scroll.\r\n      if(rtl) {\r\n        this.container.scrollLeft = this.container.scrollWidth;\r\n      }\r\n\r\n      if(i != SuggestionBanner.SUGGESTION_LIMIT - 1) {\r\n        // Adds a 'separator' div element for UI purposes.\r\n        let separatorDiv = createUnselectableElement('div');\r\n        separatorDiv.className = 'kmw-banner-separator';\r\n\r\n        let ds = separatorDiv.style;\r\n        ds.marginLeft = `calc(${(SuggestionBanner.MARGIN / 2)}% - 0.5px)`;\r\n        ds.marginRight = `calc(${(SuggestionBanner.MARGIN / 2)}% - 0.5px)`;\r\n\r\n        this.container.appendChild(separatorDiv);\r\n        // Ensure the separators are maintained in the same order as the\r\n        // suggestion elements!\r\n        this.separators[indexToInsert - (rtl ? 1 : 0)] = separatorDiv;\r\n      }\r\n    }\r\n  }\r\n\r\n  private setupInputHandling(): GestureRecognizer<BannerSuggestion> {\r\n    // Auto-cancels suggestion-selection if the finger moves too far; having very generous\r\n    // safe-zone settings also helps keep scrolls active on demo pages, etc.\r\n    const safeBounds = new PaddedZoneSource(this.getDiv(), [-Number.MAX_SAFE_INTEGER]);\r\n    this.selectionBounds = new PaddedZoneSource(\r\n      this.getDiv(),\r\n      [-BANNER_VERT_ROAMING_HEIGHT_RATIO * this.height, -Number.MAX_SAFE_INTEGER]\r\n    );\r\n\r\n    const config: GestureRecognizerConfiguration<BannerSuggestion> = {\r\n      targetRoot: this.getDiv(),\r\n      maxRoamingBounds: safeBounds,\r\n      safeBounds: safeBounds,\r\n      // touchEventRoot:  this.element, // is the default\r\n      itemIdentifier: (sample) => {\r\n        const selBounds = this.selectionBounds.getBoundingClientRect();\r\n\r\n        // Step 1:  is the coordinate within the range we permit for selecting _anything_?\r\n        if(sample.clientX < selBounds.left || sample.clientX > selBounds.right) {\r\n          return null;\r\n        }\r\n        if(sample.clientY < selBounds.top || sample.clientY > selBounds.bottom) {\r\n          return null;\r\n        }\r\n\r\n        // Step 2: find the best-matching selection.\r\n\r\n        let bestMatch: BannerSuggestion = null;\r\n        let bestDist = Number.MAX_VALUE;\r\n\r\n        for(const option of this.options) {\r\n          const optionBounding = option.div.getBoundingClientRect();\r\n\r\n          if(optionBounding.left <= sample.clientX && sample.clientX < optionBounding.right) {\r\n            // If there is no backing suggestion, then there's no real selection.\r\n            // May happen when no suggestions are available.\r\n            return option.suggestion ? option : null;\r\n          } else {\r\n            const dist = (sample.clientX < optionBounding.left ? -1 : 1) * (sample.clientX - optionBounding.left);\r\n\r\n            if(dist < bestDist) {\r\n              bestDist = dist;\r\n              bestMatch = option;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If there is no backing suggestion, then there's no real selection.\r\n        return bestMatch.suggestion ? bestMatch : null;\r\n      }\r\n    };\r\n\r\n    const engine = new GestureRecognizer<BannerSuggestion>(BANNER_GESTURE_SET, config);\r\n\r\n    const sourceTracker: {\r\n      source: GestureSource<BannerSuggestion>,\r\n      scrollingHandler: (sample: InputSample<BannerSuggestion>) => void,\r\n      suggestion: BannerSuggestion\r\n    } = {\r\n      source: null,\r\n      scrollingHandler: null,\r\n      suggestion: null\r\n    };\r\n\r\n    const markSelection = (suggestion: BannerSuggestion) => {\r\n      suggestion.highlight(true);\r\n      if(this.highlightAnimation) {\r\n        this.highlightAnimation.cancel();\r\n        this.highlightAnimation.decouple();\r\n      }\r\n\r\n      this.highlightAnimation = new SuggestionExpandContractAnimation(this.container, suggestion, false);\r\n      this.highlightAnimation.expand();\r\n    }\r\n\r\n    const clearSelection = (suggestion: BannerSuggestion) => {\r\n      suggestion.highlight(false);\r\n      if(!this.highlightAnimation) {\r\n        this.highlightAnimation = new SuggestionExpandContractAnimation(this.container, suggestion, false);\r\n      }\r\n      this.highlightAnimation.collapse();\r\n    }\r\n\r\n    engine.on('inputstart', (source) => {\r\n      // The banner does not support multi-touch - if one is still current, block all others.\r\n      if(sourceTracker.source) {\r\n        source.terminate(true);\r\n        return;\r\n      }\r\n\r\n      const autoselection = this._predictionContext.selected;\r\n      this._predictionContext.selected = null;\r\n      if(autoselection) {\r\n        this.options.forEach((entry) => {\r\n          if(entry.suggestion == autoselection) {\r\n            entry.highlight(false);\r\n          };\r\n        });\r\n      }\r\n\r\n      this.scrollState = new BannerScrollState(source.currentSample, this.container.scrollLeft);\r\n      const suggestion = source.baseItem;\r\n\r\n      sourceTracker.source = source;\r\n      sourceTracker.scrollingHandler = (sample) => {\r\n        const newScrollLeft = this.scrollState.updateTo(sample);\r\n        this.highlightAnimation?.setBaseScroll(newScrollLeft);\r\n\r\n          // Only re-enable the original suggestion, even if the touchpoint finds\r\n          // itself over a different suggestion.  Might happen if a scroll boundary\r\n          // is reached.\r\n        const incoming = sample.item ? suggestion : null;\r\n\r\n        // It's possible to cancel selection while still scrolling.\r\n        if(incoming != sourceTracker.suggestion) {\r\n          if(sourceTracker.suggestion) {\r\n            clearSelection(sourceTracker.suggestion);\r\n          }\r\n\r\n          sourceTracker.suggestion = incoming;\r\n          if(incoming) {\r\n            markSelection(incoming);\r\n          }\r\n        }\r\n      };\r\n\r\n      sourceTracker.suggestion = source.currentSample.item;\r\n      if(sourceTracker.suggestion) {\r\n        markSelection(sourceTracker.suggestion);\r\n      }\r\n\r\n      const terminationHandler = () => {\r\n        const currentSuggestions = this.currentSuggestions;\r\n        // First, schedule reselection of the autoselected suggestion.\r\n        // We shouldn't do it synchronously, as suggestion acceptance triggers\r\n        // _after_ this handler is called.\r\n        // Delaying via the task queue is enough to get the desired order of events.\r\n        timedPromise(0).then(async () => {\r\n          // If the suggestion list instance has changed, our state has changed; do\r\n          // not reselect.\r\n          if(currentSuggestions != this.currentSuggestions) {\r\n            return;\r\n          }\r\n\r\n          // The suggestions are still current?  Then restore the original\r\n          // auto-correct suggestion and its highlighting.\r\n          this._predictionContext.selected = autoselection;\r\n          if(autoselection) {\r\n            for(let entry of this.options) {\r\n              if(entry.suggestion == autoselection) {\r\n                entry.highlight(true);\r\n                break;\r\n              };\r\n            }\r\n          }\r\n        });\r\n\r\n        if(sourceTracker.suggestion) {\r\n          clearSelection(sourceTracker.suggestion);\r\n          sourceTracker.suggestion = null;\r\n        }\r\n\r\n        sourceTracker.source = null;\r\n        sourceTracker.scrollingHandler = null;\r\n      }\r\n\r\n      source.path.on('complete', terminationHandler);\r\n      source.path.on('invalidated', terminationHandler);\r\n      source.path.on('step', sourceTracker.scrollingHandler);\r\n    });\r\n\r\n    engine.on('recognizedgesture', (sequence) => {\r\n      // The actual result comes in via the sequence's `stage` event.\r\n      sequence.once('stage', (result) => {\r\n        const suggestion = result.item; // Should also == sourceTracker.suggestion.\r\n        // 1. A valid suggestion has been selected\r\n        // 2. The user wasn't scrolling the banner.  (If they were, they likely\r\n        //    need to lift their finger to select a newly-visible suggestion!)\r\n        // 3. The suggestions themselves are still valid; avoid suggestion\r\n        //    double-application or similar.\r\n        if(suggestion && !this.scrollState.hasScrolled && this.currentSuggestions.length > 0) {\r\n          // Invalidate the suggestions internally, but don't visually update;\r\n          // this will avoid banner-flicker.\r\n          this.currentSuggestions = [];\r\n          this.predictionContext.accept(suggestion.suggestion).then(() => {\r\n            // Reset the scroll state\r\n            this.container.scrollLeft = this.isRTL ? this.container.scrollWidth : 0;\r\n          });\r\n        }\r\n\r\n        this.scrollState = null;\r\n      });\r\n    });\r\n\r\n    return engine;\r\n  }\r\n\r\n  protected update() {\r\n    const result = super.update();\r\n\r\n    // Ensure the banner's extended recognition zone is based on proper, up-to-date layout info.\r\n    // Note:  during banner init, `this.gestureEngine` may only be defined after\r\n    // the first call to this setter!\r\n    (this.selectionBounds as PaddedZoneSource)?.updatePadding(\r\n      [-BANNER_VERT_ROAMING_HEIGHT_RATIO * this.height, -Number.MAX_SAFE_INTEGER]\r\n    );\r\n\r\n    return result;\r\n  }\r\n\r\n  public configureForKeyboard(keyboard: Keyboard, keyboardProperties: KeyboardProperties) {\r\n    const rtl = keyboard.isRTL;\r\n\r\n    // Removes all previous children.  (.replaceChildren requires Chrome for Android 86.)\r\n    // Instantly replaces all children with an empty text node, bypassing the need to actually\r\n    // parse incoming HTML.\r\n    //\r\n    // Just in case, alternative approaches: https://stackoverflow.com/a/3955238\r\n    this.container.textContent = '';\r\n\r\n    // Builds new children to match needed RTL properties.\r\n    this.buildInternals(rtl);\r\n\r\n    this.options.forEach((option) => option.matchKeyboardProperties(keyboardProperties));\r\n    this.onSuggestionUpdate(this.currentSuggestions); // restore suggestions\r\n  }\r\n\r\n  public get predictionContext(): PredictionContext {\r\n    return this._predictionContext;\r\n  }\r\n\r\n  public set predictionContext(context: PredictionContext) {\r\n    if(this._predictionContext) {\r\n      // disconnect the old one!\r\n      this._predictionContext.off('update', this.onSuggestionUpdate);\r\n    }\r\n\r\n    // connect the new one!\r\n    this._predictionContext = context;\r\n    if(context) {\r\n      context.on('update', this.onSuggestionUpdate);\r\n      this.onSuggestionUpdate(context.currentSuggestions);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Produces a closure useful for updating the SuggestionBanner's UI to match newly-received\r\n   * suggestions, including optimization of the banner's layout.\r\n   * @param suggestions\r\n   */\r\n  public onSuggestionUpdate = (suggestions: Suggestion[]): void => {\r\n    this.currentSuggestions = suggestions;\r\n    // Immediately stop all animations and reset options accordingly.\r\n    this.highlightAnimation?.cancel();\r\n\r\n    const fontStyleBase = this.options[0].computedStyle;\r\n    // Do NOT just re-use the returned object from the line above; it may spontaneously change\r\n    // (in a bad way) when the underlying span is replaced!\r\n    const fontStyle = {\r\n      fontSize: fontStyleBase.fontSize,\r\n      fontFamily: fontStyleBase.fontFamily\r\n    }\r\n    const emSizeStr = getComputedStyle(document.body).fontSize;\r\n    const emSize    = getFontSizeStyle(emSizeStr).val;\r\n\r\n    const textStyle = getComputedStyle(this.options[0].container.firstChild as HTMLSpanElement);\r\n\r\n    const targetWidth = this.width / SuggestionBanner.LONG_SUGGESTION_DISPLAY_LIMIT;\r\n\r\n    // computedStyle will fail if the element's not in the DOM yet.\r\n    // Seeks to get the values specified within kmwosk.css.\r\n    const textLeftPad = new ParsedLengthStyle(textStyle.paddingLeft   || '4px');\r\n    const textRightPad = new ParsedLengthStyle(textStyle.paddingRight || '4px');\r\n\r\n    let optionFormat: BannerSuggestionFormatSpec = {\r\n      paddingWidth: textLeftPad.val + textRightPad.val, // Assumes fixed px padding.\r\n      emSize: emSize,\r\n      styleForFont: fontStyle,\r\n      collapsedWidth: targetWidth,\r\n      minWidth: 0,\r\n    }\r\n\r\n    for (let i=0; i<SuggestionBanner.SUGGESTION_LIMIT; i++) {\r\n      const d = this.options[i];\r\n\r\n      if(suggestions.length > i) {\r\n        const suggestion = suggestions[i];\r\n        d.update(suggestion, optionFormat);\r\n      } else {\r\n        d.update(null, optionFormat);\r\n      }\r\n    }\r\n\r\n    this.refreshLayout();\r\n  }\r\n\r\n  readonly refreshLayout = () => {\r\n    let collapsedOptions: BannerSuggestion[] = [];\r\n    let totalWidth = 0;\r\n\r\n    let displayCount = Math.min(this.currentSuggestions.length, 8);\r\n    for(let i=0; i < displayCount; i++) {\r\n      // Note:  options is an array of pre-built suggestion-hosting elements, with\r\n      // fixed SUGGESTIONS_LIMIT length - not a length that dynamically changes to\r\n      // match the number of suggestions available.  Those without a suggestion\r\n      // are hidden, but preserved.\r\n      const opt = this.options[i];\r\n      opt.minWidth = 0; // remove any previously-applied padding\r\n      totalWidth += opt.collapsedWidth;\r\n\r\n      if(opt.collapsedWidth < opt.expandedWidth) {\r\n        collapsedOptions.push(opt);\r\n      }\r\n    }\r\n\r\n    // Ensure one suggestion is always displayed, even if empty.  (Keep the separators out)\r\n    displayCount = displayCount || 1;\r\n\r\n    if(totalWidth < this.width) {\r\n      let separatorWidth = (this.width * 0.01 * (displayCount-1));\r\n      // Prioritize adding padding to suggestions that actually need it.\r\n      // Use equal measure for each so long as it still could use extra display space.\r\n      while(totalWidth < this.width && collapsedOptions.length > 0) {\r\n        let maxFillPadding = (this.width - totalWidth - separatorWidth) / collapsedOptions.length;\r\n        collapsedOptions.sort((a, b) => a.expandedWidth - b.expandedWidth);\r\n\r\n        let shortestCollapsed = collapsedOptions[0];\r\n        let neededWidth = shortestCollapsed.expandedWidth - shortestCollapsed.collapsedWidth;\r\n\r\n        let padding = Math.min(neededWidth, maxFillPadding);\r\n\r\n        // Check: it is possible that two elements were matched for equal length, thus the second loop's takes no additional padding.\r\n        // No need to trigger re-layout ops for that case.\r\n        if(padding > 0) {\r\n          collapsedOptions.forEach((a) => a.minWidth = a.collapsedWidth + padding);\r\n          totalWidth += padding * collapsedOptions.length;  // don't forget to record that we added the padding!\r\n        }\r\n\r\n        collapsedOptions.splice(0, 1);  // discard the element we based our judgment upon; we need not consider it any longer.\r\n      }\r\n\r\n      // If there's STILL leftover padding to distribute, let's do that now.\r\n      let fillPadding = (this.width - totalWidth - separatorWidth) / displayCount;\r\n\r\n      for(let i=0; i < displayCount; i++) {\r\n        const d = this.options[i];\r\n\r\n        d.minWidth = d.collapsedWidth + fillPadding;\r\n        d.updateLayout();\r\n      }\r\n    }\r\n\r\n    // Hide any separators beyond the final displayed suggestion\r\n    for(let i=0; i < SuggestionBanner.SUGGESTION_LIMIT - 1; i++) {\r\n      this.separators[i].style.display = i < displayCount - 1 ? '' : 'none';\r\n    }\r\n  }\r\n}\r\n\r\nclass SuggestionExpandContractAnimation {\r\n  private scrollContainer: HTMLElement | null;\r\n  private option: BannerSuggestion;\r\n\r\n  private collapsedScrollOffset: number;\r\n  private rootScrollOffset: number;\r\n\r\n  private startTimestamp: number;\r\n  private pendingAnimation: number;\r\n\r\n  private static TRANSITION_TIME = 250; // in ms.\r\n\r\n  constructor(scrollContainer: HTMLElement, option: BannerSuggestion, forRTL: boolean) {\r\n    this.scrollContainer = scrollContainer;\r\n    this.option = option;\r\n    this.collapsedScrollOffset = scrollContainer.scrollLeft;\r\n    this.rootScrollOffset  = scrollContainer.scrollLeft;\r\n  }\r\n\r\n  public setBaseScroll(val: number) {\r\n    this.collapsedScrollOffset = val;\r\n\r\n    // If the user has shifted the scroll position to make more of the element visible, we can remove part\r\n    // of the corresponding scrolling offset permanently; the user's taken action to view that area.\r\n    if(this.option.rtl) {\r\n      // A higher scrollLeft (scrolling right) will reveal more of an initially-clipped suggestion.\r\n      if(val > this.rootScrollOffset) {\r\n        this.rootScrollOffset = val;\r\n      }\r\n    } else {\r\n      // Here, a lower scrollLeft (scrolling left).\r\n      if(val < this.rootScrollOffset) {\r\n        this.rootScrollOffset = val;\r\n      }\r\n    }\r\n\r\n    // Synchronize the banner-scroller's offset update with that of the\r\n    // animation for expansion and collapsing.\r\n    window.requestAnimationFrame(this.setScrollOffset);\r\n  }\r\n\r\n  /**\r\n   * Performs mapping of the user's touchpoint to properly-offset scroll coordinates based on\r\n   * the state of the ongoing scroll operation.\r\n   *\r\n   * First priority:  this function aims to keep all currently-visible parts of a selected\r\n   * suggestion visible when first selected.  Any currently-clipped parts will remain clipped.\r\n   *\r\n   * Second priority:  all animations should be smooth and continuous; aesthetics do matter to\r\n   * users.\r\n   *\r\n   * Third priority:  when possible without violating the first two priorities, this (in tandem with\r\n   * adjustments within `setBaseScroll`) will aim to sync the touchpoint with its original\r\n   * location on an expanded suggestion.\r\n   * - For LTR languages, this means that suggestions will \"expand left\" if possible.\r\n   * - While for RTL languages, they will \"expand right\" if possible.\r\n   * - However, if they would expand outside of the banner's effective viewport, a scroll offset\r\n   *   will kick in to enforce the \"first priority\" mentioned above.\r\n   *   - This \"scroll offset\" will be progressively removed (because second priority) if and as\r\n   *     the user manually scrolls to reveal relevant space that was originally outside of the viewport.\r\n   *\r\n   * @returns\r\n   */\r\n  private setScrollOffset = () => {\r\n    // If we've been 'decoupled', a different instance (likely for a different suggestion)\r\n    // is responsible for counter-scrolling.\r\n    if(!this.scrollContainer) {\r\n      return;\r\n    }\r\n\r\n    // -- Clamping / \"scroll offset\" logic --\r\n\r\n    // As currently written / defined below, and used internally within this function, \"clamping\"\r\n    // refers to alterations to scroll-positioned mapping designed to keep as much of the expanded\r\n    // option visible as possible via the offsets below (that is, \"clamped\" to the relevant border)\r\n    // while not adding extra discontinuity by pushing already-obscured parts of the expanded option\r\n    // into visible range.\r\n    //\r\n    // In essence, it's an extra \"scroll offset\" we apply that is dynamically adjusted depending on\r\n    // scroll position as it changes. This offset may be decreased when it is no longer needed to\r\n    // make parts of the element visible.\r\n\r\n    // The amount of extra space being taken by a partially or completely expanded suggestion.\r\n    const maxWidthToCounterscroll = this.option.currentWidth - this.option.collapsedWidth;\r\n    const rtl = this.option.rtl;\r\n\r\n    // If non-zero, indicates the pixel-width of the collapsed form of the suggestion clipped by the relevant screen border.\r\n    const ltrOverflow = Math.max(this.rootScrollOffset - this.option.div.offsetLeft, 0);\r\n    const rtlOverflow = Math.max(this.option.div.offsetLeft + this.option.collapsedWidth - (this.rootScrollOffset + this.scrollContainer.offsetWidth));\r\n\r\n    const srcCounterscrollOverflow = Math.max(rtl ? rtlOverflow : ltrOverflow, 0);  // positive offset into overflow-land.\r\n\r\n    // Base position for scrollLeft clamped within std element scroll bounds, including:\r\n    // - an adjustment to cover the extra width from expansion\r\n    // - preserving the base expected overflow levels\r\n    // Does NOT make adjustments to force extra visibility on the element being highlighted/focused.\r\n    const unclampedExpandingScrollOffset = Math.max(this.collapsedScrollOffset + (rtl ? 0 : 1) * maxWidthToCounterscroll, 0) + (rtl ? 0 : -1) * srcCounterscrollOverflow;\r\n    // The same, but for our 'root scroll coordinate'.\r\n    const rootUnclampedExpandingScrollOffset = Math.max(this.rootScrollOffset + (rtl ? 0 : 1) * maxWidthToCounterscroll, 0) + (rtl ? 0 : -1) * srcCounterscrollOverflow;\r\n\r\n    // Do not shift an element clipped by the screen border further than its original scroll starting point.\r\n    const elementOffsetForClamping = rtl\r\n      ? Math.max(unclampedExpandingScrollOffset, rootUnclampedExpandingScrollOffset)\r\n      : Math.min(unclampedExpandingScrollOffset, rootUnclampedExpandingScrollOffset);\r\n\r\n    // Based on the scroll point selected, determine how far to offset scrolls to keep the option in visible range.\r\n    // Higher .scrollLeft values make this non-zero and reflect when scroll has begun clipping the element.\r\n    const elementOffsetFromBorder = rtl\r\n      // RTL offset:                   \"offsetRight\"                                       based on \"scrollRight\"\r\n      ? Math.max(this.option.div.offsetLeft + this.option.currentWidth - (elementOffsetForClamping + this.scrollContainer.offsetWidth), 0) // double-check this one.\r\n      // LTR:       based on scrollLeft            offsetLeft\r\n      : Math.max(elementOffsetForClamping - this.option.div.offsetLeft, 0);\r\n\r\n    // If the element is close enough to the border, don't offset beyond the element!\r\n    // If it is further, do not add excess padding - it'd effectively break scrolling.\r\n    // Do maintain any remaining scroll offset that exists, though.\r\n    const clampedExpandingScrollOffset = Math.min(maxWidthToCounterscroll, elementOffsetFromBorder);\r\n\r\n    const finalScrollOffset = unclampedExpandingScrollOffset                   // base scroll-coordinate transform mapping based on extra width from element expansion\r\n                              + (rtl ? 1 : -1) * clampedExpandingScrollOffset  // offset to scroll to put word-start border against the corresponding screen border, fully visible\r\n                              + (rtl ? 0 :  1) * srcCounterscrollOverflow;     // offset to maintain original overflow past that border if it existed\r\n\r\n    // -- Final step: Apply & fine-tune the final scroll positioning --\r\n    this.scrollContainer.scrollLeft = finalScrollOffset;\r\n\r\n    // Prevent \"jitters\" during counterscroll that occur on expansion / collapse animation.\r\n    // A one-frame \"error correction\" effect at the end of animation is far less jarring.\r\n    if(this.pendingAnimation) {\r\n      // scrollLeft doesn't work well with fractional values, unlike marginLeft / marginRight\r\n      const fractionalOffset = this.scrollContainer.scrollLeft - finalScrollOffset;\r\n      // So we put the fractional difference into marginLeft to force it to sync.\r\n      this.option.currentWidth += fractionalOffset;\r\n    }\r\n  }\r\n\r\n  public decouple() {\r\n    this.cancel();\r\n    this.scrollContainer = null;\r\n  }\r\n\r\n  private clear() {\r\n    this.startTimestamp = null;\r\n    window.cancelAnimationFrame(this.pendingAnimation);\r\n    this.pendingAnimation = null;\r\n  }\r\n\r\n  cancel() {\r\n    this.clear();\r\n    this.option.currentWidth = this.option.collapsedWidth;\r\n  }\r\n\r\n  public expand() {\r\n    // Cancel any prior iterating animation-frame commands.\r\n    this.clear();\r\n\r\n    // set timestamp, adjusting the current time based on intermediate progress\r\n    this.startTimestamp = performance.now();\r\n\r\n    let progress = this.option.currentWidth - this.option.collapsedWidth;\r\n    let expansionDiff = this.option.expandedWidth - this.option.collapsedWidth;\r\n\r\n    if(progress != 0) {\r\n      // Offset the timestamp by noting what start time would have given rise to\r\n      // the current position, keeping related animations smooth.\r\n      this.startTimestamp -= (progress / expansionDiff) * SuggestionExpandContractAnimation.TRANSITION_TIME;\r\n    }\r\n\r\n    this.pendingAnimation = window.requestAnimationFrame(this._expand);\r\n  }\r\n\r\n  private _expand = (timestamp: number) => {\r\n    if(this.startTimestamp === undefined) {\r\n      return; // No active expand op exists.  May have been cancelled via `clear`.\r\n    }\r\n\r\n    let progressTime = timestamp - this.startTimestamp;\r\n    let fin = progressTime > SuggestionExpandContractAnimation.TRANSITION_TIME;\r\n\r\n    if(fin) {\r\n      progressTime = SuggestionExpandContractAnimation.TRANSITION_TIME;\r\n    }\r\n\r\n    // -- Part 1:  handle option expand / collapse state --\r\n    let expansionDiff = this.option.expandedWidth - this.option.collapsedWidth;\r\n    let expansionRatio = progressTime / SuggestionExpandContractAnimation.TRANSITION_TIME;\r\n\r\n    // expansionDiff * expansionRatio:  the total adjustment from 'collapsed' width, in px.\r\n    const expansionPx = expansionDiff * expansionRatio;\r\n    this.option.currentWidth = expansionPx + this.option.collapsedWidth;\r\n\r\n    // Part 2:  trigger the next animation frame.\r\n    if(!fin) {\r\n      this.pendingAnimation = window.requestAnimationFrame(this._expand);\r\n    } else {\r\n      this.clear();\r\n    }\r\n\r\n    // Part 3:  perform any needed counter-scrolling, scroll clamping, etc\r\n    // Existence of a followup animation frame is part of the logic, so keep this 'after'!\r\n    this.setScrollOffset();\r\n  };\r\n\r\n  public collapse() {\r\n    // Cancel any prior iterating animation-frame commands.\r\n    this.clear();\r\n\r\n    // set timestamp, adjusting the current time based on intermediate progress\r\n    this.startTimestamp = performance.now();\r\n\r\n    let progress = this.option.expandedWidth - this.option.currentWidth;\r\n    let expansionDiff = this.option.expandedWidth - this.option.collapsedWidth;\r\n\r\n    if(progress != 0) {\r\n      // Offset the timestamp by noting what start time would have given rise to\r\n      // the current position, keeping related animations smooth.\r\n      this.startTimestamp -= (progress / expansionDiff) * SuggestionExpandContractAnimation.TRANSITION_TIME;\r\n    }\r\n\r\n    this.pendingAnimation = window.requestAnimationFrame(this._collapse);\r\n  }\r\n\r\n  private _collapse = (timestamp: number) => {\r\n    if(this.startTimestamp === undefined) {\r\n      return; // No active collapse op exists.  May have been cancelled via `clear`.\r\n    }\r\n\r\n    let progressTime = timestamp - this.startTimestamp;\r\n    let fin = progressTime > SuggestionExpandContractAnimation.TRANSITION_TIME;\r\n    if(fin) {\r\n      progressTime = SuggestionExpandContractAnimation.TRANSITION_TIME;\r\n    }\r\n\r\n    // -- Part 1:  handle option expand / collapse state --\r\n    let expansionDiff = this.option.expandedWidth - this.option.collapsedWidth;\r\n    let expansionRatio = 1 - progressTime / SuggestionExpandContractAnimation.TRANSITION_TIME;\r\n\r\n    // expansionDiff * expansionRatio:  the total adjustment from 'collapsed' width, in px.\r\n    const expansionPx = expansionDiff * expansionRatio;\r\n    this.option.currentWidth = expansionPx + this.option.collapsedWidth;\r\n\r\n    // Part 2:  trigger the next animation frame.\r\n    if(!fin) {\r\n      this.pendingAnimation = window.requestAnimationFrame(this._collapse);\r\n    } else {\r\n      this.clear();\r\n    }\r\n\r\n    // Part 3:  perform any needed counter-scrolling, scroll clamping, etc\r\n    // Existence of a followup animation frame is part of the logic, so keep this 'after'!\r\n    this.setScrollOffset();\r\n  };\r\n}\r\n\r\n",
    "import { Banner } from \"./banner.js\";\r\n\r\nexport class HTMLBanner extends Banner {\r\n  readonly container: ShadowRoot | HTMLElement;\r\n  readonly type = 'html';\r\n\r\n  constructor(contents?: string) {\r\n    super();\r\n\r\n    const bannerHost = this.getDiv();\r\n\r\n    // Ensure any HTML styling applied for the banner contents only apply to the contents,\r\n    // and not the banner's `position: 'relative'` hosting element.\r\n    const div = document.createElement('div');\r\n    div.style.userSelect = 'none';\r\n    div.style.height = '100%';\r\n    div.style.width = '100%';\r\n    bannerHost.appendChild(div);\r\n\r\n    // If possible, quarantine styling and JS for the banner contents within Shadow DOM.\r\n    this.container = (div.attachShadow) ? div.attachShadow({mode: 'closed'}) : div;\r\n    this.container.innerHTML = contents;\r\n  }\r\n\r\n  get innerHTML() {\r\n    return this.container.innerHTML;\r\n  }\r\n\r\n  set innerHTML(raw: string) {\r\n    this.container.innerHTML = raw;\r\n  }\r\n}",
    "import { DeviceSpec } from '@keymanapp/web-utils';\r\nimport type { PredictionContext, StateChangeEnum } from 'keyman/engine/interfaces';\r\nimport { ImageBanner } from './imageBanner.js';\r\nimport { SuggestionBanner } from './suggestionBanner.js';\r\nimport { BannerView } from './bannerView.js';\r\nimport { Banner } from './banner.js';\r\nimport { BlankBanner } from './blankBanner.js';\r\nimport { HTMLBanner } from './htmlBanner.js';\r\nimport { Keyboard, KeyboardProperties } from 'keyman/engine/keyboard';\r\n\r\nexport class BannerController {\r\n  private container: BannerView;\r\n\r\n  private predictionContext?: PredictionContext;\r\n\r\n  private readonly hostDevice: DeviceSpec;\r\n\r\n  private _inactiveBanner: Banner;\r\n\r\n  private keyboard: Keyboard;\r\n  private keyboardStub: KeyboardProperties;\r\n\r\n  /**\r\n   * Builds a banner for use when predictions are not active, supporting a single image.\r\n   */\r\n  public readonly ImageBanner = ImageBanner;\r\n\r\n  /**\r\n   * Builds a banner for use when predictions are not active, supporting a more generalized\r\n   * content pattern than ImageBanner via `innerHTML` specifications.\r\n   */\r\n  public readonly HTMLBanner = HTMLBanner;\r\n\r\n  constructor(bannerView: BannerView, hostDevice: DeviceSpec, predictionContext?: PredictionContext) {\r\n    // Step 1 - establish the container element.  Must come before this.setOptions.\r\n    this.hostDevice = hostDevice;\r\n    this.container = bannerView;\r\n    this.predictionContext = predictionContext;\r\n\r\n    this.inactiveBanner = new BlankBanner();\r\n  }\r\n\r\n  /**\r\n   * Specifies the `Banner` instance to use when predictive-text is _not_ available to the user.\r\n   *\r\n   * Defaults to a hidden, \"blank\" `Banner` if not otherwise specified.  Changes to its value\r\n   * when predictive-text is not active will result in banner hot-swapping.\r\n   *\r\n   * The assigned instance will persist until directly changed through a new assignment,\r\n   * regardless of any keyboard swaps and/or activations of the suggestion banner that may\r\n   * occur in the meantime.\r\n   */\r\n  public get inactiveBanner() {\r\n    return this._inactiveBanner;\r\n  }\r\n\r\n  public set inactiveBanner(banner: Banner) {\r\n    this._inactiveBanner = banner ?? new BlankBanner();\r\n\r\n    if(!(this.container.banner instanceof SuggestionBanner)) {\r\n      this.container.banner = this._inactiveBanner;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the active `Banner` to match the specified state for predictive text.\r\n   *\r\n   * @param on   Whether prediction is active (`true`) or disabled (`false`).\r\n   */\r\n  public activateBanner(on: boolean) {\r\n    const oldBanner = this.container.banner;\r\n    if(oldBanner instanceof SuggestionBanner) {\r\n      // Frees all handlers, etc registered previously by the banner.\r\n      oldBanner.predictionContext = null;\r\n    }\r\n\r\n    if(!on) {\r\n      this.container.banner = this.inactiveBanner;\r\n    } else {\r\n      let suggestBanner = new SuggestionBanner(this.hostDevice, this.container.activeBannerHeight);\r\n      suggestBanner.predictionContext = this.predictionContext;\r\n\r\n      // Registers for prediction-engine events & handles its needed connections.\r\n      this.container.banner = suggestBanner;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles `LanguageProcessor`'s `'statechange'` events,\r\n   * allowing logic to automatically hot-swap `Banner`s as needed.\r\n   * @param state\r\n   */\r\n  selectBanner(state: StateChangeEnum) {\r\n    // Only display a SuggestionBanner when LanguageProcessor states it is active.\r\n    this.activateBanner(state == 'active' || state == 'configured');\r\n\r\n    if(this.keyboard) {\r\n      this.container.banner.configureForKeyboard(this.keyboard, this.keyboardStub);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allows banners to adapt based on the active keyboard and related properties, such as\r\n   * associated fonts.\r\n   * @param keyboard\r\n   * @param keyboardProperties\r\n   */\r\n  public configureForKeyboard(keyboard: Keyboard, keyboardProperties: KeyboardProperties) {\r\n    this.keyboard = keyboard;\r\n    this.keyboardStub = keyboardProperties;\r\n\r\n    this.container.banner.configureForKeyboard(keyboard, keyboardProperties);\r\n  }\r\n\r\n  public shutdown() {\r\n    if(this.container.banner instanceof SuggestionBanner) {\r\n      this.container.banner.predictionContext = null;\r\n    }\r\n  }\r\n}",
    "import KeyboardView from \"./keyboardView.interface.js\";\r\nimport { ParsedLengthStyle } from \"../lengthStyle.js\";\r\n\r\nexport default class EmptyView implements KeyboardView {\r\n  readonly element: HTMLDivElement;\r\n\r\n  constructor() {\r\n    let Ldiv = this.element = document.createElement('div');\r\n    Ldiv.style.userSelect = 'none';\r\n    Ldiv.className='kmw-osk-none';\r\n  }\r\n\r\n  // No operations needed; this is a stand-in for the desktop OSK when no keyboard is active.\r\n  public postInsert() { }\r\n  public updateState() { }\r\n\r\n  public refreshLayout() { }\r\n\r\n  public get layoutHeight(): ParsedLengthStyle {\r\n    return ParsedLengthStyle.inPixels(0);\r\n  }\r\n}",
    "import { Keyboard } from 'keyman/engine/keyboard';\r\n\r\nimport KeyboardView from './keyboardView.interface.js';\r\nimport { ParsedLengthStyle } from \"../lengthStyle.js\";\r\n\r\nexport default class HelpPageView implements KeyboardView {\r\n  private readonly kbd: Keyboard;\r\n  public readonly element: HTMLDivElement;\r\n\r\n  private static readonly ID = 'kmw-osk-help-page';\r\n\r\n  constructor(keyboard: Keyboard) {\r\n    this.kbd = keyboard;\r\n\r\n    var Ldiv = this.element = document.createElement('div');\r\n    Ldiv.style.userSelect = \"none\";\r\n    Ldiv.className = 'kmw-osk-static';\r\n    Ldiv.id = HelpPageView.ID;\r\n    Ldiv.innerHTML = keyboard.helpText;\r\n  }\r\n\r\n  public postInsert() {\r\n    if(!this.element.parentElement || !document.getElementById(HelpPageView.ID)) {\r\n      throw new Error(\"The HelpPage root element has not yet been inserted into the DOM.\");\r\n    }\r\n\r\n    if(this.kbd.hasScript) {\r\n      // .parentElement:  ensure this matches the _Box element from OSKManager / OSKView\r\n      // Not a hard requirement for any known keyboards, but is asserted by legacy docs.\r\n      this.kbd.embedScript(this.element.parentElement);\r\n    }\r\n  }\r\n\r\n  public updateState() { }\r\n  public refreshLayout() { }\r\n\r\n  public get layoutHeight(): ParsedLengthStyle {\r\n    return ParsedLengthStyle.inPercent(100);\r\n  }\r\n}",
    "import { ActiveKey, ActiveKeyBase, ActiveLayer, ActiveRow, Codes } from \"keyman/engine/keyboard\";\r\n\r\n/**\r\n * Defines correction-layout mappings for keys to be considered by\r\n * the fat-finger algorithm and its related calculations, which are\r\n * used to determine the \"closest keys\" for corrections.\r\n */\r\nexport interface CorrectionLayoutEntry {\r\n  /**\r\n   * The ID of the key corresponding to this entry.\r\n   */\r\n  readonly keySpec: ActiveKeyBase;\r\n\r\n  /**\r\n   * Represents the center x coordinate of the key based on the coordinate system\r\n   * with the keyboard's layout bounding box mapped to a box from <0, 0> to <1, 1>.\r\n   */\r\n  readonly centerX: number;\r\n\r\n  /**\r\n   * Represents the center y coordinate of the key based on the coordinate system\r\n   * with the keyboard's layout bounding box mapped to a box from <0, 0> to <1, 1>.\r\n   */\r\n  readonly centerY: number;\r\n\r\n  /**\r\n   * Represents the key's width based on the coordinate system with the\r\n   * keyboard's layout bounding box mapped to a box from <0, 0> to <1, 1>.\r\n   */\r\n  readonly width: number;\r\n\r\n  /**\r\n   * Represents the key's height based on the coordinate system with the\r\n   * keyboard's layout bounding box mapped to a box from <0, 0> to <1, 1>.\r\n   */\r\n  readonly height: number;\r\n}\r\n\r\nexport interface CorrectionLayout {\r\n  /**\r\n   * Defines the mappings of each key to be considered by a key-correction\r\n   * algorithm.  The key's bounding box should be defined relative to its\r\n   * container's bounding box, with both mapped to a coordinate system from\r\n   * <0, 0> to <1, 1> - a unit square.\r\n   */\r\n  keys: CorrectionLayoutEntry[];\r\n\r\n  /**\r\n   * The ratio of the keyboard's horizontal scale to its vertical scale.\r\n   * For a 400 x 200 keyboard, should be 2.\r\n   */\r\n  kbdScaleRatio: number;\r\n}\r\n\r\n// Not compatible with subkeys - their layout data is only determined (presently) at runtime.\r\nexport class CorrectiveBaseKeyLayout implements CorrectionLayoutEntry {\r\n  readonly keySpec: ActiveKey;\r\n  readonly centerX: number;\r\n  readonly centerY: number;\r\n  readonly width: number;\r\n  readonly height: number;\r\n\r\n  constructor(layer: ActiveLayer, row: ActiveRow, key: ActiveKey) {\r\n    this.keySpec = key;\r\n    this.centerX = key.proportionalX;\r\n    this.centerY = row.proportionalY;\r\n    this.width = key.proportionalWidth;\r\n    this.height = layer.rowProportionalHeight;\r\n  }\r\n}\r\n\r\n/**\r\n * Indicates whether or not the specified key should be considered as a valid\r\n * key-correction target during fat-finger operations.\r\n * @param key\r\n * @returns `true` if valid, `false` if invalid.\r\n */\r\nexport function correctionKeyFilter(key: ActiveKeyBase): boolean {\r\n  // If the key lacks an ID, just skip it.  Sometimes used for padding.\r\n  if(!key.baseKeyID) {\r\n    return false;\r\n    // Attempt to filter out known non-output keys.\r\n    // Results in a more optimized distribution.\r\n  } else if(Codes.isFrameKey(key.baseKeyID)) {\r\n    return false;\r\n  } else if(key.isPadding) { // to the user, blank / padding keys do not exist.\r\n    return false;\r\n  } else {\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Builds the corrective layout object corresponding to the specified keyboard layer,\r\n * as needed for use of our key-correction algorithms.\r\n *\r\n * @param layer         The layer spec to reference for key corrections.\r\n * @param kbdScaleRatio The ratio of the keyboard's horizontal scale to its vertical scale.\r\n *                           For a 400 x 200 keyboard, should be 2.\r\n */\r\nexport function buildCorrectiveLayout(layer: ActiveLayer, kbdScaleRatio: number) {\r\n  return {\r\n    keys: layer.row.map((row) => {\r\n      return row.key.map((key) => new CorrectiveBaseKeyLayout(layer, row, key));\r\n      // ... and flatten/merge the resulting arrays.\r\n    }).reduce((flattened, rowEntries) => flattened.concat(rowEntries), [])\r\n    .filter((entry) => correctionKeyFilter(entry.keySpec)),\r\n    kbdScaleRatio: kbdScaleRatio\r\n  };\r\n}",
    "// Defines the PUA code mapping for the various 'special' modifier/control/non-printing keys on keyboards.\r\n// `specialCharacters` must be kept in sync with the same variable in constants.js. See also CompileKeymanWeb.pas: CSpecialText10\r\nlet specialCharacters = {\r\n  '*Shift*':    8,\r\n  '*Enter*':    5,\r\n  '*Tab*':      6,\r\n  '*BkSp*':     4,\r\n  '*Menu*':     11,\r\n  '*Hide*':     10,\r\n  '*Alt*':      25,\r\n  '*Ctrl*':     1,\r\n  '*Caps*':     3,\r\n  '*ABC*':      16,\r\n  '*abc*':      17,\r\n  '*123*':      19,\r\n  '*Symbol*':   21,\r\n  '*Currency*': 20,\r\n  '*Shifted*':  9,\r\n  '*AltGr*':    2,\r\n  '*TabLeft*':  7,\r\n  '*LAlt*':     0x56,\r\n  '*RAlt*':     0x57,\r\n  '*LCtrl*':    0x58,\r\n  '*RCtrl*':    0x59,\r\n  '*LAltCtrl*':       0x60,\r\n  '*RAltCtrl*':       0x61,\r\n  '*LAltCtrlShift*':  0x62,\r\n  '*RAltCtrlShift*':  0x63,\r\n  '*AltShift*':       0x64,\r\n  '*CtrlShift*':      0x65,\r\n  '*AltCtrlShift*':   0x66,\r\n  '*LAltShift*':      0x67,\r\n  '*RAltShift*':      0x68,\r\n  '*LCtrlShift*':     0x69,\r\n  '*RCtrlShift*':     0x70,\r\n  // Added in Keyman 14.0.\r\n  '*LTREnter*':       0x05, // Default alias of '*Enter*'.\r\n  '*LTRBkSp*':        0x04, // Default alias of '*BkSp*'.\r\n  '*RTLEnter*':       0x71,\r\n  '*RTLBkSp*':        0x72,\r\n  '*ShiftLock*':      0x73,\r\n  '*ShiftedLock*':    0x74,\r\n  '*ZWNJ*':           0x75, // If this one is specified, auto-detection will kick in.\r\n  '*ZWNJiOS*':        0x75, // The iOS version will be used by default, but the\r\n  '*ZWNJAndroid*':    0x76, // Android platform has its own default glyph.\r\n  // Added in Keyman 17.0.\r\n  // Reference: https://github.com/silnrsi/font-symchar/blob/v4.000/documentation/encoding.md\r\n  '*ZWNJGeneric*':    0x79, // Generic version of ZWNJ (no override)\r\n  '*Sp*':             0x80, // Space\r\n  '*NBSp*':           0x82, // No-break Space\r\n  '*NarNBSp*':        0x83, // Narrow No-break Space\r\n  '*EnQ*':            0x84, // En Quad\r\n  '*EmQ*':            0x85, // Em Quad\r\n  '*EnSp*':           0x86, // En Space\r\n  '*EmSp*':           0x87, // Em Space\r\n  // TODO: Skipping #-per-em-space\r\n  '*PunctSp*':        0x8c, // Punctuation Space\r\n  '*ThSp*':           0x8d, // Thin Space\r\n  '*HSp*':            0x8e, // Hair Space\r\n  '*ZWSp*':           0x81, // Zero Width Space\r\n  '*ZWJ*':            0x77, // Zero Width Joiner\r\n  '*WJ*':             0x78, // Word Joiner\r\n  '*CGJ*':            0x7a, // Combining Grapheme Joiner\r\n  '*LTRM*':           0x90, // Left-to-right Mark\r\n  '*RTLM*':           0x91, // Right-to-left Mark\r\n  '*SH*':             0xa1, // Soft Hyphen\r\n  '*HTab*':           0xa2, // Horizontal Tabulation\r\n  // TODO: Skipping size references\r\n\r\n};\r\n\r\nexport default specialCharacters;",
    "\r\n/**\r\n * Maps 'sp' properties on a touch-layout spec to their corresponding CSS class names.\r\n */\r\nlet BUTTON_CLASSES = [\r\n  'default',\r\n  'shift',\r\n  'shift-on',\r\n  'special',\r\n  'special-on',\r\n  '', // Key classes 5 through 7 are reserved for future use.\r\n  '',\r\n  '',\r\n  'deadkey',\r\n  'blank',\r\n  'hidden'\r\n];\r\n\r\nexport default BUTTON_CLASSES;",
    "import { ActiveKey, ActiveSubKey, ButtonClass, ButtonClasses, DeviceSpec } from 'keyman/engine/keyboard';\r\n\r\n// At present, we don't use @keymanapp/keyman.  Just `keyman`.  (Refer to <root>/web/package.json.)\r\nimport specialChars from '../specialCharacters.js';\r\nimport buttonClassNames from '../buttonClassNames.js';\r\n\r\nimport { KeyElement } from '../keyElement.js';\r\nimport VisualKeyboard from '../visualKeyboard.js';\r\nimport { getTextMetrics } from './getTextMetrics.js';\r\nimport { ParsedLengthStyle } from '../lengthStyle.js';\r\n\r\nexport interface KeyLayoutParams {\r\n  keyWidth: number;\r\n  keyHeight: number;\r\n  baseEmFontSize: ParsedLengthStyle;\r\n  layoutFontSize: ParsedLengthStyle;\r\n}\r\n\r\n/**\r\n * Replace default key names by special font codes for modifier keys\r\n *\r\n *  @param  {string}  oldText\r\n *  @return {string}\r\n **/\r\nexport function renameSpecialKey(oldText: string, vkbd: VisualKeyboard): string {\r\n // If a 'special key' mapping exists for the text, replace it with its corresponding special OSK character.\r\n switch(oldText) {\r\n   case '*ZWNJ*':\r\n     // Default ZWNJ symbol comes from iOS.  We'd rather match the system defaults where\r\n     // possible / available though, and there's a different standard symbol on Android.\r\n     oldText = vkbd.device.OS == DeviceSpec.OperatingSystem.Android ?\r\n       '*ZWNJAndroid*' :\r\n       '*ZWNJiOS*';\r\n     break;\r\n   case '*Enter*':\r\n     oldText = vkbd.isRTL ? '*RTLEnter*' : '*LTREnter*';\r\n     break;\r\n   case '*BkSp*':\r\n     oldText = vkbd.isRTL ? '*RTLBkSp*' : '*LTRBkSp*';\r\n     break;\r\n   default:\r\n     // do nothing.\r\n }\r\n\r\n const specialCode = specialChars[oldText as keyof typeof specialChars];\r\n let specialCodePUA = 0XE000 + specialCode;\r\n\r\n return specialCode ?\r\n   String.fromCharCode(specialCodePUA) :\r\n   oldText;\r\n}\r\n\r\nexport default abstract class OSKKey {\r\n  // Only set here to act as an alias for code built against legacy versions.\r\n  static readonly specialCharacters = specialChars;\r\n\r\n  static readonly BUTTON_CLASSES = buttonClassNames;\r\n\r\n  static readonly HIGHLIGHT_CLASS = 'kmw-key-touched';\r\n  readonly spec: ActiveKey | ActiveSubKey;\r\n\r\n  btn: KeyElement;\r\n  label: HTMLSpanElement;\r\n  square: HTMLDivElement;\r\n\r\n  private _fontSize: ParsedLengthStyle;\r\n  private _fontFamily: string;\r\n\r\n  /**\r\n   * The layer of the OSK on which the key is displayed.\r\n   */\r\n  readonly layer: string;\r\n\r\n  constructor(spec: ActiveKey | ActiveSubKey, layer: string) {\r\n    this.spec = spec;\r\n    this.layer = layer;\r\n  }\r\n\r\n  abstract getId(): string;\r\n\r\n  /**\r\n   * Attach appropriate class to each key button, according to the layout\r\n   *\r\n   * @param       {Object=}   layout  source layout description (optional, sometimes)\r\n   */\r\n  public setButtonClass() {\r\n    let key = this.spec;\r\n    let btn = this.btn;\r\n\r\n    var n=0;\r\n    // @ts-ignore // (Probably) supports legacy KMW keyboards that predate the sp entry\r\n    if(typeof key['dk'] == 'string' && key['dk'] == '1') {\r\n      n=8;\r\n    }\r\n\r\n    n = key['sp'] ?? n;\r\n\r\n    if(n < 0 || n > 10) {\r\n      n=0;\r\n    }\r\n\r\n    btn.className='kmw-key kmw-key-'+ buttonClassNames[n];\r\n  }\r\n\r\n  /**\r\n   * For keys with button classes that support toggle states, this method\r\n   * may be used to toggle which state the key's button class is in.\r\n   * -  shift  <=>  shift-on\r\n   * - special <=> special-on\r\n   * @param {boolean=} flag The new toggle state\r\n   */\r\n  public setToggleState(flag?: boolean) {\r\n    let btnClassId: number;\r\n\r\n    btnClassId = this.spec['sp'];\r\n\r\n    // 1 + 2:   shift  +  shift-on\r\n    // 3 + 4:  special + special-on\r\n    switch(buttonClassNames[btnClassId]) {\r\n      case 'shift':\r\n      case 'shift-on':\r\n        if(flag === undefined) {\r\n          flag = buttonClassNames[btnClassId] == 'shift';\r\n        }\r\n\r\n        this.spec['sp'] = 1 + (flag ? 1 : 0) as ButtonClass;\r\n        break;\r\n      // Added in 15.0:  special key highlight toggling.\r\n      // Was _intended_ in earlier versions, but not actually implemented.\r\n      case 'special':\r\n      case 'special-on':\r\n        if(flag === undefined) {\r\n          flag = buttonClassNames[btnClassId] == 'special';\r\n        }\r\n\r\n        this.spec['sp'] = 3 + (flag ? 1 : 0) as ButtonClass;\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n\r\n    this.setButtonClass();\r\n  }\r\n\r\n  // \"Frame key\" - generally refers to non-linguistic keys on the keyboard\r\n  public isFrameKey(): boolean {\r\n    let classIndex = this.spec['sp'] || 0;\r\n    switch(buttonClassNames[classIndex]) {\r\n      case 'default':\r\n      case 'deadkey':\r\n        // Note:  will (generally) include the spacebar.\r\n        return false;\r\n      default:\r\n        return true;\r\n    }\r\n  }\r\n\r\n  public allowsKeyTip(): boolean {\r\n    if(this.isFrameKey()) {\r\n      return false;\r\n    } else {\r\n      return !this.btn.classList.contains('kmw-spacebar');\r\n    }\r\n  }\r\n\r\n  public highlight(on: boolean) {\r\n    var classes=this.btn.classList;\r\n\r\n    if(on) {\r\n      if(!classes.contains(OSKKey.HIGHLIGHT_CLASS)) {\r\n        classes.add(OSKKey.HIGHLIGHT_CLASS);\r\n      }\r\n    } else {\r\n      classes.remove(OSKKey.HIGHLIGHT_CLASS);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the font size required for a key cap, scaling to fit longer text\r\n   * @param text\r\n   * @param layoutParams   specification for the key\r\n   * @param scale     additional scaling to apply for the font-size calculation (used by keytips)\r\n   * @returns         font size as a style string\r\n   */\r\n  getIdealFontSize(text: string, layoutParams: KeyLayoutParams, scale?: number): ParsedLengthStyle {\r\n    // Fallback in case not all style info is currently ready.\r\n    if(!this._fontFamily) {\r\n      return new ParsedLengthStyle('1em');\r\n    }\r\n\r\n    scale ??= 1;\r\n\r\n    const keyWidth = layoutParams.keyWidth;\r\n    const keyHeight = layoutParams.keyHeight;\r\n    const emScale = layoutParams.baseEmFontSize.scaledBy(layoutParams.layoutFontSize.val);\r\n\r\n    // Among other things, ensures we use SpecialOSK styling for special key text.\r\n    // It's set on the key-span, not on the button.\r\n    //\r\n    // Also helps ensure that the stub's font-family name is used for keys, should\r\n    // that mismatch the font-family name specified within the keyboard's touch layout.\r\n\r\n    let originalSize = this._fontSize;\r\n    if(!originalSize.absolute) {\r\n      originalSize = emScale.scaledBy(originalSize.val);\r\n    }\r\n\r\n    const style = {\r\n      fontFamily: this._fontFamily,\r\n      fontSize: originalSize.styleString,\r\n      height: layoutParams.keyHeight\r\n    }\r\n\r\n    let metrics = getTextMetrics(text, emScale.scaledBy(scale).val, style);\r\n\r\n    const MAX_X_PROPORTION = 0.90;\r\n    const MAX_Y_PROPORTION = 0.90;\r\n    const X_PADDING = 2;\r\n\r\n    var fontHeight: number;\r\n    if(metrics.fontBoundingBoxAscent) {\r\n      fontHeight = metrics.fontBoundingBoxAscent + metrics.fontBoundingBoxDescent;\r\n    }\r\n\r\n    // Don't add extra padding to height - multiplying with MAX_Y_PROPORTION already gives\r\n    // padding\r\n    let textHeight = fontHeight ?? 0;\r\n    let xProportion = (keyWidth * MAX_X_PROPORTION) / (metrics.width + X_PADDING); // How much of the key does the text want to take?\r\n    let yProportion = textHeight && keyHeight ? (keyHeight * MAX_Y_PROPORTION) / textHeight : undefined;\r\n\r\n    var proportion: number = xProportion;\r\n    if(yProportion && yProportion < xProportion) {\r\n      proportion = yProportion;\r\n    }\r\n\r\n    // Never upscale keys past the default * the specified scale - only downscale them.\r\n    // Proportion < 1:  ratio of key width to (padded [loosely speaking]) text width\r\n    //                  maxProportion determines the 'padding' involved.\r\n    return ParsedLengthStyle.forScalar(scale * Math.min(proportion, 1));\r\n  }\r\n\r\n  public get keyText(): string {\r\n    const spec = this.spec;\r\n    const DEFAULT_BLANK = '\\xa0';\r\n\r\n    // Add OSK key labels\r\n    let keyText = null;\r\n    if(spec['text'] == null || spec['text'] == '') {\r\n      // U_ codes are handled during keyboard pre-processing.\r\n      keyText = DEFAULT_BLANK;\r\n    } else {\r\n      keyText=spec['text'];\r\n\r\n      // Unique layer-based transformation:  SHIFT-TAB uses a different glyph.\r\n      if(keyText == '*Tab*' && this.layer == 'shift') {\r\n        keyText = '*TabLeft*';\r\n      }\r\n    }\r\n\r\n    return keyText;\r\n  }\r\n\r\n  // Produces a HTMLSpanElement with the key's actual text.\r\n  protected generateKeyText(vkbd: VisualKeyboard): HTMLSpanElement {\r\n    const spec = this.spec;\r\n\r\n    let t = document.createElement('span'), ts=t.style;\r\n    t.className='kmw-key-text';\r\n\r\n    // Add OSK key labels\r\n    let keyText = this.keyText;\r\n    let specialText = renameSpecialKey(keyText, vkbd);\r\n    if(specialText != keyText) {\r\n      // The keyboard wants to use the code for a special glyph defined by the SpecialOSK font.\r\n      keyText = specialText;\r\n      spec['font'] = \"SpecialOSK\";\r\n    }\r\n\r\n    //Override font spec if set for this key in the layout\r\n    if(typeof spec['font'] == 'string' && spec['font'] != '') {\r\n      ts.fontFamily=spec['font'];\r\n    }\r\n\r\n    if(typeof spec['fontsize'] == 'string' && spec['fontsize'] != '') {\r\n      ts.fontSize=spec['fontsize'];\r\n    }\r\n\r\n    // For some reason, fonts will sometimes 'bug out' for the embedded iOS page if we\r\n    // instead assign fontFamily to the existing style 'ts'.  (Occurs in iOS 12.)\r\n    let styleSpec: {fontFamily?: string, fontSize: string} = {fontSize: ts.fontSize};\r\n\r\n    if(ts.fontFamily) {\r\n      styleSpec.fontFamily = ts.fontFamily;\r\n    } else {\r\n      styleSpec.fontFamily = vkbd.fontFamily; // Helps with style sheet calculations.\r\n    }\r\n\r\n    // Check the key's display width - does the key visualize well?\r\n    if(vkbd.isRTL) {\r\n      // Add the RTL marker to ensure it displays properly.\r\n      keyText = '\\u200f' + keyText;\r\n    }\r\n\r\n    // Finalize the key's text.\r\n    t.innerText = keyText;\r\n\r\n    return t;\r\n  }\r\n\r\n  public resetFontPrecalc() {\r\n    this._fontFamily = undefined;\r\n    this._fontSize = undefined;\r\n    this.label.style.fontSize = '';\r\n  }\r\n\r\n  /**\r\n   * Any style-caching behavior needed for use in layout manipulation should be\r\n   * computed within this method, not within refreshLayout.  This is to prevent\r\n   * unnecessary layout-reflow.\r\n   * @param layoutParams\r\n   * @returns\r\n   */\r\n  public detectStyles(layoutParams: KeyLayoutParams): void {\r\n    // Avoid doing any font-size related calculations if there's no text to display.\r\n    if(this.spec.sp == ButtonClasses.spacer || this.spec.sp == ButtonClasses.blank) {\r\n      return;\r\n    }\r\n\r\n    // Attempt to detect static but key-specific style properties if they haven't yet\r\n    // been detected.\r\n    if(this._fontFamily === undefined) {\r\n      const lblStyle = getComputedStyle(this.label);\r\n\r\n      // Abort if the element is not currently in the DOM; we can't get any info this way.\r\n      if(!lblStyle.fontFamily) {\r\n        return;\r\n      }\r\n      this._fontFamily = lblStyle.fontFamily;\r\n\r\n      // Detect any difference in base (em) font size and that which is computed for the key itself.\r\n      const computedFontSize = new ParsedLengthStyle(lblStyle.fontSize);\r\n      const layoutFontSize = layoutParams.layoutFontSize;\r\n      if(layoutFontSize.absolute) {\r\n        // rather than just straight-up taking .layoutFontSize\r\n        this._fontSize = computedFontSize;\r\n      } else {\r\n        const baseEmFontSize = layoutParams.baseEmFontSize;\r\n        const baseFontSize = layoutFontSize.scaledBy(baseEmFontSize.val);\r\n        const localFontScaling = computedFontSize.val / baseFontSize.val;\r\n        this._fontSize = ParsedLengthStyle.forScalar(localFontScaling);\r\n      }\r\n    }\r\n  }\r\n\r\n  // Avoid any references to getComputedStyle, offset_, or other layout-reflow\r\n  // dependent values.  Refer to https://gist.github.com/paulirish/5d52fb081b3570c81e3a.\r\n  public refreshLayout(layoutParams: KeyLayoutParams) {\r\n    // space bar may not define the text span!\r\n    if(this.label) {\r\n      if(!this.label.classList.contains('kmw-spacebar-caption')) {\r\n        // Do not use `this.keyText` - it holds *___* codes for special keys, not the actual glyph!\r\n        const keyCapText = this.label.textContent;\r\n        const fontSize = this.getIdealFontSize(keyCapText, layoutParams);\r\n        this.label.style.fontSize = fontSize.styleString;\r\n      } else {\r\n        // Spacebar text, on the other hand, is available via this.keyText.\r\n        // Using this field helps prevent layout reflow during updates.\r\n        const fontSize = this.getIdealFontSize(this.keyText, layoutParams);\r\n\r\n        // Since the kmw-spacebar-caption version uses !important, we must specify\r\n        // it directly on the element too; otherwise, scaling gets ignored.\r\n        this.label.style.setProperty(\"font-size\", fontSize.styleString, \"important\");\r\n      }\r\n    }\r\n  }\r\n}\r\n",
    "import { ActiveSubKey } from 'keyman/engine/keyboard';\r\nimport OSKKey from \"./keyboard-layout/oskKey.js\";\r\n\r\nexport class KeyData {\r\n  ['key']: OSKKey;\r\n  ['keyId']: string;\r\n  ['subKeys']?: ActiveSubKey[];\r\n\r\n  constructor(keyData: OSKKey, keyId: string) {\r\n    this['key'] = keyData;\r\n    this['keyId'] = keyId;\r\n  }\r\n}\r\n\r\nexport type KeyElement = HTMLDivElement & KeyData;\r\n\r\n// Many thanks to https://www.typescriptlang.org/docs/handbook/advanced-types.html for this.\r\nexport function link(elem: HTMLDivElement, data: KeyData): KeyElement {\r\n  let e = <KeyElement> elem;\r\n\r\n  // Merges all properties and methods of KeyData onto the underlying HTMLDivElement, creating a merged class.\r\n  for(let id in data) {\r\n    if(!e.hasOwnProperty(id)) {\r\n      (<any>e)[id] = (<any>data)[id];\r\n    }\r\n  }\r\n\r\n  return e;\r\n}\r\n\r\nexport function isKey(elem: Node): boolean {\r\n  return elem && ('key' in elem) && ((<any> elem['key']) instanceof OSKKey);\r\n}\r\n\r\nexport function getKeyFrom(elem: Node): KeyElement {\r\n  if(isKey(elem)) {\r\n    return <KeyElement> elem;\r\n  } else {\r\n    return null;\r\n  }\r\n}",
    "import { ActiveKey, Codes } from 'keyman/engine/keyboard';\r\n\r\nimport OSKKey, { KeyLayoutParams, renameSpecialKey } from './oskKey.js';\r\nimport { KeyData, KeyElement, link } from '../keyElement.js';\r\nimport OSKRow from './oskRow.js';\r\nimport VisualKeyboard from '../visualKeyboard.js';\r\nimport { ParsedLengthStyle } from '../lengthStyle.js';\r\nimport { GesturePreviewHost } from './gesturePreviewHost.js';\r\n\r\nexport default class OSKBaseKey extends OSKKey {\r\n  private capLabel: HTMLDivElement;\r\n  private previewHost: GesturePreviewHost;\r\n  private preview: HTMLDivElement;\r\n\r\n  public readonly row: OSKRow;\r\n\r\n  constructor(spec: ActiveKey, layer: string, row: OSKRow) {\r\n    super(spec, layer);\r\n    this.row = row;\r\n  }\r\n\r\n  getId(): string {\r\n    // Define each key element id by layer id and key id (duplicate possible for SHIFT - does it matter?)\r\n    return this.spec.elementID;\r\n  }\r\n\r\n  getCoreId(): string {\r\n    return this.spec.coreID;\r\n  }\r\n\r\n  getBaseId(): string {\r\n    return this.spec.baseKeyID;\r\n  }\r\n\r\n  // Produces a small reference label for the corresponding physical key on a US keyboard.\r\n  private generateKeyCapLabel(): HTMLDivElement {\r\n    // Create the default key cap labels (letter keys, etc.)\r\n    var x = Codes.keyCodes[this.spec.baseKeyID];\r\n    switch(x) {\r\n      // Converts the keyman key id code for common symbol keys into its representative ASCII code.\r\n      // K_COLON -> K_BKQUOTE\r\n      case 186: x=59; break;\r\n      case 187: x=61; break;\r\n      case 188: x=44; break;\r\n      case 189: x=45; break;\r\n      case 190: x=46; break;\r\n      case 191: x=47; break;\r\n      case 192: x=96; break;\r\n      // K_LBRKT -> K_QUOTE\r\n      case 219: x=91; break;\r\n      case 220: x=92; break;\r\n      case 221: x=93; break;\r\n      case 222: x=39; break;\r\n      default:\r\n        // No other symbol character represents a base key on the standard QWERTY English layout.\r\n        if(x < 48 || x > 90) {\r\n          x=0;\r\n        }\r\n    }\r\n\r\n    let q = document.createElement('div');\r\n    q.className='kmw-key-label';\r\n    if(x > 0) {\r\n      q.innerText=String.fromCharCode(x);\r\n    } else {\r\n      // Keyman-only virtual keys have no corresponding physical key.\r\n      // So, no text for the key-cap.\r\n    }\r\n    return q;\r\n  }\r\n\r\n  private processSubkeys(btn: KeyElement, vkbd: VisualKeyboard) {\r\n    // Add reference to subkey array if defined\r\n    var bsn: number, bsk=btn['subKeys'] = this.spec['sk'];\r\n    // Transform any special keys into their PUA representations.\r\n    for(bsn=0; bsn<bsk.length; bsn++) {\r\n      if(bsk[bsn]['sp'] == 1 || bsk[bsn]['sp'] == 2) {\r\n        var oldText=bsk[bsn]['text'];\r\n        bsk[bsn]['text']=renameSpecialKey(oldText, vkbd);\r\n      }\r\n\r\n      // If a subkey doesn't have a defined layer property, copy it from the base key's layer by default.\r\n      if(!bsk[bsn].layer) {\r\n        bsk[bsn].layer = btn.key.layer\r\n      }\r\n    }\r\n  }\r\n\r\n  construct(vkbd: VisualKeyboard): HTMLDivElement {\r\n    let spec = this.spec;\r\n\r\n    let kDiv = document.createElement('div');\r\n    kDiv.className='kmw-key-square';\r\n\r\n    let btnEle = document.createElement('div');\r\n    let btn = this.btn = link(btnEle, new KeyData(this, spec['id']));\r\n\r\n    // Set button class\r\n    this.setButtonClass();\r\n\r\n    // Add the (US English) keycap label for layouts requesting display of underlying keys\r\n    let keyCap = this.capLabel = this.generateKeyCapLabel();\r\n    btn.appendChild(keyCap);\r\n\r\n    // Define each key element id by layer id and key id (duplicate possible for SHIFT - does it matter?)\r\n    btn.id=this.getId();\r\n\r\n    // Make sure the key text is the element's first child - processSubkeys()\r\n    // will add an extra element if subkeys exist, which can interfere with\r\n    // keyboard/language name display on the space bar!\r\n    btn.appendChild(this.label = this.generateKeyText(vkbd));\r\n\r\n    // Handle subkey-related tasks.\r\n    if(typeof(spec['sk']) != 'undefined' && spec['sk'] != null) {\r\n      this.processSubkeys(btn, vkbd);\r\n    } else {\r\n      btn['subKeys']=null;\r\n    }\r\n\r\n    // If a subkey array is defined, add an icon\r\n    const skIcon = this.generateHint(vkbd);\r\n    btn.appendChild(skIcon);\r\n\r\n    // Add text to button and button to placeholder div\r\n    kDiv.appendChild(btn);\r\n\r\n    this.preview = document.createElement('div');\r\n    this.preview.style.display = 'none';\r\n    btn.appendChild(this.preview);\r\n\r\n    // The 'return value' of this process.\r\n    return this.square = kDiv;\r\n  }\r\n\r\n  public generateHint(vkbd: VisualKeyboard): HTMLDivElement {\r\n    // If a hint is defined, add an icon\r\n    const skIcon = document.createElement('div');\r\n    // Ensure that we use the keyboard's text font for hints.\r\n    skIcon.className='kmw-key-popup-icon';\r\n\r\n    const hintSpec = this.spec.hintSrc;\r\n    if(!hintSpec) {\r\n      return skIcon;\r\n    }\r\n\r\n    if(hintSpec.font && hintSpec.font != 'SpecialOSK') {\r\n      skIcon.style.fontFamily = hintSpec.font;\r\n    } else {\r\n      skIcon.classList.add('kmw-key-text');\r\n    }\r\n\r\n    if(hintSpec.fontsize) {\r\n      const parsed = new ParsedLengthStyle(hintSpec.fontsize);\r\n      // From kmwosk.css: .kmw-key-popup-icon { font-size: 0.5em }\r\n      // The spec says to overwrite that, but we still want half-size compared to the text\r\n      // as a key-cap.\r\n      skIcon.style.fontSize = parsed.scaledBy(0.5).styleString;\r\n    }\r\n\r\n    // If the base key itself is the source of the hint text, we use `hint` directly.\r\n    // Otherwise, we present the source subkey's key cap as the hint.\r\n    const baseText = hintSpec == this.spec ? this.spec.hint : hintSpec.text\r\n    const text = renameSpecialKey(baseText, vkbd);\r\n    if(text == '\\u2022') {\r\n      // The original, pre-17.0 longpress dot-hint used bold-face styling.\r\n      skIcon.style.fontWeight='bold';\r\n    }\r\n\r\n    if(baseText != text) {\r\n      // if the text is from a *Special* shorthand, always use our special-key OSK font.\r\n      skIcon.style.fontFamily = 'SpecialOSK';\r\n    }\r\n\r\n    skIcon.textContent = text;\r\n\r\n    return skIcon;\r\n  }\r\n\r\n  public setPreview(previewHost: GesturePreviewHost) {\r\n    const oldPreview = this.preview;\r\n\r\n    if(previewHost) {\r\n      this.previewHost = previewHost;\r\n      this.preview = this.previewHost.element;\r\n    } else {\r\n      this.previewHost = null;\r\n      this.preview = document.createElement('div');\r\n      this.preview.style.display = 'none';\r\n    }\r\n\r\n    previewHost?.setCancellationHandler(() => {\r\n      this.setPreview(null);\r\n    });\r\n\r\n    this.btn.replaceChild(this.preview, oldPreview);\r\n  }\r\n\r\n  public refreshLayout(layoutParams: KeyLayoutParams) {\r\n    super.refreshLayout(layoutParams);  // key labels in particular.\r\n\r\n    const emFont = layoutParams.baseEmFontSize;\r\n    // Rescale keycap labels on small phones\r\n    if(emFont.val < 12) {\r\n      this.capLabel.style.fontSize = '6px';\r\n    } else {\r\n      // The default value set within kmwosk.css.\r\n      this.capLabel.style.fontSize = ParsedLengthStyle.forScalar(0.5).styleString;\r\n    }\r\n  }\r\n\r\n  public get displaysKeyCap(): boolean {\r\n    return this.capLabel && this.capLabel.style.display == 'block';\r\n  }\r\n\r\n  public set displaysKeyCap(flag: boolean) {\r\n    if(!this.capLabel) {\r\n      throw new Error(\"Key element not yet constructed; cannot display key cap\");\r\n    }\r\n    this.capLabel.style.display = flag ? 'block' : 'none';\r\n  }\r\n}\r\n",
    "import { ActiveKey, ActiveLayer, ActiveRow } from 'keyman/engine/keyboard';\r\n\r\nimport OSKBaseKey from './oskBaseKey.js';\r\nimport { ParsedLengthStyle } from '../lengthStyle.js';\r\nimport VisualKeyboard from '../visualKeyboard.js';\r\nimport OSKKey, { KeyLayoutParams } from './oskKey.js';\r\nimport { LayerLayoutParams } from './oskLayer.js';\r\n\r\n/*\r\n  The total proportion of key-square height used as key-button padding.\r\n  The 'padding' is visible to users as the vertical space between keys\r\n  and exists both in \"fixed\" and \"absolute\" sizing modes.\r\n*/\r\nexport const KEY_BTN_Y_PAD_RATIO = 0.15;\r\n\r\n/**\r\n * Models one row of one layer of the OSK (`VisualKeyboard`) for a keyboard.\r\n */\r\nexport default class OSKRow {\r\n  public readonly element: HTMLDivElement;\r\n  public readonly keys: OSKBaseKey[];\r\n  public readonly heightFraction: number;\r\n  public readonly spec: ActiveRow;\r\n\r\n  public constructor(vkbd: VisualKeyboard,\r\n                      layerSpec: ActiveLayer,\r\n                      rowSpec: ActiveRow) {\r\n    const rDiv = this.element = document.createElement('div');\r\n    rDiv.className='kmw-key-row';\r\n\r\n    // Calculate default row height\r\n    this.heightFraction = 1 / layerSpec.row.length;\r\n\r\n    // Apply defaults, setting the width and other undefined properties for each key\r\n    const keys=rowSpec.key;\r\n    this.spec = rowSpec;\r\n    this.keys = [];\r\n\r\n    // Calculate actual key widths by multiplying by the OSK's width and rounding appropriately,\r\n    // adjusting the width of the last key to make the total exactly 100%.\r\n    // Overwrite the previously-computed percent.\r\n    // NB: the 'percent' suffix is historical, units are percent on desktop devices, but pixels on touch devices\r\n    // All key widths and paddings are rounded for uniformity\r\n    for(let j=0; j<keys.length; j++) {\r\n      const key = keys[j];\r\n      var keyObj = new OSKBaseKey(key as ActiveKey, layerSpec.id, this);\r\n\r\n      var element = keyObj.construct(vkbd);\r\n      this.keys.push(keyObj);\r\n\r\n      rDiv.appendChild(element);\r\n    }\r\n  }\r\n\r\n  public get displaysKeyCaps(): boolean {\r\n    if(this.keys.length > 0) {\r\n      return this.keys[0].displaysKeyCap;\r\n    } else {\r\n      return undefined;\r\n    }\r\n  }\r\n\r\n  public set displaysKeyCaps(flag: boolean) {\r\n    for(const key of this.keys) {\r\n      key.displaysKeyCap = flag;\r\n    }\r\n  }\r\n\r\n  // Avoid any references to getComputedStyle, offset_, or other layout-reflow\r\n  // dependent values.  Refer to https://gist.github.com/paulirish/5d52fb081b3570c81e3a.\r\n  public refreshLayout(layoutParams: LayerLayoutParams) {\r\n    const rs = this.element.style;\r\n\r\n    const rowHeight = layoutParams.heightStyle.scaledBy(this.heightFraction);\r\n    rs.maxHeight=rs.lineHeight=rs.height=rowHeight.styleString;\r\n\r\n    const keyHeightBase = layoutParams.heightStyle.absolute ? rowHeight : ParsedLengthStyle.forScalar(1);\r\n    const padTop = keyHeightBase.scaledBy(KEY_BTN_Y_PAD_RATIO / 2);\r\n    const keyHeight = keyHeightBase.scaledBy(1 - KEY_BTN_Y_PAD_RATIO);\r\n\r\n    // Update all key-square layouts.\r\n    this.keys.forEach((key) => {\r\n      const keySquare  = key.square;\r\n      const keyElement = key.btn;\r\n\r\n      // Set the kmw-key-square position\r\n      const kss = keySquare.style;\r\n      kss.height=kss.minHeight=keyHeightBase.styleString;\r\n\r\n      const kes = keyElement.style;\r\n      kes.top = padTop.styleString;\r\n      kes.height=kes.lineHeight=kes.minHeight=keyHeight.styleString;\r\n    });\r\n  }\r\n\r\n  private buildKeyLayout(layoutParams: LayerLayoutParams, key: OSKKey) {\r\n    // Calculate changes to be made...\r\n    const keyWidth = layoutParams.widthStyle.scaledBy(key.spec.proportionalWidth);\r\n\r\n    // We maintain key-btn padding within the key-square - the latter `scaledBy`\r\n    // adjusts for that, providing the final key-btn height.\r\n    const keyHeight = layoutParams.heightStyle.scaledBy(this.heightFraction).scaledBy(1 - KEY_BTN_Y_PAD_RATIO);\r\n\r\n    const keyStyle: KeyLayoutParams = {\r\n      keyWidth:  keyWidth.val  * (keyWidth.absolute ? 1 : layoutParams.keyboardWidth),\r\n      keyHeight: keyHeight.val * (keyHeight.absolute ? 1 : layoutParams.keyboardHeight),\r\n      baseEmFontSize: layoutParams.baseEmFontSize,\r\n      layoutFontSize: layoutParams.layoutFontSize\r\n    };\r\n\r\n    return keyStyle;\r\n  }\r\n\r\n  /**\r\n   * Any style-caching behavior needed for use in layout manipulation should be\r\n   * computed within this method, not within refreshLayout.  This is to prevent\r\n   * unnecessary layout-reflow.\r\n   * @param layoutParams\r\n   * @returns\r\n   */\r\n  public detectStyles(layoutParams: LayerLayoutParams) {\r\n    this.keys.forEach((key) => {\r\n      key.detectStyles(this.buildKeyLayout(layoutParams, key));\r\n    });\r\n  }\r\n\r\n  // Avoid any references to getComputedStyle, offset_, or other layout-reflow\r\n  // dependent values.  Refer to https://gist.github.com/paulirish/5d52fb081b3570c81e3a.\r\n  public refreshKeyLayouts(layoutParams: LayerLayoutParams) {\r\n    this.keys.forEach((key) => {\r\n      // Calculate changes to be made...\r\n      const keyElement = key.btn;\r\n\r\n      const widthStyle = layoutParams.widthStyle;\r\n      const heightStyle = layoutParams.heightStyle;\r\n\r\n      const keyWidth = widthStyle.scaledBy(key.spec.proportionalWidth);\r\n      const keyPad =   widthStyle.scaledBy(key.spec.proportionalPad);\r\n\r\n      // We maintain key-btn padding within the key-square - the latter `scaledBy`\r\n      // adjusts for that, providing the final key-btn height.\r\n      const keyHeight = heightStyle.scaledBy(this.heightFraction).scaledBy(1 - KEY_BTN_Y_PAD_RATIO);\r\n\r\n      // Match the row height (if fixed-height) or use full row height (if percent-based)\r\n      const styleHeight = heightStyle.absolute ? keyHeight.styleString : '100%';\r\n\r\n      const keyStyle: KeyLayoutParams = this.buildKeyLayout(layoutParams, key);\r\n      keyElement.key?.refreshLayout(keyStyle);\r\n\r\n      key.square.style.width = keyWidth.styleString;\r\n      key.square.style.marginLeft = keyPad.styleString;\r\n\r\n      key.btn.style.width = widthStyle.absolute ? keyWidth.styleString : '100%';\r\n      key.square.style.height = styleHeight;\r\n    });\r\n  }\r\n}",
    "import { ActiveLayer, ActiveLayout } from 'keyman/engine/keyboard';\r\n\r\nimport OSKRow from './oskRow.js';\r\nimport OSKBaseKey from './oskBaseKey.js';\r\nimport VisualKeyboard from '../visualKeyboard.js';\r\nimport { ParsedLengthStyle } from '../lengthStyle.js';\r\n\r\nexport interface LayerLayoutParams {\r\n  keyboardWidth: number;\r\n  keyboardHeight: number;\r\n  widthStyle: ParsedLengthStyle;\r\n  heightStyle: ParsedLengthStyle;\r\n  baseEmFontSize: ParsedLengthStyle;\r\n  layoutFontSize: ParsedLengthStyle;\r\n  spacebarText: string;\r\n}\r\nexport default class OSKLayer {\r\n  public readonly element: HTMLDivElement;\r\n  public readonly rows: OSKRow[];\r\n  public readonly spec: ActiveLayer;\r\n  public readonly nextlayer: string;\r\n\r\n  public readonly globeKey:    OSKBaseKey;\r\n  public readonly spaceBarKey: OSKBaseKey;\r\n  public readonly hideKey:     OSKBaseKey;\r\n  public readonly capsKey:     OSKBaseKey;\r\n  public readonly numKey:      OSKBaseKey;\r\n  public readonly scrollKey:   OSKBaseKey;\r\n\r\n  private _rowHeight: number;\r\n\r\n  public get rowHeight(): number {\r\n    return this._rowHeight;\r\n  }\r\n\r\n  public get id(): string {\r\n    return this.spec.id;\r\n  }\r\n\r\n  public constructor(vkbd: VisualKeyboard,\r\n                      layout: ActiveLayout,\r\n                      layer: ActiveLayer) {\r\n    this.spec = layer;\r\n\r\n    const gDiv = this.element = document.createElement('div');\r\n    const gs=gDiv.style;\r\n    gDiv.className='kmw-key-layer';\r\n\r\n    var nRows=layer['row'].length;\r\n    if(nRows > 4 && vkbd.device.formFactor == 'phone') {\r\n      gDiv.className = gDiv.className + ' kmw-5rows';\r\n    }\r\n\r\n    // Set font for layer if defined in layout\r\n    gs.fontFamily = 'font' in layout ? layout['font'] : '';\r\n\r\n    this.nextlayer = layer.id;\r\n    //@ts-ignore\r\n    gDiv['layer'] = layer.id;\r\n    // @ts-ignore\r\n    if(typeof layer['nextlayer'] == 'string') {\r\n      // The gDiv['nextLayer'] is no longer referenced in KMW 15.0+, but is\r\n      // maintained for partial back-compat in case any site devs actually\r\n      // relied on its value from prior versions.\r\n      //\r\n      // We won't pay attention to any mutations to the gDiv copy, though.\r\n      // @ts-ignore\r\n      gDiv['nextLayer'] = this.nextlayer = layer['nextlayer'];\r\n    }\r\n\r\n    // Create a DIV for each row of the group\r\n    let rows=layer['row'];\r\n    this.rows = [];\r\n\r\n    for(let i=0; i<rows.length; i++) {\r\n      let rowObj = new OSKRow(vkbd, layer, rows[i]);\r\n      rowObj.displaysKeyCaps = layout[\"displayUnderlying\"];\r\n      gDiv.appendChild(rowObj.element);\r\n      this.rows.push(rowObj);\r\n    }\r\n\r\n    // Identify and save references to the language key, hide keyboard key, and space bar\r\n    if(vkbd.device.touchable) {\r\n      this.globeKey  = this.findKey('K_LOPT');\r\n      this.hideKey   = this.findKey('K_ROPT');\r\n    }\r\n\r\n    // Define for both desktop and touchable OSK\r\n    this.spaceBarKey = this.findKey('K_SPACE');\r\n    this.capsKey     = this.findKey('K_CAPS');\r\n    this.numKey      = this.findKey('K_NUMLOCK');\r\n    this.scrollKey   = this.findKey('K_SCROLL');\r\n\r\n    if(this.spaceBarKey) {\r\n      const spacebarLabel = this.spaceBarKey.label;\r\n      let tButton = this.spaceBarKey.btn;\r\n\r\n      if (typeof (tButton.className) == 'undefined' || tButton.className == '') {\r\n        tButton.className = 'kmw-spacebar';\r\n      } else if (tButton.className.indexOf('kmw-spacebar') == -1) {\r\n        tButton.className += ' kmw-spacebar';\r\n      }\r\n\r\n      if (spacebarLabel.className != 'kmw-spacebar-caption') {\r\n        spacebarLabel.className = 'kmw-spacebar-caption';\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Find the OSKBaseKey representing the specified\r\n   *  key ID for the currently visible OSK layer\r\n   *\r\n   *  @param    {string}  keyId   key identifier\r\n   *  @return   {Object}          Reference to key\r\n   */\r\n  private findKey(keyId: string): OSKBaseKey {\r\n    for(const row of this.rows) {\r\n      for(const key of row.keys) {\r\n        if(key.getBaseId() == keyId) {\r\n          return key;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Indicate the current language and keyboard on the space bar\r\n   **/\r\n  showLanguage(displayName: string) {\r\n    if(!this.spaceBarKey) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const spacebarLabel = this.spaceBarKey.label;\r\n\r\n      // The key can read the text from here during the display update without\r\n      // triggering a reflow.\r\n      this.spaceBarKey.spec.text = displayName;\r\n\r\n      // It sounds redundant, but this dramatically cuts down on browser DOM processing;\r\n      // but sometimes innerText is reported empty when it actually isn't, so set it\r\n      // anyway in that case (Safari, iOS 14.4)\r\n      if (spacebarLabel.innerText != displayName || displayName == '') {\r\n        spacebarLabel.innerText = displayName;\r\n      }\r\n    }\r\n    catch (ex) { }\r\n  }\r\n\r\n  public refreshLayout(layoutParams: LayerLayoutParams) {\r\n    // Do all layout-reflow / style-refresh dependent precalculations here,\r\n    // before we perform any DOM manipulation.\r\n    this.rows.forEach((row) => row.detectStyles(layoutParams));\r\n\r\n    // Hereafter, avoid any references to getComputedStyle, offset_, or other\r\n    // layout-reflow dependent values.  Refer to\r\n    // https://gist.github.com/paulirish/5d52fb081b3570c81e3a.\r\n\r\n    // Check the heights of each row, in case different layers have different row counts.\r\n    const layerHeight = layoutParams.keyboardHeight;\r\n    const nRows = this.rows.length;\r\n    const rowHeight = this._rowHeight = Math.floor(layerHeight/(nRows == 0 ? 1 : nRows));\r\n\r\n    const usesFixedWidthScaling = layoutParams.widthStyle.absolute;\r\n    if(usesFixedWidthScaling) {\r\n      this.element.style.height=(layerHeight)+'px';\r\n    }\r\n\r\n    this.showLanguage(layoutParams.spacebarText);\r\n\r\n    // Update row layout properties\r\n    for(let nRow=0; nRow<nRows; nRow++) {\r\n      const oskRow = this.rows[nRow];\r\n      const bottom = (nRows-nRow-1)*rowHeight+1;\r\n\r\n      if(usesFixedWidthScaling) {\r\n        // Calculate the exact vertical coordinate of the row's center.\r\n        this.spec.row[nRow].proportionalY = ((layerHeight - bottom) - rowHeight/2) / layerHeight;\r\n      }\r\n\r\n      oskRow.refreshLayout(layoutParams);\r\n      if(nRow == nRows-1) {\r\n        oskRow.element.style.bottom = '1px';\r\n      }\r\n    }\r\n\r\n    for(const row of this.rows) {\r\n      row.refreshKeyLayouts(layoutParams);\r\n    }\r\n  }\r\n}\r\n",
    "import { type DeviceSpec, Keyboard, ActiveLayout, ButtonClasses } from 'keyman/engine/keyboard';\r\n\r\nimport { InputSample } from '@keymanapp/gesture-recognizer';\r\n\r\nimport { KeyElement } from '../keyElement.js';\r\nimport OSKLayer, { LayerLayoutParams } from './oskLayer.js';\r\nimport VisualKeyboard from '../visualKeyboard.js';\r\nimport OSKBaseKey from './oskBaseKey.js';\r\n\r\nconst NEAREST_KEY_TOUCH_MARGIN_PERCENT = 0.06;\r\n\r\nexport default class OSKLayerGroup {\r\n  public readonly element: HTMLDivElement;\r\n  private readonly _layers: {[layerID: string]: OSKLayer} = {};\r\n  public readonly spec: ActiveLayout;\r\n\r\n  // Currently stored to facilitate lazy layer construction.\r\n  private vkbd: VisualKeyboard;\r\n\r\n  // Exist as local copies of the VisualKeyboard values, updated via refreshLayout.\r\n  private computedWidth: number;\r\n  private computedHeight: number;\r\n\r\n  private _activeLayerId: string = 'default';\r\n  private _heightPadding: number;\r\n\r\n  public constructor(vkbd: VisualKeyboard, keyboard: Keyboard, formFactor: DeviceSpec.FormFactor) {\r\n    const layout = keyboard.layout(formFactor);\r\n    this.spec = layout;\r\n    this.vkbd = vkbd;\r\n\r\n    const lDiv = this.element = document.createElement('div');\r\n    const ls=lDiv.style;\r\n\r\n    // Set OSK box default style\r\n    lDiv.className='kmw-key-layer-group';\r\n\r\n    // Return empty DIV if no layout defined\r\n    if(layout == null) {\r\n      return;\r\n    }\r\n\r\n    // Set default OSK font size (Build 344, KMEW-90)\r\n    let layoutFS = layout['fontsize'];\r\n    if(typeof layoutFS == 'undefined' || layoutFS == null || layoutFS == '') {\r\n      ls.fontSize='1em';\r\n    } else {\r\n      ls.fontSize=layout['fontsize'];\r\n    }\r\n\r\n    ls.width = '100%';\r\n    ls.height = '100%';\r\n\r\n    // Trigger construction of the default layer.\r\n    this.activeLayerId = 'default';\r\n  }\r\n\r\n  private buildLayer(layerId: string) {\r\n    const layout = this.spec;\r\n\r\n    const layerSpec = layout.getLayer(layerId);\r\n    if(!layerSpec) {\r\n      return null;\r\n    }\r\n\r\n    const layer = new OSKLayer(this.vkbd, layout, layerSpec);\r\n    this._layers[layerId] = layer;\r\n\r\n    // Add layer to group\r\n    this.element.appendChild(layer.element);\r\n    return layer;\r\n  }\r\n\r\n  public getLayer(id: string) {\r\n    let layer = this._layers[id];\r\n    if(!layer) {\r\n      layer = this.buildLayer(id);\r\n      if(layer) {\r\n        this._layers[id] = layer;\r\n        layer.element.style.display = 'none';\r\n      }\r\n    }\r\n\r\n    return layer;\r\n  }\r\n\r\n  public get activeLayer(): OSKLayer {\r\n    if(!this.activeLayerId) {\r\n      return null;\r\n    }\r\n\r\n    return this._layers[this.activeLayerId];\r\n  }\r\n\r\n  public get layers() {\r\n    const layerSpecs = this.spec.layer;\r\n    const layerIds = layerSpecs.map((spec) => spec.id);\r\n\r\n    for(const id of layerIds) {\r\n      this.buildLayer(id);\r\n    }\r\n\r\n    return this._layers;\r\n  }\r\n\r\n  public get activeLayerId(): string {\r\n    return this._activeLayerId;\r\n  }\r\n\r\n  public set activeLayerId(id: string) {\r\n    this._activeLayerId = id;\r\n\r\n    // Trigger construction of the layer if it does not already exist.\r\n    this.getLayer(id);\r\n\r\n    for (let key of Object.keys(this._layers)) {\r\n      const layer = this._layers[key];\r\n      const layerElement = layer.element;\r\n      if (layer.id == id) {\r\n        layerElement.style.display = 'block';\r\n      } else {\r\n        layerElement.style.display = 'none';\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * The core function referenced by the gesture engine for determining the key that\r\n   * best matches the state of contact points and ongoing gestures.\r\n   *\r\n   * Calls to this function may temporarily change which layer is set for display,\r\n   * as layout reflows are necessary for lookups in layers not currently set active.\r\n   * Such changes layer will be reverted once the JS microtask queue regains control;\r\n   * this delay is to prevent costly layout thrashing effects.\r\n   * @param coord\r\n   * @returns\r\n   */\r\n  findNearestKey(coord: Omit<InputSample<KeyElement>, 'item'>): KeyElement {\r\n    if(!coord) {\r\n      return null;\r\n    }\r\n    const layerId = coord.stateToken;\r\n    if(!layerId) {\r\n      throw new Error(`Layer id not set for input coordinate`);\r\n    }\r\n\r\n    const layer = this._layers[layerId];\r\n    if(!layer) {\r\n      throw new Error(`Layer id ${layerId} could not be found`);\r\n    }\r\n\r\n    return this.nearestKey(coord, layer);\r\n  }\r\n\r\n  /**\r\n   * Temporarily enables the specified layer for page layout calculations and\r\n   * queues an immediate reversion to the 'true' active layer at the earliest\r\n   * opportunity on the JS microtask queue.\r\n   * @param layer\r\n   */\r\n  public blinkLayer(arg: OSKLayer | string) {\r\n    if(typeof arg === 'string') {\r\n      const layerId = arg;\r\n      arg = this.getLayer(layerId);\r\n      if(!arg) {\r\n        throw new Error(`Layer id ${layerId} could not be found`);\r\n      }\r\n    }\r\n\r\n    const layer = arg as OSKLayer;\r\n\r\n    // Note:  we do NOT manipulate `._activeLayerId` here!  This is designed\r\n    // explicitly to be temporary.\r\n    if(layer.element.style.display != 'block') {\r\n      for(let id in this._layers) {\r\n        if(this._layers[id].element.style.display == 'block') {\r\n          const priorLayer = this._layers[id];\r\n          priorLayer.element.style.display = 'none';\r\n        }\r\n        this._layers[id].element.style.display = 'none';\r\n      }\r\n    }\r\n    layer.element.style.display = 'block';\r\n\r\n    /* As soon as control returns to the JS microtask queue, restore the original layer.\r\n     * We want to avoid doing it sooner in case another lookup occurs before the standard\r\n     * async reflow, as that could trigger expensive \"layout thrashing\" effects.\r\n     *\r\n     * In the case that a gesture-source's path needs to be remapped to a different layer,\r\n     * multiple synchronous calls to this method may occur.  This is a pattern that may\r\n     * result during input layer-remapping used to solve issues like #7173 and possibly\r\n     * also during multitap operations.\r\n     *\r\n     * On \"layout thrashing\": https://webperf.tips/tip/layout-thrashing/\r\n     */\r\n    Promise.resolve().then(() => {\r\n      const trueLayer = this._layers[this._activeLayerId];\r\n      // If either condition holds, we have to trigger a layout reflow; it's the same cost\r\n      // whether one changes or both do.\r\n      if(layer.element.style.display == 'block' || trueLayer.element.style.display != 'block') {\r\n        layer.element.style.display = 'none';\r\n        trueLayer.element.style.display = 'block';\r\n      }\r\n    });\r\n  }\r\n\r\n  private nearestKey(coord: Omit<InputSample<KeyElement>, 'item'>, layer: OSKLayer): KeyElement {\r\n    // If there are no rows, there are no keys; return instantly.\r\n    if(layer.rows.length == 0) {\r\n      return null;\r\n    }\r\n\r\n    // Our pre-processed layout info maps whatever shape the keyboard is in into a unit square.\r\n    // So, we map our coord to find its location within that square.\r\n    const proportionalCoords = {\r\n      x: coord.targetX / this.computedWidth,\r\n      y: coord.targetY / this.computedHeight\r\n    };\r\n\r\n    // If our computed width and/or height are 0, it's best to abort; key distance\r\n    // calculations are not viable.\r\n    if(!isFinite(proportionalCoords.x) || !isFinite(proportionalCoords.y)) {\r\n      return null;\r\n    }\r\n\r\n    // Step 1:  find the nearest row.\r\n    // Rows aren't variable-height - this value is \"one size fits all.\"\r\n\r\n    /*\r\n      If 4 rows, y = .2 x 4 = .8 - still within the row with index 0 (spanning from 0 to .25)\r\n                 y = .6 x 4 = 2.4 - within row with index 2 (third row, spanning .5 to .75)\r\n\r\n      Assumes there is no fine-tuning of the row ranges to be done - each takes a perfect\r\n      fraction of the overall layer height without any padding above or below.\r\n    */\r\n    const rowIndex = Math.max(0, Math.min(layer.rows.length-1, Math.floor(proportionalCoords.y * layer.rows.length)));\r\n    const row = layer.rows[rowIndex];\r\n\r\n    // Assertion:  row no longer `null`.\r\n    // (We already prevented the no-rows available scenario, anyway.)\r\n\r\n    // Step 2: Find minimum distance from any key\r\n    // - If the coord is within a key's square, go ahead and return it.\r\n    let closestKey: OSKBaseKey = null;\r\n    // Is percentage-based!\r\n    let minDistance = Number.MAX_VALUE;\r\n\r\n    for (let key of row.keys) {\r\n      const keySpec = key.spec;\r\n      if(keySpec.sp == ButtonClasses.blank || keySpec.sp == ButtonClasses.spacer) {\r\n        continue;\r\n      }\r\n\r\n      // Max distance from the key's center to consider, horizontally.\r\n      const keyRadius = keySpec.proportionalWidth / 2;\r\n      const distanceFromCenter = Math.abs(proportionalCoords.x - keySpec.proportionalX);\r\n\r\n      // Find the actual key element.\r\n      if(distanceFromCenter - keyRadius <= 0) {\r\n        // As noted above:  if we land within a key's square, match instantly!\r\n        return key.btn;\r\n      } else {\r\n        const distance = distanceFromCenter - keyRadius;\r\n        if(distance < minDistance) {\r\n          minDistance = distance;\r\n          closestKey = key;\r\n        }\r\n      }\r\n    }\r\n\r\n    /*\r\n      Step 3:  If the input coordinate wasn't within any valid key's \"square\",\r\n      determine if the nearest valid key is acceptable - if it's within 60% of\r\n      a standard key's width from the touch location.\r\n\r\n      If the condition is not met, there are no valid keys within this row.\r\n    */\r\n    if (minDistance /* %age-based! */ <= NEAREST_KEY_TOUCH_MARGIN_PERCENT) {\r\n      return closestKey.btn;\r\n    }\r\n\r\n    // Step 4:  no matches => return null.  The caller should be able to handle such cases,\r\n    // anyway.\r\n    return null;\r\n  }\r\n\r\n  public resetPrecalcFontSizes() {\r\n    for(const layer of Object.values(this._layers)) {\r\n      for(const row of layer.rows) {\r\n        for(const key of row.keys) {\r\n          key.resetFontPrecalc();\r\n        }\r\n      }\r\n    }\r\n\r\n    // This method is called whenever all related stylesheets are fully loaded and applied.\r\n    // The actual padding data may not have been available until now.\r\n    this._heightPadding = undefined;\r\n  }\r\n\r\n  public refreshLayout(layoutParams: LayerLayoutParams) {\r\n    if(isNaN(layoutParams.keyboardWidth) || isNaN(layoutParams.keyboardHeight)) {\r\n      // We're not in the DOM yet; we'll refresh properly once that changes.\r\n      // Can be reached if the layerId is changed before the keyboard enters the DOM.\r\n      return;\r\n    }\r\n    // Set layer-group copies of relevant computed-size values; they are used by nearest-key\r\n    // detection.\r\n    this.computedWidth = layoutParams.keyboardWidth;\r\n    this.computedHeight = layoutParams.keyboardHeight;\r\n\r\n    // Assumption:  this styling value will not change once the keyboard and\r\n    // related stylesheets are loaded and applied.\r\n    if(this._heightPadding === undefined) {\r\n      // Should not trigger a new layout reflow; VisualKeyboard should have made no further DOM\r\n      // style changes since the last one.\r\n\r\n      // For touch-based OSK layouts, kmwosk.css may include top & bottom\r\n      // padding on the layer-group element.\r\n      const computedGroupStyle = getComputedStyle(this.element);\r\n\r\n      // parseInt('') => NaN, which is falsy; we want to fallback to zero.\r\n      let pt = parseInt(computedGroupStyle.paddingTop, 10) || 0;\r\n      let pb = parseInt(computedGroupStyle.paddingBottom, 10) || 0;\r\n      this._heightPadding = pt + pb;\r\n    }\r\n\r\n    if(this.activeLayer) {\r\n      this.activeLayer.refreshLayout(layoutParams);\r\n    }\r\n  }\r\n\r\n  public get verticalPadding() {\r\n    return this._heightPadding ?? 0;\r\n  }\r\n}",
    "import OSKBaseKey from '../../../keyboard-layout/oskBaseKey.js';\r\nimport { KeyElement } from '../../../keyElement.js';\r\nimport KeyTipInterface from '../../../keytip.interface.js';\r\nimport VisualKeyboard from '../../../visualKeyboard.js';\r\nimport { GesturePreviewHost } from '../../../keyboard-layout/gesturePreviewHost.js';\r\nimport { ParsedLengthStyle } from '../../../lengthStyle.js';\r\n\r\nconst CSS_PREFIX = 'kmw-';\r\nconst DEFAULT_TIP_ORIENTATION: PhoneKeyTipOrientation = 'top';\r\n\r\nexport type PhoneKeyTipOrientation = 'top' | 'bottom';\r\n\r\nexport default class KeyTip implements KeyTipInterface {\r\n  public readonly element: HTMLDivElement;\r\n  public key: KeyElement;\r\n  public state: boolean = false;\r\n\r\n  private orientation: PhoneKeyTipOrientation = DEFAULT_TIP_ORIENTATION;\r\n\r\n  //  -----\r\n  // |     | <-- tip\r\n  // |  x  | <-- preview\r\n  // |_   _|\r\n  //  |   |\r\n  //  |   |  <-- cap\r\n  //  |___|\r\n\r\n  private readonly cap: HTMLDivElement;\r\n  private readonly tip: HTMLDivElement;\r\n  private previewHost: GesturePreviewHost;\r\n  private preview: HTMLDivElement;\r\n  private readonly vkbd: VisualKeyboard;\r\n\r\n  private readonly constrain: boolean;\r\n  private readonly reorient: (orientation: PhoneKeyTipOrientation) => void;\r\n\r\n  /**\r\n   *\r\n   * @param constrain keep the keytip within the bounds of the overall OSK.\r\n   *                  Will probably be handled via function in a later pass.\r\n   */\r\n  constructor(vkbd: VisualKeyboard, constrain: boolean) {\r\n    this.vkbd = vkbd;\r\n    let tipElement = this.element=document.createElement('div');\r\n    tipElement.className='kmw-keytip';\r\n    tipElement.id = 'kmw-keytip';\r\n\r\n    // The following style is critical, so do not rely on external CSS\r\n    tipElement.style.pointerEvents='none';\r\n    tipElement.style.display='none';\r\n\r\n    tipElement.appendChild(this.tip = document.createElement('div'));\r\n    tipElement.appendChild(this.cap = document.createElement('div'));\r\n    this.tip.appendChild(this.preview = document.createElement('div'));\r\n\r\n    this.tip.className = 'kmw-keytip-tip';\r\n    this.cap.className = 'kmw-keytip-cap';\r\n\r\n    this.constrain = constrain;\r\n\r\n    this.reorient = (orientation: PhoneKeyTipOrientation) => {\r\n      this.orientation = orientation;\r\n      this.show(this.key, this.state, this.previewHost);\r\n    }\r\n  }\r\n\r\n  show(key: KeyElement, on: boolean, previewHost: GesturePreviewHost) {\r\n    const vkbd = this.vkbd;\r\n\r\n    // During quick input sequences - especially during a multitap-modipress - it's possible\r\n    // for a user to request a preview for a key from a layer that is currently active, but\r\n    // currently not visible due to need previously-requested layout calcs for a different layer.\r\n    if(on) {\r\n      // Necessary for `key.offsetParent` and client-rect methods referenced below.\r\n      // Will not unnecessarily force reflow if the layer is already in proper document flow,\r\n      // but otherwise restores it.\r\n      vkbd.layerGroup.blinkLayer(key.key.spec.displayLayer);\r\n    }\r\n\r\n    // Create and display the preview\r\n    // If !key.offsetParent, the OSK is probably hidden.  Either way, it's a half-\r\n    // decent null-guard check.\r\n    if(on && key.offsetParent) {\r\n      // The key element is positioned relative to its key-square, which is,\r\n      // in turn, relative to its row.  Rows take 100% width, so this is sufficient.\r\n      //\r\n      let rowElement = (key.key as OSKBaseKey).row.element;\r\n\r\n      // May need adjustment for borders if ever enabled for the desktop form-factor target.\r\n      let rkey = key.getClientRects()[0], rrow = rowElement.getClientRects()[0];\r\n      let xLeft = rkey.left - rrow.left,\r\n          xWidth = rkey.width,\r\n          xHeight = rkey.height,\r\n          previewFontScale = 1.8;\r\n\r\n      let kts = this.element.style;\r\n\r\n      // Roughly matches how the subkey positioning is set.\r\n      const _Box = vkbd.topContainer as HTMLDivElement;\r\n      const _BoxRect = _Box.getBoundingClientRect();\r\n      const keyRect = key.getBoundingClientRect();\r\n\r\n      let y: number;\r\n      const orientation = this.orientation;\r\n      const distFromTop = keyRect.bottom - _BoxRect.top;\r\n      y = (distFromTop + (orientation == 'top' ? 1 : -1));\r\n      let ySubPixelPadding = y - Math.floor(y);\r\n\r\n      // Canvas dimensions must be set explicitly to prevent clipping\r\n      // This gives us exactly the same number of pixels on left and right\r\n      let canvasWidth = xWidth + Math.ceil(xWidth * 0.3) * 2;\r\n      let canvasHeight = Math.ceil(2.3 * xHeight) + (ySubPixelPadding); //\r\n\r\n      if(orientation == 'bottom') {\r\n        y += canvasHeight - xHeight;\r\n      }\r\n\r\n      kts.top = 'auto';\r\n      const unselectedOrientation = orientation == 'top' ? 'bottom' : 'top';\r\n      this.tip.classList.remove(`${CSS_PREFIX}${unselectedOrientation}`);\r\n      this.tip.classList.add(`${CSS_PREFIX}${orientation}`);\r\n\r\n      kts.bottom = Math.floor(_BoxRect.height - y) + 'px';\r\n      kts.textAlign = 'center';\r\n      kts.overflow = 'visible';\r\n      kts.width = canvasWidth+'px';\r\n      kts.height = canvasHeight+'px';\r\n\r\n      // Some keyboards (such as `balochi_scientific`) do not _package_ a font but\r\n      // specify an extremely common one, such as Arial.  In such cases, .kmw-key-text\r\n      // custom styling doesn't exist, relying on the layer object to simply specify\r\n      // the font-family.\r\n      const layerFontFamily = this.vkbd.currentLayer.element.style.fontFamily;\r\n      const ckts = getComputedStyle(vkbd.element);\r\n      kts.fontFamily = key.key.spec.font || layerFontFamily || ckts.fontFamily;\r\n\r\n      var px=parseInt(ckts.fontSize,10);\r\n      if(px == Number.NaN) {\r\n        px = 0;\r\n      }\r\n\r\n      if(px != 0) {\r\n        let scaleStyle = {\r\n          keyWidth: 1.6 * xWidth,\r\n          keyHeight: 1.6 * xHeight, // as opposed to the canvas height of 2.3 * xHeight.\r\n          baseEmFontSize: vkbd.getKeyEmFontSize(),\r\n          layoutFontSize: new ParsedLengthStyle(vkbd.kbdDiv.style.fontSize)\r\n        };\r\n\r\n        kts.fontSize = key.key.getIdealFontSize(key.key.keyText, scaleStyle, previewFontScale).styleString;\r\n      }\r\n\r\n      // Adjust shape if at edges\r\n      var xOverflow = (canvasWidth - xWidth) / 2;\r\n      if(xLeft < xOverflow) {\r\n        this.cap.style.left = '1px';\r\n        xLeft += xOverflow - 1;\r\n      } else if(xLeft > window.innerWidth - xWidth - xOverflow) {\r\n        this.cap.style.left = (canvasWidth - xWidth - 1) + 'px';\r\n        xLeft -= xOverflow - 1;\r\n      } else {\r\n        this.cap.style.left = xOverflow + 'px';\r\n      }\r\n\r\n      kts.left=(xLeft - xOverflow) + 'px';\r\n\r\n      let cs = getComputedStyle(this.element);\r\n      let oskHeight = _BoxRect.height;\r\n      let bottomY = parseFloat(cs.bottom);\r\n      let tipHeight = parseFloat(cs.height);\r\n      let halfHeight = Math.ceil(canvasHeight / 2);\r\n\r\n      this.cap.style.width = xWidth + 'px';\r\n      this.tip.style.height = halfHeight + 'px';\r\n\r\n      const capOffset = 3;\r\n      const capStart = (halfHeight - capOffset) + 'px';\r\n      if(orientation == 'top') {\r\n        this.cap.style.top = capStart;\r\n        this.cap.style.bottom = '';\r\n      } else {\r\n        this.cap.style.top = '';\r\n        this.cap.style.bottom = capStart;\r\n      }\r\n      const defaultCapHeight = (distFromTop - Math.floor(y) + canvasHeight - (orientation == 'top' ? halfHeight : -capOffset * 2));\r\n      this.cap.style.height = defaultCapHeight + 'px';\r\n\r\n      if(this.constrain && tipHeight + bottomY > oskHeight) {\r\n        const delta = tipHeight + bottomY - oskHeight;\r\n        kts.height = (canvasHeight-delta) + 'px';\r\n        const hx = Math.max(0, (canvasHeight-delta)-(canvasHeight/2) + 2);\r\n        this.cap.style.height = hx + 'px';\r\n      } else if(bottomY < 0) { // we'll assume that we always constrain at the OSK's bottom.\r\n        kts.bottom = '0px';\r\n        this.cap.style.height = Math.max(0, defaultCapHeight + bottomY) + 'px';\r\n      }\r\n\r\n      kts.display = 'block';\r\n\r\n      if(this.previewHost == previewHost) {\r\n        return;\r\n      }\r\n\r\n      const oldHost = this.preview;\r\n\r\n      if(this.previewHost) {\r\n        this.previewHost.off('preferredOrientation', this.reorient);\r\n      }\r\n      this.previewHost = previewHost;\r\n\r\n      if(previewHost) {\r\n        this.previewHost.on('preferredOrientation', this.reorient);\r\n        this.preview = this.previewHost.element;\r\n        this.tip.replaceChild(this.preview, oldHost);\r\n        previewHost.setCancellationHandler(() => this.show(null, false, null));\r\n        previewHost.on('startFade', () => {\r\n          this.element.classList.remove('kmw-preview-fade');\r\n          // Note:  a reflow is needed to reset the transition animation.\r\n          this.element.offsetWidth;\r\n          this.element.classList.add('kmw-preview-fade');\r\n        });\r\n      }\r\n    } else { // Hide the key preview\r\n      this.element.style.display = 'none';\r\n      this.previewHost?.off('preferredOrientation', this.reorient);\r\n      this.previewHost = null;\r\n      const oldPreview = this.preview;\r\n      this.preview = document.createElement('div');\r\n      this.tip.replaceChild(this.preview, oldPreview);\r\n      this.element.classList.remove('kmw-preview-fade');\r\n\r\n      this.orientation = DEFAULT_TIP_ORIENTATION;\r\n    }\r\n\r\n    // Save the key preview state\r\n    this.key = key;\r\n    this.state = on;\r\n  }\r\n}",
    "import { KeyElement } from '../../../keyElement.js';\r\nimport KeyTipInterface from '../../../keytip.interface.js';\r\nimport VisualKeyboard from '../../../visualKeyboard.js';\r\nimport { GesturePreviewHost } from '../../../keyboard-layout/gesturePreviewHost.js';\r\n\r\nconst BASE_CLASS = 'kmw-keypreview';\r\nconst OVERLAY_CLASS = 'kmw-preview-overlay';\r\nconst BASE_ID = 'kmw-keytip';\r\n\r\nexport class TabletKeyTip implements KeyTipInterface {\r\n  public readonly element: HTMLDivElement;\r\n  public key: KeyElement;\r\n  public state: boolean = false;\r\n\r\n  private previewHost: GesturePreviewHost;\r\n  private preview: HTMLDivElement;\r\n  private readonly vkbd: VisualKeyboard;\r\n\r\n  /**\r\n   * Pre-builds a reusable element to serve as a gesture-preview host for selected keys\r\n   * on tablet-form factor devices.  This element hovers over the keyboard, staying in\r\n   * place (and on top) even when the layer changes.\r\n   */\r\n  constructor(vkbd: VisualKeyboard) {\r\n    this.vkbd = vkbd;\r\n    const base = this.element=document.createElement('div');\r\n    base.className=BASE_CLASS;\r\n    base.id = 'kmw-keytip';\r\n\r\n    // The following style is critical, so do not rely on external CSS\r\n    base.style.pointerEvents='none';\r\n    base.style.display='none';\r\n\r\n    this.preview = document.createElement('div');\r\n    base.appendChild(this.preview);\r\n  }\r\n\r\n  show(key: KeyElement, on: boolean, previewHost: GesturePreviewHost) {\r\n    const vkbd = this.vkbd;\r\n    const keyLayer = key?.key.spec.displayLayer;\r\n\r\n    // During quick input sequences - especially during a multitap-modipress - it's possible\r\n    // for a user to request a preview for a key from a layer that is currently active, but\r\n    // currently not visible due to need previously-requested layout calcs for a different layer.\r\n    if(on) {\r\n      // Necessary for `key.offsetParent` and client-rect methods referenced below.\r\n      // Will not unnecessarily force reflow if the layer is already in proper document flow,\r\n      // but otherwise restores it.\r\n      vkbd.layerGroup.blinkLayer(keyLayer);\r\n    }\r\n\r\n    // Create and display the preview\r\n    // If !key.offsetParent, the OSK is probably hidden.  Either way, it's a half-\r\n    // decent null-guard check.\r\n    if(on && key?.offsetParent) {\r\n      // May need adjustment for borders if ever enabled for the desktop form-factor target.\r\n\r\n      // Note:  this.vkbd does not set relative or absolute positioning.  Nearest positioned\r\n      // ancestor = the OSKView's _Box, accessible as this.vkbd.topContainer.\r\n      const hostRect = this.vkbd.topContainer.getBoundingClientRect();\r\n      const keyRect = key.getBoundingClientRect();\r\n\r\n      // Used to apply box-shadow overlay styling when the preview is for a key on a layer not\r\n      // currently active.  This is done in case the layers don't have perfect alignment for\r\n      // all keys.\r\n      const conditionalOverlayStyle = (keyLayer != vkbd.layerId) ? OVERLAY_CLASS : '';\r\n      this.element.className = `${BASE_CLASS} ${key.className} ${conditionalOverlayStyle}`;\r\n\r\n      // Some keyboards use custom CSS styling based on partial-matching the key ID\r\n      // (like sil_cameroon_azerty); this lets us map the custom styles onto the tablet\r\n      // preview, too.\r\n      this.element.id = `${BASE_ID}-${key.id}`;\r\n\r\n      const kts = this.element.style;\r\n\r\n      // Some keyboards (such as `balochi_scientific`) do not _package_ a font but\r\n      // specify an extremely common one, such as Arial.  In such cases, .kmw-key-text\r\n      // custom styling doesn't exist, relying on the layer object to simply specify\r\n      // the font-family.\r\n      const fontFamily = this.vkbd.currentLayer.element.style.fontFamily;\r\n      kts.fontFamily = key.key.spec.font || fontFamily;\r\n\r\n      kts.left = (keyRect.left - hostRect.left) + 'px';\r\n      kts.top = (keyRect.top - hostRect.top) + 'px';\r\n      kts.width = keyRect.width + 'px';\r\n      kts.height = keyRect.height + 'px';\r\n\r\n      this.element.style.display = 'block';\r\n\r\n      if(this.previewHost == previewHost) {\r\n        return;\r\n      }\r\n\r\n      const oldHost = this.preview;\r\n      this.previewHost = previewHost;\r\n\r\n      if(previewHost) {\r\n        this.preview = this.previewHost.element;\r\n        this.element.replaceChild(this.preview, oldHost);\r\n        previewHost.setCancellationHandler(() => this.show(null, false, null));\r\n        previewHost.on('startFade', () => {\r\n          this.element.classList.remove('kmw-preview-fade');\r\n          // Note:  a reflow is needed to reset the transition animation.\r\n          this.element.offsetWidth;\r\n          this.element.classList.add('kmw-preview-fade');\r\n        });\r\n      }\r\n    } else { // Hide the key preview\r\n      this.element.style.display = 'none';\r\n      this.element.className = BASE_CLASS;\r\n\r\n      this.previewHost = null;\r\n      const oldPreview = this.preview;\r\n      this.preview = document.createElement('div');\r\n      this.element.replaceChild(this.preview, oldPreview);\r\n      this.element.classList.remove('kmw-preview-fade');\r\n    }\r\n\r\n    // Save the key preview state\r\n    this.key = key;\r\n    this.state = on;\r\n  }\r\n}",
    "import { landscapeView } from \"keyman/engine/dom-utils\";\r\nimport { DeviceSpec } from \"@keymanapp/web-utils\";\r\n\r\n/**\r\n * Get viewport scale factor for this document\r\n *\r\n * @return      {number}\r\n */\r\nexport function getViewportScale(formFactor: DeviceSpec.FormFactor): number {\r\n  // This can sometimes fail with some browsers if called before document defined,\r\n  // so catch the exception\r\n  try {\r\n    // For emulation of iOS on a desktop device, use a default value\r\n    if(formFactor == 'desktop') {\r\n      return 1;\r\n    }\r\n\r\n    // Get viewport width\r\n    var viewportWidth = document.documentElement.clientWidth;\r\n\r\n    // Return a default value if screen width is greater than the viewport width (not fullscreen).\r\n    if(screen.width > viewportWidth) {\r\n      return 1;\r\n    }\r\n\r\n    // Get the orientation corrected screen width\r\n    var screenWidth = screen.width;\r\n    if(landscapeView()) {\r\n      // Take larger of the two dimensions\r\n      if(screen.width < screen.height) {\r\n        screenWidth = screen.height;\r\n      }\r\n    } else {\r\n      // Take smaller of the two dimensions\r\n      if(screen.width > screen.height) {\r\n        screenWidth = screen.height;\r\n      }\r\n    }\r\n    // Calculate viewport scale\r\n    return Math.round(100*screenWidth / viewportWidth)/100;\r\n  } catch(ex) {\r\n    return 1;\r\n  }\r\n}",
    "import { GestureSequence } from \"@keymanapp/gesture-recognizer\";\r\nimport { KeyDistribution } from \"keyman/engine/keyboard\";\r\n\r\nimport { KeyElement } from \"../../keyElement.js\";\r\nimport { GestureHandler } from './gestureHandler.js';\r\n\r\nexport class HeldRepeater implements GestureHandler {\r\n  readonly directlyEmitsKeys = true;\r\n\r\n  static readonly INITIAL_DELAY = 500;\r\n  static readonly REPEAT_DELAY = 100;\r\n\r\n  readonly source: GestureSequence<KeyElement, string>;\r\n  readonly hasModalVisualization = false;\r\n  readonly repeatClosure: () => void;\r\n\r\n  timerHandle: number;\r\n\r\n  constructor(source: GestureSequence<KeyElement, string>, closureToRepeat: () => void) {\r\n    this.source = source;\r\n\r\n    const baseKey = source.stageReports[0].item;\r\n    baseKey.key.highlight(true);\r\n\r\n    this.repeatClosure = () => {\r\n      closureToRepeat();\r\n      // The repeat-closure may cancel key highlighting.  This restores it afterward.\r\n      baseKey.key.highlight(true);\r\n    }\r\n\r\n\r\n    this.timerHandle = window.setTimeout(this.deleteRepeater, HeldRepeater.INITIAL_DELAY);\r\n\r\n    this.source.on('complete', () => {\r\n      window.clearTimeout(this.timerHandle);\r\n      this.timerHandle = undefined;\r\n      baseKey.key.highlight(false);\r\n    });\r\n  }\r\n\r\n  cancel() {\r\n    this.deleteRepeater();\r\n    this.source.cancel();\r\n  }\r\n\r\n  readonly deleteRepeater = () => {\r\n    this.repeatClosure();\r\n\r\n    this.timerHandle = window.setTimeout(this.deleteRepeater, HeldRepeater.REPEAT_DELAY);\r\n  }\r\n\r\n  currentStageKeyDistribution(): KeyDistribution {\r\n    return null;\r\n  }\r\n}",
    "import { ActiveSubKey } from 'keyman/engine/keyboard';\r\nimport OSKKey from '../../../keyboard-layout/oskKey.js';\r\nimport { KeyData, KeyElement, link } from '../../../keyElement.js';\r\nimport VisualKeyboard from '../../../visualKeyboard.js';\r\n\r\n// Typing is to ensure that the keys specified below actually are on the type...\r\n// and to gain Intellisense if more need to be added.\r\n\r\nexport default class OSKSubKey extends OSKKey {\r\n  constructor(spec: ActiveSubKey, layer: string) {\r\n    if(typeof(layer) != 'string' || layer == '') {\r\n      throw \"The 'layer' parameter for subkey construction must be properly defined.\";\r\n    }\r\n\r\n    super(spec, layer);\r\n  }\r\n\r\n  getId(): string {\r\n    return 'popup-'+this.spec.elementID;\r\n  }\r\n\r\n  construct(osk: VisualKeyboard, baseKey: KeyElement, width: number, topMargin: boolean): HTMLDivElement {\r\n    let spec = this.spec;\r\n\r\n    let kDiv=document.createElement('div');\r\n    let ks=kDiv.style;\r\n\r\n    kDiv.className='kmw-key-square-ex';\r\n    if(topMargin) {\r\n      ks.marginTop='5px';\r\n    }\r\n\r\n    ks.width=width+'px';\r\n    ks.height=baseKey.offsetHeight+'px';\r\n\r\n    let btnEle=document.createElement('div');\r\n    let btn = this.btn = link(btnEle, new KeyData(this, spec['id']));\r\n\r\n    this.setButtonClass();\r\n    btn.id = this.getId();\r\n\r\n    // Must set button size (in px) dynamically, not from CSS\r\n    let bs=btn.style;\r\n    bs.height=ks.height;\r\n    bs.lineHeight=baseKey.style.lineHeight;\r\n    bs.width=ks.width;\r\n\r\n    // Must set position explicitly, at least for Android\r\n    bs.position='absolute';\r\n\r\n    btn.appendChild(this.label = this.generateKeyText(osk));\r\n    kDiv.appendChild(btn);\r\n\r\n    return this.square = kDiv;\r\n  }\r\n\r\n  public allowsKeyTip(): boolean {\r\n    return false;\r\n  }\r\n}",
    "import OSKSubKey from './oskSubKey.js';\r\nimport { type KeyElement } from '../../../keyElement.js';\r\nimport OSKBaseKey from '../../../keyboard-layout/oskBaseKey.js';\r\nimport VisualKeyboard from '../../../visualKeyboard.js';\r\n\r\nimport { DeviceSpec, ActiveSubKey, KeyDistribution, ActiveKeyBase } from 'keyman/engine/keyboard';\r\nimport { ConfigChangeClosure, GestureRecognizerConfiguration, GestureSequence, PaddedZoneSource, RecognitionZoneSource } from '@keymanapp/gesture-recognizer';\r\nimport { GestureHandler } from '../gestureHandler.js';\r\nimport { CorrectionLayout, CorrectionLayoutEntry } from '../../../correctionLayout.js';\r\nimport { distributionFromDistanceMaps, keyTouchDistances } from '../../../corrections.js';\r\nimport { GestureParams } from '../specsForLayout.js';\r\n\r\n/**\r\n * The fraction of the base key's height to add to an unconstrained subkey-menu\r\n * callout.\r\n */\r\nconst CALLOUT_ROW_HEIGHT_RATIO = 0.2;\r\n\r\n/**\r\n * The max fraction of a base key's width to use for a subkey-menu callout\r\n */\r\nconst MAX_CALLOUT_KEY_WIDTH = 1.2;\r\n\r\n/**\r\n * Space to keep between the top of the base key and the bottom of the subkey menu,\r\n * if possible.\r\n */\r\nconst SUBKEY_MENU_VERT_OFFSET = 3;\r\n\r\n/**\r\n * Should match the margin-left style value for 'kmw-key-square-ex' in kmwosk.css\r\n * if possible.\r\n */\r\nconst SUBKEY_DEFAULT_MARGIN_LEFT = 5;\r\n\r\n/**\r\n * The minimum pixel-height value to use for subkey-menu callout height when not\r\n * obscured by an overlapping subkey menu (due to WebView boundary constraint effects)\r\n */\r\nconst CALLOUT_BASE_HEIGHT = 6 + SUBKEY_MENU_VERT_OFFSET;\r\n\r\n/**\r\n * Represents a 'realized' longpress gesture's default implementation\r\n * within KeymanWeb.  Once a touch sequence has been confirmed to\r\n * correspond to a longpress gesture, implementations of this class\r\n * provide the following:\r\n * * The UI needed to present a subkey menu\r\n * * The state management needed to present feedback about the\r\n * currently-selected subkey to the user\r\n *\r\n * As selection of the subkey occurs after the subkey popup is\r\n * displayed, selection of the subkey is inherently asynchronous.\r\n */\r\nexport default class SubkeyPopup implements GestureHandler {\r\n  readonly directlyEmitsKeys = true;\r\n\r\n  public readonly element: HTMLDivElement;\r\n  public readonly shim: HTMLDivElement;\r\n\r\n  private currentSelection: KeyElement;\r\n\r\n  private callout: HTMLDivElement;\r\n  private readonly menuWidth: number;\r\n\r\n  public readonly baseKey: KeyElement;\r\n  public readonly subkeys: KeyElement[];\r\n\r\n  private source: GestureSequence<KeyElement>;\r\n  private readonly gestureParams: GestureParams;\r\n\r\n  readonly shouldLockLayer: boolean = false;\r\n\r\n  constructor(\r\n    source: GestureSequence<KeyElement, string>,\r\n    configChanger: ConfigChangeClosure<KeyElement>,\r\n    vkbd: VisualKeyboard,\r\n    e: KeyElement,\r\n    gestureParams: GestureParams\r\n  ) {\r\n    this.baseKey = e;\r\n    this.source = source;\r\n    this.gestureParams = gestureParams;\r\n\r\n    if(vkbd.layerLocked) {\r\n      this.shouldLockLayer = true;\r\n    }\r\n\r\n    source.on('complete', () => {\r\n      this.currentSelection?.key.highlight(false);\r\n      this.clear();\r\n    });\r\n\r\n    // When subkey-selection is fully triggered, emit the selected key.\r\n    source.on('stage', () => {\r\n      const key = this.currentSelection;\r\n      if(key) {\r\n        const keyEvent = vkbd.keyEventFromSpec(key.key.spec);\r\n        keyEvent.keyDistribution = this.currentStageKeyDistribution();\r\n\r\n        vkbd.raiseKeyEvent(keyEvent, key);\r\n      }\r\n    });\r\n\r\n    // From here, we want to make decisions based on only the subkey-menu portion of the gesture path.\r\n    const subkeyComponent = source.stageReports[0].sources[0].constructSubview(true, false);\r\n\r\n    // Watch for touchpoint selection of new keys.\r\n    subkeyComponent.path.on('step', (sample) => {\r\n      // Require a fudge-factor before dropping the default key.\r\n      if(subkeyComponent.path.stats.netDistance >= 4) {\r\n        this.currentSelection?.key.highlight(false);\r\n        sample.item?.key.highlight(true);\r\n        this.currentSelection = sample.item;\r\n      }\r\n    });\r\n\r\n    // If the user doesn't move their finger and releases, we'll output the base key\r\n    // by default.\r\n    this.currentSelection = e;\r\n    e.key.highlight(true);\r\n\r\n    // A tag we directly set on a key element during its construction.\r\n    let subKeySpec: ActiveSubKey[] = e['subKeys'];\r\n\r\n    // The holder is position:fixed, but the keys do not need to be, as no scrolling\r\n    // is possible while the array is visible.  So it is simplest to let the keys have\r\n    // position:static and display:inline-block\r\n    const elements = this.element = document.createElement('div');\r\n\r\n    elements.id='kmw-popup-keys';\r\n\r\n    // #3718: No longer prepend base key to popup array\r\n\r\n    // Must set position dynamically, not in CSS\r\n    var ss=elements.style;\r\n\r\n    // Set key font according to layout, or defaulting to OSK font\r\n    // (copied, not inherited, since OSK is not a parent of popup keys)\r\n    ss.fontFamily=vkbd.fontFamily;\r\n\r\n    // Copy the font size from the parent key, allowing for style inheritance\r\n    const computedStyle = getComputedStyle(e);\r\n    ss.fontSize=computedStyle.fontSize;\r\n    ss.visibility='hidden';\r\n\r\n    let layer = e['key'].layer;\r\n    if (typeof (layer) != 'string' || layer == '') {\r\n      // Use the currently-active layer.\r\n      layer = vkbd.layerId;\r\n    }\r\n\r\n    const nKeys = subKeySpec.length;\r\n    // Put a maximum of 9 keys in a row to reduce travel distance\r\n    const nRows=Math.ceil(nKeys/9);\r\n    const nCols=Math.ceil(nKeys/nRows);\r\n\r\n    // Add nested button elements for each sub-key\r\n    this.subkeys = [];\r\n    let thisRowWidth = SUBKEY_DEFAULT_MARGIN_LEFT;\r\n    let iRow = 0;\r\n    for(let i=0, iCol=0; i<nKeys; i++, iCol++) {\r\n      let subkeyWidth = (typeof subKeySpec[i]['width'] != 'undefined') ?\r\n        subKeySpec[i]['width'] * e.offsetWidth / 100 :\r\n        e.offsetWidth;\r\n\r\n      if (subkeyWidth > vkbd.width - 2 * SUBKEY_DEFAULT_MARGIN_LEFT) {\r\n        subkeyWidth = vkbd.width - 2 * SUBKEY_DEFAULT_MARGIN_LEFT;\r\n      }\r\n\r\n      if (thisRowWidth + subkeyWidth + SUBKEY_DEFAULT_MARGIN_LEFT > vkbd.width || iCol >= nCols) {\r\n        // New subkey doesn't fit in the current row. Start a new row.\r\n        // TODO: currently we don't check that the rows fit vertically,\r\n        // so it's possible that the top or bottom of the subkey menu\r\n        // is not visible.\r\n        iRow++;\r\n        iCol = 0;\r\n        thisRowWidth = SUBKEY_DEFAULT_MARGIN_LEFT;\r\n      }\r\n      const keyGenerator = new OSKSubKey(subKeySpec[i], layer);\r\n      const kDiv = keyGenerator.construct(vkbd, <KeyElement>e, subkeyWidth, iRow > 0);\r\n      thisRowWidth += subkeyWidth + SUBKEY_DEFAULT_MARGIN_LEFT;\r\n      this.menuWidth = Math.max(this.menuWidth ?? 0, thisRowWidth);\r\n      this.subkeys.push(kDiv.firstChild as KeyElement);\r\n\r\n      elements.appendChild(kDiv);\r\n    }\r\n\r\n    ss.width = this.menuWidth + 'px';\r\n\r\n    // And add a filter to fade main keyboard\r\n    this.shim = document.createElement('div');\r\n    this.shim.id = 'kmw-popup-shim';\r\n\r\n    // Highlight the duplicated base key or ideal subkey (if a phone)\r\n    if(vkbd.device.formFactor == DeviceSpec.FormFactor.Phone) {\r\n      this.selectDefaultSubkey(e, elements /* == this.element */);\r\n    }\r\n\r\n    vkbd.element.appendChild(this.element);\r\n    // The shim should probably fade the banner, too.\r\n    vkbd.topContainer.appendChild(this.shim);\r\n\r\n    // Must be placed after its `.element` has been inserted into the DOM.\r\n    this.reposition(vkbd);\r\n\r\n    const config = this.buildPopupRecognitionConfig(vkbd);\r\n    configChanger({\r\n      type: 'push',\r\n      config: config\r\n    });\r\n  }\r\n\r\n  private buildPopupRecognitionConfig(vkbd: VisualKeyboard): GestureRecognizerConfiguration<KeyElement, string> {\r\n    const baseBounding = this.element.getBoundingClientRect();\r\n    const underlyingKeyBounding = this.baseKey.getBoundingClientRect();\r\n\r\n    const subkeyStyle = this.subkeys[0].style;\r\n    const subkeyHeight = Number.parseInt(subkeyStyle.height, 10);\r\n    const basePadding = -0.666 * subkeyHeight;  // extends bounds by the absolute value.\r\n    const topScalar = 3;\r\n\r\n    const bottomDistance = underlyingKeyBounding.bottom - baseBounding.bottom;\r\n\r\n    const roamBounding = new PaddedZoneSource(this.element, [\r\n      // top\r\n      basePadding * topScalar, // be extra-loose for the top!\r\n      // left, right\r\n      basePadding,\r\n      // bottom: ensure the recognition zone includes the row of the base key.\r\n      // basePadding is already negative, but bottomDistance isn't.\r\n      -bottomDistance < basePadding ? -bottomDistance : basePadding\r\n    ]);\r\n\r\n    const sustainBounding: RecognitionZoneSource = {\r\n      getBoundingClientRect() {\r\n        // We don't want to actually use Number.NEGATIVE_INFINITY or Number.POSITIVE_INFINITY\r\n        // because that produces a DOMRect with a few NaN fields, and we don't want _that_.\r\n\r\n        // Way larger than any screen resolution should ever be.\r\n        const base = Number.MAX_SAFE_INTEGER;\r\n        return new DOMRect(-base, -base, 2*base, 2*base);\r\n      },\r\n    }\r\n\r\n    return {\r\n      targetRoot: this.element,\r\n      inputStartBounds: vkbd.element,\r\n      maxRoamingBounds: sustainBounding,\r\n      safeBounds: sustainBounding, // if embedded, ensure top boundary extends outside the WebView!\r\n      itemIdentifier: (coord, target) => {\r\n        const roamingRect = roamBounding.getBoundingClientRect();\r\n\r\n        let bestMatchKey: KeyElement = null;\r\n        let bestYdist = Number.MAX_VALUE;\r\n        let bestXdist = Number.MAX_VALUE;\r\n\r\n        // Step 1:  is the coordinate within the range we permit for selecting _anything_?\r\n        if(coord.clientX < roamingRect.left || coord.clientX > roamingRect.right) {\r\n          return null;\r\n        }\r\n        if(coord.clientY < roamingRect.top || coord.clientY > roamingRect.bottom) {\r\n          return null;\r\n        }\r\n\r\n        // Step 2:  okay, selection is permitted.  So... what to select?\r\n        for(let key of this.subkeys) {\r\n          const keyBounds = key.getBoundingClientRect();\r\n\r\n          let xDist = Number.MAX_VALUE;\r\n          let yDist = Number.MAX_VALUE;\r\n\r\n          if(keyBounds.left <= coord.clientX && coord.clientX < keyBounds.right) {\r\n            xDist = 0;\r\n          } else {\r\n            xDist = (keyBounds.left >= coord.clientX) ? keyBounds.left - coord.clientX : coord.clientX - keyBounds.right;\r\n          }\r\n\r\n          if(keyBounds.top <= coord.clientY && coord.clientY < keyBounds.bottom) {\r\n            yDist = 0;\r\n          } else {\r\n            yDist = (keyBounds.top >= coord.clientY) ? keyBounds.top - coord.clientY : coord.clientY - keyBounds.bottom;\r\n          }\r\n\r\n          if(xDist == 0 && yDist == 0) {\r\n            // Perfect match!\r\n            return key;\r\n          } else if(xDist < bestXdist || (xDist == bestXdist && yDist < bestYdist)) {\r\n            bestXdist = xDist;\r\n            bestMatchKey = key;\r\n            bestYdist = yDist;\r\n          }\r\n        }\r\n\r\n        return bestMatchKey;\r\n      }\r\n    }\r\n  }\r\n\r\n  reposition(vkbd: VisualKeyboard) {\r\n    let subKeys = this.element;\r\n    let e = this.baseKey;\r\n\r\n    // And correct its position with respect to that element\r\n    const _Box = vkbd.topContainer;\r\n    let rowElement = (e.key as OSKBaseKey).row.element;\r\n    let ss=subKeys.style;\r\n    let parentOffsetLeft = e.offsetParent ? (<HTMLElement>e.offsetParent).offsetLeft : 0;\r\n    var x = e.offsetLeft + parentOffsetLeft + 0.5*(e.offsetWidth-subKeys.offsetWidth);\r\n    var xMax = vkbd.width - subKeys.offsetWidth;\r\n\r\n    if(x > xMax) {\r\n      x=xMax;\r\n    }\r\n    if(x < 0) {\r\n      x=0;\r\n    }\r\n    ss.left=x+'px';\r\n\r\n    let _BoxRect = _Box.getBoundingClientRect();\r\n    let rowElementRect = rowElement.getBoundingClientRect();\r\n    ss.top = (rowElementRect.top - _BoxRect.top - subKeys.offsetHeight - SUBKEY_MENU_VERT_OFFSET) + 'px';\r\n\r\n    // Make the popup keys visible\r\n    ss.visibility='visible';\r\n\r\n    // For now, should only be true (in production) when keyman.isEmbedded == true.\r\n    let constrainPopup = vkbd.isEmbedded;\r\n\r\n    let cs = getComputedStyle(subKeys);\r\n    let topY = parseFloat(cs.top);\r\n\r\n    // Adjust the vertical position of the popup to keep it within the\r\n    // bounds of the keyboard rectangle, when on iPhone (system keyboard)\r\n    const topOffset = 0; // Set this when testing constrainPopup, e.g. to -80px\r\n    let delta = 0;\r\n    if(topY < topOffset && constrainPopup) {\r\n      delta = topOffset - topY;\r\n      ss.top = topOffset + 'px';\r\n    }\r\n\r\n    // Add the callout\r\n    this.callout = this.addCallout(e, delta, vkbd.element, vkbd.topContainer, vkbd.device.formFactor == 'tablet');\r\n  }\r\n\r\n  /**\r\n   * Add a callout for popup keys (if KeymanWeb on a phone device)\r\n   *\r\n   * @param   {Object}  key    HTML key element\r\n   * @param   {number}  delta  The pixel offset for the callout from the position it would have if not\r\n   *                           constrained due to WebView boundaries.\r\n   * @return  {Object}         callout object\r\n   */\r\n  addCallout(key: KeyElement, delta: number, host: HTMLElement, _Box: HTMLElement, isTablet: boolean): HTMLDivElement {\r\n    delta = delta || 0;\r\n\r\n    // Uses content-box styling, so ignores border aspects for reported positions.\r\n    /**\r\n     * \"Computed Menu Style\"\r\n     */\r\n    const cms = getComputedStyle(this.element);\r\n    const borderRadius = Math.max(Number.parseInt(cms.borderRadius), 0);\r\n\r\n    // Create the callout\r\n    let keyRect = key.getBoundingClientRect();\r\n    let _BoxRect = _Box.getBoundingClientRect();\r\n\r\n    // Set position and style\r\n    // We're going to adjust the top of the box to ensure it stays\r\n    // pixel aligned, otherwise we can get antialiasing artifacts\r\n    // that look ugly\r\n    let calloutTop = Math.floor(\r\n      Number.parseInt(cms.top, 10) +\r\n      Number.parseInt(cms.height, 10) +\r\n      // Padding is not included in content-box (or in content-box's top positioning)...\r\n      // but half the padding-top seems useful on all tested devices.\r\n      // Not sure exactly why.\r\n      Number.parseInt(cms.paddingTop, 10)/2 +\r\n      Number.parseInt(cms.paddingBottom, 10)\r\n    );\r\n\r\n    const calloutProportionalHeight = CALLOUT_ROW_HEIGHT_RATIO * (keyRect.height - delta);\r\n    const maxProportionalHeight = CALLOUT_ROW_HEIGHT_RATIO * keyRect.height;\r\n\r\n    const targetHeight = calloutProportionalHeight + CALLOUT_BASE_HEIGHT;\r\n    const calloutDownscaleRatio = targetHeight / (maxProportionalHeight + CALLOUT_BASE_HEIGHT)\r\n\r\n    // Shorten the callout if the subkey menu is being constrained within WebView bounds, thus\r\n    // overlapping the base key.  Do so (mostly) proportionally to how much is obscured.\r\n    const maxHeight = (keyRect.bottom - _BoxRect.top) - calloutTop - 1;\r\n    const selectedHeight = maxHeight < targetHeight ? maxHeight : targetHeight;\r\n\r\n    if(selectedHeight > 0) {\r\n      const cc = document.createElement('div');\r\n      const ccs = cc.style;\r\n      cc.id = 'kmw-popup-callout';\r\n      host.appendChild(cc);\r\n\r\n      ccs.top = calloutTop + 'px';\r\n      ccs.borderTopWidth = (selectedHeight) + 'px';\r\n\r\n      const calloutKeyWidthRatio = MAX_CALLOUT_KEY_WIDTH * calloutDownscaleRatio;\r\n\r\n      const desiredCalloutWidth = keyRect.width * calloutKeyWidthRatio;\r\n      const maxCalloutWidth = this.menuWidth - 2 * borderRadius;\r\n      const targetCalloutWidth = maxCalloutWidth < desiredCalloutWidth ? maxCalloutWidth : desiredCalloutWidth;\r\n\r\n      const calloutLeftOffset = (keyRect.left - _BoxRect.left - (targetCalloutWidth - keyRect.width)/2);\r\n\r\n      // Avoid letting the callout overrun screen bounds or overshooting the transition to curved borders\r\n      const calloutRightOverrun = Math.max(0, (calloutLeftOffset + targetCalloutWidth) - (_BoxRect.right - borderRadius));\r\n      const calloutLeftOverrun =  Math.max(0, borderRadius-calloutLeftOffset);\r\n\r\n      ccs.left = (keyRect.left - _BoxRect.left - (targetCalloutWidth - keyRect.width)/2 + calloutLeftOverrun) /*- ADJUSTMENT*/ + 'px';\r\n      ccs.borderLeftWidth  = targetCalloutWidth/2 - calloutLeftOverrun  + 'px';\r\n      ccs.borderRightWidth = targetCalloutWidth/2 - calloutRightOverrun + 'px';\r\n\r\n      // Return callout element, to allow removal later\r\n      return cc;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  selectDefaultSubkey(baseKey: KeyElement, popupBase: HTMLElement) {\r\n    var bk: KeyElement;\r\n    let subkeys = baseKey['subKeys'];\r\n    for(let i=0; i < subkeys.length; i++) {\r\n      let skSpec = subkeys[i];\r\n      let skElement = <KeyElement> popupBase.childNodes[i].firstChild;\r\n\r\n      // Preference order:\r\n      // #1:  if a default subkey has been specified, select it.\r\n      // #2:  if no default subkey is specified, default to a subkey with the same\r\n      //      key ID and layer / modifier spec.\r\n      if(skSpec.default) {\r\n       bk = skElement;\r\n       break;\r\n      } else if(!baseKey.key || !baseKey.key.spec) {\r\n        continue;\r\n      }\r\n\r\n      if(skSpec.elementID == baseKey.key.spec.elementID) {\r\n        bk = skElement;\r\n      }\r\n    }\r\n\r\n    if(bk) {\r\n      this.currentSelection?.key.highlight(false);\r\n      this.currentSelection = bk;\r\n\r\n      // Subkeys never get key previews, so we can directly highlight the subkey.\r\n      bk.key.highlight(true);\r\n    }\r\n  }\r\n\r\n  get hasModalVisualization() {\r\n    return this.element.style.visibility == 'visible';\r\n  }\r\n\r\n  buildCorrectiveLayout(): CorrectionLayout {\r\n    const baseBounding = this.element.getBoundingClientRect();\r\n    const aspectRatio = baseBounding.width / baseBounding.height;\r\n\r\n    const keys = this.subkeys.map((keyElement) => {\r\n      const subkeyBounds = keyElement.getBoundingClientRect();\r\n\r\n      // Ensures we have the right typing.\r\n      const correctiveData: CorrectionLayoutEntry = {\r\n        keySpec: keyElement.key.spec,\r\n        centerX: ((subkeyBounds.right - subkeyBounds.width / 2) - baseBounding.left) / baseBounding.width,\r\n        centerY: ((subkeyBounds.bottom - subkeyBounds.height / 2) - baseBounding.top) / baseBounding.height,\r\n        width: subkeyBounds.width / baseBounding.width,\r\n        height: subkeyBounds.height / baseBounding.height\r\n      }\r\n\r\n      return correctiveData;\r\n    });\r\n\r\n    return {\r\n      keys: keys,\r\n      kbdScaleRatio: aspectRatio\r\n    }\r\n  }\r\n\r\n  currentStageKeyDistribution(): KeyDistribution {\r\n    const latestStage = this.source.stageReports[this.source.stageReports.length-1];\r\n    const baseStage = this.source.stageReports[0];\r\n    const gestureSource = latestStage.sources[0];\r\n    const lastCoord = gestureSource.currentSample;\r\n\r\n    const baseBounding = this.element.getBoundingClientRect();\r\n    const mappedCoord = {\r\n      x: lastCoord.targetX / baseBounding.width,\r\n      y: lastCoord.targetY / baseBounding.height\r\n    }\r\n\r\n    // Lock the coordinate within base-element bounds; corrects for the allowed 'popup roaming' zone.\r\n    //\r\n    // To consider:  add a 'clipping' feature to `keyTouchDistances`?  It could make sense for base\r\n    // keys, too - especially when emulating a touch OSK via the inline-OSK mode used in the\r\n    // Developer host page.\r\n    mappedCoord.x = mappedCoord.x < 0 ? 0 : (mappedCoord.x > 1 ? 1: mappedCoord.x);\r\n    mappedCoord.y = mappedCoord.y < 0 ? 0 : (mappedCoord.y > 1 ? 1: mappedCoord.y);\r\n\r\n    const rawSqDistances = keyTouchDistances(mappedCoord, this.buildCorrectiveLayout());\r\n    const currentKeyDist = rawSqDistances.get(lastCoord.item.key.spec);\r\n\r\n    /*\r\n     * - how long has the subkey menu been visible?\r\n     *   - Base key should be less likely if it's been visible a while,\r\n     *     but reasonably likely if it only just appeared.\r\n     *     - Especially if up-flicks are allowed.  Though, in that case, consider\r\n     *       base-layer neighbors, and particularly the one directly under the touchpoint?\r\n     * - raw distance traveled (since the menu appeared)\r\n     *   - similarly, short distance = a more likely base key?\r\n     */\r\n\r\n    // The concept:  how likely is it that the user MEANT to output a subkey?\r\n    let timeDistance = Math.min(\r\n      // The full path is included by the model - meaning the base wait is included here in\r\n      // in the stats;  we subtract it to get just the duration of the subkey menu.\r\n      gestureSource.path.stats.duration - baseStage.sources[0].path.stats.duration,\r\n      this.gestureParams.longpress.waitLength\r\n      ) / (2 * this.gestureParams.longpress.waitLength);  // normalize:  max time distance of 0.5\r\n\r\n    let pathDistance = Math.min(\r\n      gestureSource.path.stats.rawDistance,\r\n      this.gestureParams.longpress.noiseTolerance*4\r\n    ) / (this.gestureParams.longpress.noiseTolerance * 8); // normalize similarly.\r\n\r\n    // We only want to add a single distance 'dimension' - we'll choose the one that affects\r\n    // the interpreted distance the least.  (This matters for upflick-shortcutting in particular)\r\n    const layerDistance = Math.min(timeDistance * timeDistance, pathDistance * pathDistance);\r\n    const baseKeyDistance = currentKeyDist + layerDistance;\r\n\r\n    // Include the base key as a corrective option.\r\n    const baseKeyMap = new Map<ActiveKeyBase, number>();\r\n    const subkeyMatch = this.subkeys.find((entry) => entry.keyId == this.baseKey.keyId);\r\n    if(subkeyMatch) {\r\n      // Ensure that the base key's entry can be merged with that of its subkey.\r\n      // (Assuming that always makes sense.)\r\n      baseKeyMap.set(subkeyMatch.key.spec, baseKeyDistance);\r\n    } else {\r\n      baseKeyMap.set(this.baseKey.key.spec, baseKeyDistance);\r\n    }\r\n\r\n    return distributionFromDistanceMaps([rawSqDistances, baseKeyMap]);\r\n  }\r\n\r\n  cancel() {\r\n    this.clear();\r\n    this.source.cancel();\r\n  }\r\n\r\n  clear() {\r\n    // Remove the displayed subkey array, if any\r\n    if(this.element.parentNode) {\r\n      this.element.parentNode.removeChild(this.element);\r\n    }\r\n\r\n    if(this.shim.parentNode) {\r\n      this.shim.parentNode.removeChild(this.shim);\r\n    }\r\n\r\n    if(this.callout && this.callout.parentNode) {\r\n      this.callout.parentNode.removeChild(this.callout);\r\n    }\r\n  }\r\n}\r\n",
    "import { type KeyElement } from '../../../keyElement.js';\r\nimport VisualKeyboard from '../../../visualKeyboard.js';\r\n\r\nimport { KeyDistribution, ActiveKeyBase } from 'keyman/engine/keyboard';\r\nimport { GestureSequence } from '@keymanapp/gesture-recognizer';\r\nimport { GestureHandler } from '../gestureHandler.js';\r\n\r\n/**\r\n * Represents a potential modipress gesture's implementation within KeymanWeb, including\r\n * modipresses generated at the end of multitap sequences.\r\n *\r\n * This involves \"locking\" the current layer in place until the modipress is complete.\r\n */\r\nexport default class Modipress implements GestureHandler {\r\n  readonly directlyEmitsKeys = true;\r\n\r\n  private completionCallback: () => void;\r\n  private originalLayer: string;\r\n  private shouldRestore: boolean = false;\r\n  private source: GestureSequence<KeyElement, string>;\r\n\r\n  constructor(\r\n    source: GestureSequence<KeyElement, string>,\r\n    vkbd: VisualKeyboard,\r\n    completionCallback: () => void,\r\n  ) {\r\n    const initialStage = source.stageReports[0];\r\n    this.originalLayer = initialStage.sources[0].stateToken;\r\n    this.source = source;\r\n\r\n    this.completionCallback = () => {\r\n      vkbd.lockLayer(false);\r\n      if(this.shouldRestore) {\r\n        vkbd.layerId = this.originalLayer;\r\n        vkbd.updateState();\r\n      }\r\n      completionCallback?.();\r\n    };\r\n\r\n    vkbd.lockLayer(true);\r\n\r\n    source.on('stage', (stage) => {\r\n      const stageName = stage.matchedId;\r\n      if(stageName.includes('modipress') && stageName.includes('-end')) {\r\n        this.clear();\r\n      } else if(stageName.includes('modipress') && stageName.includes('-hold')) {\r\n        this.shouldRestore = true;\r\n      }\r\n    });\r\n\r\n    source.on('complete', () => this.cancel());\r\n  }\r\n\r\n  get isLocked(): boolean {\r\n    return this.shouldRestore;\r\n  }\r\n\r\n  setLocked() {\r\n    this.shouldRestore = true;\r\n  }\r\n\r\n  get completed(): boolean {\r\n    return this.completionCallback === null;\r\n  }\r\n\r\n  clear() {\r\n    const callback = this.completionCallback;\r\n    this.completionCallback = null;\r\n    callback?.();\r\n  }\r\n\r\n  cancel() {\r\n    this.clear();\r\n    this.source.cancel();\r\n  }\r\n\r\n  readonly hasModalVisualization = false;\r\n\r\n  currentStageKeyDistribution(baseDistMap: Map<ActiveKeyBase, number>): KeyDistribution {\r\n    return null;\r\n  }\r\n}",
    "import { type KeyElement } from '../../../keyElement.js';\r\nimport VisualKeyboard from '../../../visualKeyboard.js';\r\n\r\nimport { ActiveSubKey, ActiveKey, KeyDistribution, ActiveKeyBase } from 'keyman/engine/keyboard';\r\nimport { GestureSequence, GestureStageReport } from '@keymanapp/gesture-recognizer';\r\nimport { GestureHandler } from '../gestureHandler.js';\r\nimport { distributionFromDistanceMaps } from '../../../corrections.js';\r\nimport Modipress from './modipress.js';\r\nimport { keySupportsModipress } from '../specsForLayout.js';\r\nimport { GesturePreviewHost } from '../../../keyboard-layout/gesturePreviewHost.js';\r\n\r\n/**\r\n * Represents a potential multitap gesture's implementation within KeymanWeb.\r\n * Once a simple-tap gesture occurs on a key with specified multitap subkeys,\r\n * this class is designed to take over further processing of said gesture.\r\n * This includes providing:\r\n * * UI feedback regarding the state of the ongoing multitap, as appropriate\r\n * * Proper selection of the appropriate multitap key for subsequent taps.\r\n */\r\nexport default class Multitap implements GestureHandler {\r\n  readonly directlyEmitsKeys = true;\r\n\r\n  public readonly baseKey: KeyElement;\r\n  public readonly baseContextToken: number;\r\n  public readonly hasModalVisualization = false;\r\n\r\n  private readonly originalLayer: string;\r\n\r\n  private readonly multitaps: ActiveSubKey[];\r\n  private tapIndex = 0;\r\n  private modipress: Modipress;\r\n\r\n  private readonly sequence: GestureSequence<KeyElement, string>;\r\n\r\n  constructor(\r\n    source: GestureSequence<KeyElement, string>,\r\n    vkbd: VisualKeyboard,\r\n    e: KeyElement,\r\n    contextToken: number,\r\n    previewHost: GesturePreviewHost\r\n  ) {\r\n    this.baseKey = e;\r\n    this.baseContextToken = contextToken;\r\n    this.multitaps = [e.key.spec].concat(e.key.spec.multitap);\r\n    this.sequence = source;\r\n\r\n    const startModipress = (tap: GestureStageReport<KeyElement, string>) => {\r\n      // In case of a previous modipress that somehow wasn't cleared.\r\n      this.modipress?.clear();\r\n\r\n      const modipressHandler = new Modipress(source, vkbd, () => {\r\n        this.modipress = vkbd.activeModipress = null;\r\n      });\r\n      this.modipress = vkbd.activeModipress = modipressHandler;\r\n    }\r\n\r\n    this.originalLayer = vkbd.layerId;\r\n\r\n    const tapLookahead = (offset: number) => (this.tapIndex + offset) % this.multitaps.length;\r\n\r\n    const updatePreview = () => {\r\n      previewHost?.setMultitapHint(this.multitaps[tapLookahead(0)], this.multitaps[tapLookahead(1)], vkbd);\r\n    }\r\n\r\n    source.on('complete', () => {\r\n      this.modipress?.cancel();\r\n      this.clear();\r\n    });\r\n\r\n    const stageHandler = (tap: GestureStageReport<KeyElement, string>) => {\r\n      switch(tap.matchedId) {\r\n        // In the case that a modifier key supports multitap, reaching this stage\r\n        // indicates that the multitapping is over.  Not the modipressing, though.\r\n        case 'modipress-hold':\r\n          this.clear();\r\n          // We'll let the co-existing modipress handler continue.\r\n          source.off('stage', stageHandler);\r\n          return;\r\n        case 'modipress-end-multitap-transition':\r\n        case 'modipress-multitap-end':\r\n        case 'modipress-end':\r\n        case 'multitap-end':\r\n        case 'simple-tap':\r\n          return;\r\n        case 'modipress-multitap-lock-transition':\r\n          this.modipress?.setLocked();\r\n          return;\r\n        // Once a multitap starts, it's better to emit keys on keydown; that way,\r\n        // if a user holds long, they get what they see if they decide to stop,\r\n        // but also have time to decide if they want to continue to what's next.\r\n        case 'modipress-multitap-start':\r\n        case 'multitap-start':\r\n          break;\r\n        default:\r\n          throw new Error(`Unsupported gesture state encountered during multitap: ${tap.matchedId}`);\r\n      }\r\n\r\n      // For rota-style behavior\r\n      this.tapIndex = tapLookahead(1);\r\n      const selection = this.multitaps[this.tapIndex];\r\n      updatePreview();\r\n\r\n      const keyEvent = vkbd.keyEventFromSpec(selection);\r\n      keyEvent.baseTranscriptionToken = this.baseContextToken;\r\n\r\n      const coord = tap.sources[0].currentSample;\r\n      const baseDistances = vkbd.getSimpleTapCorrectionDistances(coord, this.baseKey.key.spec as ActiveKey);\r\n      if(coord.stateToken != vkbd.layerId && !tap.matchedId.includes('modipress')) {\r\n        const matchKey = vkbd.layerGroup.findNearestKey({...coord, stateToken: vkbd.layerId});\r\n\r\n        // Replace the key at the current location for the current layer key\r\n        // with the multitap base key.\r\n        const p = baseDistances.get(matchKey.key.spec);\r\n        if(p == null) {\r\n          console.warn(\"Could not find current layer's key\")\r\n        }\r\n        baseDistances.delete(matchKey.key.spec);\r\n        baseDistances.set(coord.item.key.spec, p);\r\n      }\r\n      keyEvent.keyDistribution = this.currentStageKeyDistribution(baseDistances);\r\n\r\n      // TODO for future:  multitap previews.\r\n\r\n      // When _some_ multitap keys support layer-swapping but others don't,\r\n      // landing on a non-swap key should preserve the original layer... even\r\n      // if no such 'nextLayer' is specified by default.\r\n      keyEvent.kNextLayer ||= this.originalLayer;\r\n\r\n      vkbd.raiseKeyEvent(keyEvent, null);\r\n\r\n      // Now that the key has been processed, with a layer possibly changed as a result...\r\n      if(tap.matchedId == 'modipress-multitap-start') {\r\n        startModipress(tap);\r\n      }\r\n    };\r\n\r\n    source.on('stage', stageHandler);\r\n\r\n    const initialTap = source.stageReports[0];\r\n    if(initialTap.matchedId == 'modipress-start') {\r\n      startModipress(source.stageReports[0]);\r\n    }\r\n\r\n    // For this specific instance, we'll go ahead and directly maintain the preview;\r\n    // a touch just ended, and all other updates occur on the start of a new touch.\r\n    updatePreview();\r\n\r\n    /* In theory, setting up a specialized recognizer config limited to the base key's surface area\r\n     * would be pretty ideal - it'd provide automatic cancellation if anywhere else were touched.\r\n     *\r\n     * However, because multitap keys can swap layers, and because an invisible layer doesn't provide\r\n     * the expected bounding-box that it would were it visible, it's anything but straightforward to\r\n     * do for certain supported cases.  It's simpler to handle this problem by leveraging the\r\n     * key-finding operation specified on the gesture model and ensuring the base key remains in place.\r\n     */\r\n  }\r\n\r\n  currentStageKeyDistribution(baseDistances: Map<ActiveKeyBase, number>): KeyDistribution {\r\n    /* Concept:  use the base distance map - what if the tap was meant for elsewhere?\r\n     * That said, given the base key's probability... modify that by a 'tap distance' metric,\r\n     * where the probability of all taps in the multitap rota sum up to the base key's original\r\n     * probability.\r\n     */\r\n\r\n    const baseDistribution = distributionFromDistanceMaps(baseDistances);\r\n    const keyIndex = baseDistribution.findIndex((entry) => entry.keySpec == this.baseKey.key.spec);\r\n\r\n    if(keyIndex == -1) { // also covers undefined, but does not include 0.\r\n      // Modipress keys generally get left out of the key-correction calculations.\r\n      if(!keySupportsModipress(this.baseKey)) {\r\n        console.warn(\"Could not find base key's probability for multitap correction\");\r\n      }\r\n\r\n      // Decently recoverable; just use the simple-tap distances instead.\r\n      return baseDistribution;\r\n    }\r\n\r\n    const baseProb = baseDistribution.splice(keyIndex, 1)[0].p;\r\n\r\n    let totalWeight = 0;\r\n    let multitapEntries: {keySpec: ActiveKeyBase, p: number}[] = [];\r\n    for(let i = 0; i < this.multitaps.length; i++) {\r\n      const key = this.multitaps[i];\r\n      // 'standard distance', no real modular effects needed.\r\n      const distStd = Math.abs(i - this.tapIndex) % this.multitaps.length;\r\n      // 'wrapped distance', when the modular effects are definitely needed.\r\n      const distWrap = (i + this.multitaps.length - this.tapIndex) % this.multitaps.length;\r\n      const modularLinDist = distStd < distWrap ? distStd : distWrap;\r\n\r\n      // Simple approach for now - we'll ignore timing considerations and\r\n      // just use raw modular distance.\r\n      // Actual tap:  1 (base weight)\r\n      // \"one off\": 1/4 as likely\r\n      // \"two off\": 1/9 as likely\r\n      // etc.\r\n      const keyWeight = 1.0 / ((1 + modularLinDist) * (1 + modularLinDist));\r\n      totalWeight += keyWeight;\r\n      multitapEntries.push({\r\n        keySpec: key,\r\n        p: keyWeight\r\n      });\r\n    }\r\n\r\n    // Converts from the weights to the final probability values specified by the\r\n    // top comment within this method.\r\n    const scalar = baseProb  / totalWeight;\r\n    multitapEntries.forEach((entry) => {\r\n      entry.p = scalar * entry.p;\r\n    });\r\n\r\n    return baseDistribution.concat(multitapEntries).sort((a, b) => b.p - a.p);\r\n  }\r\n\r\n  cancel() {\r\n    this.clear();\r\n    this.sequence.cancel();\r\n  }\r\n\r\n  clear() {\r\n    // TODO:  for hint stuff.\r\n  }\r\n}",
    "import { ActiveKeyBase } from \"keyman/engine/keyboard\";\r\nimport { EventEmitter } from \"eventemitter3\";\r\n\r\nimport { KeyElement } from \"../keyElement.js\";\r\nimport { FlickNameCoordMap, OrderedFlickDirections } from \"../input/gestures/browser/flick.js\";\r\nimport { PhoneKeyTipOrientation } from \"../input/gestures/browser/keytip.js\";\r\nimport { default as VisualKeyboard } from \"../visualKeyboard.js\";\r\nimport { renameSpecialKey } from \"./oskKey.js\";\r\n\r\n/**With edge lengths of 1, to keep flick-text invisible at the start, the\r\n * hypotenuse for an inter-cardinal path is sqrt(2).  To keep a perfect circle\r\n * for all flicks, then, requires the straight-edge length for pure cardinal\r\n * paths to match - sqrt(2).\r\n */\r\nconst FLICK_OVERFLOW_OFFSET = 1.4142;\r\n\r\n// If it's a rounding error off of 0, force it to 0.\r\n// Values such as -1.32e-18 have been seen when 0 was expected.\r\nconst coerceZeroes = (val: number) => Math.abs(val) < 1e-10 ? 0 : val;\r\n\r\ninterface EventMap {\r\n  preferredOrientation: (orientation: PhoneKeyTipOrientation) => void;\r\n  startFade: () => void;\r\n}\r\n\r\nexport class GesturePreviewHost extends EventEmitter<EventMap> {\r\n  private readonly div: HTMLDivElement;\r\n  private readonly label: HTMLSpanElement;\r\n  private readonly hintLabel: HTMLSpanElement;\r\n  private readonly previewImgContainer: HTMLDivElement;\r\n\r\n  private flickPreviews = new Map<string, HTMLDivElement>;\r\n  private flickEdgeLength: number;\r\n\r\n  private orientation: PhoneKeyTipOrientation = 'top';\r\n\r\n  private onCancel: () => void;\r\n\r\n  get element(): HTMLDivElement {\r\n    return this.div;\r\n  }\r\n\r\n  constructor(key: KeyElement, isPhone: boolean, width: number, height: number) {\r\n    super();\r\n\r\n    const keySpec = key.key.spec;\r\n    const edgeLength = this.flickEdgeLength = Math.max(width, height);\r\n\r\n    const base = this.div = document.createElement('div');\r\n    base.className = base.id = 'kmw-gesture-preview';\r\n\r\n    base.style.pointerEvents='none';\r\n\r\n    // We want this to be distinct from the base element so that we can scroll it;\r\n    // this matters greatly for doing flick things.\r\n    const previewImgContainer = this.previewImgContainer = document.createElement('div');\r\n    this.previewImgContainer.id = 'kmw-preview-img-container';\r\n\r\n    const label = this.label = document.createElement('span');\r\n    label.className='kmw-gesture-base-label kmw-key-text';\r\n    label.id = 'kmw-gesture-base-label';\r\n    previewImgContainer.appendChild(label);\r\n\r\n    // Re-use the text value from the base key's label.\r\n    label.textContent = key.key.label.textContent;\r\n\r\n    this.div.appendChild(this.previewImgContainer);\r\n\r\n    if(keySpec.flick) {\r\n      const flickSpec = keySpec.flick || {};\r\n\r\n      Object.keys(flickSpec).forEach((dir) => {\r\n        const flickPreview = document.createElement('div');\r\n        flickPreview.className = 'kmw-flick-preview kmw-key-text';\r\n        flickPreview.textContent = flickSpec[dir as typeof OrderedFlickDirections[number]].text;\r\n\r\n        const ps /* preview style */ = flickPreview.style;\r\n\r\n        // is in polar coords, origin toward north, clockwise.\r\n        const coords = FlickNameCoordMap.get(dir as typeof OrderedFlickDirections[number]);\r\n\r\n        const x = coerceZeroes(-Math.sin(coords[0])); // Put 'e' flick at left\r\n        const y = coerceZeroes(Math.cos(coords[0])); // Put 'n' flick at bottom\r\n\r\n        ps.width = '100%';\r\n        ps.textAlign = 'center';\r\n\r\n        if(x < 0) {\r\n          ps.right = (-x * FLICK_OVERFLOW_OFFSET * edgeLength) + 'px';\r\n        } else if(x > 0) {\r\n          ps.left  = ( x * FLICK_OVERFLOW_OFFSET * edgeLength) + 'px';\r\n        } else {\r\n          ps.left = '0px';\r\n        }\r\n\r\n        ps.height = '100%';\r\n        ps.lineHeight = '100%';\r\n\r\n        if(y < 0) {\r\n          ps.bottom = (-y * FLICK_OVERFLOW_OFFSET * edgeLength) + 'px';\r\n        } else if(y > 0) {\r\n          ps.top    = ( y * FLICK_OVERFLOW_OFFSET * edgeLength) + 'px';\r\n        } else {\r\n          ps.top = '0px';\r\n        }\r\n\r\n        this.flickPreviews.set(dir, flickPreview);\r\n        previewImgContainer.appendChild(flickPreview);\r\n      });\r\n    }\r\n\r\n    const hintLabel = this.hintLabel = document.createElement('div');\r\n    hintLabel.className='kmw-key-popup-icon';\r\n\r\n    if(!isPhone) {\r\n      hintLabel.textContent = keySpec == keySpec.hintSrc ? keySpec.hint : keySpec.hintSrc?.text;\r\n      hintLabel.style.fontWeight= hintLabel.textContent == '\\u2022' ? 'bold' : '';\r\n    }\r\n\r\n    base.appendChild(hintLabel);\r\n  }\r\n\r\n  public refreshLayout() {\r\n    const compStyle = getComputedStyle(this.div);\r\n    const height = Number.parseInt(compStyle.height, 10);\r\n\r\n    this.flickPreviews.forEach((ele) => {\r\n      ele.style.lineHeight = ele.style.height = `${height}px`;\r\n    });\r\n  }\r\n\r\n  public cancel() {\r\n    this.onCancel?.();\r\n    this.onCancel = null;\r\n  }\r\n\r\n  public setCancellationHandler(handler: () => void) {\r\n    this.onCancel = handler;\r\n  }\r\n\r\n  public setMultitapHint(currentSrc: ActiveKeyBase, nextSrc: ActiveKeyBase, vkbd?: VisualKeyboard) {\r\n    const current = renameSpecialKey(currentSrc.text, vkbd);\r\n    const next    = renameSpecialKey(nextSrc.text, vkbd);\r\n\r\n    this.label.textContent = current;\r\n    this.hintLabel.textContent = next;\r\n\r\n    this.label.style.fontFamily     = (current != currentSrc.text) ? 'SpecialOSK' : currentSrc.font ?? this.label.style.fontFamily;\r\n    this.hintLabel.style.fontFamily = (next != nextSrc.text) ? 'SpecialOSK' : nextSrc.font ?? this.hintLabel.style.fontFamily;\r\n\r\n    this.emit('startFade');\r\n\r\n    this.clearFlick();\r\n  }\r\n\r\n  public scrollFlickPreview(x: number, y: number) {\r\n    this.clearHint();\r\n\r\n    const scrollStyle = this.previewImgContainer.style;\r\n    const edge = this.flickEdgeLength * FLICK_OVERFLOW_OFFSET;\r\n\r\n    scrollStyle.marginLeft = `${edge * x}px`;\r\n    scrollStyle.marginTop =  `${edge * y}px`;\r\n\r\n    const preferredOrientation = coerceZeroes(y) < 0 ? 'bottom' : 'top';\r\n    if(this.orientation != preferredOrientation) {\r\n      this.orientation = preferredOrientation;\r\n      this.emit('preferredOrientation', preferredOrientation);\r\n    }\r\n  }\r\n\r\n  // These may not exist like this longterm.\r\n  public clearFlick() {\r\n    this.previewImgContainer.style.marginTop = '0px';\r\n    this.previewImgContainer.style.marginLeft = '0px';\r\n\r\n    this.previewImgContainer.classList.add('kmw-flick-clear');\r\n  }\r\n\r\n  public clearHint() {\r\n    this.hintLabel.classList.add('kmw-hint-clear');\r\n  }\r\n\r\n  public clearAll() {\r\n    this.clearFlick();\r\n  }\r\n}",
    "import { EventEmitter } from 'eventemitter3';\r\n\r\nimport {\r\n  ActiveKey,\r\n  ActiveLayout,\r\n  DeviceSpec,\r\n  type InternalKeyboardFont,\r\n  Keyboard,\r\n  KeyboardProperties,\r\n  KeyDistribution,\r\n  KeyEvent,\r\n  Layouts,\r\n  StateKeyMap,\r\n  ActiveSubKey,\r\n  timedPromise,\r\n  ActiveKeyBase\r\n} from 'keyman/engine/keyboard';\r\nimport { isEmptyTransform } from 'keyman/engine/js-processor';\r\n\r\nimport { buildCorrectiveLayout } from './correctionLayout.js';\r\nimport { distributionFromDistanceMaps, keyTouchDistances } from './corrections.js';\r\n\r\nimport {\r\n  GestureRecognizer,\r\n  GestureRecognizerConfiguration,\r\n  GestureSequence,\r\n  GestureSource,\r\n  InputSample,\r\n  PaddedZoneSource\r\n} from '@keymanapp/gesture-recognizer';\r\n\r\nimport { createStyleSheet, StylesheetManager } from 'keyman/engine/dom-utils';\r\n\r\nimport { KeyEventHandler, KeyEventResultCallback } from './views/keyEventSource.interface.js';\r\n\r\nimport GlobeHint from './globehint.interface.js';\r\nimport KeyboardView from './components/keyboardView.interface.js';\r\nimport { type KeyElement, getKeyFrom } from './keyElement.js';\r\nimport KeyTip from './keytip.interface.js';\r\nimport OSKKey from './keyboard-layout/oskKey.js';\r\nimport OSKLayer, { LayerLayoutParams } from './keyboard-layout/oskLayer.js';\r\nimport OSKLayerGroup from './keyboard-layout/oskLayerGroup.js';\r\nimport OSKView from './views/oskView.js';\r\nimport { ParsedLengthStyle } from './lengthStyle.js';\r\nimport { defaultFontSize } from './fontSizeUtils.js';\r\nimport PhoneKeyTip from './input/gestures/browser/keytip.js';\r\nimport { TabletKeyTip } from './input/gestures/browser/tabletPreview.js';\r\nimport CommonConfiguration from './config/commonConfiguration.js';\r\n\r\nimport { DEFAULT_GESTURE_PARAMS, GestureParams, gestureSetForLayout } from './input/gestures/specsForLayout.js';\r\n\r\nimport { getViewportScale } from './screenUtils.js';\r\nimport { HeldRepeater } from './input/gestures/heldRepeater.js';\r\nimport SubkeyPopup from './input/gestures/browser/subkeyPopup.js';\r\nimport Multitap from './input/gestures/browser/multitap.js';\r\nimport { GestureHandler } from './input/gestures/gestureHandler.js';\r\nimport Modipress from './input/gestures/browser/modipress.js';\r\nimport Flick from './input/gestures/browser/flick.js';\r\nimport { GesturePreviewHost } from './keyboard-layout/gesturePreviewHost.js';\r\nimport OSKBaseKey from './keyboard-layout/oskBaseKey.js';\r\nimport { OSKResourcePathConfiguration } from 'keyman/engine/interfaces';\r\nimport KEYMAN_VERSION from '@keymanapp/keyman-version';\r\n\r\n/**\r\n * Gesture history data will include each touchpath sample observed during its\r\n * lifetime in addition to its lifetime stats.\r\n */\r\n// @ts-ignore\r\nconst DEBUG_GESTURES: boolean = KEYMAN_VERSION.TIER != 'stable' || KEYMAN_VERSION.VERSION_ENVIRONMENT != '';\r\n\r\n/**\r\n * If greater than zero, `this.gestureEngine.history` & `this.gestureEngine.historyJSON`\r\n * will contain report-data this many of the most-recently completed gesture inputs in\r\n * order of their time of completion.\r\n */\r\nconst DEBUG_HISTORY_COUNT: number = DEBUG_GESTURES ? 10 : 0;\r\n\r\n// #region KeyRuleEffects\r\ninterface KeyRuleEffects {\r\n  contextToken?: number,\r\n  alteredText?: boolean\r\n};\r\n// #endregion\r\n\r\n// #region VisualKeyboardConfiguration\r\nexport interface VisualKeyboardConfiguration extends CommonConfiguration {\r\n  /**\r\n   * The Keyman keyboard on which to base the on-screen keyboard being represented.\r\n   */\r\n  keyboard: Keyboard,\r\n\r\n  /**\r\n   * Metadata about the keyboard, such as relevant fonts, display name, and language code.\r\n   *\r\n   * Designed for use with `KeyboardStub` objects, which are defined external to the\r\n   * on-screen keyboard module.\r\n   */\r\n  keyboardMetadata: KeyboardProperties,\r\n\r\n  /**\r\n   * OSK-internal:  the top-most element of the full on-screen keyboard element hierarchy.\r\n   *\r\n   * May be set to `null` if `isStatic` is `true`.\r\n   */\r\n  topContainer: HTMLElement,\r\n\r\n  /**\r\n   * Set to `true` for documentation keyboards, disabling all user-interactivity.\r\n   */\r\n  isStatic?: boolean,\r\n\r\n  /**\r\n   * Provide this field with the OSKView's stylesheet per-keyboard manager instance.\r\n   *\r\n   * Interim developer note:  do NOT attach kmwosk.css using the same instance!  We don't\r\n   * want to remove that one when swapping keyboards.\r\n   */\r\n  styleSheetManager: StylesheetManager;\r\n\r\n  /**\r\n   * A promise for loading of the font used by special keys.\r\n   */\r\n  specialFont?: InternalKeyboardFont;\r\n}\r\n// #endregion\r\n\r\ninterface EventMap {\r\n  /**\r\n   * Designed to pass key events off to any consuming modules/libraries.\r\n   *\r\n   * Note:  the following code block was originally used to integrate with the keyboard & input\r\n   * processors, but it requires entanglement with components external to this OSK module.\r\n   */\r\n  'keyevent': KeyEventHandler,\r\n\r\n  'hiderequested': (keyElement: KeyElement) => void,\r\n\r\n  'globekey': (keyElement: KeyElement, on: boolean) => void\r\n}\r\n\r\n// #region VisualKeyboard\r\nexport default class VisualKeyboard extends EventEmitter<EventMap> implements KeyboardView {\r\n  /**\r\n   * The gesture-engine used to support user interaction with this keyboard.\r\n   *\r\n   * Note: `stateToken` should match a layer id from this.layoutKeyboard; this helps to\r\n   * prevent issue #7173.\r\n   */\r\n  readonly gestureEngine: GestureRecognizer<KeyElement, string>;\r\n\r\n  /**\r\n   * Tweakable gesture parameters referenced by supported gestures and the gesture engine.\r\n   */\r\n  get gestureParams(): GestureParams {\r\n    return this.config.gestureParams;\r\n  };\r\n\r\n  // Legacy alias, maintaining a reference for code built against older\r\n  // versions of KMW.\r\n  static readonly specialCharacters = OSKKey.specialCharacters;\r\n\r\n  /**\r\n   * Contains layout properties corresponding to the OSK's layout.  Needs to be public\r\n   * so that its geometry may be updated on rotations and keyboard resize events, as\r\n   * said geometry needs to be accurate for fat-finger probability calculations.\r\n   */\r\n  kbdLayout: ActiveLayout;\r\n  layerGroup: OSKLayerGroup;\r\n\r\n  readonly config: VisualKeyboardConfiguration;\r\n\r\n  layerLocked: boolean = false;\r\n  layerIndex: number = 0; // the index of the default layer\r\n  readonly isRTL: boolean;\r\n\r\n  readonly isStatic: boolean = false;\r\n  _fixedWidthScaling:  boolean = false;\r\n  _fixedHeightScaling: boolean = true;\r\n\r\n  // Stores the base element for this instance of the visual keyboard.\r\n  kbdDiv: HTMLDivElement;\r\n  styleSheet: HTMLStyleElement;\r\n\r\n  /**\r\n   * The configured width for this VisualKeyboard.  May be `undefined` or `null`\r\n   * to allow automatic width scaling.\r\n   */\r\n  private _width: number;\r\n\r\n  /**\r\n   * The configured height for this VisualKeyboard.  May be `undefined` or `null`\r\n   * to allow automatic height scaling.\r\n   */\r\n  private _height: number;\r\n\r\n  /**\r\n   * The main VisualKeyboard element's border-width styling.\r\n   *\r\n   * Assumption:  is a fixed, uniform length that doesn't vary between refreshLayout() calls.\r\n   */\r\n  private _borderWidth: number = 0;\r\n\r\n  /**\r\n   * The computed width for this VisualKeyboard.  May be null if auto sizing\r\n   * is allowed and the VisualKeyboard is not currently in the DOM hierarchy.\r\n   */\r\n  private _computedWidth: number;\r\n\r\n  /**\r\n   * The computed height for this VisualKeyboard.  May be null if auto sizing\r\n   * is allowed and the VisualKeyboard is not currently in the DOM hierarchy.\r\n   */\r\n  private _computedHeight: number;\r\n\r\n  // Style-related properties\r\n  fontFamily: string;\r\n  private _fontSize: ParsedLengthStyle;\r\n  // fontSize: string;\r\n\r\n  // State-related properties\r\n  deleteKey: KeyElement;\r\n  deleting: number; // Tracks a timer id for repeated deletions.\r\n  nextLayer: string;\r\n  currentKey: string;\r\n  stateKeys: StateKeyMap = {\r\n    K_CAPS: false,\r\n    K_NUMLOCK: false,\r\n    K_SCROLL: false\r\n  };\r\n\r\n  // Touch-tracking properties\r\n  touchCount: number;\r\n  currentTarget: KeyElement;\r\n\r\n  // Popup key management\r\n  keytip: KeyTip;\r\n  gesturePreviewHost: GesturePreviewHost;\r\n  globeHint: GlobeHint;\r\n\r\n  activeGestures: GestureHandler[] = [];\r\n  activeModipress: Modipress = null;\r\n  public deferLayout: boolean;\r\n\r\n  // The keyboard object corresponding to this VisualKeyboard.\r\n  public readonly layoutKeyboard: Keyboard;\r\n  public readonly layoutKeyboardProperties: KeyboardProperties;\r\n\r\n  get layerId(): string {\r\n    return this.layerGroup?.activeLayerId ?? 'default';\r\n  }\r\n\r\n  set layerId(value: string) {\r\n    const changedLayer = value != this.layerId;\r\n    if(!this.layerGroup.getLayer(value)) {\r\n      throw new Error(`Keyboard ${this.layoutKeyboard.id} does not have a layer with id ${value}`);\r\n    } else {\r\n      this.layerGroup.activeLayerId = value;\r\n\r\n      // Does not exist for documentation keyboards!\r\n      if(this.gestureEngine) {\r\n        this.gestureEngine.stateToken = value;\r\n      }\r\n    }\r\n\r\n    if(changedLayer && !this.deferLayout) {\r\n      this.updateState();\r\n      // We changed the active layer, but not any layout property of the keyboard as a whole.\r\n      this.layerGroup.refreshLayout(this.constructLayoutParams());\r\n    }\r\n  }\r\n\r\n  get currentLayer(): OSKLayer {\r\n    return this.layerGroup?.activeLayer;\r\n  }\r\n\r\n  // Special keys (for the currently-visible layer)\r\n  get lgKey(): KeyElement { // currently, must be visible for the touch language menu.\r\n    return this.currentLayer?.globeKey?.btn;\r\n  }\r\n\r\n  private get hkKey(): KeyElement { // hide keyboard key\r\n    return this.currentLayer?.hideKey?.btn;\r\n  }\r\n\r\n  public get spaceBar(): KeyElement { // also referenced by the touch language menu.\r\n    return this.currentLayer?.spaceBarKey?.btn;\r\n  }\r\n\r\n  //#region VisualKeyboard - constructor and helpers\r\n\r\n  /**\r\n   * @param       {Object}      PVK         Visual keyboard name\r\n   * @param       {Object}      Lhelp       true if OSK defined for this keyboard\r\n   * @param       {Object}      layout0\r\n   * @param       {Number}      kbdBitmask  Keyboard modifier bitmask\r\n   * Description  Generates the base visual keyboard element, prepping for attachment to KMW\r\n   */\r\n  constructor(config: VisualKeyboardConfiguration) {\r\n    super();\r\n\r\n    this.config = config; // TODO:  replace related parameters.\r\n\r\n    this.config.device = config.device || config.hostDevice;\r\n    this.config.isEmbedded = config.isEmbedded || false;\r\n\r\n    if (config.isStatic) {\r\n      this.isStatic = config.isStatic;\r\n    }\r\n\r\n    this.config.gestureParams ||= {\r\n      ...DEFAULT_GESTURE_PARAMS,\r\n    };\r\n\r\n    this._fixedWidthScaling  = this.device.touchable && !this.isStatic;\r\n    this._fixedHeightScaling = this.device.touchable && !this.isStatic;\r\n\r\n    // Create the collection of HTML elements from the device-dependent layout object\r\n    var Lkbd = document.createElement('div');\r\n    this.config.styleSheetManager = config.styleSheetManager || new StylesheetManager(Lkbd);\r\n\r\n    let layout: ActiveLayout;\r\n    if (config.keyboard) {\r\n      layout = this.kbdLayout = config.keyboard.layout(config.device.formFactor);\r\n      this.layoutKeyboardProperties = config.keyboardMetadata;\r\n      this.isRTL = config.keyboard.isRTL;\r\n    } else {\r\n      // This COULD be called with no backing keyboard; KMW will try to force-show the OSK even without\r\n      // a backing keyboard on mobile, using the most generic default layout as the OSK's base.\r\n      //\r\n      // In KMW's current state, it'd take a major break, though - Processor always has an activeKeyboard,\r\n      // even if it's \"hollow\".\r\n      let rawLayout = Layouts.buildDefaultLayout(null, null, config.device.formFactor);\r\n      layout = this.kbdLayout = ActiveLayout.polyfill(rawLayout, null, config.device.formFactor);\r\n      // null will probably need to be replaced with a defined value.\r\n      this.layoutKeyboardProperties = null;\r\n      this.isRTL = false;\r\n    }\r\n\r\n    // Override font if specified by keyboard\r\n    if ('font' in layout) {\r\n      this.fontFamily = layout['font'];\r\n    } else {\r\n      this.fontFamily = '';\r\n    }\r\n\r\n    // Now to build the actual layout.\r\n    const formFactor = config.device.formFactor;\r\n    this.layoutKeyboard = config.keyboard;\r\n    if (!this.layoutKeyboard) {\r\n      // May occasionally be null in embedded contexts; have seen this when iOS engine sets\r\n      // keyboard height during change of keyboards.\r\n      this.layoutKeyboard = new Keyboard(null);\r\n    }\r\n\r\n    this.layerGroup = new OSKLayerGroup(this, this.layoutKeyboard, formFactor);\r\n\r\n    // Now that we've properly processed the keyboard's layout, mark it as calibrated.\r\n    // TODO:  drop the whole 'calibration' thing.  The newer layout system supersedes the\r\n    // need for it.  (Is no longer really used, so the drop ought be clean.)\r\n    this.layoutKeyboard.markLayoutCalibrated(formFactor);\r\n\r\n    // Append the OSK layer group container element to the containing element\r\n    //osk.keyMap = divLayerContainer;\r\n    Lkbd.appendChild(this.layerGroup.element);\r\n\r\n    // Set base class - OS and keyboard added for Build 360\r\n    this.kbdDiv = Lkbd;\r\n\r\n    // For 'live' touch keyboards, attach touch-based event handling.\r\n    // Needs to occur AFTER this.kbdDiv is initialized.\r\n    if (!this.isStatic) {\r\n      this.gestureEngine = this.constructGestureEngine();\r\n    }\r\n\r\n    Lkbd.classList.add(config.device.formFactor, 'kmw-osk-inner-frame');\r\n\r\n    // Tag the VisualKeyboard with a CSS class corresponding to its ID.\r\n    let kbdID: string = this.layoutKeyboard?.id.replace('Keyboard_','') ?? '';\r\n\r\n    const separatorIndex = kbdID.indexOf('::');\r\n    if(separatorIndex != -1) { // We used to also test if we were in embedded mode, but... whatever.\r\n      // De-namespaces the ID for use with CSS classes.\r\n      // Assumes that keyboard IDs may not contain the ':' symbol.\r\n      kbdID = kbdID.substring(separatorIndex + 2);\r\n    }\r\n\r\n    const kbdClassSuffix = 'kmw-keyboard-' + kbdID;\r\n    this.element.classList.add(kbdClassSuffix);\r\n  }\r\n\r\n  private constructGestureEngine(): GestureRecognizer<KeyElement, string> {\r\n    const config: GestureRecognizerConfiguration<KeyElement, string> = {\r\n      targetRoot: this.element,\r\n      // document.body is the event root for mouse interactions b/c we need to track\r\n      // when the mouse leaves the VisualKeyboard's hierarchy.\r\n      mouseEventRoot: document.body,\r\n      // Note: at this point in execution, the value will evaluate to NaN!  Height hasn't been set yet.\r\n      // BUT:  we need to establish the instance now; we can update it later when height _is_ set.\r\n      //\r\n      // Allow keys to be preserved while the contact point is within banner space + a small fudge-factor.\r\n      maxRoamingBounds: new PaddedZoneSource(this.topContainer, [NaN]),\r\n      // touchEventRoot:  this.element, // is the default\r\n      itemIdentifier: (sample, target) => {\r\n        /* ALWAYS use the findNearestKey function.\r\n         * MDN spec for `target`, which comes from Touch.target for touch-based interactions:\r\n         *\r\n         * > The read-only target property of the Touch interface returns the (EventTarget) on which the touch contact\r\n         *   started when it was first placed on the surface, even if the touch point has since moved outside the\r\n         *   interactive area of that element[...]\r\n         *\r\n         * Therefore, `target` is for the initial element, not necessarily the one currently under\r\n         * the touchpoint - which matters during a 'touchmove'.\r\n         */\r\n\r\n        return this.layerGroup.findNearestKey(sample);\r\n      },\r\n      /* When enabled, facilitates investigation of perceived odd behaviors observed on Android devices\r\n        in association with issues like #11221 and #11183.  \"Recordings\" are only accessible within\r\n        the mobile apps via WebView inspection and outside the apps via Developer mode in the browser;\r\n        they are not transmitted or uploaded automatically.\r\n      */\r\n      recordingMode: DEBUG_GESTURES,\r\n      historyLength: DEBUG_HISTORY_COUNT\r\n    };\r\n\r\n    const recognizer = new GestureRecognizer(gestureSetForLayout(this.kbdLayout, this.gestureParams), config);\r\n    recognizer.stateToken = this.layerId;\r\n\r\n    const sourceTrackingMap: Record<string, {\r\n      source: GestureSource<KeyElement, string>,\r\n      roamingHighlightHandler: (sample: InputSample<KeyElement, string>) => void,\r\n      key: KeyElement,\r\n      previewHost: GesturePreviewHost\r\n    }> = {};\r\n\r\n    const clearActiveGestures = (excludedTouchpointId?: string) => {\r\n      for(const identifier of Object.keys(sourceTrackingMap)) {\r\n        // Filter out the exclusion if one exists.\r\n        if(identifier == excludedTouchpointId) {\r\n          continue;\r\n        }\r\n\r\n        // Any _other_ gesture, though - yeah, that should cancel out.\r\n        // Note:  this can cancel ongoing modipress gestures, which may trigger an unexpected layer shift.\r\n        const entry = sourceTrackingMap[identifier];\r\n        entry.source.terminate(true);\r\n      }\r\n    }\r\n\r\n    const gestureHandlerMap = new Map<GestureSequence<KeyElement>, GestureHandler[]>();\r\n\r\n    // Now to set up event-handling links.\r\n    // This handler should probably vary based on the keyboard: do we allow roaming touches or not?\r\n    recognizer.on('inputstart', (source) => {\r\n      // Yay for closure-capture mechanics:  we can \"keep a lock\" on this newly-starting\r\n      // gesture's highlighted key here.\r\n      const previewHost = this.highlightKey(source.currentSample.item, true);\r\n      if(previewHost) {\r\n        this.gesturePreviewHost?.cancel();\r\n        this.gesturePreviewHost = previewHost;\r\n      }\r\n\r\n      // Make sure we're tracking the source and its currently-selected item (the latter, as we're\r\n      // highlighting it)\r\n      sourceTrackingMap[source.identifier] = {\r\n        source: source,\r\n        roamingHighlightHandler: null,\r\n        key: source.currentSample.item,\r\n        previewHost: previewHost\r\n      }\r\n      const trackingEntry = sourceTrackingMap[source.identifier];\r\n\r\n      const endHighlighting = () => {\r\n        // The base call will occur before our \"is this a multitap?\" check otherwise.\r\n        // That check will unset the field so that it's unaffected by this check.\r\n        timedPromise(0).then(() => {\r\n          const previewHost = trackingEntry.previewHost;\r\n\r\n          // If we ever allow concurrent previews, check if it exists and matches\r\n          // a VisualKeyboard-tracked entry; if so, clear that too.\r\n          if(previewHost) {\r\n            previewHost.cancel();\r\n            this.gesturePreviewHost = null;\r\n            trackingEntry.previewHost = null;\r\n          }\r\n          if(trackingEntry.key) {\r\n            this.highlightKey(trackingEntry.key, false);\r\n            trackingEntry.key = null;\r\n          }\r\n        })\r\n      }\r\n\r\n      // Fix:  if flicks enabled, no roaming.\r\n\r\n      // Note:  GestureSource does not currently auto-terminate if there are no\r\n      // remaining matchable gestures.  Though, we shouldn't facilitate roaming\r\n      // anyway if we've turned it off.\r\n      trackingEntry.roamingHighlightHandler = (sample) => {\r\n        // Maintain highlighting\r\n        const key = sample.item;\r\n        const oldKey = sourceTrackingMap[source.identifier].key;\r\n\r\n        if(!this.kbdLayout.hasFlicks && key != oldKey) {\r\n          this.highlightKey(oldKey, false);\r\n          this.gesturePreviewHost?.cancel();\r\n          this.gesturePreviewHost = null;\r\n          trackingEntry.previewHost = null;\r\n\r\n          const previewHost = this.highlightKey(key, true);\r\n          if(previewHost) {\r\n            this.gesturePreviewHost = previewHost;\r\n            trackingEntry.previewHost = previewHost;\r\n          }\r\n          sourceTrackingMap[source.identifier].key = key;\r\n        }\r\n      }\r\n\r\n      source.path.on('invalidated', endHighlighting);\r\n      source.path.on('complete', endHighlighting);\r\n      source.path.on('step', trackingEntry.roamingHighlightHandler);\r\n    });\r\n\r\n    //\r\n    recognizer.on('recognizedgesture', (gestureSequence) => {\r\n      // If we receive a new gesture while there's an active modipress state, 'lock' it immediately;\r\n      // the state has been utilized, so we want to return to the original layer when the modipress\r\n      // key is released.\r\n      this.activeModipress?.setLocked();\r\n\r\n      // The highlighting-disablement part of `onRoamingSourceEnd` is 100% safe, so we can leave\r\n      // that running.\r\n\r\n      // Drop any roaming-touch specific behaviors here.\r\n\r\n      gestureSequence.on('complete', () => {\r\n        // Do cleanup - we'll no longer be tracking these, but that's only confirmed now.\r\n        // Multitouch does reference tracking data for a source after its completion,\r\n        // but only while still permitting new touches.  If we're here, that time is over.\r\n        for(let id of gestureSequence.allSourceIds) {\r\n          // If the original preview host lives on, ensure it's cancelled now.\r\n          if(sourceTrackingMap[id]?.previewHost) {\r\n            this.gesturePreviewHost = null;\r\n            sourceTrackingMap[id].previewHost.cancel();\r\n          }\r\n          delete sourceTrackingMap[id];\r\n        }\r\n      });\r\n\r\n      // This should probably vary based on the type of gesture.\r\n      gestureSequence.on('stage', (gestureStage, configChanger) => {\r\n        const existingPreviewHost = gestureSequence.allSourceIds.map((id) => {\r\n          return sourceTrackingMap[id]?.previewHost;\r\n        }).find((obj) => !!obj);\r\n\r\n        const clearPreviewHost = () => {\r\n          if(existingPreviewHost) {\r\n            existingPreviewHost.cancel();\r\n            this.gesturePreviewHost = null;\r\n          }\r\n        }\r\n\r\n        let handlers: GestureHandler[] = gestureHandlerMap.get(gestureSequence);\r\n        if(!handlers && existingPreviewHost && !gestureStage.matchedId.includes('flick')) {\r\n          existingPreviewHost.clearFlick();\r\n        }\r\n\r\n        let trackingEntry: typeof sourceTrackingMap[string];\r\n        // Disable roaming-touch highlighting (and current highlighting) for all\r\n        // touchpoints included in a gesture, even newly-included ones as they occur.\r\n        for(let id of gestureStage.allSourceIds) {\r\n          const clearRoaming = (trackingEntry: typeof sourceTrackingMap['']) => {\r\n            if(trackingEntry.key) {\r\n              this.highlightKey(trackingEntry.key, false);\r\n              trackingEntry.key = null;\r\n            }\r\n\r\n            trackingEntry.source.path.off('step', trackingEntry.roamingHighlightHandler);\r\n          }\r\n\r\n          trackingEntry = sourceTrackingMap[id];\r\n\r\n          if(trackingEntry) {\r\n            clearRoaming(trackingEntry);\r\n          } else {\r\n            // May arise during multitaps, as the 'wait' stage instantly accepts new incoming\r\n            // sources before they are reported fully to the `inputstart` event.\r\n            const _id = id;\r\n            timedPromise(0).then(() => {\r\n              const tracker = sourceTrackingMap[_id];\r\n              if(tracker) {\r\n                clearRoaming(tracker);\r\n              }\r\n            });\r\n          }\r\n        }\r\n\r\n\r\n        // First, if we've configured the gesture to generate a keystroke, let's handle that.\r\n        const gestureKey = gestureStage.item;\r\n\r\n        const coordSource = gestureStage.sources[0];\r\n        const coord: InputSample<KeyElement, string> = coordSource ? coordSource.currentSample : null;\r\n\r\n        let keyResult: KeyRuleEffects = null;\r\n\r\n        // Longpresses, multitaps and flicks do special key-mapping stuff internally and produce + raise\r\n        // their key events directly.\r\n        if(gestureKey && !(handlers && handlers[0].directlyEmitsKeys)) {\r\n          let correctionKeyDistribution: KeyDistribution;\r\n          const baseDistanceMap = this.getSimpleTapCorrectionDistances(coordSource.currentSample, gestureKey.key.spec as ActiveKey);\r\n\r\n          if(handlers) {\r\n            // Certain gestures (especially flicks) like to consider the base layout as part\r\n            // of their corrective-distribution calculations.\r\n            //\r\n            // May be `null` for gestures that don't need custom correction handling,\r\n            // such as modipresses or initial/simple-tap keystrokes.\r\n            correctionKeyDistribution = handlers[0].currentStageKeyDistribution(baseDistanceMap);\r\n          }\r\n\r\n          if(!correctionKeyDistribution) {\r\n            correctionKeyDistribution = distributionFromDistanceMaps(baseDistanceMap);\r\n          }\r\n\r\n          // If there's no active modipress, but there WAS one when the longpress started,\r\n          // keep the layer locked for the keystroke.\r\n          const shouldLockLayer = !this.layerLocked && handlers && (handlers[0] instanceof SubkeyPopup) && handlers[0].shouldLockLayer;\r\n          try {\r\n            shouldLockLayer && this.lockLayer(true);\r\n            // Once the best coord to use for fat-finger calculations has been determined:\r\n            keyResult = this.modelKeyClick(gestureStage.item, coord, correctionKeyDistribution);\r\n          } finally {\r\n            shouldLockLayer && this.lockLayer(false);\r\n          }\r\n\r\n        }\r\n\r\n        // Outside of passing keys along... the handling of later stages is delegated\r\n        // to gesture-specific handling classes.\r\n        if(gestureSequence.stageReports.length > 1 && gestureStage.matchedId != 'modipress-end') {\r\n          return;\r\n        }\r\n\r\n        // So, if this is the first stage, this is where we need to perform that delegation.\r\n        const baseItem = gestureSequence.stageReports[0].item;\r\n\r\n        // -- Scratch-space as gestures start becoming integrated --\r\n        // Reordering may follow at some point.\r\n        //\r\n        // Potential long-term idea:  only handle the first stage; delegate future stages to\r\n        // specialized handlers for the remainder of the sequence.\r\n        // Should work for modipresses, too... I think.\r\n        if(gestureStage.matchedId == 'special-key-start') {\r\n          if(gestureKey.key.spec.baseKeyID == 'K_BKSP') {\r\n            // There shouldn't be a preview host for special keys... but it doesn't hurt to add the check.\r\n            clearPreviewHost();\r\n\r\n            // Possible enhancement:  maybe update the held location for the backspace if there's movement?\r\n            // But... that seems pretty low-priority.\r\n            //\r\n            // Merely constructing the instance is enough; it'll link into the sequence's events and\r\n            // handle everything that remains for the backspace from here.\r\n            handlers = [new HeldRepeater(gestureSequence, () => this.modelKeyClick(gestureKey, coord))];\r\n          } else if(gestureKey.key.spec.baseKeyID == \"K_LOPT\") { // globe key\r\n            gestureSequence.on('complete', () => {\r\n              gestureKey.key.highlight(false);\r\n              this.emit('globekey', gestureKey, false);\r\n            });\r\n\r\n            // Cancel all other gesture sources; a language-menu interaction voids all previously-active\r\n            // gestures that haven't completed.\r\n            clearActiveGestures(coordSource.identifier);\r\n\r\n            // Re-highlight the key - it was auto de-highlighted upon stage-select.\r\n            gestureKey.key.highlight(true);\r\n          }\r\n        } else if(gestureStage.matchedId.indexOf('longpress') > -1) {\r\n          clearPreviewHost();\r\n\r\n          // Matches:  'longpress', 'longpress-reset'.\r\n          // Likewise.\r\n          handlers = [new SubkeyPopup(\r\n            gestureSequence,\r\n            configChanger,\r\n            this,\r\n            gestureSequence.stageReports[0].sources[0].baseItem,\r\n            this.gestureParams\r\n          )];\r\n\r\n          // baseItem is sometimes null during a keyboard-swap... for app/browser touch-based language menus.\r\n          // not ideal, but it is what it is; just let it pass by for now.\r\n        } else if(baseItem?.key.spec.multitap && (gestureStage.matchedId == 'initial-tap' || gestureStage.matchedId == 'multitap' || gestureStage.matchedId == 'modipress-start')) {\r\n          // Detach the lifetime of the preview from the current touch.\r\n          trackingEntry.previewHost = null;\r\n\r\n          gestureSequence.on('complete', () => {\r\n            clearPreviewHost();\r\n          })\r\n\r\n          // Past that, mere construction of the class for delegation is enough.\r\n          handlers = [new Multitap(gestureSequence, this, baseItem, keyResult.contextToken, existingPreviewHost)];\r\n        } else if(gestureStage.matchedId.indexOf('flick') > -1) {\r\n          handlers = [new Flick(\r\n            gestureSequence,\r\n            configChanger,\r\n            this,\r\n            gestureSequence.stageReports[0].sources[0].baseItem,\r\n            this.gestureParams,\r\n            existingPreviewHost\r\n          )];\r\n        } else if(gestureStage.matchedId.includes('modipress') && gestureStage.matchedId.includes('-start')) {\r\n          // There shouldn't be a preview host for modipress keys... but it doesn't hurt to add the check.\r\n          clearPreviewHost();\r\n\r\n          if(this.layerLocked) {\r\n            console.warn(\"Unexpected state:  modipress start attempt during an active modipress\");\r\n          } else {\r\n            handlers ||= [];\r\n\r\n            const modipressHandler = new Modipress(gestureSequence, this, () => {\r\n              const index = handlers.indexOf(modipressHandler);\r\n              if(index > -1) {\r\n                handlers.splice(index, 1);\r\n              }\r\n              this.activeModipress = null;\r\n            });\r\n\r\n            handlers.push(modipressHandler);\r\n            this.activeModipress = modipressHandler;\r\n          }\r\n        } else {\r\n          // Probably an initial-tap or a simple-tap.\r\n          clearPreviewHost();\r\n        }\r\n\r\n        if(handlers) {\r\n          this.activeGestures = this.activeGestures.concat(handlers);\r\n          gestureHandlerMap.set(gestureSequence, handlers);\r\n          gestureSequence.on('complete', () => {\r\n            const completingHandlers = this.activeGestures.filter(handler => handlers.includes(handler));\r\n            this.activeGestures = this.activeGestures.filter((handler) => !handlers.includes(handler));\r\n\r\n            // Robustness check; make extra-sure that we can safely leave a modipress state.\r\n            completingHandlers.forEach((handler) => {\r\n              if(handler instanceof Modipress) {\r\n                handler.cancel();\r\n              }\r\n            });\r\n          });\r\n        }\r\n      })\r\n    });\r\n\r\n    return recognizer;\r\n  }\r\n\r\n  public get element(): HTMLDivElement {\r\n    return this.kbdDiv;\r\n  }\r\n\r\n  public get device(): DeviceSpec {\r\n    return this.config.device;\r\n  }\r\n\r\n  public get hostDevice(): DeviceSpec {\r\n    return this.config.hostDevice;\r\n  }\r\n\r\n  public get fontRootPath(): string {\r\n    return this.config.pathConfig.fonts;\r\n  }\r\n\r\n  public get styleSheetManager(): StylesheetManager {\r\n    return this.config.styleSheetManager;\r\n  }\r\n\r\n  public get topContainer(): HTMLElement {\r\n    return this.config.topContainer;\r\n  }\r\n\r\n  public get isEmbedded(): boolean {\r\n    return this.config.isEmbedded;\r\n  }\r\n\r\n  public postInsert(): void { }\r\n\r\n  /**\r\n   * The configured width for this VisualKeyboard.  May be `undefined` or `null`\r\n   * to allow automatic width scaling.\r\n   */\r\n  get width(): number {\r\n    return this._width;\r\n  }\r\n\r\n  /**\r\n   * The configured height for this VisualKeyboard.  May be `undefined` or `null`\r\n   * to allow automatic height scaling.\r\n   */\r\n  get height(): number {\r\n    return this._height;\r\n  }\r\n\r\n  get layoutWidth(): ParsedLengthStyle {\r\n    if (this.usesFixedWidthScaling) {\r\n      let baseWidth = this.width;\r\n      baseWidth -= this._borderWidth * 2;\r\n      return ParsedLengthStyle.inPixels(baseWidth);\r\n    } else {\r\n      return ParsedLengthStyle.forScalar(1);\r\n    }\r\n  }\r\n\r\n  get layoutHeight(): ParsedLengthStyle {\r\n    if (this.usesFixedHeightScaling) {\r\n      let baseHeight = this.height;\r\n      baseHeight -= this._borderWidth * 2;\r\n      return ParsedLengthStyle.inPixels(baseHeight);\r\n    } else {\r\n      return ParsedLengthStyle.forScalar(1);\r\n    }\r\n  }\r\n\r\n  get internalHeight(): ParsedLengthStyle {\r\n    if (this.usesFixedHeightScaling) {\r\n      // Touch OSKs may apply internal padding to prevent row cropping at the edges.\r\n      // ... why not precompute both, rather than recalculate each time?\r\n      // - appears to contribute to layout reflow costs on layer swaps!\r\n      return ParsedLengthStyle.inPixels(this.layoutHeight.val - this._borderWidth * 2 - this.layerGroup.verticalPadding);\r\n    } else {\r\n      return ParsedLengthStyle.forScalar(1);\r\n    }\r\n  }\r\n\r\n  get fontSize(): ParsedLengthStyle {\r\n    if (!this._fontSize) {\r\n      this._fontSize = new ParsedLengthStyle('1em');\r\n    }\r\n    return this._fontSize;\r\n  }\r\n\r\n  set fontSize(value: ParsedLengthStyle) {\r\n    this._fontSize = value;\r\n    this.kbdDiv.style.fontSize = value.styleString;\r\n  }\r\n\r\n  /**\r\n   * Uses fixed scaling for widths of internal elements, rather than relative,\r\n   * percent-based scaling.\r\n   */\r\n  public get usesFixedWidthScaling(): boolean {\r\n    return this._fixedWidthScaling;\r\n  }\r\n\r\n  public set usesFixedWidthScaling(val: boolean) {\r\n    this._fixedWidthScaling = val;\r\n  }\r\n\r\n  /**\r\n   * Uses fixed scaling for heights of internal elements, rather than relative,\r\n   * percent-based scaling.\r\n   */\r\n  public get usesFixedHeightScaling(): boolean {\r\n    return this._fixedHeightScaling;\r\n  }\r\n\r\n  public set usesFixedHeightScaling(val: boolean) {\r\n    this._fixedHeightScaling = val;\r\n  }\r\n\r\n  /**\r\n   * Denotes if the VisualKeyboard or its containing OSKView / OSKManager uses\r\n   * fixed positioning.\r\n   */\r\n  public get usesFixedPositioning(): boolean {\r\n    let node: HTMLElement = this.element;\r\n    while (node) {\r\n      if (getComputedStyle(node).position == 'fixed') {\r\n        return true;\r\n      } else {\r\n        node = node.offsetParent as HTMLElement;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Sets & tracks the size of the VisualKeyboard's primary element.\r\n   * @param width\r\n   * @param height\r\n   * @param pending Set to `true` if called during a resizing interaction\r\n   */\r\n  public setSize(width?: number, height?: number, pending?: boolean) {\r\n    this._width = width;\r\n    this._height = height;\r\n\r\n    if (this.kbdDiv) {\r\n      this.kbdDiv.style.width = width ? this._width + 'px' : '';\r\n      this.kbdDiv.style.height = height ? this._height + 'px' : '';\r\n\r\n      if (!this.device.touchable && height) {\r\n        this.fontSize = new ParsedLengthStyle((this._height / 8) + 'px');\r\n      }\r\n\r\n      if (!pending) {\r\n        this.refreshLayout();\r\n      }\r\n    }\r\n  }\r\n  //#endregion\r\n\r\n  //#region VisualKeyboard - OSK touch handlers\r\n  getTouchCoordinatesOnKeyboard(input: InputSample<KeyElement, string>) {\r\n    // `input` is already in keyboard-local coordinates.  It's not scaled, though.\r\n    let offsetCoords = { x: input.targetX, y: input.targetY };\r\n\r\n    // The layer group's element always has the proper width setting, unlike kbdDiv itself.\r\n    offsetCoords.x /= this.layerGroup.element.offsetWidth;\r\n    offsetCoords.y /= this.kbdDiv.offsetHeight;\r\n\r\n    return offsetCoords;\r\n  }\r\n\r\n  /**\r\n   * Builds the fat-finger distribution used by predictive text as its source for likelihood\r\n   * of alternate keystroke sequences.\r\n   * @param input The input coordinate of the event that led to use of this function\r\n   * @param keySpec The spec of the key directly triggered by the input event.  May be for a subkey.\r\n   * @returns\r\n   */\r\n  getSimpleTapCorrectionDistances(input: InputSample<KeyElement, string>, keySpec?: ActiveKey): Map<ActiveKeyBase, number> {\r\n    // Note:  if subkeys are active, they will still be displayed at this time.\r\n    let touchKbdPos = this.getTouchCoordinatesOnKeyboard(input);\r\n    let layerGroup = this.layerGroup.element;  // Always has proper dimensions, unlike kbdDiv itself.\r\n    const width = layerGroup.offsetWidth, height = this.kbdDiv.offsetHeight;\r\n\r\n    // Prevent NaN breakages.\r\n    if (!width || !height) {\r\n      return new Map();\r\n    }\r\n\r\n    let kbdAspectRatio = width / height;\r\n\r\n    const correctiveLayout = buildCorrectiveLayout(this.kbdLayout.getLayer(this.layerId), kbdAspectRatio);\r\n    return keyTouchDistances(touchKbdPos, correctiveLayout);\r\n  }\r\n\r\n  /**\r\n   * Get the current key target from the touch point element within the key\r\n   *\r\n   * @param   {Object}  t   element at touch point\r\n   * @return  {Object}      the key element (or null)\r\n   **/\r\n  keyTarget(target: HTMLElement | EventTarget): KeyElement {\r\n    let t = <HTMLElement>target;\r\n\r\n    try {\r\n      if (t) {\r\n        if (t.classList.contains('kmw-key')) {\r\n          return getKeyFrom(t);\r\n        }\r\n        if (t.parentNode && (t.parentNode as HTMLElement).classList.contains('kmw-key')) {\r\n          return getKeyFrom(t.parentNode);\r\n        }\r\n        if (t.firstChild && (t.firstChild as HTMLElement).classList.contains('kmw-key')) {\r\n          return getKeyFrom(t.firstChild);\r\n        }\r\n      }\r\n    } catch (ex) { }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   *  Repeat backspace as long as the backspace key is held down\r\n   **/\r\n  repeatDelete: () => void = function (this: VisualKeyboard) {\r\n    if (this.deleting) {\r\n      this.modelKeyClick(this.deleteKey);\r\n      this.deleting = window.setTimeout(this.repeatDelete, 100);\r\n    }\r\n  }.bind(this);\r\n\r\n  /**\r\n   * Cancels any active repeatDelete() timeouts, ensuring that\r\n   * repeating backspace operations are properly terminated.\r\n   */\r\n  cancelDelete() {\r\n    // Clears the delete-repeating timeout.\r\n    if (this.deleting) {\r\n      window.clearTimeout(this.deleting);\r\n    }\r\n    this.deleting = 0;\r\n  }\r\n  //#endregion\r\n\r\n  modelKeyClick(e: KeyElement, input?: InputSample<KeyElement, string>, keyDistribution?: KeyDistribution) {\r\n    let keyEvent = this.initKeyEvent(e);\r\n\r\n    if (input) {\r\n      keyEvent.source = input;\r\n    }\r\n    if(keyDistribution) {\r\n      keyEvent.keyDistribution = keyDistribution;\r\n    }\r\n\r\n    return this.raiseKeyEvent(keyEvent, e);\r\n  }\r\n\r\n  initKeyEvent(e: KeyElement) {\r\n    // Turn off key highlighting (or preview)\r\n    this.highlightKey(e, false);\r\n\r\n    // Future note:  we need to refactor osk.OSKKeySpec to instead be a 'tag field' for\r\n    // keyboards.ActiveKey.  (Prob with generics, allowing the Web-only parts to\r\n    // be fully specified within the tag.)\r\n    //\r\n    // Would avoid the type shenanigans needed here because of our current type-abuse setup\r\n    // for key spec tracking.\r\n    let keySpec = (e['key'] ? e['key'].spec : null) as unknown as ActiveKey;\r\n    if (!keySpec) {\r\n      return null;\r\n    }\r\n\r\n    // Return the event object.\r\n    return this.keyEventFromSpec(keySpec);\r\n  }\r\n\r\n  keyEventFromSpec(keySpec: ActiveKey | ActiveSubKey) {\r\n    //let core = com.keyman.singleton.core; // only singleton-based ref currently needed here.\r\n\r\n    // Start:  mirrors _GetKeyEventProperties\r\n\r\n    // First check the virtual key, and process shift, control, alt or function keys\r\n    //let Lkc = keySpec.constructKeyEvent(core.keyboardProcessor, this.device);\r\n    let Lkc = this.layoutKeyboard.constructKeyEvent(keySpec, this.device, this.stateKeys);\r\n\r\n    /* In case of \"fun\" edge cases caused by JS's single-threadedness & event processing queue.\r\n      *\r\n      * Should a touch occur on an OSK key during active JS execution that results in a change\r\n      * of the active keyboard, it's possible for an OSK key to be evaluated against an\r\n      * unexpected, non-matching keyboard - one that could even be `null`!\r\n      *\r\n      * So, we mark the keyboard backing the OSK as the 'correct' keyboard for this key.\r\n      */\r\n    Lkc.srcKeyboard = this.layoutKeyboard;\r\n\r\n    // End - mirrors _GetKeyEventProperties\r\n\r\n    // Return the event object.\r\n    return Lkc;\r\n  }\r\n\r\n  // cancel = function(e) {} //cancel event is never generated by iOS\r\n\r\n  /**\r\n   * Function     _UpdateVKShiftStyle\r\n   * Scope        Private\r\n   * @param       {string=}   layerId\r\n   * Description  Updates the OSK's visual style for any toggled state keys\r\n   */\r\n  _UpdateVKShiftStyle(layerId?: string) {\r\n    var i;\r\n    //let core = com.keyman.singleton.core;\r\n\r\n    if (!layerId) {\r\n      layerId = this.layerId;\r\n    }\r\n\r\n    const layer = this.layerGroup.getLayer(layerId);\r\n    if (!layer) {\r\n      return;\r\n    }\r\n\r\n    if(this.gestureEngine) {\r\n      this.gestureEngine.stateToken = layerId;\r\n    }\r\n\r\n    // So... through KMW 14, we actually never tracked the capsKey, numKey, and scrollKey\r\n    // properly for keyboard-defined layouts - only _default_, desktop-style layouts.\r\n    //\r\n    // We _could_ remedy this, but then... touch keyboards like khmer_angkor actually\r\n    // repurpose certain state keys, and in an inconsistent manner at that.\r\n    // Considering the potential complexity of touch layouts, with multiple possible\r\n    // layer-shift keys, it's likely best to just leave things as they are for now.\r\n    if (!this.layoutKeyboard?.usesDesktopLayoutOnDevice(this.device)) {\r\n      return;\r\n    }\r\n\r\n    // Set the on/off state of any visible state keys.\r\n    const states = ['K_CAPS', 'K_NUMLOCK', 'K_SCROLL'] as const;\r\n    const keys = [layer.capsKey, layer.numKey, layer.scrollKey];\r\n\r\n    for (i = 0; i < keys.length; i++) {\r\n      // Skip any keys not in the OSK!\r\n      if (keys[i] == null) {\r\n        continue;\r\n      }\r\n\r\n      keys[i].setToggleState(this.stateKeys[states[i]]);\r\n    }\r\n  }\r\n\r\n  updateStateKeys(stateKeys: StateKeyMap) {\r\n    for(let key of Object.keys(this.stateKeys)) {\r\n      this.stateKeys[key as keyof StateKeyMap] = stateKeys[key as keyof StateKeyMap];\r\n    }\r\n\r\n    this._UpdateVKShiftStyle();\r\n  }\r\n\r\n  /**\r\n   *  Add or remove a class from a keyboard key (when touched or clicked)\r\n   *  or add a key preview for phone devices\r\n   *\r\n   *  @param    {Object}    key   key affected\r\n   *  @param    {boolean}   on    add or remove highlighting\r\n   **/\r\n  highlightKey(key: KeyElement, on: boolean): GesturePreviewHost {\r\n    // Do not change element class unless a key\r\n    if (!key || !key.key || (key.className == '') || (key.className.indexOf('kmw-key-row') >= 0)) {\r\n      return null;\r\n    }\r\n\r\n    // For phones, use key preview rather than highlighting the key,\r\n    const usePreview = key.key.allowsKeyTip();\r\n    const modalVizActive = this.activeGestures.find((handler) => handler.hasModalVisualization);\r\n\r\n    // If the subkey menu (or a different modal visualization) is active, do not show the key tip -\r\n    // even if for a different contact point.\r\n    on = modalVizActive ? false : on;\r\n\r\n    key.key.highlight(on);\r\n    if(!on) {\r\n      return null;\r\n    }\r\n\r\n    if (usePreview) {\r\n      if(this.gesturePreviewHost) {\r\n        return null; // do not override lingering previews for still-active gestures.\r\n      } else {\r\n        return this.showGesturePreview(key);\r\n      }\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use of `getComputedStyle` is ideal, but in many of our use cases its preconditions are not met.\r\n   * This function allows us to calculate the font size in those situations.\r\n   */\r\n  getKeyEmFontSize(): ParsedLengthStyle {\r\n    if (!this.fontSize) {\r\n      return new ParsedLengthStyle('0px');\r\n    }\r\n\r\n    if (this.device.formFactor == 'desktop') {\r\n      let keySquareScale = 0.8; // Set in kmwosk.css, is relative.\r\n      return this.fontSize.scaledBy(keySquareScale);\r\n    } else {\r\n      const emSizeStr = getComputedStyle(document.body).fontSize;\r\n      const emSize = new ParsedLengthStyle(emSizeStr);\r\n\r\n      let emScale = 1;\r\n      if (!this.isStatic) {\r\n        // Double-check against the font scaling applied to the _Box element.\r\n        if (this.fontSize.absolute) {\r\n          return this.fontSize;\r\n        } else {\r\n          emScale = this.fontSize.val;\r\n        }\r\n      }\r\n      return emSize.scaledBy(emScale);\r\n    }\r\n  }\r\n\r\n  updateState() {\r\n    // May happen for desktop-oriented keyboards that neglect to specify a touch layout.\r\n    // See `test_chirality.js` from the unit-test keyboard suite, which tests keystrokes\r\n    // using modifiers that lack corresponding visual-layout representation.\r\n    if (!this.currentLayer) {\r\n      return;\r\n    }\r\n\r\n    this.nextLayer = this.layerId;\r\n\r\n    if (this.currentLayer.nextlayer) {\r\n      this.nextLayer = this.currentLayer.nextlayer;\r\n    }\r\n\r\n    // Will toggle the CSS style `display` attribute for affected layers.\r\n    this.layerGroup.activeLayerId = this.layerId;\r\n\r\n    // Most functions that call this one often indicate a change in modifier\r\n    // or state key state.  Keep it updated!\r\n    this._UpdateVKShiftStyle();\r\n  }\r\n\r\n  /**\r\n   * Used to refresh the VisualKeyboard's geometric layout and key sizes\r\n   * when needed.\r\n   */\r\n  refreshLayout() {\r\n    if(this.deferLayout) {\r\n      return;\r\n    }\r\n\r\n    /*\r\n      Phase 1:  calculations possible at the start without triggering _any_ additional layout reflow.\r\n      (A single, initial reflow may happen depending on DOM manipulations before this method...,\r\n      but no extras until phase 2.)\r\n    */\r\n    let device = this.device;\r\n\r\n    var fs = 1.0;\r\n    // TODO: Logically, this should be needed for Android, too - may need to be changed for the next version!\r\n    if (device.OS == DeviceSpec.OperatingSystem.iOS && !this.isEmbedded) {\r\n      fs = fs / getViewportScale(this.device.formFactor);\r\n    }\r\n\r\n    /*\r\n      Phase 2:  first self-triggered reflow - locking in the keyboard's base property styling.\r\n    */\r\n    let gs = this.kbdDiv.style;\r\n    if (this.usesFixedHeightScaling && this.height) {\r\n      // Sets the layer group to the correct height.\r\n      gs.height = gs.maxHeight = this.height + 'px';\r\n    }\r\n\r\n    // The font-scaling applied by default for this instance on its root element.\r\n    // Layer-group font-scaling is applied separately.\r\n    gs.fontSize = this.fontSize.scaledBy(fs).styleString;\r\n\r\n    // Phase 3:  reflow from top-level getComputedStyle calls\r\n\r\n    // Step 1:  have the necessary conditions been met?\r\n    const fixedSize = this.width && this.height;\r\n    const computedStyle = getComputedStyle(this.kbdDiv);\r\n    const groupStyle = getComputedStyle(this.layerGroup.element);\r\n\r\n    const isInDOM = computedStyle.height != '' && computedStyle.height != 'auto';\r\n    const isGroupInDOM = groupStyle.height != '' && groupStyle.height != 'auto';\r\n\r\n    if (computedStyle.border) {\r\n      this._borderWidth = new ParsedLengthStyle(computedStyle.borderWidth).val;\r\n    }\r\n\r\n    // Step 2:  determine basic layout geometry, refresh things that might update.\r\n\r\n    if (fixedSize) {\r\n      this._computedWidth = this.width;\r\n      this._computedHeight = this.height;\r\n    } else if (isInDOM) {\r\n      this._computedWidth = parseInt(computedStyle.width, 10);\r\n      this._computedHeight = parseInt(computedStyle.height, 10);\r\n    } else if (isGroupInDOM) {\r\n      // May occur for documentation-keyboards, which are detached from their VisualKeyboard base.\r\n      this._computedWidth = parseInt(groupStyle.width, 10);\r\n      this._computedHeight = parseInt(groupStyle.height, 10);\r\n    } else {\r\n      // Cannot perform layout operations!\r\n      return;\r\n    }\r\n\r\n    // Phase 3:  Refresh the layout of the layer-group and active layer.\r\n    this.layerGroup.refreshLayout(this.constructLayoutParams());\r\n\r\n    // Step 4: recalculate gesture parameter values\r\n    // We do this _after_ \"Phase 3\" so that this.currentLayer.rowHeight is guaranteed\r\n    // to be set.  Also, skip for doc-keyboards, since they don't do gestures.\r\n    if(!this.isStatic) {\r\n      const paddingZone = this.gestureEngine.config.maxRoamingBounds as PaddedZoneSource;\r\n      paddingZone.updatePadding([-0.333 * this.currentLayer.rowHeight]);\r\n\r\n      /*\r\n        Note:  longpress.flickDist needs to be no greater than flick.startDist.\r\n        Otherwise, the longpress up-flick shortcut will not work on keys that\r\n        support flick gestures.  (Such as sil_euro_latin 3.0+)\r\n\r\n        Since it's also based on the purely northward component, it's best to\r\n        have it be slightly lower.  80% of flick.startDist gives a range of\r\n        about 37 degrees to each side before a flick-start would win, while\r\n        70.7% gives 45 degrees.\r\n\r\n        (The range _will_ be notably tighter on keys with both longpresses and\r\n        flicks as a result.)\r\n      */\r\n      this.gestureParams.longpress.flickDistStart = 0.24 * this.currentLayer.rowHeight;\r\n      this.gestureParams.flick.startDist          = 0.30 * this.currentLayer.rowHeight;\r\n      this.gestureParams.flick.dirLockDist        = 0.35 * this.currentLayer.rowHeight;\r\n      this.gestureParams.flick.triggerDist        = 0.75 * this.currentLayer.rowHeight;\r\n      this.gestureParams.longpress.flickDistFinal = 0.75 * this.currentLayer.rowHeight;\r\n    }\r\n  }\r\n\r\n  private constructLayoutParams(): LayerLayoutParams {\r\n    return {\r\n      keyboardWidth: this._computedWidth - 2 * this._borderWidth,\r\n      keyboardHeight: this._computedHeight - 2 * this._borderWidth - this.layerGroup.verticalPadding,\r\n      widthStyle: this.layoutWidth,\r\n      heightStyle: this.internalHeight,\r\n      baseEmFontSize: this.getKeyEmFontSize(),\r\n      layoutFontSize: new ParsedLengthStyle(this.layerGroup.element.style.fontSize),\r\n      spacebarText: this.layoutKeyboardProperties?.displayName ?? '(System keyboard)'\r\n    };\r\n  }\r\n\r\n  // Appears to be abandoned now - candidate for removal in future.\r\n  /*private*/ computedAdjustedOskHeight(allottedHeight: number): number {\r\n    if (!this.layerGroup) {\r\n      return allottedHeight;\r\n    }\r\n\r\n    /*\r\n      Note:  these may not be fully preprocessed yet!\r\n\r\n      However, any \"empty row bug\" preprocessing has been applied, and that's\r\n      what we care about here.\r\n    */\r\n    const layers = this.layerGroup.spec.layer;\r\n    let oskHeight = 0;\r\n\r\n    // In case the keyboard's layers have differing row counts, we check them all for the maximum needed oskHeight.\r\n    for (const layerID in layers) {\r\n      const layer = layers[layerID];\r\n      let nRows = layer.row.length;\r\n      let rowHeight = Math.floor(allottedHeight / (nRows == 0 ? 1 : nRows));\r\n      let layerHeight = nRows * rowHeight;\r\n\r\n      if (layerHeight > oskHeight) {\r\n        oskHeight = layerHeight;\r\n      }\r\n    }\r\n\r\n    // This isn't set anywhere else; it's a legacy part of the original methods.\r\n    const oskPad = 0;\r\n    let oskPaddedHeight = oskHeight + oskPad;\r\n\r\n    return oskPaddedHeight;\r\n  }\r\n\r\n  /**\r\n   *  Append a style sheet for the current keyboard if needed for specifying an embedded font\r\n   *  or to re-apply the default element font\r\n   *\r\n   **/\r\n  appendStyleSheet() {\r\n    //let util = com.keyman.singleton.util;\r\n\r\n    var activeKeyboard = this.layoutKeyboard;\r\n    var activeStub = this.layoutKeyboardProperties;\r\n\r\n    // First remove any existing keyboard style sheet\r\n    if (this.styleSheet && this.styleSheet.parentNode) {\r\n      this.styleSheet.parentNode.removeChild(this.styleSheet);\r\n    }\r\n\r\n    // For help.keyman.com, sometimes we aren't given a stub for the keyboard.\r\n    // We can't get the keyboard's fonts correct in that case, but we can\r\n    // at least proceed safely.\r\n    var kfd = activeStub?.textFont, ofd = activeStub?.oskFont;\r\n\r\n    // Add and define style sheets for embedded fonts if necessary (each font-face style will only be added once)\r\n    this.styleSheetManager.addStyleSheetForFont(kfd, this.fontRootPath, this.device.OS);\r\n    this.styleSheetManager.addStyleSheetForFont(ofd, this.fontRootPath, this.device.OS);\r\n\r\n    if(this.config.specialFont) {\r\n      this.styleSheetManager.addStyleSheetForFont(this.config.specialFont, '', this.device.OS);\r\n    }\r\n\r\n    // Build the style string to USE the fonts and append (or replace) the font style sheet\r\n    // Note: Some browsers do not download the font-face font until it is applied,\r\n    //       so must apply style before testing for font availability\r\n    // Extended to allow keyboard-specific custom styles for Build 360\r\n    var customStyle = this.addFontStyle(kfd, ofd);\r\n    if (activeKeyboard != null && typeof (activeKeyboard.oskStyling) == 'string')  // KMEW-129\r\n      customStyle = customStyle + activeKeyboard.oskStyling;\r\n\r\n    if(customStyle) {\r\n      this.styleSheet = createStyleSheet(customStyle); //Build 360\r\n      this.styleSheetManager.linkStylesheet(this.styleSheet);\r\n    }\r\n\r\n    // Once any related fonts are loaded, we can re-adjust key-cap scaling.\r\n    this.styleSheetManager.allLoadedPromise().then(() => {\r\n      // All existing font-precalculations will need to be reset, as the font\r\n      // was previously unavailable.\r\n      this.layerGroup.resetPrecalcFontSizes();\r\n      this.refreshLayout()\r\n    });\r\n  }\r\n\r\n  /**\r\n   *  Add or replace the style sheet used to set the font for input elements and OSK\r\n   *\r\n   *  @param  {Object}  kfd   KFont font descriptor\r\n   *  @param  {Object}  ofd   OSK font descriptor (if any)\r\n   *  @return {string}\r\n   *\r\n   **/\r\n  addFontStyle(kfd: InternalKeyboardFont, ofd: InternalKeyboardFont): string {\r\n    let s: string = '';\r\n\r\n    let family = (fd: InternalKeyboardFont) => fd.family.replace(/\\u0022/g, '').replace(/,/g, '\",\"');\r\n\r\n    // Set font family for OSK text, suggestion text\r\n    if (kfd || ofd) {\r\n      s = `\r\n.kmw-key-text {\r\n  font-family: \"${family(ofd || kfd)}\";\r\n}\r\n\r\n.kmw-suggestion-text {\r\n  font-family: \"${family(kfd || ofd)}\";\r\n}\r\n`;\r\n    }\r\n\r\n    // Return the style string\r\n    return s;\r\n  }\r\n\r\n  /**\r\n   * Create copy of the OSK that can be used for embedding in documentation or help\r\n   * The currently active keyboard will be returned if PInternalName is null\r\n   *\r\n   *  @param  {Keyboard}           PKbd            the keyboard object to be displayed\r\n   *  @param  {KeyboardProperties} kbdProperties   the metadata stub for the keyboard\r\n   *  @param  {Object}             pathConfig      an OSK path-configuration instance\r\n   *  @param  {string=}            argFormFactor   layout form factor, defaulting to 'desktop'\r\n   *  @param  {(string|number)=}   argLayerId      name or index of layer to show, defaulting to 'default'\r\n   *  @param  {number}             height          Target height for the rendered keyboard\r\n   *                                              (currently required for legacy reasons)\r\n   *  @return {Object}                            DIV object with filled keyboard layer content\r\n   */\r\n  static buildDocumentationKeyboard(\r\n    PKbd: Keyboard,\r\n    kbdProperties: KeyboardProperties,\r\n    pathConfig: OSKResourcePathConfiguration,\r\n    argFormFactor: DeviceSpec.FormFactor,\r\n    argLayerId: string,\r\n    height: number\r\n  ): HTMLElement { // I777\r\n    if (!PKbd) {\r\n      return null;\r\n    }\r\n\r\n    var formFactor = (typeof (argFormFactor) == 'undefined' ? 'desktop' : argFormFactor) as DeviceSpec.FormFactor,\r\n      layerId = (typeof (argLayerId) == 'undefined' ? 'default' : argLayerId),\r\n      device: {\r\n        formFactor?: DeviceSpec.FormFactor,\r\n        OS?: DeviceSpec.OperatingSystem,\r\n        touchable?: boolean\r\n      } = {};\r\n\r\n    // Device emulation for target documentation.\r\n    device.formFactor = formFactor;\r\n    if (formFactor != 'desktop') {\r\n      device.OS = DeviceSpec.OperatingSystem.iOS;\r\n      device.touchable = true;\r\n    } else {\r\n      device.OS = DeviceSpec.OperatingSystem.Windows;\r\n      device.touchable = false;\r\n    }\r\n\r\n    let layout = PKbd.layout(formFactor);\r\n\r\n    const deviceSpec = new DeviceSpec('other', device.formFactor, device.OS, device.touchable);\r\n    let kbdObj = new VisualKeyboard({\r\n      keyboard: PKbd,\r\n      keyboardMetadata: kbdProperties,\r\n      hostDevice: deviceSpec,\r\n      isStatic: true,\r\n      topContainer: null,\r\n      pathConfig: pathConfig,\r\n      styleSheetManager: null,\r\n      specialFont: {\r\n        family: 'SpecialOSK',\r\n        files: [`${pathConfig.resources}/osk/keymanweb-osk.ttf`],\r\n        path: '' // Not actually used.\r\n      }\r\n    });\r\n\r\n    kbdObj.layerGroup.element.className = kbdObj.kbdDiv.className; // may contain multiple classes\r\n    kbdObj.layerGroup.element.classList.add(device.formFactor + '-static');\r\n\r\n    let kbd = kbdObj.kbdDiv.childNodes[0] as HTMLDivElement; // Gets the layer group.\r\n\r\n    // Models CSS classes hosted on the OSKView in normal operation.  We can't do this on the main\r\n    // layer-group element because of the CSS rule structure for keyboard styling.\r\n    //\r\n    // For example, `.ios .kmw-keyboard-sil_cameroon_azerty` requires the element with the keyboard\r\n    // ID to be in a child of an element with the .ios class.\r\n    let classWrapper = document.createElement('div');\r\n    classWrapper.classList.add(device.OS.toLowerCase(), device.formFactor);\r\n\r\n    // Select the layer to display, and adjust sizes\r\n    if (layout != null) {\r\n      kbdObj.layerId = layerId;\r\n      kbdObj.layerGroup.activeLayerId = layerId;\r\n\r\n      // This still feels fairly hacky... but something IS needed to constrain the height.\r\n      // There are plans to address related concerns through some of the later aspects of\r\n      // the Web OSK-Core design.\r\n      kbdObj.setSize(800, height); // Probably need something for width, too, rather than\r\n      kbdObj.fontSize = defaultFontSize(deviceSpec, height, false);\r\n      classWrapper.style.fontSize = kbdObj.element.style.fontSize;\r\n\r\n      // assuming 100%.\r\n      kbdObj.refreshLayout(); // Necessary for the row heights to be properly set!\r\n      kbd.style.height = kbdObj.kbdDiv.style.height;\r\n      kbd.style.maxHeight = kbdObj.kbdDiv.style.maxHeight;\r\n    } else {\r\n      kbd.innerHTML = \"<p style='color:#c40; font-size:0.5em;margin:10px;'>No \" + formFactor + \" layout is defined for \" + PKbd.name + \".</p>\";\r\n    }\r\n    // Add a faint border\r\n    kbd.style.border = '1px solid #ccc';\r\n\r\n    kbdObj.updateState(); // double-ensure that the 'default' layer is properly displayed.\r\n\r\n    // Once the element is inserted into the DOM, refresh the layout so that proper text scaling may apply.\r\n    const detectAndHandleInsertion = async () => {\r\n      if(document.contains(kbd)) {\r\n        // Yay, insertion!\r\n\r\n        try {\r\n          // Wait for full loading/connection before manipulating stylesheet locations.\r\n          await kbdObj.styleSheetManager.allLoadedPromise();\r\n\r\n          const mainSheet = kbdObj.styleSheet;\r\n          if(mainSheet) {\r\n            kbd.appendChild(mainSheet);\r\n          }\r\n\r\n          // Unlinking sheets will mutate the original array; make a backup\r\n          // copy of the array to iterate over.\r\n          const sheets = [].concat(kbdObj.styleSheetManager.sheets);\r\n\r\n          /*\r\n           * Re-attach the font stylesheets... to the <head> element.\r\n           * They need re-attachment for the fonts to work properly for inactive keyboards.\r\n           *\r\n           * For future reference:  as of early 2024, Chrome does not support\r\n           * @font-face style declaration within Shadow DOM elements. The\r\n           * declaration needs to be part of the main HTML doc.\r\n           *\r\n           * References:\r\n           * - https://stackoverflow.com/q/63710162\r\n           * - https://github.com/mdn/interactive-examples/issues/887#issuecomment-432418008\r\n           */\r\n          for(let sheet of sheets) {\r\n            if(sheet == mainSheet) {\r\n              // Don't need to relocate the custom stylesheet.\r\n              continue;\r\n            } else if(sheet.href) {\r\n              // Don't relocate kmwosk.css or similar.\r\n              continue;\r\n            }\r\n            kbdObj.styleSheetManager.unlink(sheet);\r\n            document.head.appendChild(sheet);\r\n          }\r\n\r\n          // // Should we ever remove ALL related stylesheets during .shutdown()...\r\n          // kbdObj.config.styleSheetManager = new StylesheetManager(kbdObj.element);\r\n\r\n          // We refresh the full layout so that font-size is properly detected & stored\r\n          // on the documentation keyboard.\r\n          kbdObj.refreshLayout();\r\n\r\n          // We no longer need a reference to the constructing VisualKeyboard, so we should let\r\n          // it clean up its <head> stylesheet links.  This detaches the stylesheet, though.\r\n          kbdObj.styleSheet = null; // is directly checked in shutdown; prevent removal.\r\n          kbdObj.shutdown();\r\n        } finally {\r\n          insertionObserver.disconnect();\r\n        }\r\n      }\r\n    }\r\n\r\n    const insertionObserver = new MutationObserver(detectAndHandleInsertion);\r\n    insertionObserver.observe(document.body, {\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n\r\n    // Ensure the main keyboard root is the first child element of the top-level div.\r\n    classWrapper.append(kbd);\r\n\r\n    // Ensure that the OSK's style-sheet is included by the top-level div standing in for the OSKView.\r\n    for(let sheetFile of OSKView.STYLESHEET_FILES) {\r\n      const sheetHref = `${pathConfig.resources}/osk/${sheetFile}`;\r\n      const sheet = kbdObj.styleSheetManager.linkExternalSheet(sheetHref, true);\r\n      sheet.parentNode.removeChild(sheet);\r\n      classWrapper.appendChild(sheet);\r\n    }\r\n\r\n    // Make sure that the stylesheet is attached, now that the keyboard-doc's been inserted.\r\n    // The stylesheet is currently built + constructed in the same code that attaches it to\r\n    // the page.\r\n    kbdObj.appendStyleSheet();\r\n\r\n    // Unset the width + height we used thus far; this method's consumer may choose to rescale\r\n    // the returned element.  If so, we don't want to use our outdated value by mistake.\r\n    //\r\n    // While `kbdObj.setSize()` could be used in theory, it _also_ unsets the element styling.\r\n    // We actually wish to _leave_ this styling in place - one of our parameters is `height`, and\r\n    // it should remain in place in the styling on the output element as the default in case\r\n    // the consumer _doesn't_ add styling afterward.\r\n    delete kbdObj._width;\r\n    delete kbdObj._height;\r\n\r\n    return classWrapper;\r\n  }\r\n\r\n  onHide() {\r\n    // Remove highlighting from hide keyboard key, if applied\r\n    if (this.hkKey) {\r\n      this.highlightKey(this.hkKey, false);\r\n    }\r\n  }\r\n\r\n  optionKey(e: KeyElement, keyName: string, keyDown: boolean) {\r\n    if (keyName.indexOf('K_LOPT') >= 0) {\r\n      this.emit('globekey', e, keyDown);\r\n    } else if (keyName.indexOf('K_ROPT') >= 0) {\r\n      if (keyDown) {\r\n        this.emit('hiderequested', e);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Add (or remove) the gesture preview (if KeymanWeb on a phone device)\r\n   *\r\n   * @param   {Object}  key   HTML key element\r\n   * @param   {boolean} on    show or hide\r\n   * @returns  A GesturePreviewHost instance usable for visualizing a gesture.\r\n   */\r\n  showGesturePreview(key: KeyElement) {\r\n    const tip = this.keytip;\r\n\r\n    const layoutParams = this.constructLayoutParams();\r\n    const keyWidth = layoutParams.keyboardWidth * key.key.spec.proportionalWidth;\r\n    const keyHeight = layoutParams.keyboardHeight / this.currentLayer.rows.length;\r\n    const previewHost = new GesturePreviewHost(key, this.device.formFactor == 'phone', keyWidth, keyHeight);\r\n\r\n    if (tip == null) {\r\n      const baseKey = key.key as OSKBaseKey;\r\n      baseKey.setPreview(previewHost);\r\n    } else {\r\n      tip.show(key, true, previewHost);\r\n    }\r\n\r\n    previewHost.refreshLayout();\r\n\r\n    return previewHost;\r\n  };\r\n\r\n  /**\r\n   *  Create a key preview element for phone devices\r\n   */\r\n  createKeyTip() {\r\n    if (this.keytip == null) {\r\n      if(this.device.formFactor == 'phone') {\r\n        // For now, should only be true (in production) when keyman.isEmbedded == true.\r\n        let constrainPopup = this.isEmbedded;\r\n        this.keytip = new PhoneKeyTip(this, constrainPopup);\r\n      } else {\r\n        this.keytip = new TabletKeyTip(this);\r\n      }\r\n    }\r\n\r\n    // Always append to _Box (since cleared during OSK Load)\r\n    if (this.keytip && this.keytip.element) {\r\n      this.element.appendChild(this.keytip.element);\r\n    }\r\n  };\r\n\r\n  createGlobeHint(): GlobeHint {\r\n    if(this.config.embeddedGestureConfig.createGlobeHint) {\r\n      return this.config.embeddedGestureConfig.createGlobeHint(this);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  shutdown() {\r\n    // Prevents style-sheet pollution from multiple keyboard swaps.\r\n    if(this.styleSheet && this.styleSheet.parentNode) {\r\n      this.styleSheet.parentNode.removeChild(this.styleSheet);\r\n    }\r\n\r\n    this.activeGestures.forEach((handler) => handler.cancel());\r\n\r\n    if(this.gestureEngine) {\r\n      this.gestureEngine.destroy();\r\n    }\r\n\r\n    if(this.deleting) {\r\n      window.clearTimeout(this.deleting);\r\n    }\r\n\r\n    this.keytip?.show(null, false, null);\r\n  }\r\n\r\n  lockLayer(enable: boolean) {\r\n    this.layerLocked = enable;\r\n  }\r\n\r\n  raiseKeyEvent(keyEvent: KeyEvent, e: KeyElement): KeyRuleEffects {\r\n    // Exclude menu and OSK hide keys from normal click processing\r\n    if(keyEvent.kName == 'K_LOPT' || keyEvent.kName == 'K_ROPT') {\r\n      this.optionKey(e, keyEvent.kName, true);\r\n      return {};\r\n    }\r\n\r\n    let callbackData: KeyRuleEffects = {};\r\n\r\n    const keyEventCallback: KeyEventResultCallback = (result, error) => {\r\n      callbackData.contextToken = result?.transcription?.token;\r\n      const transform = result?.transcription?.transform;\r\n      callbackData.alteredText = result && (!transform || isEmptyTransform(transform));\r\n    }\r\n\r\n    if(this.layerLocked) {\r\n      keyEvent.kNextLayer = this.layerId;\r\n    }\r\n\r\n    this.emit('keyevent', keyEvent, keyEventCallback);\r\n\r\n    return callbackData;\r\n  }\r\n  // #endregion VisualKeyboard\r\n}\r\n",
    "import { EventEmitter } from 'eventemitter3';\r\n\r\ninterface EventMap {\r\n  activate: (flag: boolean) => void;\r\n}\r\n\r\n/**\r\n * Used to encapsulate activation logic for the on-screen keyboadr, conditionally activating\r\n * and deactivating it based on specified conditions.\r\n */\r\nexport default abstract class Activator<ExtraEvents = void> extends EventEmitter<EventMap & ExtraEvents, Activator> {\r\n  /**\r\n   * For certain sub-types, this may be set to `false` to \"turn activation off\", putting\r\n   * the `Activator` in a state that ignores changes to any other conditions.\r\n   */\r\n  abstract get enabled(): boolean;\r\n\r\n  abstract set enabled(flag: boolean);\r\n\r\n  /**\r\n   * When `true`, indicates that the listener should activate / become visible.\r\n   */\r\n  abstract get activate(): boolean;\r\n\r\n  /**\r\n   * When `true` and `activate` is `false`, indicates that changing the value of `enabled`\r\n   * will result in activation.\r\n   */\r\n  abstract get conditionsMet(): boolean;\r\n}\r\n\r\nexport class StaticActivator extends Activator {\r\n  get enabled(): boolean {\r\n    return true;\r\n  }\r\n\r\n  set enabled(value: boolean) {\r\n    // does nothing; it's static.\r\n  }\r\n\r\n  get activate(): boolean {\r\n    return true;\r\n  }\r\n\r\n  get conditionsMet(): boolean {\r\n    return true;\r\n  }\r\n}",
    "import { ManagedPromise } from \"@keymanapp/web-utils\";\r\n\r\nexport default class TouchEventPromiseMap {\r\n  private map: Map<number, ManagedPromise<void>> = new Map();\r\n\r\n  // Used to\r\n  public promiseForTouchpoint(id: number): ManagedPromise<void> {\r\n    if(!this.map.get(id)) {\r\n      this.map.set(id, new ManagedPromise<void>());\r\n    }\r\n\r\n    return this.map.get(id); // touchpoint identifiers are unique during a page's lifetime.\r\n  }\r\n\r\n  public maintainTouches(list: TouchList) {\r\n    let keys = Array.from(this.map.keys());\r\n\r\n    for(let i=0; i < list.length; i++) {\r\n      let pos = keys.indexOf(list.item(i).identifier);\r\n      if(pos != -1) {\r\n        keys.splice(pos, 1);\r\n      }\r\n    }\r\n\r\n    // Any remaining entries of `keys` are no longer in the map!\r\n    for(let endedKey of keys) {\r\n      this.map.get(endedKey).resolve();\r\n      this.map.delete(endedKey);\r\n    }\r\n  }\r\n}",
    "import { EventEmitter } from 'eventemitter3';\r\n\r\nimport { BannerView } from '../banner/bannerView.js';\r\nimport { BannerController } from '../banner/bannerController.js';\r\nimport OSKViewComponent from '../components/oskViewComponent.interface.js';\r\nimport EmptyView from '../components/emptyView.js';\r\nimport HelpPageView from '../components/helpPageView.js';\r\nimport KeyboardView from '../components/keyboardView.interface.js';\r\nimport VisualKeyboard from '../visualKeyboard.js';\r\nimport { LengthStyle, ParsedLengthStyle } from '../lengthStyle.js';\r\nimport { type KeyElement } from '../keyElement.js';\r\n\r\nimport {\r\n  Codes,\r\n  DeviceSpec,\r\n  Keyboard,\r\n  KeyboardProperties,\r\n  ManagedPromise,\r\n  type MinimalCodesInterface\r\n} from 'keyman/engine/keyboard';\r\nimport { createUnselectableElement, getAbsoluteX, getAbsoluteY, StylesheetManager } from 'keyman/engine/dom-utils';\r\nimport { EventListener, LegacyEventEmitter } from 'keyman/engine/events';\r\nimport { type MutableSystemStore, type SystemStoreMutationHandler } from 'keyman/engine/js-processor';\r\n\r\nimport Configuration from '../config/viewConfiguration.js';\r\nimport Activator, { StaticActivator } from './activator.js';\r\nimport TouchEventPromiseMap from './touchEventPromiseMap.js';\r\nimport { KeyEventHandler, KeyEventSourceInterface } from './keyEventSource.interface.js';\r\nimport { DEFAULT_GESTURE_PARAMS, GestureParams } from '../input/gestures/specsForLayout.js';\r\n\r\n// These will likely be eliminated from THIS file at some point.\\\r\n\r\nexport type OSKPos = {'left'?: number, 'top'?: number};\r\n\r\nexport type OSKRect = {\r\n  'left'?: number,\r\n  'top'?: number,\r\n  'width'?: number,\r\n  'height'?: number,\r\n  'nosize'?: boolean,\r\n  'nomove'?: boolean\r\n};\r\n\r\n/**\r\n * Definition for OSK events documented at\r\n * https://help.keyman.com/developer/engine/web/16.0/reference/events/.\r\n */\r\nexport interface LegacyOSKEventMap {\r\n  'configclick'(obj: {}): void;\r\n  'helpclick'(obj: {}): void;\r\n  'resizemove'(obj: {}): void;\r\n  'show'(obj: {\r\n    x?: number,\r\n    y?: number,\r\n    userLocated?: boolean\r\n  }): void;\r\n  'hide'(obj: {\r\n    HiddenByUser?: boolean\r\n  }): void;\r\n}\r\n\r\n/**\r\n * For now, these will serve as undocumented, internal events.  We need a proper\r\n * design round and discussion before we consider promoting them to long-term,\r\n * documented official API events.\r\n */\r\nexport interface EventMap {\r\n  /**\r\n   * Designed to pass key events off to any consuming modules/libraries.\r\n   *\r\n   * Note:  the following code block was originally used to integrate with the keyboard & input\r\n   * processors, but it requires entanglement with components external to this OSK module.\r\n   */\r\n  'keyevent': KeyEventHandler,\r\n\r\n  /**\r\n   * Indicates that the globe key has either been pressed (`on` == `true`)\r\n   * or released (`on` == `false`).\r\n   */\r\n  globekey: (e: KeyElement, on: boolean) => void;\r\n\r\n  /**\r\n   * A virtual keystroke corresponding to a \"hide\" command has been received.\r\n   */\r\n  hiderequested: (key: KeyElement) => void;\r\n\r\n  /**\r\n   * Signals the special command to display the engine's version + build number.\r\n   */\r\n  showbuild: () => void;\r\n\r\n  // While the next two are near-duplicates of the legacy event `resizemove`, these\r\n  // have the advantage of providing a Promise for the end of the ongoing user\r\n  // interaction.  We need that Promise for focus-management.\r\n\r\n  /**\r\n   * Signals that the OSK is being moved by the user via a drag operation.\r\n   *\r\n   * The provided Promise will resolve once the drag operation is complete.\r\n   *\r\n   * Note that position-restoration (unpinning the OSK) is treated as a drag-move\r\n   * event.  It resolves near-instantly.\r\n   */\r\n  dragmove: (promise: Promise<void>) => void;\r\n\r\n  /**\r\n   * Signals that the OSK is being resized via a drag operation (on a resize 'handle').\r\n   *\r\n   * The provided Promise will resolve once the resize operation is complete.\r\n   */\r\n  resizemove: (promise: Promise<void>) => void;\r\n\r\n  /**\r\n   * Signals that either the mouse or an active touchpoint is interacting with the OSK.\r\n   *\r\n   * The provided `Promise` will resolve once the corresponding interaction is complete.\r\n   * Note that for touch events, more than one touchpoint may coexist, each with its own\r\n   * corresponding call of this event and corresponding `Promise`.\r\n   */\r\n  pointerinteraction: (promise: Promise<void>) => void;\r\n}\r\n\r\nexport function getResourcePath(config: Configuration) {\r\n  let resourcePathExt = 'osk/';\r\n  if(config.isEmbedded) {\r\n    resourcePathExt = '';\r\n  }\r\n  return `${config.pathConfig.resources}/${resourcePathExt}`\r\n}\r\n\r\nexport default abstract class OSKView\r\n  extends EventEmitter<EventMap>\r\n  implements MinimalCodesInterface, KeyEventSourceInterface<EventMap> {\r\n  _Box: HTMLDivElement;\r\n  readonly legacyEvents = new LegacyEventEmitter<LegacyOSKEventMap>();\r\n\r\n  // #region Key code definition aliases for legacy keyboards (that expect window['keyman']['osk'].___)\r\n  get keyCodes() {\r\n    return Codes.keyCodes;\r\n  }\r\n\r\n  get modifierCodes() {\r\n    return Codes.modifierCodes;\r\n  }\r\n\r\n  get modifierBitmasks() {\r\n    return Codes.modifierBitmasks;\r\n  }\r\n\r\n  get stateBitmasks() {\r\n    return Codes.stateBitmasks;\r\n  }\r\n  // #endregion\r\n\r\n  headerView:   OSKViewComponent;\r\n  bannerView:   BannerView; // Which implements OSKViewComponent\r\n  keyboardView: KeyboardView;  // Which implements OSKViewComponent\r\n  footerView:   OSKViewComponent;\r\n\r\n  private _bannerController: BannerController;\r\n\r\n  private kbdStyleSheetManager: StylesheetManager;\r\n  private uiStyleSheetManager: StylesheetManager;\r\n\r\n  private config: Configuration;\r\n  private deferLayout: boolean;\r\n\r\n  private _boxBaseTouchStart:       (e: TouchEvent) => boolean;\r\n  private _boxBaseTouchEventCancel: (e: TouchEvent) => boolean;\r\n\r\n  private keyboardData: {\r\n    keyboard: Keyboard,\r\n    metadata: KeyboardProperties\r\n  };\r\n\r\n  /**\r\n   * Provides the current parameterization for timings and distances used by\r\n   * any gesture-supporting keyboards.  Changing properties of its objects will\r\n   * automatically update keyboards to use the new configuration.\r\n   *\r\n   * If `gestureParams` was set in the configuration object passed in at\r\n   * construction time, this will be the same instance.\r\n   */\r\n  get gestureParams(): GestureParams {\r\n    return this.config.gestureParams;\r\n  }\r\n\r\n  /**\r\n   * The configured width for this OSKManager.  May be `undefined` or `null`\r\n   * to allow automatic width scaling.\r\n   */\r\n  private _width: ParsedLengthStyle;\r\n\r\n  /**\r\n   * The configured height for this OSKManager.  May be `undefined` or `null`\r\n   * to allow automatic height scaling.\r\n   */\r\n  private _height: ParsedLengthStyle;\r\n\r\n  /**\r\n   * The computed width for this OSKManager.  May be null if auto sizing\r\n   * is allowed and the OSKManager is not currently in the DOM hierarchy.\r\n   */\r\n  private _computedWidth: number;\r\n\r\n  /**\r\n  * The computed height for this OSKManager.  May be null if auto sizing\r\n  * is allowed and the OSKManager is not currently in the DOM hierarchy.\r\n  */\r\n  private _computedHeight: number;\r\n\r\n  /**\r\n   * The base font size to use for hosted `Banner`s and `VisualKeyboard`\r\n   * instances.\r\n   */\r\n  private _baseFontSize: ParsedLengthStyle;\r\n\r\n  private needsLayout: boolean = true;\r\n\r\n  private _animatedHideTimeout: number;\r\n\r\n  private mouseEnterPromise?: ManagedPromise<void>;\r\n  private touchEventPromiseManager = new TouchEventPromiseMap();\r\n\r\n  static readonly STYLESHEET_FILES = ['kmwosk.css', 'globe-hint.css'];\r\n\r\n  constructor(configuration: Configuration) {\r\n    super();\r\n\r\n    // Clone the config; do not allow object references to be altered later.\r\n    this.config = configuration = {...configuration};\r\n    // If gesture parameters were not provided in advance, initialize them from defaults.\r\n    this.config.gestureParams ||= DEFAULT_GESTURE_PARAMS;\r\n\r\n    // `undefined` is falsy, but we want a `true` default behavior for this config property.\r\n    if(this.config.allowHideAnimations === undefined) {\r\n      this.config.allowHideAnimations = true;\r\n    }\r\n\r\n    this.config.device = configuration.device || configuration.hostDevice;\r\n\r\n    this.config.isEmbedded = configuration.isEmbedded || false;\r\n    this.config.embeddedGestureConfig = configuration.embeddedGestureConfig || {};\r\n    this.config.activator.on('activate', this.activationListener);\r\n\r\n    // OSK initialization - create DIV and set default styles\r\n    this._Box = createUnselectableElement('div');   // Container for OSK (Help DIV, displayed when user clicks Help icon)\r\n    this.kbdStyleSheetManager = new StylesheetManager(this._Box, this.config.doCacheBusting || false);\r\n    this.uiStyleSheetManager = new StylesheetManager(this._Box);\r\n\r\n    // Initializes the two constant OSKComponentView fields.\r\n    this.bannerView   = new BannerView();\r\n    this.bannerView.events.on('bannerchange', () => this.refreshLayout());\r\n    this._Box.appendChild(this.bannerView.element);\r\n\r\n    this._bannerController = new BannerController(this.bannerView, this.hostDevice, this.config.predictionContextManager);\r\n\r\n    this.keyboardView = this._GenerateKeyboardView(null, null);\r\n    this._Box.appendChild(this.keyboardView.element);\r\n\r\n    // Install the default OSK stylesheets - but don't have it managed by the keyboard-specific stylesheet manager.\r\n    // We wish to maintain kmwosk.css whenever keyboard-specific styles are reset/removed.\r\n    // Temp-hack:  embedded products prefer their stylesheet, etc linkages without the /osk path component.\r\n    const resourcePath = getResourcePath(this.config);\r\n\r\n    for(let sheetFile of OSKView.STYLESHEET_FILES) {\r\n      const sheetHref = `${resourcePath}${sheetFile}`;\r\n      this.uiStyleSheetManager.linkExternalSheet(sheetHref);\r\n    }\r\n\r\n    this.setBaseMouseEventListeners();\r\n    if(this.hostDevice.touchable) {\r\n      this.setBaseTouchEventListeners();\r\n    }\r\n\r\n    this._Box.style.display = 'none';\r\n  }\r\n\r\n  protected get configuration(): Configuration {\r\n    return this.config;\r\n  }\r\n\r\n  public get bannerController(): BannerController {\r\n    return this._bannerController;\r\n  }\r\n\r\n  public get hostDevice(): DeviceSpec {\r\n    return this.config.hostDevice;\r\n  }\r\n\r\n  public get fontRootPath(): string {\r\n    return this.config.pathConfig.fonts;\r\n  }\r\n\r\n  public get isEmbedded(): boolean {\r\n    return this.config.isEmbedded;\r\n  }\r\n\r\n  private setBaseMouseEventListeners() {\r\n    this._Box.onmouseenter = (e) => {\r\n      if(this.mouseEnterPromise) {\r\n        // The chain was somehow interrupted, with the mouseleave never occurring!\r\n        this.mouseEnterPromise.resolve();\r\n      }\r\n\r\n      this.mouseEnterPromise = new ManagedPromise<void>();\r\n      this.emit('pointerinteraction', this.mouseEnterPromise.corePromise);\r\n    };\r\n\r\n    this._Box.onmouseleave = (e) => {\r\n      this.mouseEnterPromise.resolve();\r\n      this.mouseEnterPromise = null;\r\n      // focusAssistant.setMaintainingFocus(false);\r\n    };\r\n  }\r\n\r\n  private removeBaseMouseEventListeners() {\r\n    this._Box.onmouseenter = null;\r\n    this._Box.onmouseleave = null;\r\n  }\r\n\r\n  private setBaseTouchEventListeners() {\r\n    // To prevent touch event default behaviour on mobile devices\r\n    let commonPrevention = function(e: TouchEvent) {\r\n      if(e.cancelable) {\r\n        e.preventDefault();\r\n      }\r\n      e.stopPropagation();\r\n      return false;\r\n    }\r\n\r\n    this._boxBaseTouchEventCancel = (e) => {\r\n      this.touchEventPromiseManager.maintainTouches(e.touches);\r\n      return commonPrevention(e);\r\n    };\r\n\r\n    this._boxBaseTouchStart = (e) => {\r\n      for(let i = 0; i < e.changedTouches.length; i++) {\r\n        let promise = this.touchEventPromiseManager.promiseForTouchpoint(e.changedTouches[i].identifier);\r\n        this.emit('pointerinteraction', promise.corePromise);\r\n      }\r\n\r\n      this.touchEventPromiseManager.maintainTouches(e.touches);\r\n      return commonPrevention(e);\r\n    }\r\n\r\n    this._Box.addEventListener('touchstart', this._boxBaseTouchStart, false);\r\n    this._Box.addEventListener('touchmove',  this._boxBaseTouchEventCancel, false);\r\n    this._Box.addEventListener('touchend',  this._boxBaseTouchEventCancel, false);\r\n    this._Box.addEventListener('touchcancel',  this._boxBaseTouchEventCancel, false);\r\n  }\r\n\r\n  private removeBaseTouchEventListeners() {\r\n    if(!this._boxBaseTouchEventCancel) {\r\n      return;\r\n    }\r\n\r\n    this._Box.removeEventListener('touchstart', this._boxBaseTouchStart, false);\r\n    this._Box.removeEventListener('touchmove',  this._boxBaseTouchEventCancel, false);\r\n    this._Box.removeEventListener('touchend',  this._boxBaseTouchEventCancel, false);\r\n    this._Box.removeEventListener('touchcancel',  this._boxBaseTouchEventCancel, false);\r\n\r\n    this._boxBaseTouchEventCancel = null;\r\n    this._boxBaseTouchStart = null;\r\n  }\r\n\r\n  // TODO:  activeTarget has been 'moved' to activationModel.activationCondition (for TwoStateActivation instances).\r\n  //        Loosely speaking, anyway.\r\n\r\n\r\n\r\n  public get targetDevice(): DeviceSpec {\r\n    return this.config.device;\r\n  }\r\n\r\n  public set targetDevice(spec: DeviceSpec) {\r\n    if(this.allowsDeviceChange(spec)) {\r\n      this.config.device = spec;\r\n      this.loadActiveKeyboard();\r\n    } else {\r\n      console.error(\"May not change target device for this OSKView type.\");\r\n    }\r\n  }\r\n\r\n  protected allowsDeviceChange(newSpec: DeviceSpec): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Gets and sets the activation state model used to control presentation of the OSK.\r\n   */\r\n  get activationModel(): Activator {\r\n    return this.config.activator;\r\n  }\r\n\r\n  set activationModel(model: Activator) {\r\n    if(!model) {\r\n      throw new Error(\"The activation model may not be set to null or undefined!\");\r\n    }\r\n\r\n    this.config.activator.off('activate', this.activationListener);\r\n    model.on('activate', this.activationListener);\r\n\r\n    this.config.activator = model;\r\n\r\n    this.commonCheckAndDisplay();\r\n  }\r\n\r\n  public get mayDisable(): boolean {\r\n    if(this.hostDevice.touchable) {\r\n      return false;\r\n    }\r\n\r\n    if(this.activeKeyboard?.keyboard.isCJK) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private readonly activationListener = (flag: boolean) => {\r\n    // CJK override:  may not be disabled, as the CJK elements are required.\r\n    if(!this.mayDisable && !this.activationModel.enabled) {\r\n      this.activationModel.off('activate', this.activationListener);\r\n      try {\r\n        this.activationModel.enabled = true;\r\n      } finally {\r\n        this.activationModel.on('activate', this.activationListener);\r\n      }\r\n    }\r\n    this.commonCheckAndDisplay();\r\n  };\r\n\r\n  /**\r\n   * A property denoting whether or not the OSK will be presented when it meets all\r\n   * other activation conditions.\r\n   *\r\n   * Is equivalent to `.activationModel.enabled`.\r\n   */\r\n  get displayIfActive(): boolean {\r\n    return this.activationModel.enabled;\r\n  }\r\n\r\n  /**\r\n   * Used by the activation model's event listenerss and properties as a common helper;\r\n   * they rely on this function to manage presentation (showing / hiding) of the OSK.\r\n   */\r\n  private commonCheckAndDisplay() {\r\n    if(this.activationModel.activate && this.activeKeyboard) {\r\n      this.present();\r\n    } else {\r\n      this.startHide(false);\r\n    }\r\n  }\r\n\r\n  public get vkbd(): VisualKeyboard {\r\n    if(this.keyboardView instanceof VisualKeyboard) {\r\n      return this.keyboardView;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  public get banner(): BannerView {  // Maintains old reference point used by embedding apps.\r\n    return this.bannerView;\r\n  }\r\n\r\n  /**\r\n   * The configured width for this VisualKeyboard.  May be `undefined` or `null`\r\n   * to allow automatic width scaling.\r\n   */\r\n  get width(): ParsedLengthStyle {\r\n    return this._width;\r\n  }\r\n\r\n  /**\r\n   * The configured height for this VisualKeyboard.  May be `undefined` or `null`\r\n   * to allow automatic height scaling.\r\n   */\r\n  get height(): ParsedLengthStyle {\r\n    return this._height;\r\n  }\r\n\r\n  /**\r\n   * The computed width for this VisualKeyboard.  May be null if auto sizing\r\n   * is allowed and the VisualKeyboard is not currently in the DOM hierarchy.\r\n   */\r\n  get computedWidth(): number {\r\n    // Computed during layout operations; allows caching instead of continuous recomputation.\r\n    if(this.needsLayout) {\r\n      this.refreshLayout();\r\n    }\r\n    return this._computedWidth;\r\n  }\r\n\r\n  /**\r\n   * The computed height for this VisualKeyboard.  May be null if auto sizing\r\n   * is allowed and the VisualKeyboard is not currently in the DOM hierarchy.\r\n   */\r\n  get computedHeight(): number {\r\n    // Computed during layout operations; allows caching instead of continuous recomputation.\r\n    if(this.needsLayout) {\r\n      this.refreshLayout();\r\n    }\r\n    return this._computedHeight;\r\n  }\r\n\r\n  /**\r\n   * The top-level style string for the font size used by the predictive banner\r\n   * and the primary keyboard visualization elements.\r\n   */\r\n  get baseFontSize(): string {\r\n    return this.parsedBaseFontSize?.styleString || '';\r\n  }\r\n\r\n  protected get parsedBaseFontSize(): ParsedLengthStyle {\r\n    if(!this._baseFontSize) {\r\n      this._baseFontSize = OSKView.defaultFontSize(this.targetDevice, this.computedHeight, this.isEmbedded);\r\n    }\r\n\r\n    return this._baseFontSize;\r\n  }\r\n\r\n  public static defaultFontSize(device: DeviceSpec, computedHeight: number, isEmbedded: boolean): ParsedLengthStyle {\r\n    if(device.touchable) {\r\n      const fontScale = device.formFactor == 'phone'\r\n        ? 1.6 * (isEmbedded ? 0.65 : 0.6) * 1.2  // Combines original scaling factor with one previously applied to the layer group.\r\n        : 2; // iPad or Android tablet\r\n      return ParsedLengthStyle.special(fontScale, 'em');\r\n    } else {\r\n      return computedHeight ? ParsedLengthStyle.inPixels(computedHeight / 8) : undefined;\r\n    }\r\n  }\r\n\r\n  public get activeKeyboard(): {\r\n    keyboard: Keyboard,\r\n    metadata: KeyboardProperties\r\n  } {\r\n    return this.keyboardData;\r\n  }\r\n\r\n  public set activeKeyboard(keyboardData: {\r\n    keyboard: Keyboard,\r\n    metadata: KeyboardProperties\r\n  }) {\r\n    this.keyboardData = keyboardData;\r\n    this.loadActiveKeyboard();\r\n\r\n    if(this.keyboardData?.keyboard.isCJK) {\r\n      this.activationModel.enabled = true;\r\n    }\r\n  }\r\n\r\n  private computeFrameHeight(): number {\r\n    return (this.headerView?.layoutHeight.val || 0) + (this.footerView?.layoutHeight.val || 0);\r\n  }\r\n\r\n  setSize(width?: number | LengthStyle, height?: number | LengthStyle, pending?: boolean) {\r\n    let mutatedFlag = false;\r\n\r\n    let parsedWidth: ParsedLengthStyle;\r\n    let parsedHeight: ParsedLengthStyle;\r\n\r\n    if(!width && width !== 0) {\r\n      return;\r\n    }\r\n\r\n    if(!height && height !== 0) {\r\n      return;\r\n    }\r\n\r\n    if(Number.isFinite(width as number)) {\r\n      parsedWidth = ParsedLengthStyle.inPixels(width as number);\r\n    } else {\r\n      parsedWidth = new ParsedLengthStyle(width as LengthStyle);\r\n    }\r\n\r\n    if(Number.isFinite(height as number)) {\r\n      parsedHeight = ParsedLengthStyle.inPixels(height as number);\r\n    } else {\r\n      parsedHeight = new ParsedLengthStyle(height as LengthStyle);\r\n    }\r\n\r\n    if(width && height) {\r\n      mutatedFlag = !this._width || !this._height;\r\n\r\n      mutatedFlag = mutatedFlag || parsedWidth.styleString  != this._width.styleString;\r\n      mutatedFlag = mutatedFlag || parsedHeight.styleString != this._height.styleString;\r\n\r\n      this._width = parsedWidth;\r\n      this._height = parsedHeight;\r\n    }\r\n\r\n    this.needsLayout = this.needsLayout || mutatedFlag;\r\n    this.refreshLayoutIfNeeded(pending);\r\n  }\r\n\r\n  public setNeedsLayout() {\r\n    this.needsLayout = true;\r\n  }\r\n\r\n  public batchLayoutAfter(closure: () => void) {\r\n    /*\r\n      Is there already an ongoing batch?  If so, just run the closure and don't\r\n      adjust the tracking variables.  The outermost call will finalize layout.\r\n    */\r\n    if(this.deferLayout) {\r\n      closure();\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.deferLayout = true;\r\n      if(this.vkbd) {\r\n        this.vkbd.deferLayout = true;\r\n      }\r\n      closure();\r\n    } finally {\r\n      this.deferLayout = false;\r\n      if(this.vkbd) {\r\n        this.vkbd.deferLayout = false;\r\n      }\r\n      this.refreshLayout();\r\n    }\r\n  }\r\n\r\n  public refreshLayout(pending?: boolean): void {\r\n    if(!this.keyboardView || this.deferLayout) {\r\n      return;\r\n    }\r\n\r\n    // Step 1:  have the necessary conditions been met?\r\n    const hasDimensions = this.width && this.height;\r\n\r\n    if(!hasDimensions) {\r\n      // If dimensions haven't been set yet, we have no basis for layout calculations.\r\n      // We do not emit a warning here; if we did, at the time of writing this, we'd\r\n      // consistently get Sentry events from the Keyman mobile apps.\r\n      //\r\n      // See #9206 & https://github.com/keymanapp/keyman/pull/9206#issuecomment-1627917615\r\n      // for context and history.\r\n      return;\r\n    }\r\n\r\n    const fixedSize = this.width.absolute && this.height.absolute;\r\n    const computedStyle = getComputedStyle(this._Box);\r\n    const isInDOM = computedStyle.height != '' && computedStyle.height != 'auto';\r\n\r\n    // Step 2:  determine basic layout geometry\r\n    if(fixedSize) {\r\n      this._computedWidth  = this.width.val;\r\n      this._computedHeight = this.height.val;\r\n    } else if(isInDOM) {\r\n      // Note:  %-based auto-detect for dimensions currently has some issues; the stylesheets load\r\n      // asynchronously, causing the format to be VERY off before the stylesheets fully load.\r\n      //\r\n      // Depending on initial effects, changes to the OSK size could cause changes to the _parent_ size,\r\n      // too... so this potential bit likely needs something of a redesign.\r\n      const parent = this._Box.parentElement as HTMLElement;\r\n      this._computedWidth  = this.width.val  * (this.width.absolute  ? 1 : parent.offsetWidth);\r\n      this._computedHeight = this.height.val * (this.height.absolute ? 1 : parent.offsetHeight);\r\n    } else {\r\n      console.warn(\"Unable to properly perform layout - specification uses a relative spec, thus relies upon insertion into the DOM for layout.\");\r\n      return;\r\n    }\r\n\r\n    // Must be set before any references to the .computedWidth and .computedHeight properties!\r\n    this.needsLayout = false;\r\n\r\n    // Step 3:  perform layout operations.\r\n    this.banner.element.style.fontSize = this.baseFontSize;\r\n    if(this.vkbd) {\r\n      this.vkbd.fontSize = this.parsedBaseFontSize;\r\n    }\r\n\r\n    if(!pending) {\r\n      this.headerView?.refreshLayout();\r\n      this.bannerView.width = this.computedWidth;\r\n      this.bannerView.refreshLayout();\r\n      this.footerView?.refreshLayout();\r\n    }\r\n\r\n    if(this.vkbd) {\r\n      let availableHeight = this.computedHeight - this.computeFrameHeight();\r\n\r\n      // +5:  from kmw-banner-bar's 'top' attribute when active\r\n      if(this.bannerView.height > 0) {\r\n        availableHeight -= this.bannerView.height + 5;\r\n      }\r\n      // Triggers the VisualKeyboard.refreshLayout() method, which includes a showLanguage() call.\r\n      this.vkbd.setSize(this.computedWidth, availableHeight, pending);\r\n\r\n      const bs = this._Box.style;\r\n      // OSK size settings can only be reliably applied to standard VisualKeyboard\r\n      // visualizations, not to help text or empty views.\r\n      bs.width  = bs.maxWidth  = this.computedWidth + 'px';\r\n      bs.height = bs.maxHeight = this.computedHeight + 'px';\r\n    } else {\r\n      const bs = this._Box.style;\r\n      bs.width  = 'auto';\r\n      bs.height = 'auto';\r\n      bs.maxWidth = bs.maxHeight = '';\r\n    }\r\n  }\r\n\r\n  public refreshLayoutIfNeeded(pending?: boolean) {\r\n    if(this.needsLayout) {\r\n      this.refreshLayout(pending);\r\n    }\r\n  }\r\n\r\n  public abstract getDefaultWidth(): number;\r\n  public abstract getDefaultKeyboardHeight(): number;\r\n\r\n  // /**\r\n  //  * Function     _Load\r\n  //  * Scope        Private\r\n  //  * Description  OSK initialization when keyboard selected\r\n  //  */\r\n  // _Load() { // Load Help - maintained only temporarily.\r\n  //   let keymanweb = com.keyman.singleton;\r\n  //   this.activeKeyboard = keymanweb.core.activeKeyboard;\r\n  // }\r\n\r\n  public postKeyboardLoad() {\r\n    this._Visible = false;  // I3363 (Build 301)\r\n\r\n    // Perform any needed restructuring and/or layout tweaks (depending on the OSKView type).\r\n    this.postKeyboardAdjustments();\r\n\r\n    if(this.displayIfActive) {\r\n      this.present();\r\n    }\r\n  }\r\n\r\n  protected abstract postKeyboardAdjustments(): void;\r\n\r\n  protected abstract setBoxStyling(): void;\r\n\r\n  private loadActiveKeyboard() {\r\n    this.setBoxStyling();\r\n    this.needsLayout = true;\r\n    // Save references to the old kbd & its styles for shutdown after replacement.\r\n    const oldKbd = this.keyboardView;\r\n    const oldKbdStyleManager = this.kbdStyleSheetManager;\r\n\r\n    // Create new ones for the new, incoming kbd.\r\n    this.kbdStyleSheetManager = new StylesheetManager(this._Box, this.config.doCacheBusting || false);\r\n    const kbdView = this.keyboardView = this._GenerateKeyboardView(this.keyboardData?.keyboard, this.keyboardData?.metadata);\r\n\r\n    // Perform the replacement.\r\n    this._Box.replaceChild(kbdView.element, oldKbd.element);\r\n    kbdView.postInsert();\r\n    this.bannerController?.configureForKeyboard(this.keyboardData?.keyboard, this.keyboardData?.metadata);\r\n\r\n    // Now that the swap has occurred, it's safe to shutdown the old VisualKeyboard and any related stylesheets.\r\n    if(oldKbd instanceof VisualKeyboard) {\r\n      oldKbd.shutdown();\r\n    }\r\n    oldKbdStyleManager.unlinkAll();\r\n\r\n    // END:  construction of the actual internal layout for the overall OSK\r\n    // Footer element management is handled within FloatingOSKView.\r\n\r\n    this.banner.appendStyles();\r\n\r\n    if(this.vkbd) {\r\n      // Create the key preview (for phones)\r\n      this.vkbd.createKeyTip();\r\n\r\n      // Create the globe hint (for embedded contexts; has a stub for other contexts)\r\n      const globeHint = this.vkbd.createGlobeHint();\r\n      if(globeHint) {\r\n        this._Box.appendChild(globeHint.element);\r\n      }\r\n\r\n      // Append a stylesheet for this keyboard for keyboard specific styles\r\n      // or if needed to specify an embedded font\r\n      this.vkbd.appendStyleSheet();\r\n    }\r\n\r\n    this.postKeyboardLoad();\r\n  }\r\n\r\n  private _GenerateKeyboardView(keyboard: Keyboard, keyboardMetadata: KeyboardProperties): KeyboardView {\r\n    let device = this.targetDevice;\r\n\r\n    this._Box.className = \"\";\r\n\r\n    // Case 1:  since we hide the system keyboard on touch devices, we need\r\n    //          to display SOMETHING that can accept input.\r\n    if(keyboard == null && !device.touchable) {\r\n      // We do not (currently) allow selecting the default system keyboard on\r\n      // touch form-factors.  Likely b/c mnemonic difficulties.\r\n      return new EmptyView();\r\n    } else {\r\n      // Generate a visual keyboard from the layout (or layout default)\r\n      // Condition is false if no key definitions exist, formFactor == desktop, AND help text exists.  All three.\r\n      if(keyboard && keyboard.layout(device.formFactor as DeviceSpec.FormFactor)) {\r\n        return this._GenerateVisualKeyboard(keyboard, keyboardMetadata);\r\n      } else if(!keyboard /* && device.touchable (implied) */ || !keyboardMetadata) {\r\n        // Show a basic, \"hollow\" OSK that at least allows input, since we're\r\n        // on a touch device and hiding the system keyboard\r\n        return this._GenerateVisualKeyboard(null, null);\r\n      } else {\r\n        // A keyboard help-page or help-text is still a visualization, even not a standard OSK.\r\n        return new HelpPageView(keyboard);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     _GenerateVisualKeyboard\r\n   * Scope        Private\r\n   * @param       {Object}      keyboard    The keyboard to visualize\r\n   * Description  Generates the visual keyboard element and attaches it to KMW\r\n   */\r\n  private _GenerateVisualKeyboard(keyboard: Keyboard, keyboardMetadata: KeyboardProperties): VisualKeyboard {\r\n    let device = this.targetDevice;\r\n\r\n    const resourcePath = getResourcePath(this.config);\r\n\r\n    // Root element sets its own classes, one of which is 'kmw-osk-inner-frame'.\r\n    let vkbd = new VisualKeyboard({\r\n      keyboard: keyboard,\r\n      keyboardMetadata: keyboardMetadata,\r\n      device: device,\r\n      hostDevice: this.hostDevice,\r\n      topContainer: this._Box,\r\n      styleSheetManager: this.kbdStyleSheetManager,\r\n      pathConfig: this.config.pathConfig,\r\n      embeddedGestureConfig: this.config.embeddedGestureConfig,\r\n      isEmbedded: this.config.isEmbedded,\r\n      specialFont: {\r\n        family: 'SpecialOSK',\r\n        files: [`${resourcePath}/keymanweb-osk.ttf`],\r\n        path: '' // Not actually used.\r\n      },\r\n      gestureParams: this.config.gestureParams\r\n    });\r\n\r\n    vkbd.on('keyevent', (keyEvent, callback) => this.emit('keyevent', keyEvent, callback));\r\n    vkbd.on('globekey', (keyElement, on) => this.emit('globekey', keyElement, on));\r\n    vkbd.on('hiderequested', (keyElement) => {\r\n      this.doHide(true);\r\n      this.emit('hiderequested', keyElement);\r\n    });\r\n\r\n    // Set box class - OS and keyboard added for Build 360\r\n    this._Box.className=device.formFactor+' '+ device.OS.toLowerCase() + ' kmw-osk-frame';\r\n\r\n    // Add primary keyboard element to OSK\r\n    return vkbd;\r\n  }\r\n\r\n  /**\r\n   * This function may be provided to event sources to trigger changes in keyboard layer.\r\n   * It is pre-bound to its OSKView instance.\r\n   *\r\n  ```\r\n    {\r\n      let core = com.keyman.singleton.core;\r\n      core.keyboardProcessor.layerStore.handler = this.layerChangeHandler;\r\n    }\r\n  ```\r\n   *\r\n   * @param source\r\n   * @param newValue\r\n   * @returns\r\n   */\r\n  public layerChangeHandler: SystemStoreMutationHandler = (source: MutableSystemStore,\r\n    newValue: string) => {\r\n    // This handler is also triggered on state-key state changes (K_CAPS) that\r\n    // may not actually change the layer.\r\n    if(this.vkbd) {\r\n      this.vkbd._UpdateVKShiftStyle(newValue);\r\n    }\r\n\r\n    if((this.vkbd && this.vkbd.layerId != newValue) || source.value != newValue) {\r\n      // Prevents console errors when a keyboard only displays help.\r\n      // Can occur when using SHIFT with sil_euro_latin on a desktop form-factor.\r\n      //\r\n      // Also, only change the layer ID itself if there is an actual corresponding layer\r\n      // in the OSK.\r\n      if(this.vkbd?.layerGroup.getLayer(newValue) && !this.vkbd?.layerLocked) {\r\n        // triggers state-update + layer refresh automatically.\r\n        this.vkbd.layerId = newValue;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * The main function for presenting the OSKView.\r\n   *\r\n   * This includes:\r\n   * - refreshing its layout\r\n   * - displaying it\r\n   * - positioning it\r\n   */\r\n  public present(): void {\r\n    // Do not try to display OSK if no active element\r\n    if(!this.mayShow()) {\r\n      return;\r\n    }\r\n\r\n    // Ensure the keyboard view is modeling the correct state.  (Correct layer, etc.)\r\n    this.keyboardView.updateState(); // get current state keys!\r\n\r\n    this._Box.style.display='block'; // Is 'none' when hidden.\r\n\r\n    // First thing after it's made visible.\r\n    this.refreshLayoutIfNeeded();\r\n\r\n    this._Visible=true;\r\n\r\n    /* In case it's still '0' from a hide() operation.\r\n      *\r\n      * (Opacity is only modified when device.touchable = true,\r\n      * though a couple of extra conditions may apply.)\r\n      */\r\n    this._Box.style.opacity = '1';\r\n\r\n    // If OSK still hidden, make visible only after all calculation finished\r\n    if(this._Box.style.visibility == 'hidden') {\r\n      let _this = this;\r\n      window.setTimeout(function() {\r\n        _this._Box.style.visibility = 'visible';\r\n      }, 0);\r\n    }\r\n\r\n    this.setDisplayPositioning();\r\n\r\n    // Each subclass is responsible for raising the 'show' event on its own, since\r\n    // certain ones supply extra information in their event param object.\r\n  }\r\n\r\n  /**\r\n   * Method usable by subclasses of OSKView to control that OSKView type's\r\n   * positioning behavior when needed by the present() method.\r\n   */\r\n  protected abstract setDisplayPositioning(): void;\r\n\r\n  /**\r\n   * Method used to start a potentially-asynchronous hide of the OSK.\r\n   * @param hiddenByUser `true` if this hide operation was directly requested by the user.\r\n   */\r\n  public startHide(hiddenByUser: boolean): void {\r\n    if(!this.mayHide(hiddenByUser)) {\r\n      return;\r\n    }\r\n\r\n    if(hiddenByUser) {\r\n      // The one location outside of the `displayIfActive` property that bypasses the setter.\r\n      // Avoids needless recursion that could be triggered by it, as we're already in the\r\n      // process of hiding the OSK anyway.\r\n      this.activationModel.enabled = ((this.keyboardData.keyboard.isCJK || this.hostDevice.touchable) ? true : false); // I3363 (Build 301)\r\n    }\r\n\r\n    let promise: Promise<boolean> = null;\r\n    if(this._Box && this.hostDevice.touchable && !(this.keyboardView instanceof EmptyView) && this.config.allowHideAnimations) {\r\n      /**\r\n       * Note:  this refactored code appears to reflect a currently-dead code path.  14.0's\r\n       * equivalent is either extremely niche or is actually inaccessible.\r\n       */\r\n      promise = this.useHideAnimation();\r\n    } else {\r\n      promise = Promise.resolve(true);\r\n    }\r\n\r\n    const _this = this;\r\n    promise.then(function(shouldHide: boolean) {\r\n      if(shouldHide) {\r\n        _this.finalizeHide();\r\n      }\r\n    });\r\n\r\n    // Allow UI to execute code when hiding the OSK\r\n    this.doHide(hiddenByUser);\r\n  }\r\n\r\n  /**\r\n   * Performs the _actual_ logic and functionality involved in hiding the OSK.\r\n   */\r\n  protected finalizeHide() {\r\n    if (document.body.className.indexOf('osk-always-visible') >= 0) {\r\n      if (this.hostDevice.formFactor == 'desktop') {\r\n        return;\r\n      }\r\n    }\r\n\r\n    if(this._Box) {\r\n      let bs=this._Box.style;\r\n      bs.display = 'none';\r\n      bs.transition = '';\r\n      bs.opacity = '1';\r\n      this._Visible=false;\r\n    }\r\n\r\n    if(this.vkbd) {\r\n      this.vkbd.onHide();\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @returns `false` if the OSK is in an invalid state for being presented to the user.\r\n   */\r\n  protected mayShow(): boolean {\r\n    if(!this.activationModel.conditionsMet) {\r\n      return false;\r\n    }\r\n\r\n    // Never display the OSK for desktop browsers unless KMW element is focused, and a keyboard selected\r\n    if(!this.keyboardView || this.keyboardView instanceof EmptyView || !this.activationModel.enabled) {\r\n      return false;\r\n    }\r\n\r\n    if(!this._Box) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param hiddenByUser\r\n   * @returns `false` if the OSK is in an invalid state for being hidden from the user.\r\n   */\r\n  protected mayHide(hiddenByUser: boolean): boolean {\r\n    if(this.activationModel.conditionsMet && !this.mayDisable) {\r\n      return false;\r\n    }\r\n\r\n    if(this.activationModel instanceof StaticActivator) {\r\n      return false;\r\n    }\r\n\r\n    if(!hiddenByUser && this.hostDevice.formFactor == 'desktop') {\r\n      //Allow desktop OSK to remain visible on blur if body class set\r\n      if(document.body.className.indexOf('osk-always-visible') >= 0) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Applies CSS styling and handling needed to perform a fade animation when\r\n   * hiding the OSK.\r\n   *\r\n   * Note:  currently reflects an effectively-dead code path, though this is\r\n   * likely not intentional.  Other parts of the KMW engine seem to call hideNow()\r\n   * synchronously after each and every part of the engine that calls this function,\r\n   * cancelling the Promise.\r\n   *\r\n   * @returns A Promise denoting either cancellation of the hide (`false`) or\r\n   * completion of the hide & its animation (`true`)\r\n   */\r\n\r\n  protected useHideAnimation(): Promise<boolean> {\r\n    const os = this._Box.style;\r\n    const _this = this;\r\n\r\n    return new Promise<boolean>(function(resolve) {\r\n      const cleanup = function() {\r\n        // TODO(lowpri): attach event listeners on create and leave them there\r\n        _this._Box.removeEventListener('transitionend', cleanup, false);\r\n        _this._Box.removeEventListener('webkitTransitionEnd', cleanup, false);\r\n        _this._Box.removeEventListener('transitioncancel', cleanup, false);\r\n        _this._Box.removeEventListener('webkitTransitionCancel', cleanup, false);\r\n        if(_this._animatedHideTimeout != 0) {\r\n          window.clearTimeout(_this._animatedHideTimeout);\r\n        }\r\n        _this._animatedHideTimeout = 0;\r\n\r\n        if(_this._Visible && _this.activationModel.conditionsMet) {\r\n          // Leave opacity alone and clear transition if another element activated\r\n          os.transition='';\r\n          os.opacity='1';\r\n          resolve(false);\r\n          return false;\r\n        } else {\r\n          resolve(true);\r\n          return true;\r\n        }\r\n      }, startup = function() {\r\n        _this._Box.removeEventListener('transitionrun', startup, false);\r\n        _this._Box.removeEventListener('webkitTransitionRun', startup, false);\r\n        _this._Box.addEventListener('transitionend', cleanup, false);\r\n        _this._Box.addEventListener('webkitTransitionEnd', cleanup, false);\r\n        _this._Box.addEventListener('transitioncancel', cleanup, false);\r\n        _this._Box.addEventListener('webkitTransitionCancel', cleanup, false);\r\n      };\r\n\r\n      _this._Box.addEventListener('transitionrun', startup, false);\r\n      _this._Box.addEventListener('webkitTransitionRun', startup, false);\r\n\r\n      os.transition='opacity 0.5s linear 0';\r\n      os.opacity='0';\r\n\r\n      // Cannot hide the OSK smoothly using a transitioned drop, since for\r\n      // position:fixed elements transitioning is incompatible with translate3d(),\r\n      // and also does not work with top, bottom or height styles.\r\n      // Opacity can be transitioned and is probably the simplest alternative.\r\n      // We must condition on osk._Visible in case focus has since been moved to another\r\n      // input (in which case osk._Visible will be non-zero)\r\n      _this._animatedHideTimeout = window.setTimeout(cleanup,\r\n        200); // Wait a bit before starting, to allow for moving to another element\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Used to synchronously hide the OSK, cancelling any async hide animations that have\r\n   * not started and immediately completing the hide of any hide ops pending completion\r\n   * of their animation.\r\n   */\r\n  public hideNow() {\r\n    if(!this.mayHide(false) || !this._Box) {\r\n      return;\r\n    }\r\n\r\n    // Two possible uses for _animatedHideResolver:\r\n    // - _animatedHideTimeout is set:   animation is waiting to start\r\n    // - _animatedHideTimeout is null:  animation has already started.\r\n\r\n    // Was an animated hide waiting to start?  Just cancel it.\r\n    if(this._animatedHideTimeout) {\r\n      window.clearTimeout(this._animatedHideTimeout);\r\n      this._animatedHideTimeout = 0;\r\n    }\r\n\r\n    // Was an animated hide already in progress?  If so, just trigger it early.\r\n    const os = this._Box.style;\r\n    os.transition='';\r\n    os.opacity='0';\r\n    this.finalizeHide();\r\n  }\r\n\r\n  ['shutdown']() {\r\n    // Disable the OSK's event handlers.\r\n    this.removeBaseMouseEventListeners();\r\n    this.removeBaseTouchEventListeners();\r\n\r\n    // Remove the OSK's elements from the document, allowing them to be properly cleaned up.\r\n    // Necessary for clean engine testing.\r\n    var _box = this._Box;\r\n    if(_box.parentElement) {\r\n      _box.parentElement.removeChild(_box);\r\n    }\r\n\r\n    this.kbdStyleSheetManager.unlinkAll();\r\n    this.uiStyleSheetManager.unlinkAll();\r\n\r\n    this.bannerController.shutdown();\r\n  }\r\n\r\n  /**\r\n   * Function     getRect\r\n   * Scope        Public\r\n   * @return      {Object.<string,number>}   Array object with position and size of OSK container\r\n   * Description  Get rectangle containing KMW Virtual Keyboard\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/getRect\r\n   */\r\n  public getRect(): OSKRect {\t\t// I2405\r\n    var p: OSKRect = {};\r\n\r\n    // Always return these based upon _Box; using this.vkbd will fail to account for banner and/or\r\n    // the desktop OSK border.\r\n    p['left'] = p.left = getAbsoluteX(this._Box);\r\n    p['top']  = p.top  = getAbsoluteY(this._Box);\r\n\r\n    p['width'] = this.computedWidth;\r\n    p['height'] = this.computedHeight;\r\n    return p;\r\n  }\r\n\r\n  /* ---- Legacy interfacing methods and fields ----\r\n    *\r\n    * The endgoal is to eliminate the need for these entirely, but extra work and care\r\n    * will be necessary to achieve said endgoal for these methods.\r\n    *\r\n    * The simplest way forward is to maintain them, then resolve them independently,\r\n    * one at a time.\r\n    */\r\n\r\n  // OSK state fields & events\r\n  //\r\n  // These are relatively stable and may be preserved as they are.\r\n  _Visible: boolean = false;\r\n\r\n  /**\r\n   * Function     enabled\r\n   * Scope        Public\r\n   * @return      {boolean|number}    True if KMW OSK enabled\r\n   * Description  Test if KMW OSK is enabled\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/isEnabled\r\n   */\r\n  public isEnabled(): boolean {\r\n    return this.displayIfActive;\r\n  }\r\n\r\n  /**\r\n   * Function     isVisible\r\n   * Scope        Public\r\n   * @return      {boolean|number}    True if KMW OSK visible\r\n   * Description  Test if KMW OSK is actually visible\r\n   * Note that this will usually return false after any UI event that results in (temporary) loss of input focus\r\n   *\r\n   * https://help.keyman.com/developer/engine/web/current-version/reference/osk/isVisible\r\n   */\r\n  public isVisible(): boolean {\r\n    return this._Visible;\r\n  }\r\n\r\n  /**\r\n   * Function     hide\r\n   * Scope        Public\r\n   * Description  Prevent display of OSK window on focus\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/hide\r\n   */\r\n  public hide() {\r\n    this.activationModel.enabled = false;\r\n    this.startHide(true);\r\n  }\r\n\r\n  /**\r\n   * Description  Display KMW OSK (at position set in callback to UI)\r\n   * Function     show\r\n   * Scope        Public\r\n   * @param       {(boolean|number)=}      bShow     True to display, False to hide, omitted to toggle\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/show\r\n   */\r\n  public show(bShow?: boolean) {\r\n    if(arguments.length > 0) {\r\n      this.activationModel.enabled = bShow;\r\n    } else {\r\n      if(this.activationModel.conditionsMet) {\r\n        this.activationModel.enabled = !this.activationModel.enabled;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allow UI to respond to OSK being shown (passing position and properties)\r\n   *\r\n   * @param       {Object=}       p     object with coordinates and userdefined flag\r\n   * @return      {boolean}\r\n   *\r\n   */\r\n  doShow(p: {\r\n    x: number,\r\n    y: number,\r\n    userLocated: boolean\r\n  }) {\r\n    // Newer style 'doShow' emitted from .present by default.\r\n    this.legacyEvents.callEvent('show', p);\r\n  }\r\n\r\n  /**\r\n   * Allow UI to update respond to OSK being hidden\r\n   *\r\n   * @param       {boolean}       p     object with coordinates and userdefined flag\r\n   * @return      {void}\r\n   *\r\n   */\r\n  doHide(hiddenByUser: boolean) {\r\n    const p={\r\n      HiddenByUser: hiddenByUser\r\n    };\r\n    this.legacyEvents.callEvent('hide', p);\r\n  }\r\n\r\n  /**\r\n   * Function     addEventListener\r\n   * Scope        Public\r\n   * @param       {string}            event     event name\r\n   * @param       {function(Object)}  func      event handler\r\n   * Description  Wrapper function to add and identify OSK-specific event handlers\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/addEventListener\r\n   */\r\n  public addEventListener<T extends keyof LegacyOSKEventMap>(\r\n    event: T,\r\n    fn: EventListener<LegacyOSKEventMap, T>\r\n  ): void {\r\n    this.legacyEvents.addEventListener(event, fn);\r\n  }\r\n\r\n  /**\r\n   * Function     removeEventListener\r\n   * Scope        Public\r\n   * @param       {string}            event     event name\r\n   * @param       {function(Object)}  func      event handler\r\n   * Description  Wrapper function to remove previously-added OSK-specific event handlers\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/removeEventListener\r\n   */\r\n  public removeEventListener<T extends keyof LegacyOSKEventMap>(\r\n    event: T,\r\n    fn: EventListener<LegacyOSKEventMap, T>\r\n  ): void {\r\n    this.legacyEvents.removeEventListener(event, fn);\r\n  }\r\n}",
    "import { EventEmitter } from 'eventemitter3';\r\n\r\nimport { Keyboard } from 'keyman/engine/keyboard';\r\n\r\nimport OSKViewComponent from './oskViewComponent.interface.js';\r\nimport { ParsedLengthStyle } from '../lengthStyle.js';\r\nimport MouseDragOperation from '../input/mouseDragOperation.js';\r\n\r\nimport { createUnselectableElement } from 'keyman/engine/dom-utils';\r\n\r\ninterface EventMap {\r\n  /**\r\n   * The close button (to request that the OSK hide) has been clicked.\r\n   */\r\n  close: () => void,\r\n\r\n  /**\r\n   * The config button has been clicked.\r\n   */\r\n  config: () => void,\r\n\r\n  /**\r\n   * The help button has been clicked.\r\n   */\r\n  help: () => void,\r\n\r\n  /**\r\n   * The pin button was visible and has been clicked.\r\n   */\r\n  unpin: () => void\r\n}\r\n\r\nexport default class TitleBar extends EventEmitter<EventMap, TitleBar> implements OSKViewComponent {\r\n  private _element: HTMLDivElement;\r\n  private _unpinButton: HTMLDivElement;\r\n  private _closeButton: HTMLDivElement;\r\n  private _helpButton: HTMLDivElement;\r\n  private _configButton: HTMLDivElement;\r\n  private _caption: HTMLSpanElement;\r\n\r\n  private _helpEnabled:   boolean;\r\n  private _configEnabled: boolean;\r\n\r\n  public get helpEnabled(): boolean {\r\n    return this._helpEnabled;\r\n  }\r\n\r\n  public set helpEnabled(val) {\r\n    this._helpEnabled = val;\r\n\r\n    this._helpButton.style.display = val ? 'inline' : 'none';\r\n  }\r\n\r\n  public get configEnabled(): boolean {\r\n    return this._configEnabled;\r\n  }\r\n\r\n  public set configEnabled(val) {\r\n    this._configEnabled = val;\r\n\r\n    this._configButton.style.display = val ? 'inline' : 'none';\r\n  }\r\n\r\n  private static readonly DISPLAY_HEIGHT = ParsedLengthStyle.inPixels(20); // As set in kmwosk.css\r\n\r\n  public constructor(dragHandler?: MouseDragOperation) {\r\n    super();\r\n\r\n    this._element = this.buildTitleBar();\r\n\r\n    this.helpEnabled   = false;\r\n    this.configEnabled = false;\r\n\r\n    if(dragHandler) {\r\n      this.element.onmousedown = dragHandler.mouseDownHandler;\r\n    }\r\n  }\r\n\r\n  public get layoutHeight(): ParsedLengthStyle {\r\n    return TitleBar.DISPLAY_HEIGHT;\r\n  }\r\n\r\n  private mouseCancellingHandler: (ev: MouseEvent) => boolean = function(ev: MouseEvent) {\r\n    ev.preventDefault();\r\n    ev.cancelBubble = true;\r\n    return false;\r\n  };\r\n\r\n  public get element(): HTMLDivElement {\r\n    return this._element;\r\n  }\r\n\r\n  public setPinCJKOffset() {\r\n    this._unpinButton.style.left = '15px';\r\n  }\r\n\r\n  public showPin(visible: boolean) {\r\n    this._unpinButton.style.display = visible ? 'block' : 'none';\r\n  }\r\n\r\n  public setTitle(str: string) {\r\n    this._caption.innerHTML = str;\r\n  }\r\n\r\n  public setTitleFromKeyboard(keyboard: Keyboard) {\r\n    let title = \"<span style='font-weight:bold'>\" + keyboard?.name + '</span>';  // I1972  // I2186\r\n    this._caption.innerHTML = title;\r\n  }\r\n\r\n  /**\r\n   * Create a control bar with title and buttons for the desktop OSK\r\n   */\r\n  buildTitleBar(): HTMLDivElement {\r\n    let bar = createUnselectableElement('div');\r\n    bar.id='keymanweb_title_bar';\r\n    bar.className='kmw-title-bar';\r\n\r\n    var Ltitle = this._caption = createUnselectableElement('span');\r\n    Ltitle.className='kmw-title-bar-caption';\r\n    Ltitle.style.color='#fff';\r\n    bar.appendChild(Ltitle);\r\n\r\n    var Limg = this._closeButton = this.buildCloseButton();\r\n    this._closeButton.onclick = () => {\r\n      this.emit('close');\r\n      return false;\r\n    };\r\n    bar.appendChild(Limg);\r\n\r\n    Limg = this._helpButton = this.buildHelpButton()\r\n    this._helpButton.onclick = () => {\r\n      this.emit('help');\r\n      return false;\r\n    }\r\n    bar.appendChild(Limg);\r\n\r\n    Limg = this._configButton = this.buildConfigButton();\r\n    this._configButton.onclick = () => {\r\n      this.emit('config');\r\n      return false;\r\n    }\r\n    bar.appendChild(Limg);\r\n\r\n    Limg = this._unpinButton = this.buildUnpinButton();\r\n    this._unpinButton.onclick = () => {\r\n      this.emit('unpin');\r\n      return false;\r\n    }\r\n    bar.appendChild(Limg);\r\n\r\n    return bar;\r\n  }\r\n\r\n  private buildCloseButton(): HTMLDivElement {\r\n    var Limg = createUnselectableElement('div');\r\n\r\n    Limg.id='kmw-close-button';\r\n    Limg.className='kmw-title-bar-image';\r\n    Limg.onmousedown = this.mouseCancellingHandler;\r\n\r\n    return Limg;\r\n  }\r\n\r\n  private buildHelpButton(): HTMLDivElement {\r\n    let Limg = createUnselectableElement('div');\r\n    Limg.id='kmw-help-image';\r\n    Limg.className='kmw-title-bar-image';\r\n    Limg.title='KeymanWeb Help';\r\n    Limg.onmousedown = this.mouseCancellingHandler;\r\n    return Limg;\r\n  }\r\n\r\n  private buildConfigButton(): HTMLDivElement {\r\n    let Limg = createUnselectableElement('div');\r\n\r\n    Limg.id='kmw-config-image';\r\n    Limg.className='kmw-title-bar-image';\r\n    Limg.title='KeymanWeb Configuration Options';\r\n    Limg.onmousedown = this.mouseCancellingHandler;\r\n\r\n    return Limg;\r\n  }\r\n\r\n  /**\r\n   * Builds an 'unpin' button for restoring OSK to default location, handle mousedown and click events\r\n   */\r\n  private buildUnpinButton(): HTMLDivElement {\r\n    let Limg = createUnselectableElement('div');  //I2186\r\n\r\n    Limg.id = 'kmw-pin-image';\r\n    Limg.className = 'kmw-title-bar-image';\r\n    Limg.title='Pin the On Screen Keyboard to its default location on the active text box';\r\n\r\n    Limg.onmousedown = this.mouseCancellingHandler;\r\n\r\n    return Limg;\r\n  }\r\n\r\n  public refreshLayout() {\r\n    // The title bar is adaptable as it is and needs no adjustments.\r\n  }\r\n}",
    "import { EventEmitter } from 'eventemitter3';\r\n\r\nimport OSKViewComponent from './oskViewComponent.interface.js';\r\nimport { ParsedLengthStyle } from '../lengthStyle.js';\r\nimport MouseDragOperation from '../input/mouseDragOperation.js';\r\n\r\nimport { createUnselectableElement } from 'keyman/engine/dom-utils';\r\n\r\ninterface EventMap {\r\n  /**\r\n   * Triggered when the user inputs a special command to show the engine's current version number.\r\n   */\r\n  showbuild: () => void;\r\n}\r\n\r\nexport default class ResizeBar extends EventEmitter<EventMap, ResizeBar> implements OSKViewComponent {\r\n  private _element: HTMLDivElement;\r\n  private _resizeHandle: HTMLDivElement;\r\n\r\n  private static readonly DISPLAY_HEIGHT = ParsedLengthStyle.inPixels(16); // As set in kmwosk.css\r\n\r\n  private mouseCancellingHandler: (ev: MouseEvent) => boolean = function(ev: MouseEvent) {\r\n    ev.preventDefault();\r\n    ev.cancelBubble = true;\r\n    return false;\r\n  };\r\n\r\n  public constructor(dragHandler?: MouseDragOperation) {\r\n    super();\r\n    this._element = this.buildResizeBar();\r\n\r\n    if(dragHandler) {\r\n      this._resizeHandle.onmousedown = dragHandler.mouseDownHandler;\r\n    }\r\n  }\r\n\r\n  public get layoutHeight(): ParsedLengthStyle {\r\n    return ResizeBar.DISPLAY_HEIGHT;\r\n  }\r\n\r\n  public get element(): HTMLDivElement {\r\n    return this._element;\r\n  }\r\n\r\n  public get handle(): HTMLDivElement {\r\n    return this._resizeHandle;\r\n  }\r\n\r\n  public allowResizing(flag: boolean) {\r\n    this._resizeHandle.style.display = flag ? 'block' : 'none';\r\n  }\r\n\r\n  /**\r\n   * Create a bottom bar with a resizing icon for the desktop OSK\r\n   */\r\n  buildResizeBar(): HTMLDivElement {\r\n    var bar = createUnselectableElement('div');\r\n    bar.className='kmw-footer';\r\n    bar.onmousedown = this.mouseCancellingHandler;\r\n\r\n    // Add caption\r\n    var Ltitle=createUnselectableElement('div');\r\n    Ltitle.className='kmw-footer-caption';\r\n    Ltitle.innerHTML='<a href=\"https://keyman.com/developer/keymanweb/\">KeymanWeb</a>';\r\n    Ltitle.id='keymanweb-osk-footer-caption';\r\n\r\n    // Display build number on shift+double click\r\n    Ltitle.addEventListener('dblclick', (e) => {\r\n      this.emit('showbuild');\r\n\r\n      return false;\r\n    }, false);\r\n\r\n    bar.appendChild(Ltitle);\r\n\r\n    var Limg = createUnselectableElement('div');\r\n    Limg.className='kmw-footer-resize';\r\n    bar.appendChild(Limg);\r\n    this._resizeHandle=Limg;\r\n\r\n    return bar;\r\n  }\r\n\r\n  public refreshLayout() {\r\n    // The title bar is adaptable as it is and needs no adjustments.\r\n  }\r\n}",
    "type MouseHandler = (this: GlobalEventHandlers, ev: MouseEvent) => any;\r\n\r\n/**\r\n * Represents the current location of the current cursor / touchpoint during\r\n * an ongoing contact-point event series.  This class standardizes to .pageX\r\n * (document) coordinates, rather than .clientX (viewport) coordinates.\r\n */\r\nclass InputEventCoordinate {\r\n  public readonly x: number;\r\n  public readonly y: number;\r\n\r\n  public constructor(x: number, y: number, source?: MouseEvent | TouchEvent) {\r\n    this.x = x;\r\n    this.y = y;\r\n  }\r\n\r\n  // Converts a MouseEvent or TouchEvent into the base coordinates needed\r\n  // by the mouse-dragging operations.\r\n  public static fromEvent(e: MouseEvent | TouchEvent) {\r\n    let coordSource: MouseEvent | Touch;\r\n\r\n    // Desktop Safari versions as recent as 14.1 do not support TouchEvents.\r\n    // So, just in case, a two-fold conditional check to avoid issues with a direct\r\n    // 'instanceof' against the type.\r\n    if(window['TouchEvent'] && e instanceof TouchEvent) {\r\n      coordSource = e.changedTouches[0];\r\n    } else if((e as TouchEvent).changedTouches) {\r\n      coordSource = (e as TouchEvent).changedTouches[0] as Touch;\r\n    } else {\r\n      coordSource = e as MouseEvent;\r\n    }\r\n\r\n    // For MouseEvents, .pageX is slightly less supported in older browsers when\r\n    // compared to .clientX.  They're about equally supported for TouchEvents.\r\n    if (coordSource.pageX) {\r\n      return new InputEventCoordinate(coordSource.pageX, coordSource.pageY, e);\r\n    } else if (coordSource.clientX) {\r\n      const x = coordSource.clientX + document.body.scrollLeft;\r\n      const y = coordSource.clientY + document.body.scrollTop;\r\n\r\n      return new InputEventCoordinate(x, y, e);\r\n    } else {\r\n      return new InputEventCoordinate(null, null, e);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Used to store the page's original mouse handlers and properties\r\n * when temporarily overridden by OSK moving or resizing handlers due\r\n * to user interaction.\r\n */\r\nclass MouseStartSnapshot {\r\n  private readonly _VPreviousMouseMove: MouseHandler;\r\n  private readonly _VPreviousMouseUp: MouseHandler;\r\n  private readonly _VPreviousCursor: string;\r\n  private readonly _VPreviousMouseButton: number;\r\n\r\n  constructor(e: MouseEvent) {\r\n    this._VPreviousMouseMove = document.onmousemove;\r\n    this._VPreviousMouseUp = document.onmouseup;\r\n\r\n    this._VPreviousCursor = document.body.style.cursor;\r\n    this._VPreviousMouseButton = (typeof(e.which)=='undefined' ? e.button : e.which);\r\n  }\r\n\r\n  restore() {\r\n    document.onmousemove = this._VPreviousMouseMove;\r\n    document.onmouseup = this._VPreviousMouseUp;\r\n\r\n    if(document.body.style.cursor) {\r\n      document.body.style.cursor = this._VPreviousCursor;\r\n    }\r\n  }\r\n\r\n  matchesCausingClick(e: MouseEvent): boolean {\r\n    return this._VPreviousMouseButton == (typeof(e.which)=='undefined' ? e.button : e.which);\r\n  }\r\n}\r\n\r\nexport default abstract class MouseDragOperation {\r\n  private _enabled: boolean;\r\n  private _startCoord: InputEventCoordinate;\r\n  private _mouseStartSnapshot: MouseStartSnapshot;\r\n\r\n  private startHandler: (e: MouseEvent) => void;\r\n  private cursorType: string;\r\n\r\n  public constructor(cursorType?: string) {\r\n    this.startHandler = this._VMoveMouseDown.bind(this);\r\n    this.cursorType = cursorType;\r\n  }\r\n\r\n  /**\r\n   * Denotes whether or not this object should handle incoming events.\r\n   */\r\n  public get enabled(): boolean {\r\n    return this._enabled;\r\n  }\r\n\r\n  public set enabled(flag: boolean) {\r\n    this._enabled = flag;\r\n  }\r\n\r\n  /**\r\n   * Denotes whether or not this object is currently handling an ongoing drag event.\r\n   */\r\n  public get isActive(): boolean {\r\n    return !!this._mouseStartSnapshot;\r\n  }\r\n\r\n  public get mouseDownHandler(): (e: MouseEvent) => void {\r\n    return this.startHandler;\r\n  }\r\n\r\n  /**\r\n   * Function     _VMoveMouseDown\r\n   * Scope        Private\r\n   * @param       {Object}      e      event\r\n   * Description  Process mouse down on OSK\r\n   */\r\n    private _VMoveMouseDown(e: MouseEvent) {\r\n    if(!e) {\r\n      return true;\r\n    }\r\n\r\n    if(!this._enabled) {\r\n      return true;\r\n    }\r\n\r\n    if(!this._mouseStartSnapshot) { // I1472 - Dragging off edge of browser window causes muckup\r\n      this._mouseStartSnapshot = new MouseStartSnapshot(e);\r\n    }\r\n\r\n    this._startCoord = InputEventCoordinate.fromEvent(e);\r\n\r\n    document.onmousemove = this._VMoveMouseMove.bind(this);\r\n    document.onmouseup = this._VMoveMouseUp.bind(this);\r\n    if(document.body.style.cursor) {\r\n      document.body.style.cursor = this.cursorType;\r\n    }\r\n\r\n    e.preventDefault();\r\n    e.cancelBubble = true;\r\n\r\n    this.onDragStart();\r\n    return false;\r\n  }\r\n\r\n  protected abstract onDragStart(): void;\r\n\r\n  /**\r\n   * Process mouse drag on OSK\r\n   *\r\n   * @param       {Object}      e      event\r\n   */\r\n    private _VMoveMouseMove(e: MouseEvent) {\r\n    if(!e) {\r\n      return true;\r\n    }\r\n\r\n    if(!this.enabled) {\r\n      return true;\r\n    }\r\n\r\n    e.preventDefault();\r\n    e.cancelBubble = true;\r\n\r\n    if(!this._mouseStartSnapshot.matchesCausingClick(e)) { // I1472 - Dragging off edge of browser window causes muckup\r\n      return this._VMoveMouseUp(e);\r\n    } else {\r\n      const coord = InputEventCoordinate.fromEvent(e);\r\n      const deltaX = coord.x - this._startCoord.x;\r\n      const deltaY = coord.y - this._startCoord.y;\r\n\r\n      this.onDragMove(deltaX, deltaY);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param deltaX The total horizontal distance moved, in pixels, since the start of the drag\r\n   * @param deltaY The total vertical distance moved, in pixels, since the start of the drag\r\n   */\r\n  protected abstract onDragMove(deltaX: number, deltaY: number): void;\r\n\r\n  /**\r\n   * Function     _VMoveMouseUp\r\n   * Scope        Private\r\n   * @param       {Object}      e      event\r\n   * Description  Process mouse up during movement of KMW OSK UI\r\n   */\r\n  private _VMoveMouseUp(e: MouseEvent) {\r\n    if(!e) {\r\n      return true;\r\n    }\r\n\r\n    this._mouseStartSnapshot.restore();\r\n    this._mouseStartSnapshot = null;\r\n\r\n    e.preventDefault();\r\n    e.cancelBubble = true;\r\n\r\n    this.onDragRelease();\r\n    return false;\r\n  }\r\n\r\n  protected abstract onDragRelease(): void;\r\n}",
    "import Activator from './activator.js';\r\n\r\ninterface TriggerEventMap<Type> {\r\n  triggerchange: (trigger: Type) => void;\r\n}\r\n\r\nexport default class TwoStateActivator<Type> extends Activator<TriggerEventMap<Type>> {\r\n  private _enabled: boolean = true;\r\n  private actValue: Type = null;\r\n\r\n  get activate(): boolean {\r\n    return this._enabled && !!this.actValue;\r\n  }\r\n\r\n  private checkState(oldValue: boolean) {\r\n    if(this.activate != oldValue) {\r\n      this.emit('activate', this.activate);\r\n    }\r\n  }\r\n\r\n  get enabled(): boolean {\r\n    return this._enabled;\r\n  }\r\n\r\n  set enabled(flag: boolean) {\r\n    const oldState = this.activate;\r\n    this._enabled = flag; // may change this.value!\r\n\r\n    this.checkState(oldState);\r\n  }\r\n\r\n  get activationTrigger(): Type {\r\n    return this.actValue;\r\n  }\r\n\r\n  set activationTrigger(value: Type) {\r\n    const oldState = this.activate;\r\n    const oldValue = this.actValue;\r\n    this.actValue = value; // may change this.value!\r\n\r\n    this.checkState(oldState);\r\n    if(oldValue != value) {\r\n      this.emit('triggerchange', value);\r\n    }\r\n  }\r\n\r\n  get conditionsMet(): boolean {\r\n    return !!this.activationTrigger;\r\n  }\r\n}",
    "import { CookieSerializer } from 'keyman/engine/dom-utils';\r\n\r\nexport interface FloatingOSKCookie {\r\n  /**\r\n   * Notes whether or not the OSK was hidden at the end of the previous session.\r\n   */\r\n  visible: 0 | 1;\r\n\r\n  /**\r\n   * Notes whether or not the OSK was pinned (located by the user) at the end\r\n   * of the previous session.\r\n   */\r\n  userSet: 0 | 1;\r\n\r\n  /**\r\n   * Denotes the left-position of the OSK at the end of the previous session if pinned.\r\n   * Defaults to -1 if the value was undefined.\r\n   */\r\n  left: number;\r\n\r\n  /**\r\n   * Denotes the left-position of the OSK at the end of the previous session if pinned.\r\n   * Defaults to -1 if the value was undefined.\r\n   */\r\n  top: number;\r\n\r\n  /**\r\n   * The previously-set OSK width.\r\n   */\r\n  width?: number;\r\n\r\n  /**\r\n   * The previously-set OSK height.\r\n   */\r\n  height?: number;\r\n\r\n  /**\r\n   * The version of KeymanWeb active when this cookie was generated.\r\n   */\r\n  _version: string;\r\n}\r\n\r\nexport class FloatingOSKCookieSerializer extends CookieSerializer<Required<FloatingOSKCookie>> {\r\n  constructor() {\r\n    super('KeymanWeb_OnScreenKeyboard');\r\n  }\r\n\r\n  loadWithDefaults(defaults: Required<FloatingOSKCookie>) {\r\n    return {...defaults, ...this.load()};\r\n  }\r\n\r\n  load() {\r\n    const cookie = super.load((value, key) => {\r\n      switch(key) {\r\n        case 'version':\r\n          return value;\r\n        default:\r\n          return Number.parseInt(value, 10);\r\n      }\r\n    });\r\n\r\n    if(!cookie.width) {\r\n      delete cookie.width;  // in case of a '' entry.\r\n    }\r\n    if(!cookie.height) {\r\n      delete cookie.height; // in case of a '' entry.\r\n    }\r\n\r\n    return cookie;\r\n  }\r\n\r\n  save(cookie: Required<FloatingOSKCookie>) {\r\n    super.save(cookie);\r\n  }\r\n}",
    "import { DeviceSpec, ManagedPromise, Version } from 'keyman/engine/keyboard';\r\nimport { getAbsoluteX, getAbsoluteY, landscapeView } from 'keyman/engine/dom-utils';\r\nimport { EmitterListenerSpy } from 'keyman/engine/events';\r\n\r\nimport OSKView, { EventMap, type LegacyOSKEventMap, OSKPos, OSKRect } from './oskView.js';\r\nimport TitleBar from '../components/titleBar.js';\r\nimport ResizeBar from '../components/resizeBar.js';\r\n\r\nimport MouseDragOperation from '../input/mouseDragOperation.js';\r\nimport { getViewportScale } from '../screenUtils.js';\r\nimport Configuration from '../config/viewConfiguration.js';\r\nimport TwoStateActivator from './twoStateActivator.js';\r\nimport { FloatingOSKCookie, FloatingOSKCookieSerializer } from './floatingOskCookie.js';\r\n\r\n/***\r\n   KeymanWeb 10.0\r\n   Copyright 2017 SIL International\r\n***/\r\n\r\nexport interface FloatingOSKViewConfiguration extends Configuration {\r\n  activator?: TwoStateActivator<HTMLElement>;\r\n}\r\n\r\nexport default class FloatingOSKView extends OSKView {\r\n  // OSK positioning fields\r\n  userPositioned: boolean = false;\r\n  specifiedPosition: boolean = false;\r\n  x: number;\r\n  y: number;\r\n  noDrag: boolean = false;\r\n  dfltX: string;\r\n  dfltY: string;\r\n\r\n  layoutSerializer = new FloatingOSKCookieSerializer();\r\n\r\n  private titleBar: TitleBar;\r\n  private resizeBar: ResizeBar;\r\n\r\n  // Encapsulations of the drag behaviors for OSK movement & resizing\r\n  private _moveHandler: MouseDragOperation;\r\n  private _resizeHandler: MouseDragOperation;\r\n\r\n  public constructor(config: FloatingOSKViewConfiguration) {\r\n    config.activator = config.activator || new TwoStateActivator<HTMLElement>();\r\n\r\n    super(config);\r\n\r\n    this.typedActivationModel.on('triggerchange', () => this.setDisplayPositioning());\r\n\r\n    document.body.appendChild(this._Box);\r\n\r\n    // Add header element to OSK only for desktop browsers\r\n    this.titleBar = new TitleBar(this.titleDragHandler);\r\n    //\r\n    this.titleBar.on('help', () => {\r\n      this.legacyEvents.callEvent('helpclick', {});\r\n    });\r\n    this.titleBar.on('config', () => {\r\n      this.legacyEvents.callEvent('configclick', {});\r\n    });\r\n    this.titleBar.on('close', () => this.startHide(true));\r\n    this.titleBar.on('unpin', () => this.restorePosition(true));\r\n\r\n    this.resizeBar = new ResizeBar(this.resizeDragHandler);\r\n    this.resizeBar.on('showbuild', () => this.emit('showbuild'));\r\n\r\n    this.headerView = this.titleBar;\r\n    this._Box.insertBefore(this.headerView.element, this._Box.firstChild);\r\n\r\n    const onListenedEvent = (eventName: keyof EventMap | keyof LegacyOSKEventMap) => {\r\n      // As the following title bar buttons (for desktop / FloatingOSKView) do nothing unless a site\r\n      // designer uses these events, we disable / hide them unless an event-handler is attached.\r\n      let titleBar = this.headerView;\r\n      if(titleBar && titleBar instanceof TitleBar) {\r\n        switch(eventName) {\r\n          case 'configclick':\r\n            titleBar.configEnabled = this.legacyEvents.listenerCount('configclick') > 0;\r\n            break;\r\n          case 'helpclick':\r\n            titleBar.helpEnabled = this.legacyEvents.listenerCount('helpclick') > 0;\r\n            break;\r\n          default:\r\n            return;\r\n        }\r\n      }\r\n    }\r\n\r\n    const listenerSpyNew = new EmitterListenerSpy(this);\r\n    const listenerSpyOld = new EmitterListenerSpy(this.legacyEvents);\r\n    for(let listenerSpy of [listenerSpyNew, listenerSpyOld]) {\r\n      listenerSpy.on('listeneradded', onListenedEvent);\r\n      listenerSpy.on('listenerremoved', onListenedEvent);\r\n    }\r\n\r\n    if(this.activeKeyboard) {\r\n      // If the keyboard was loaded during OSK init, we may need to set the\r\n      // title in place now, as it wasn't possible at the standard time.\r\n      this.postKeyboardAdjustments();\r\n    }\r\n\r\n    this.loadPersistedLayout();\r\n  }\r\n\r\n  private get typedActivationModel(): TwoStateActivator<HTMLElement> {\r\n    return this.activationModel as TwoStateActivator<HTMLElement>;\r\n  }\r\n\r\n  /**\r\n   * Function     _Unload\r\n   * Scope        Private\r\n   * Description  Clears OSK variables prior to exit (JMD 1.9.1 - relocation of local variables 3/9/10)\r\n   */\r\n  _Unload() {\r\n    this.keyboardView = null;\r\n    this.bannerView = null;\r\n    this._Box = null;\r\n  }\r\n\r\n  protected setBoxStyling() {\r\n    const s = this._Box.style;\r\n\r\n    s.zIndex   = '9999';\r\n    s.display  = 'none';\r\n    s.width    = 'auto';\r\n    s.position = 'absolute';\r\n  }\r\n\r\n  protected postKeyboardAdjustments() {\r\n    // It is possible for this to be called during OSK initialization,\r\n    // when `this.titleBar` has not yet been initialized.\r\n    if(!this.titleBar) {\r\n      return;\r\n    }\r\n\r\n    // Add header element to OSK only for desktop browsers\r\n    this.enableMoveResizeHandlers();\r\n    if(this.activeKeyboard) {\r\n      this.titleBar.setTitleFromKeyboard(this.activeKeyboard.keyboard);\r\n    }\r\n\r\n    if(this.vkbd) {\r\n      this.footerView = this.resizeBar;\r\n      this._Box.appendChild(this.footerView.element);\r\n    } else {\r\n      if(this.footerView) {\r\n        this._Box.removeChild(this.footerView.element);\r\n      }\r\n      this.footerView = null;\r\n    }\r\n\r\n    this.loadPersistedLayout();\r\n    this.setNeedsLayout();\r\n  }\r\n\r\n  /**\r\n   * Function     restorePosition\r\n   * Scope        Public\r\n   * @param       {boolean?}      keepDefaultPosition  If true, does not reset the default x,y set by `setRect`.\r\n   *                                                   If false or omitted, resets the default x,y as well.\r\n   * Description  Move OSK back to default position, floating under active input element\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/restorePosition\r\n   */\r\n  public restorePosition: (keepDefaultPosition?: boolean) => void = function(this: FloatingOSKView, keepDefaultPosition?: boolean) {\r\n    let isVisible = this._Visible;\r\n\r\n    let dragPromise = new ManagedPromise<void>();\r\n    this.emit('dragmove', dragPromise.corePromise);\r\n\r\n    this.loadPersistedLayout();\r\n    this.userPositioned=false;\r\n    if(!keepDefaultPosition) {\r\n      delete this.dfltX;\r\n      delete this.dfltY;\r\n    }\r\n    this.savePersistedLayout();\r\n\r\n    if(isVisible) {\r\n      this.present();\r\n    }\r\n\r\n    this.titleBar.showPin(false);\r\n    dragPromise.resolve();\r\n    this.doResizeMove(); //allow the UI to respond to OSK movements\r\n  }.bind(this);\r\n\r\n  /**\r\n   * Function     enabled\r\n   * Scope        Public\r\n   * @return      {boolean|number}    True if KMW OSK enabled\r\n   * Description  Test if KMW OSK is enabled\r\n   */\r\n  ['isEnabled'](): boolean {\r\n    return this.displayIfActive;\r\n  }\r\n\r\n  /**\r\n   * Function     isVisible\r\n   * Scope        Public\r\n   * @return      {boolean|number}    True if KMW OSK visible\r\n   * Description  Test if KMW OSK is actually visible\r\n   * Note that this will usually return false after any UI event that results in (temporary) loss of input focus\r\n   */\r\n  ['isVisible'](): boolean {\r\n    return this._Visible;\r\n  }\r\n\r\n  /**\r\n   * Save size, position, font size and visibility of OSK\r\n   */\r\n  private savePersistedLayout() {\r\n    var p = this.getPos();\r\n\r\n    const c: FloatingOSKCookie = {\r\n      visible: this.displayIfActive ? 1 : 0,\r\n      userSet: this.userPositioned ?  1 : 0,\r\n      left: p.left,\r\n      top:  p.top,\r\n      _version: Version.CURRENT.toString()\r\n    }\r\n\r\n    if(this.vkbd) {\r\n      c.width =  this.width.val;\r\n      c.height = this.height.val;\r\n    }\r\n\r\n    this.layoutSerializer.save(c as Required<FloatingOSKCookie>);\r\n  }\r\n\r\n  /**\r\n   * Restore size, position, font size and visibility of desktop OSK\r\n   *\r\n   *  @return {boolean}\r\n   */\r\n  private loadPersistedLayout(): void {\r\n    let c = this.layoutSerializer.loadWithDefaults({\r\n      visible: 1,\r\n      userSet: 0,\r\n      left: -1,\r\n      top: -1,\r\n      _version: undefined,\r\n      width:  0.3*screen.width,\r\n      height: 0.15*screen.height\r\n    });\r\n\r\n    this.activationModel.enabled = c.visible == 1;\r\n    this.userPositioned = c.userSet == 1;\r\n    this.x = c.left;\r\n    this.y = c.top;\r\n    const cookieVersionString = c._version;\r\n\r\n    // Restore OSK size - font size now fixed in relation to OSK height, unless overridden (in em) by keyboard\r\n    const isNewCookie = cookieVersionString === undefined;\r\n    let newWidth  = c.width;\r\n    let newHeight = c.height;\r\n\r\n    // Limit the OSK dimensions to reasonable values\r\n    if(newWidth < 0.2*screen.width) {\r\n      newWidth = 0.2*screen.width;\r\n    }\r\n    if(newHeight < 0.1*screen.height) {\r\n      newHeight = 0.1*screen.height;\r\n    }\r\n    if(newWidth > 0.9*screen.width) {\r\n      newWidth=0.9*screen.width;\r\n    }\r\n    if(newHeight > 0.5*screen.height) {\r\n      newHeight=0.5*screen.height;\r\n    }\r\n\r\n    // if(!cookieVersionString) - this component was not tracked until 15.0.\r\n    // Before that point, the OSK's title bar and resize bar heights were not included\r\n    // in the OSK's cookie-persisted height.\r\n    if(isNewCookie || !cookieVersionString) {\r\n      // Adds some space to account for the OSK's header and footer, should they exist.\r\n      if(this.headerView && this.headerView.layoutHeight.absolute) {\r\n        newHeight += this.headerView.layoutHeight.val;\r\n      }\r\n\r\n      if(this.footerView && this.footerView.layoutHeight.absolute) {\r\n        newHeight += this.footerView.layoutHeight.val;\r\n      }\r\n    }\r\n\r\n    this.setSize(newWidth, newHeight);\r\n\r\n    // and OSK position if user located\r\n    if(this.x == -1 || this.y == -1 || (!this._Box)) {\r\n      this.userPositioned = false;\r\n    }\r\n\r\n    if(this.x < window.pageXOffset-0.8*newWidth) {\r\n      this.x=window.pageXOffset-0.8*newWidth;\r\n    }\r\n    if(this.y < 0) {\r\n      this.x=-1;\r\n      this.y=-1;\r\n      this.userPositioned=false;\r\n    }\r\n\r\n    if(this.userPositioned && this._Box) {\r\n      this.setPos({'left': this.x, 'top': this.y});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the wanted height of the OSK for touch devices (does not include banner height)\r\n   *  @return   {number}    height in pixels\r\n   **/\r\n  getDefaultKeyboardHeight(): number {\r\n    // KeymanTouch - get OSK height from device\r\n    if(this.configuration.heightOverride) {\r\n      return this.configuration.heightOverride();\r\n    }\r\n\r\n    var oskHeightLandscapeView=Math.floor(Math.min(screen.availHeight,screen.availWidth)/2),\r\n        height=oskHeightLandscapeView;\r\n\r\n    if(this.targetDevice.formFactor == 'phone') {\r\n      var sx=Math.min(screen.height,screen.width),\r\n          sy=Math.max(screen.height,screen.width);\r\n\r\n      if(!landscapeView())\r\n        height=Math.floor(Math.max(screen.availHeight,screen.availWidth)/3);\r\n      else\r\n        height=height*(sy/sx)/1.6;  //adjust for aspect ratio, increase slightly for iPhone 5\r\n    }\r\n\r\n    // Correct for viewport scaling (iOS - Android 4.2 does not want this, at least on Galaxy Tab 3))\r\n    if(this.targetDevice.OS == DeviceSpec.OperatingSystem.iOS) {\r\n      height=height/getViewportScale(this.targetDevice.formFactor);\r\n    }\r\n\r\n    return height;\r\n  }\r\n\r\n  /**\r\n   * Get the wanted width of the OSK for touch devices\r\n   *\r\n   *  @return   {number}    height in pixels\r\n   **/\r\n  getDefaultWidth(): number {\r\n    // KeymanTouch - get OSK height from device\r\n    if(this.configuration.widthOverride) {\r\n      return this.configuration.widthOverride();\r\n    }\r\n\r\n    var width: number;\r\n    if(this.targetDevice.OS == DeviceSpec.OperatingSystem.iOS) {\r\n      // iOS does not interchange these values when the orientation changes!\r\n      //width = util.portraitView() ? screen.width : screen.height;\r\n      width = window.innerWidth;\r\n    } else if(this.targetDevice.OS == DeviceSpec.OperatingSystem.Android) {\r\n      try {\r\n        width=document.documentElement.clientWidth;\r\n      } catch(ex) {\r\n        width=screen.availWidth;\r\n      }\r\n    } else {\r\n      width=screen.width;\r\n    }\r\n\r\n    return width;\r\n  }\r\n\r\n  /**\r\n   * Allow UI to update OSK position and properties\r\n   *\r\n   * @param       {Object=}     p       object with coordinates and userdefined flag\r\n   *\r\n   */\r\n  doResizeMove(p?: any) {\r\n    this.legacyEvents.callEvent('resizemove', p);\r\n  }\r\n\r\n  /**\r\n   * Allow the UI or page to set the position and size of the OSK\r\n   * and (optionally) override user repositioning or sizing\r\n   *\r\n   * @param       {Object.<string,number>}   p  Array object with position and size of OSK container\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/setRect\r\n  **/\r\n  public setRect(p: OSKRect) {\r\n    if(this._Box == null || this.targetDevice.formFactor != 'desktop') {\r\n      return;\r\n    }\r\n\r\n    var b = this._Box, bs = b.style;\r\n    if('left' in p) {\r\n      this.x = p['left'] - getAbsoluteX(b) + b.offsetLeft;\r\n      bs.left= this.x + 'px';\r\n      this.dfltX=bs.left;\r\n    }\r\n\r\n    if('top' in p) {\r\n      this.y = p['top'] - getAbsoluteY(b) + b.offsetTop;\r\n      bs.top = this.y + 'px';\r\n      this.dfltY=bs.top;\r\n    }\r\n\r\n    //Do not allow user resizing for non-standard keyboards (e.g. EuroLatin)\r\n    if(this.vkbd != null) {\r\n      var d=this.vkbd.kbdDiv, ds=d.style;\r\n\r\n      // Set width, but limit to reasonable value\r\n      if('width' in p) {\r\n        var w=(p['width']-(b.offsetWidth-d.offsetWidth));\r\n        if(w < 0.2*screen.width) {\r\n          w=0.2*screen.width;\r\n        }\r\n        if(w > 0.9*screen.width) {\r\n          w=0.9*screen.width;\r\n        }\r\n        ds.width=w+'px';\r\n        // Use of the `computed` variant is here temporary.\r\n        // Shouldn't use `setSize` for this in the long-term.\r\n        this.setSize(w, this.computedHeight, true);\r\n      }\r\n\r\n      // Set height, but limit to reasonable value\r\n      // This sets the default font size for the OSK in px, but that\r\n      // can be modified at the key text level by setting\r\n      // the font size in em in the kmw-key-text class\r\n      if('height' in p) {\r\n        var h=(p['height']-(b.offsetHeight-d.offsetHeight));\r\n        if(h < 0.1*screen.height) {\r\n          h=0.1*screen.height;\r\n        }\r\n        if(h > 0.5*screen.height) {\r\n          h=0.5*screen.height;\r\n        }\r\n        ds.height=h+'px'; ds.fontSize=(h/8)+'px';\r\n        // Use of the `computed` variant is here temporary.\r\n        // Shouldn't use `setSize` for this in the long-term.\r\n        this.setSize(this.computedWidth, h, true);\r\n      }\r\n\r\n      // Fix or release user resizing\r\n      if('nosize' in p) {\r\n        this.resizingEnabled = !p['nosize'];\r\n      }\r\n\r\n    }\r\n    // Fix or release user dragging\r\n    if('nomove' in p) {\r\n      this.noDrag=p['nomove'];\r\n      this.movementEnabled = !this.noDrag;\r\n    }\r\n    // Save the user-defined OSK size\r\n    this.savePersistedLayout();\r\n  }\r\n\r\n  /**\r\n   * Get position of OSK window\r\n   *\r\n   * @return      {Object.<string,number>}     Array object with OSK window position\r\n  **/\r\n  getPos(): OSKPos {\r\n    var Lkbd=this._Box, p={\r\n      left: this._Visible ? Lkbd.offsetLeft : this.x,\r\n      top: this._Visible ? Lkbd.offsetTop : this.y\r\n    };\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * Function     setPos\r\n   * Scope        Private\r\n   * @param       {Object.<string,number>}    p     Array object with OSK left, top\r\n   * Description  Set position of OSK window, but limit to screen\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/setPos\r\n   */\r\n  public setPos(p: OSKPos) {\r\n    if(typeof(this._Box) == 'undefined') {\r\n      return; // I3363 (Build 301)\r\n    }\r\n\r\n    if(this.userPositioned) {\r\n      var Px=p['left'], Py=p['top'];\r\n\r\n      if(typeof(Px) != 'undefined') {\r\n        if(Px < -0.8*this._Box.offsetWidth) {\r\n          Px = -0.8*this._Box.offsetWidth;\r\n        }\r\n        if(this.userPositioned) {\r\n          this._Box.style.left=Px+'px';\r\n          this.x = Px;\r\n        }\r\n      }\r\n      // May not be needed - vertical positioning is handled differently and defaults to input field if off screen\r\n      if(typeof(Py) != 'undefined') {\r\n        if(Py < 0) {\r\n          Py = 0;\r\n        }\r\n\r\n        if(this.userPositioned) {\r\n          this._Box.style.top=Py+'px';\r\n          this.y = Py;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.titleBar.showPin(this.userPositioned);\r\n  }\r\n\r\n  public setDisplayPositioning() {\r\n    var Ls = this._Box.style;\r\n\r\n    Ls.position='absolute';\r\n    // Keep it hidden if not currently displayed.\r\n    if(this.activationModel.activate) {\r\n      Ls.display='block'; //Ls.visibility='visible';\r\n    }\r\n    Ls.left='0px';\r\n    if(this.specifiedPosition || this.userPositioned) {\r\n      Ls.left = this.x+'px';\r\n      Ls.top  = this.y+'px';\r\n    } else {\r\n      let el: HTMLElement = this.typedActivationModel.activationTrigger || null;\r\n\r\n      if(this.dfltX) {\r\n        Ls.left=this.dfltX;\r\n      } else if(typeof el != 'undefined' && el != null) {\r\n        Ls.left=getAbsoluteX(el) + 'px';\r\n      }\r\n\r\n      if(this.dfltY) {\r\n        Ls.top=this.dfltY;\r\n      } else if(typeof el != 'undefined' && el != null) {\r\n        Ls.top=(getAbsoluteY(el) + el.offsetHeight)+'px';\r\n      }\r\n    }\r\n\r\n    // Unset the flag, keeping 'specified position' specific to single\r\n    // presentAtPosition calls.\r\n    this.specifiedPosition = false;\r\n  }\r\n\r\n  /**\r\n   * Display KMW OSK at specified position (returns nothing)\r\n   *\r\n   * @param       {number=}     Px      x-coordinate for OSK rectangle\r\n   * @param       {number=}     Py      y-coordinate for OSK rectangle\r\n   */\r\n  presentAtPosition(Px?: number, Py?: number) {\r\n    if(!this.mayShow()) {\r\n      return;\r\n    }\r\n\r\n    this.specifiedPosition = Px >= 0 || Py >= 0; //probably never happens, legacy support only\r\n    if(this.specifiedPosition) {\r\n      this.x = Px;\r\n      this.y = Py;\r\n    }\r\n\r\n    // Combines the two paths with set positioning.\r\n    this.specifiedPosition = this.specifiedPosition || this.userPositioned;\r\n\r\n    this.present();\r\n  }\r\n\r\n  present() {\r\n    if(!this.mayShow()) {\r\n      return;\r\n    }\r\n\r\n    this.titleBar.showPin(this.userPositioned);\r\n\r\n    super.present();\r\n\r\n    // Allow desktop UI to execute code when showing the OSK\r\n    this.doShow({\r\n      x: this._Box.offsetLeft,\r\n      y: this._Box.offsetTop,\r\n      userLocated: this.userPositioned\r\n    });\r\n  }\r\n\r\n  public startHide(hiddenByUser: boolean) {\r\n    super.startHide(hiddenByUser);\r\n\r\n    if(hiddenByUser) {\r\n      this.savePersistedLayout();  // Save current OSK state, size and position (desktop only)\r\n    }\r\n  }\r\n\r\n  ['show'](bShow?: boolean) {\r\n    if(bShow !== undefined) {\r\n      super['show'](bShow);\r\n    } else {\r\n      super['show']();\r\n    }\r\n    this.savePersistedLayout();\r\n  }\r\n\r\n  /**\r\n   * Function     userPositioned\r\n   * Scope        Public\r\n   * @return      {(boolean|number)}          true if user located\r\n   * Description  Test if OSK window has been repositioned by user\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/osk/userLocated\r\n   */\r\n  public userLocated() {\r\n    return this.userPositioned;\r\n  }\r\n\r\n  public get movementEnabled(): boolean {\r\n    return this.titleDragHandler.enabled;\r\n  }\r\n\r\n  public set movementEnabled(flag: boolean) {\r\n    this.titleDragHandler.enabled = flag;\r\n    this.titleBar.showPin(flag && this.userPositioned);\r\n  }\r\n\r\n  public get resizingEnabled(): boolean {\r\n    return this.resizeDragHandler.enabled;\r\n  }\r\n\r\n  public set resizingEnabled(flag: boolean) {\r\n    this.resizeDragHandler.enabled = flag;\r\n    this.resizeBar.allowResizing(flag);\r\n  }\r\n\r\n  public get isBeingMoved(): boolean {\r\n    return this.titleDragHandler.isActive;\r\n  }\r\n\r\n  public get isBeingResized(): boolean {\r\n    return this.resizeDragHandler.isActive;\r\n  }\r\n\r\n  private enableMoveResizeHandlers() {\r\n    this.titleDragHandler.enabled = !this.noDrag;\r\n    this.resizeDragHandler.enabled = true; // by default.\r\n  }\r\n\r\n  private get titleDragHandler(): MouseDragOperation {\r\n    const _this = this;\r\n\r\n    if(this._moveHandler) {\r\n      return this._moveHandler;\r\n    }\r\n\r\n    this._moveHandler = new class extends MouseDragOperation {\r\n      startX: number;\r\n      startY: number;\r\n\r\n      dragPromise: ManagedPromise<void>;\r\n\r\n      constructor() {\r\n        super('move'); // The type of cursor to use while 'active'.\r\n      }\r\n\r\n      onDragStart() {\r\n        this.startX = _this._Box.offsetLeft;\r\n        this.startY = _this._Box.offsetTop;\r\n\r\n        if(_this.activeKeyboard.keyboard.isCJK) {\r\n          _this.titleBar.setPinCJKOffset();\r\n        }\r\n\r\n        if(this.dragPromise) {\r\n          // We got interrupted during the previous one; allow it to reset, at least!\r\n          this.dragPromise.resolve();\r\n        }\r\n\r\n        this.dragPromise = new ManagedPromise<void>();\r\n        _this.emit('dragmove', this.dragPromise.corePromise);\r\n      }\r\n\r\n      onDragMove(cumulativeX: number, cumulativeY: number) {\r\n        _this.titleBar.showPin(true);\r\n        _this.userPositioned = true;\r\n\r\n        _this._Box.style.left = (this.startX + cumulativeX) + 'px';\r\n        _this._Box.style.top  = (this.startY + cumulativeY) + 'px';\r\n\r\n        var r=_this.getRect();\r\n        _this.setSize(r.width, r.height, true);\r\n        _this.x = r.left;\r\n        _this.y = r.top;\r\n      }\r\n\r\n      onDragRelease() {\r\n        if(_this.vkbd) {\r\n          _this.vkbd.currentKey=null;\r\n        }\r\n\r\n        this.dragPromise.resolve();\r\n\r\n        // Remainder should be done after anything else pending on the Promise.\r\n        this.dragPromise.then(() => {\r\n          _this.userPositioned = true;\r\n          _this.doResizeMove();\r\n          _this.savePersistedLayout();\r\n        });\r\n        this.dragPromise = null;\r\n      }\r\n    }\r\n\r\n    return this._moveHandler;\r\n  }\r\n\r\n  private get resizeDragHandler(): MouseDragOperation {\r\n    const _this = this;\r\n\r\n    if(this._resizeHandler) {\r\n      return this._resizeHandler;\r\n    }\r\n\r\n    this._resizeHandler = new class extends MouseDragOperation {\r\n      startWidth: number;\r\n      startHeight: number;\r\n\r\n      dragPromise: ManagedPromise<void>;\r\n\r\n      constructor() {\r\n        super('se-resize'); // The type of cursor to use while 'active'.\r\n      }\r\n\r\n      onDragStart() {\r\n        this.startWidth = _this.computedWidth;\r\n        this.startHeight = _this.computedHeight;\r\n\r\n        if(this.dragPromise) {\r\n          // We got interrupted during the previous one; allow it to reset, at least!\r\n          this.dragPromise.resolve();\r\n        }\r\n\r\n        this.dragPromise = new ManagedPromise<void>();\r\n        _this.emit('resizemove', this.dragPromise.corePromise);\r\n      }\r\n\r\n      onDragMove(cumulativeX: number, cumulativeY: number) {\r\n        let newWidth  = this.startWidth  + cumulativeX;\r\n        let newHeight = this.startHeight + cumulativeY;\r\n\r\n        // Set the smallest and largest OSK size\r\n        if(newWidth < 0.2*screen.width) {\r\n          newWidth = 0.2*screen.width;\r\n        }\r\n        if(newHeight < 0.1*screen.height) {\r\n          newHeight = 0.1*screen.height;\r\n        }\r\n        if(newWidth > 0.9*screen.width) {\r\n          newWidth = 0.9*screen.width;\r\n        }\r\n        if(newHeight > 0.5*screen.height) {\r\n          newHeight = 0.5*screen.height;\r\n        }\r\n\r\n        // Explicitly set OSK width, height,  and font size - cannot safely rely on scaling from font\r\n        _this.setSize(newWidth, newHeight, true);\r\n      }\r\n\r\n      onDragRelease() {\r\n        if(_this.vkbd) {\r\n          _this.vkbd.currentKey=null;\r\n        }\r\n\r\n        if(_this.vkbd) {\r\n          this.startWidth  = _this.computedWidth;\r\n          this.startHeight = _this.computedHeight;\r\n        }\r\n\r\n        _this.refreshLayout(); // Finalize the resize.\r\n\r\n        this.dragPromise.resolve();\r\n\r\n        // Remainder should be done after anything else pending on the Promise.\r\n        this.dragPromise.then(() => {\r\n          _this.doResizeMove();\r\n          _this.savePersistedLayout();\r\n        });\r\n        this.dragPromise = null;\r\n      }\r\n    }\r\n\r\n    return this._resizeHandler;\r\n  }\r\n}\r\n",
    "import { DeviceSpec } from 'keyman/engine/keyboard';\r\nimport { landscapeView } from 'keyman/engine/dom-utils';\r\n\r\nimport OSKView, { OSKPos, OSKRect } from './oskView.js';\r\nimport { getViewportScale } from '../screenUtils.js';\r\nimport Configuration from '../config/viewConfiguration.js';\r\nimport { StaticActivator } from './activator.js';\r\nimport TwoStateActivator from './twoStateActivator.js';\r\n\r\n/***\r\n   KeymanWeb 10.0\r\n   Copyright 2017 SIL International\r\n***/\r\n\r\nexport default class AnchoredOSKView extends OSKView {\r\n\r\n  // OSK positioning fields\r\n  x: number;\r\n  y: number;\r\n\r\n  private isResizing: boolean = false;\r\n\r\n  public constructor(config: Configuration) {\r\n    if(config.isEmbedded) {\r\n      config.activator = config.activator || new StaticActivator();\r\n    } else {\r\n      config.activator = config.activator || new TwoStateActivator<HTMLElement>();\r\n    }\r\n    super(config);\r\n\r\n    document.body.appendChild(this._Box);\r\n\r\n  }\r\n\r\n  /**\r\n   * Function     _Unload\r\n   * Scope        Private\r\n   * Description  Clears OSK variables prior to exit (JMD 1.9.1 - relocation of local variables 3/9/10)\r\n   */\r\n  _Unload() {\r\n    this.keyboardView = null;\r\n    this.bannerView = null;\r\n    this._Box = null;\r\n  }\r\n\r\n  protected setBoxStyling() {\r\n    const s = this._Box.style;\r\n\r\n    s.zIndex   = '9999';\r\n    s.display  = 'none';\r\n    s.width    = '100%';\r\n    s.position = 'fixed';\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  public refreshLayout(pending?: boolean): void {\r\n    // This function is generally triggered whenever the OSK's dimensions change, among other\r\n    // things.\r\n    if(this.isResizing) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      this.isResizing = true;\r\n      // This resizes the OSK to what is appropriate for the device's current orientation,\r\n      // which will often trigger a resize event... which in turn triggers a layout refresh.\r\n      //\r\n      // So, we mark and unmark the `isResizing` flag to prevent triggering a circular\r\n      // call-stack chain from this call.\r\n      this.doResize();\r\n    } finally {\r\n      this.isResizing = false;\r\n    }\r\n    super.refreshLayout(pending);\r\n  }\r\n\r\n  protected doResize() {\r\n    if(this.vkbd) {\r\n      let targetOSKHeight = this.getDefaultKeyboardHeight();\r\n      this.setSize(this.getDefaultWidth(), targetOSKHeight + this.banner.height);\r\n    }\r\n  }\r\n\r\n  protected postKeyboardAdjustments() {\r\n    // Initializes the size of a touch keyboard.\r\n    this.doResize();\r\n  }\r\n\r\n  /**\r\n   * Function     restorePosition\r\n   * Scope        Public\r\n   * @param       {boolean?}      keepDefaultPosition  If true, does not reset the default x,y set by `setRect`.\r\n   *                                                   If false or omitted, resets the default x,y as well.\r\n   * Description  Move OSK back to default position, floating under active input element\r\n   */\r\n  ['restorePosition']: (keepDefaultPosition?: boolean) => void = function(this: AnchoredOSKView, keepDefaultPosition?: boolean) {\r\n    return;\r\n  }.bind(this);\r\n\r\n  /**\r\n   * Get the wanted height of the OSK for touch devices (does not include banner height)\r\n   *  @return   {number}    height in pixels\r\n   **/\r\n  getDefaultKeyboardHeight(): number {\r\n    let device = this.targetDevice;\r\n\r\n    // KeymanTouch - get OSK height from device\r\n    if(this.configuration.heightOverride) {\r\n      return this.configuration.heightOverride();\r\n    }\r\n\r\n    /*\r\n      * We've noticed some fairly inconsistent behavior in the past when attempting to base\r\n      * this logic on window.innerWidth/Height, as there can be very unexpected behavior\r\n      * on mobile devices during and after rotation.\r\n      *\r\n      * Online forums (such as https://stackoverflow.com/a/54812656) seem to indicate that\r\n      * document.documentElement.clientWidth/Height seem to be the most stable analogues\r\n      * to a window's size in the situations where it matters for Keyman Engine for Web.\r\n      *\r\n      * That said, an important note:  this gets the dimensions of the _document element_,\r\n      * not the screen or even the window.\r\n      */\r\n    let baseWidth  = document?.documentElement?.clientWidth;\r\n    let baseHeight = document?.documentElement?.clientHeight;\r\n    if(typeof baseWidth == 'undefined') {\r\n      /*\r\n        * Fallback logic.  We _shouldn't_ need this, but it's best to have _something_\r\n        * for the sake of robustness.\r\n        */\r\n      baseWidth  = Math.min(screen.height, screen.width);\r\n      baseHeight = Math.max(screen.height, screen.width);\r\n\r\n      if(landscapeView()) {\r\n        let temp = baseWidth;\r\n        baseWidth = baseHeight;\r\n        baseHeight = temp;\r\n      }\r\n    }\r\n\r\n    var oskHeightLandscapeView=Math.floor(Math.min(baseHeight, baseWidth)/2),\r\n        height=oskHeightLandscapeView;\r\n\r\n    if(device.formFactor == 'phone') {\r\n      /**\r\n       * Assuming the first-pass detection of width and height work correctly, note\r\n       * that these calculations are based on the document's size, not the device's\r\n       * resolution.  This _particularly_ matters for height.\r\n       *\r\n       * - Is the mobile-device browser showing a URL bar?  That's not included.\r\n       * - The standard signal-strength, battery-strength, etc device status bar?\r\n       *   Also not included.\r\n       */\r\n      if(!landscapeView())\r\n        height=Math.floor(baseHeight/2.4);\r\n      else\r\n        height=Math.floor(baseHeight/1.6);  //adjust for aspect ratio, increase slightly for iPhone 5\r\n    }\r\n\r\n    // Correct for viewport scaling (iOS - Android 4.2 does not want this, at least on Galaxy Tab 3))\r\n    if(this.targetDevice.OS == DeviceSpec.OperatingSystem.iOS) {\r\n      height=height/getViewportScale(this.targetDevice.formFactor);\r\n    }\r\n\r\n    return height;\r\n  }\r\n\r\n  /**\r\n   * Get the wanted width of the OSK for touch devices\r\n   *\r\n   *  @return   {number}    height in pixels\r\n   **/\r\n  getDefaultWidth(): number {\r\n    let device = this.targetDevice;\r\n\r\n    // KeymanTouch - get OSK height from device\r\n    if(this.configuration.widthOverride) {\r\n      return this.configuration.widthOverride();\r\n    }\r\n\r\n    var width: number;\r\n\r\n    width = document?.documentElement?.clientWidth;\r\n    if(typeof width == 'undefined') {\r\n      if(this.targetDevice.OS == DeviceSpec.OperatingSystem.iOS) {\r\n        width = window.innerWidth;\r\n      } else if(device.OS == DeviceSpec.OperatingSystem.Android) {\r\n        width=screen.availWidth;\r\n      } else {\r\n        width=screen.width;\r\n      }\r\n    }\r\n\r\n    return width;\r\n  }\r\n\r\n  /**\r\n   * Allow the UI or page to set the position and size of the OSK\r\n   * and (optionally) override user repositioning or sizing\r\n   *\r\n   * @param       {Object.<string,number>}   p  Array object with position and size of OSK container\r\n  **/\r\n  ['setRect'](p: OSKRect) {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Get position of OSK window\r\n   *\r\n   * @return      {Object.<string,number>}     Array object with OSK window position\r\n  **/\r\n  getPos(): OSKPos {\r\n    var Lkbd=this._Box, p={\r\n      left: this._Visible ? Lkbd.offsetLeft : this.x,\r\n      top: this._Visible ? Lkbd.offsetTop : this.y\r\n    };\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * Function     setPos\r\n   * Scope        Private\r\n   * @param       {Object.<string,number>}    p     Array object with OSK left, top\r\n   * Description  Set position of OSK window, but limit to screen, and ignore if  a touch input device\r\n   */\r\n  ['setPos'](p: OSKPos) {\r\n    return; // I3363 (Build 301)\r\n  }\r\n\r\n  protected setDisplayPositioning() {\r\n    let Ls = this._Box.style;\r\n\r\n    // The following code will always be executed except for externally created OSK such as EuroLatin\r\n    if(this.vkbd) {\r\n      Ls.position='fixed';\r\n      Ls.left=Ls.bottom='0px';\r\n      Ls.border='none';\r\n      Ls.borderTop='1px solid gray';\r\n    }\r\n  }\r\n\r\n  public present() {\r\n    super.present();\r\n    this.legacyEvents.callEvent('show', {});\r\n  }\r\n}\r\n",
    "import Activator from './activator.js';\r\n\r\nexport default class SimpleActivator extends Activator {\r\n  private flag: boolean = true;\r\n\r\n  get enabled(): boolean {\r\n    return this.flag;\r\n  }\r\n\r\n  set enabled(value: boolean) {\r\n    // Enabled + activated are the same thing for this class.\r\n    this.activate = value;\r\n  }\r\n\r\n  get activate(): boolean {\r\n    return this.flag;\r\n  }\r\n\r\n  set activate(value: boolean) {\r\n    if(this.flag != value) {\r\n      this.flag = value;\r\n      this.emit('activate', value);\r\n    }\r\n  }\r\n\r\n  get conditionsMet(): boolean {\r\n    return true;\r\n  }\r\n}",
    "import { DeviceSpec } from 'keyman/engine/keyboard';\r\n\r\nimport OSKView, { OSKPos, OSKRect } from './oskView.js';\r\nimport VisualKeyboard from '../visualKeyboard.js';\r\nimport Configuration from '../config/viewConfiguration.js';\r\nimport SimpleActivator from './simpleActivator.js';\r\n\r\n/*\r\n * Keyman is copyright (c) SIL International.  MIT License.\r\n */\r\n\r\n/**\r\n * Defines a version of the OSK that produces an element designed for site-controlled\r\n * insertion into the DOM.  Rather than \"floating\" over the page, this version is inlined\r\n * as part of the host page's layout.\r\n */\r\nexport default class InlinedOSKView extends OSKView {\r\n  public constructor(config: Configuration) {\r\n    config.activator = config.activator || new SimpleActivator();\r\n    super(config);\r\n  }\r\n\r\n  public get element(): HTMLDivElement {\r\n    return this._Box;\r\n  }\r\n\r\n  /**\r\n   * Clears OSK variables prior to exit (JMD 1.9.1 - relocation of local variables 3/9/10)\r\n   *\r\n   * This should probably be merged or incorporated into the `shutdown` method at some point.\r\n   */\r\n  _Unload() {\r\n    this.keyboardView = null;\r\n    this.bannerView = null;\r\n    this._Box = null;\r\n  }\r\n\r\n  protected setBoxStyling() {\r\n    const s = this._Box.style;\r\n    s.display  = 'none';\r\n    // Positioned with no relative offset from its default position.\r\n    // This allows _Box to still serve as an offsetParent for keytip & subkey menu positioning.\r\n    s.position = 'relative';\r\n  }\r\n\r\n  protected postKeyboardAdjustments() {\r\n  }\r\n\r\n  /**\r\n   * Moves the OSK back to default position, floating under active input element\r\n   *\r\n   * Is a long-published API intended solely for use with the FloatingOSKView use pattern.\r\n   * @param  keepDefaultPosition  If true, does not reset the default x,y set by `setRect`.\r\n   *                              If false or omitted, resets the default x,y as well.\r\n   */\r\n  ['restorePosition']: (keepDefaultPosition?: boolean) => void = function(this: InlinedOSKView, keepDefaultPosition?: boolean) {\r\n    return;\r\n  }.bind(this);\r\n\r\n  /**\r\n   * Get the default height for the OSK\r\n   * @return  height in pixels\r\n   **/\r\n  getDefaultKeyboardHeight(): number {\r\n    if(this.keyboardView instanceof VisualKeyboard) {\r\n      return this.keyboardView.height;\r\n    } else {\r\n      // Should probably refine, but it's a decent stopgap.\r\n      return this.computedHeight;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the default width for the OSK\r\n   * @return width in pixels\r\n   **/\r\n  getDefaultWidth(): number {\r\n    return this.computedWidth;\r\n  }\r\n\r\n  /**\r\n   * Allow the UI or page to set the position and size of the OSK\r\n   * and (optionally) override user repositioning or sizing\r\n   *\r\n   * Designed solely for use with the FloatingOSKView use pattern, but is a\r\n   * long-standing API endpoint that needs preservation.\r\n   *\r\n   * @param  p  Array object with position and size of OSK container\r\n  **/\r\n  ['setRect'](p: OSKRect) {\r\n    return;\r\n  }\r\n\r\n  /**\r\n   * Get position of OSK window\r\n   *\r\n   * @return Array object with OSK window position\r\n  **/\r\n  getPos(): OSKPos {\r\n    var Lkbd=this._Box, p={\r\n      left: this._Visible ? Lkbd.offsetLeft : undefined,\r\n      top:  this._Visible ? Lkbd.offsetTop  : undefined\r\n    };\r\n\r\n    return p;\r\n  }\r\n\r\n  /**\r\n   * Set position of OSK window, but limited to the screen.\r\n   *\r\n   * Designed solely for use with the FloatingOSKView use pattern, but is a\r\n   * long-standing API endpoint that needs preservation.\r\n   * @param  p Array object with OSK left, top\r\n   */\r\n  ['setPos'](p: OSKPos) {\r\n    return; // I3363 (Build 301)\r\n  }\r\n\r\n  public present() {\r\n    super.present();\r\n\r\n    this.legacyEvents.callEvent('show', {});\r\n  }\r\n\r\n  protected setDisplayPositioning() {\r\n    // no-op; an inlined OSK cannot control its own positioning.\r\n  }\r\n\r\n  protected allowsDeviceChange(newSpec: DeviceSpec): boolean {\r\n    return true;\r\n  }\r\n}\r\n",
    "import {\r\n  ViewConfiguration,\r\n  AnchoredOSKView,\r\n  FloatingOSKView,\r\n  FloatingOSKViewConfiguration,\r\n  InlinedOSKView\r\n} from \"keyman/engine/osk\";\r\nimport KeymanEngine from \"./keymanEngine.js\";\r\n\r\nfunction buildBaseOskConfiguration(engine: KeymanEngine) {\r\n  return {\r\n    hostDevice: engine.config.hostDevice,\r\n    pathConfig: engine.config.paths,\r\n    predictionContextManager: engine.contextManager.predictionContext,\r\n    isEmbedded: false\r\n  };\r\n};\r\n\r\nclass PublishedAnchoredOSKView extends AnchoredOSKView {\r\n  constructor(engine: KeymanEngine, config?: ViewConfiguration) {\r\n    let finalConfig = {\r\n      ...buildBaseOskConfiguration(engine),\r\n      ...(config || {})\r\n    };\r\n\r\n    super(finalConfig);\r\n  }\r\n}\r\n\r\nclass PublishedFloatingOSKView extends FloatingOSKView {\r\n  constructor(engine: KeymanEngine, config?: FloatingOSKViewConfiguration) {\r\n    let finalConfig: FloatingOSKViewConfiguration = {\r\n      ...buildBaseOskConfiguration(engine),\r\n      ...(config || {})\r\n    };\r\n\r\n    super(finalConfig);\r\n  }\r\n}\r\n\r\nclass PublishedInlineOSKView extends InlinedOSKView {\r\n  constructor(engine: KeymanEngine, config?: ViewConfiguration) {\r\n    let finalConfig: ViewConfiguration = {\r\n      ...buildBaseOskConfiguration(engine),\r\n      ...(config || {})\r\n    };\r\n\r\n    super(finalConfig);\r\n  }\r\n}\r\n\r\nexport { PublishedAnchoredOSKView as AnchoredOSKView };\r\nexport { PublishedFloatingOSKView as FloatingOSKView };\r\nexport { PublishedInlineOSKView   as InlinedOSKView };\r\n\r\n",
    "import { OutputTarget as OutputTargetBase } from \"keyman/engine/js-processor\";\r\nimport { EventEmitter } from 'eventemitter3';\r\n\r\nexport default abstract class OutputTarget<EventMap extends EventEmitter.ValidEventTypes> extends OutputTargetBase {\r\n  // JS/TS can't do true multiple inheritance, so we maintain class events on a readonly field.\r\n  public readonly events: EventEmitter<EventMap, this> = new EventEmitter<EventMap, this>();\r\n\r\n  /**\r\n   * A field that may be used to track whether or not the represented context has changed over an\r\n   * arbitrary period of time.\r\n   */\r\n  public changed = false;\r\n\r\n  /**\r\n   * Returns the underlying element / document modeled by the wrapper.\r\n   */\r\n  abstract getElement(): HTMLElement;\r\n\r\n  public focus(): void {\r\n    const ele = this.getElement();\r\n    if(ele.focus) {\r\n      ele.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Denotes when the represented element is forcing a text scroll via focus manipulation.\r\n   * As the intent is not to change the focused element, but just to have the browser update\r\n   * the scroll location, standard focus handlers (for updating the active context) should\r\n   * not deactivate the element while this state is active.\r\n   */\r\n  isForcingScroll(): boolean {\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * A helper method for doInputEvent; creates a simple common event and default dispatching.\r\n   * @param elem\r\n   */\r\n  protected dispatchInputEventOn(elem: HTMLElement) {\r\n    let event: InputEvent;\r\n\r\n    // `undefined` in pre-Chrome Edge and Chrome for Android before version 60.\r\n    if(window['InputEvent']) { // can't condition on the type directly; TS optimizes that out.\r\n      event = new InputEvent('input', {\"bubbles\": true, \"cancelable\": false});\r\n    }\r\n\r\n    if(elem && event) {\r\n      elem.dispatchEvent(event);\r\n    }\r\n  }\r\n}",
    "import OutputTarget from './outputTarget.js';\r\n\r\ninterface EventMap  {\r\n  /**\r\n   * This event will be raised when a newline is received by wrapped elements not of\r\n   * the 'search' or 'submit' types.\r\n   *\r\n   * Original code this is replacing:\r\n   ```\r\n      // Allows compiling this separately from the main body of KMW.\r\n      // TODO:  rework class to accept a class-static 'callback' from the DOM module that this can call.\r\n      //        Would eliminate the need for this 'static' reference.\r\n      //        Only strongly matters once we better modularize KMW, with web-dom vs web-dom-targets vs web-core, etc.\r\n      if(com.keyman[\"singleton\"]) {\r\n        com.keyman[\"singleton\"].domManager.moveToNext(false);\r\n      }\r\n   ```\r\n   * This does not belong in a modularized version of this class; it must be supplied\r\n   * by the consuming top-level products instead.\r\n   */\r\n  'unhandlednewline': (element: HTMLInputElement) => void\r\n}\r\n\r\nexport default class Input extends OutputTarget<EventMap> {\r\n  root: HTMLInputElement;\r\n\r\n  /**\r\n   * Tracks the most recently-cached selection start index.\r\n   */\r\n  private _cachedSelectionStart: number\r\n\r\n  /**\r\n   * Tracks the most recently processed, extended-string-based selection start index.\r\n   * When the element's selectionStart value changes, this should be invalidated.\r\n   */\r\n  private processedSelectionStart: number;\r\n\r\n  /**\r\n   * Tracks the most recently processed, extended-string-based selection end index.\r\n   * When the element's selectionEnd value changes, this should be invalidated.\r\n   */\r\n  private processedSelectionEnd: number;\r\n\r\n  /**\r\n   * Set, then unset within the `forceScroll` method in order to facilitate the\r\n   * `isForcingScroll` flag.\r\n   */\r\n  private _activeForcedScroll: boolean;\r\n\r\n  constructor(ele: HTMLInputElement) {\r\n    super();\r\n\r\n    this.root = ele;\r\n    this._cachedSelectionStart = -1;\r\n  }\r\n\r\n  get isSynthetic(): boolean {\r\n    return false;\r\n  }\r\n\r\n  static isSupportedType(type: string): boolean {\r\n    return type == 'email' || type == 'search' || type == 'text' || type == 'url';\r\n  }\r\n\r\n  getElement(): HTMLInputElement {\r\n    return this.root;\r\n  }\r\n\r\n  clearSelection(): void {\r\n    // Processes our codepoint-based variants of selectionStart and selectionEnd.\r\n    this.getCaret(); // updates processedSelectionStart if required\r\n    this.root.value = this.root.value._kmwSubstring(0, this.processedSelectionStart) + this.root.value._kmwSubstring(this.processedSelectionEnd); //I3319\r\n\r\n    this.setCaret(this.processedSelectionStart);\r\n  }\r\n\r\n  isSelectionEmpty(): boolean {\r\n    return this.root.selectionStart == this.root.selectionEnd;\r\n  }\r\n\r\n  hasSelection(): boolean {\r\n    return true;\r\n  }\r\n\r\n  invalidateSelection() {\r\n    // Since .selectionStart will never return this value, we use it to indicate\r\n    // the need to refresh our processed indices.\r\n    this._cachedSelectionStart = -1;\r\n  }\r\n\r\n  getCaret(): number {\r\n    if(this.root.selectionStart != this._cachedSelectionStart) {\r\n      this._cachedSelectionStart = this.root.selectionStart; // KMW-1\r\n      this.processedSelectionStart = this.root.value._kmwCodeUnitToCodePoint(this.root.selectionStart); // I3319\r\n      this.processedSelectionEnd = this.root.value._kmwCodeUnitToCodePoint(this.root.selectionEnd);     // I3319\r\n    }\r\n    return this.root.selectionDirection == 'forward' ? this.processedSelectionEnd : this.processedSelectionStart;\r\n  }\r\n\r\n  getDeadkeyCaret(): number {\r\n    return this.getCaret();\r\n  }\r\n\r\n  setCaret(caret: number) {\r\n    this.setSelection(caret, caret, \"none\");\r\n  }\r\n\r\n  setSelection(start: number, end: number, direction: \"forward\" | \"backward\" | \"none\") {\r\n    let domStart = this.root.value._kmwCodePointToCodeUnit(start);\r\n    let domEnd = this.root.value._kmwCodePointToCodeUnit(end);\r\n    this.root.setSelectionRange(domStart, domEnd, direction);\r\n\r\n    this.processedSelectionStart = start;\r\n    this.processedSelectionEnd = end;\r\n\r\n    this.forceScroll();\r\n\r\n    this.root.setSelectionRange(domStart, domEnd, direction);\r\n  }\r\n\r\n  forceScroll() {\r\n    // Only executes when com.keyman.DOMEventHandlers is defined.\r\n    //\r\n    // We bypass this whenever operating in the embedded format.\r\n    const element = this.getElement();\r\n\r\n    let selectionStart = element.selectionStart;\r\n    let selectionEnd = element.selectionEnd;\r\n\r\n    this._activeForcedScroll = true;\r\n\r\n    try {\r\n      //Forces scrolling; the re-focus triggers the scroll, at least.\r\n      element.blur();\r\n      element.focus();\r\n    } finally {\r\n      // On Edge, it appears that the blur/focus combination will reset the caret position\r\n      // under certain scenarios during unit tests.  So, we re-set it afterward.\r\n      element.selectionStart = selectionStart;\r\n      element.selectionEnd = selectionEnd;\r\n      this._activeForcedScroll = false;\r\n    }\r\n  }\r\n\r\n  isForcingScroll(): boolean {\r\n    return this._activeForcedScroll;\r\n  }\r\n\r\n  getSelectionDirection(): \"forward\" | \"backward\" | \"none\" {\r\n    return this.root.selectionDirection;\r\n  }\r\n\r\n  getTextBeforeCaret(): string {\r\n    this.getCaret();\r\n    return this.getText()._kmwSubstring(0, this.processedSelectionStart);\r\n  }\r\n\r\n  getSelectedText(): string {\r\n    this.getCaret();\r\n    return this.getText()._kmwSubstring(this.processedSelectionStart, this.processedSelectionEnd);\r\n  }\r\n\r\n  setTextBeforeCaret(text: string) {\r\n    this.getCaret();\r\n    let selectionLength = this.processedSelectionEnd - this.processedSelectionStart;\r\n    let direction = this.getSelectionDirection();\r\n    let newCaret = text._kmwLength();\r\n    this.root.value = text + this.getText()._kmwSubstring(this.processedSelectionStart);\r\n\r\n    this.setSelection(newCaret, newCaret + selectionLength, direction);\r\n  }\r\n\r\n  protected setTextAfterCaret(s: string) {\r\n    let direction = this.getSelectionDirection();\r\n\r\n    this.root.value = this.getTextBeforeCaret() + s;\r\n    this.setSelection(this.processedSelectionStart, this.processedSelectionEnd, direction);\r\n  }\r\n\r\n  getTextAfterCaret(): string {\r\n    this.getCaret();\r\n    return this.getText()._kmwSubstring(this.processedSelectionEnd);\r\n  }\r\n\r\n  getText(): string {\r\n    return this.root.value;\r\n  }\r\n\r\n  deleteCharsBeforeCaret(dn: number) {\r\n    if(dn > 0) {\r\n      let curText = this.getTextBeforeCaret();\r\n      let caret = this.processedSelectionStart;\r\n\r\n      if(dn > caret) {\r\n        dn = caret;\r\n      }\r\n\r\n      this.adjustDeadkeys(-dn);\r\n      this.setTextBeforeCaret(curText.kmwSubstring(0, caret - dn));\r\n      this.setCaret(caret - dn);\r\n    }\r\n  }\r\n\r\n  insertTextBeforeCaret(s: string) {\r\n    if(!s) {\r\n      return;\r\n    }\r\n\r\n    let caret = this.getCaret();\r\n    let front = this.getTextBeforeCaret();\r\n    let back = this.getText()._kmwSubstring(this.processedSelectionStart);\r\n\r\n    this.adjustDeadkeys(s._kmwLength());\r\n    this.root.value = front + s + back;\r\n    this.setCaret(caret + s._kmwLength());\r\n  }\r\n\r\n  handleNewlineAtCaret(): void {\r\n    const inputEle = this.root;\r\n    // Can't occur for Mocks - just Input types.\r\n    if (inputEle && (inputEle.type == 'search' || inputEle.type == 'submit')) {\r\n      inputEle.disabled=false;\r\n      inputEle.form.submit();\r\n    } else {\r\n      this.events.emit('unhandlednewline', inputEle);\r\n    }\r\n  }\r\n\r\n  doInputEvent() {\r\n    this.dispatchInputEventOn(this.root);\r\n  }\r\n}",
    "import OutputTarget from './outputTarget.js';\r\n\r\nexport default class TextArea extends OutputTarget<{}> {\r\n  root: HTMLTextAreaElement;\r\n\r\n  /**\r\n   * Tracks the most recently-cached selection start index.\r\n   */\r\n  private _cachedSelectionStart: number\r\n\r\n  /**\r\n   * Tracks the most recently processed, extended-string-based selection start index.\r\n   * When the element's selectionStart value changes, this should be invalidated.\r\n   */\r\n  private processedSelectionStart: number;\r\n\r\n  /**\r\n   * Tracks the most recently processed, extended-string-based selection end index.\r\n   * When the element's selectionEnd value changes, this should be invalidated.\r\n   */\r\n  private processedSelectionEnd: number;\r\n\r\n  /**\r\n   * Set, then unset within the `forceScroll` method in order to facilitate the\r\n   * `isForcingScroll` flag.\r\n   */\r\n  private _activeForcedScroll: boolean;\r\n\r\n  constructor(ele: HTMLTextAreaElement) {\r\n    super();\r\n\r\n    this.root = ele;\r\n    this._cachedSelectionStart = -1;\r\n  }\r\n\r\n  get isSynthetic(): boolean {\r\n    return false;\r\n  }\r\n\r\n  getElement(): HTMLTextAreaElement {\r\n    return this.root;\r\n  }\r\n\r\n  clearSelection(): void {\r\n    // Processes our codepoint-based variants of selectionStart and selectionEnd.\r\n    this.getCaret(); // updates processedSelectionStart if required\r\n    this.root.value = this.root.value._kmwSubstring(0, this.processedSelectionStart) + this.root.value._kmwSubstring(this.processedSelectionEnd); //I3319\r\n\r\n    this.setCaret(this.processedSelectionStart);\r\n  }\r\n\r\n  isSelectionEmpty(): boolean {\r\n    return this.root.selectionStart == this.root.selectionEnd;\r\n  }\r\n\r\n  hasSelection(): boolean {\r\n    return true;\r\n  }\r\n\r\n  invalidateSelection() {\r\n    // Since .selectionStart will never return this value, we use it to indicate\r\n    // the need to refresh our processed indices.\r\n    this._cachedSelectionStart = -1;\r\n  }\r\n\r\n  getCaret(): number {\r\n    if(this.root.selectionStart != this._cachedSelectionStart) {\r\n      this._cachedSelectionStart = this.root.selectionStart; // KMW-1\r\n      this.processedSelectionStart = this.root.value._kmwCodeUnitToCodePoint(this.root.selectionStart); // I3319\r\n      this.processedSelectionEnd = this.root.value._kmwCodeUnitToCodePoint(this.root.selectionEnd);     // I3319\r\n    }\r\n    return this.root.selectionDirection == 'forward' ? this.processedSelectionEnd : this.processedSelectionStart;\r\n  }\r\n\r\n  getDeadkeyCaret(): number {\r\n    return this.getCaret();\r\n  }\r\n\r\n  setCaret(caret: number) {\r\n    this.setSelection(caret, caret, \"none\");\r\n  }\r\n\r\n  setSelection(start: number, end: number, direction: \"forward\" | \"backward\" | \"none\") {\r\n    let domStart = this.root.value._kmwCodePointToCodeUnit(start);\r\n    let domEnd = this.root.value._kmwCodePointToCodeUnit(end);\r\n    this.root.setSelectionRange(domStart, domEnd, direction);\r\n\r\n    this.processedSelectionStart = start;\r\n    this.processedSelectionEnd = end;\r\n\r\n    this.forceScroll();\r\n\r\n    this.root.setSelectionRange(domStart, domEnd, direction);\r\n  }\r\n\r\n  forceScroll() {\r\n    // Only executes when com.keyman.DOMEventHandlers is defined.\r\n    //\r\n    // We bypass this whenever operating in the embedded format.\r\n    const element = this.getElement();\r\n\r\n    let selectionStart = element.selectionStart;\r\n    let selectionEnd = element.selectionEnd;\r\n\r\n    this._activeForcedScroll = true;\r\n\r\n    try {\r\n      //Forces scrolling; the re-focus triggers the scroll, at least.\r\n      element.blur();\r\n      element.focus();\r\n    } finally {\r\n      // On Edge, it appears that the blur/focus combination will reset the caret position\r\n      // under certain scenarios during unit tests.  So, we re-set it afterward.\r\n      element.selectionStart = selectionStart;\r\n      element.selectionEnd = selectionEnd;\r\n      this._activeForcedScroll = false;\r\n    }\r\n  }\r\n\r\n  isForcingScroll(): boolean {\r\n    return this._activeForcedScroll;\r\n  }\r\n\r\n  getSelectionDirection(): \"forward\" | \"backward\" | \"none\" {\r\n    return this.root.selectionDirection;\r\n  }\r\n\r\n  getTextBeforeCaret(): string {\r\n    this.getCaret();\r\n    return this.getText()._kmwSubstring(0, this.processedSelectionStart);\r\n  }\r\n\r\n  setTextBeforeCaret(text: string) {\r\n    this.getCaret();\r\n    let selectionLength = this.processedSelectionEnd - this.processedSelectionStart;\r\n    let direction = this.getSelectionDirection();\r\n    let newCaret = text._kmwLength();\r\n    this.root.value = text + this.getText()._kmwSubstring(this.processedSelectionStart);\r\n\r\n    this.setSelection(newCaret, newCaret + selectionLength, direction);\r\n  }\r\n\r\n  protected setTextAfterCaret(s: string) {\r\n    let direction = this.getSelectionDirection();\r\n\r\n    this.root.value = this.getTextBeforeCaret() + s;\r\n    this.setSelection(this.processedSelectionStart, this.processedSelectionEnd, direction);\r\n  }\r\n\r\n  getTextAfterCaret(): string {\r\n    this.getCaret();\r\n    return this.getText()._kmwSubstring(this.processedSelectionEnd);\r\n  }\r\n\r\n  getSelectedText(): string {\r\n    this.getCaret();\r\n    return this.getText()._kmwSubstring(this.processedSelectionStart, this.processedSelectionEnd);\r\n  }\r\n\r\n  getText(): string {\r\n    return this.root.value;\r\n  }\r\n\r\n  deleteCharsBeforeCaret(dn: number) {\r\n    if(dn > 0) {\r\n      let curText = this.getTextBeforeCaret();\r\n      let caret = this.processedSelectionStart;\r\n\r\n      if(dn > caret) {\r\n        dn = caret;\r\n      }\r\n\r\n      this.adjustDeadkeys(-dn);\r\n      this.setTextBeforeCaret(curText.kmwSubstring(0, caret - dn));\r\n      this.setCaret(caret - dn);\r\n    }\r\n  }\r\n\r\n  insertTextBeforeCaret(s: string) {\r\n    if(!s) {\r\n      return;\r\n    }\r\n\r\n    let caret = this.getCaret();\r\n    let front = this.getTextBeforeCaret();\r\n    let back = this.getText()._kmwSubstring(this.processedSelectionStart);\r\n\r\n    this.adjustDeadkeys(s._kmwLength());\r\n    this.root.value = front + s + back;\r\n    this.setCaret(caret + s._kmwLength());\r\n  }\r\n\r\n  handleNewlineAtCaret(): void {\r\n    this.insertTextBeforeCaret('\\n');\r\n  }\r\n\r\n  doInputEvent() {\r\n    this.dispatchInputEventOn(this.root);\r\n  }\r\n}",
    "import OutputTarget from './outputTarget.js';\r\n\r\nclass SelectionCaret {\r\n  node: Node;\r\n  offset: number;\r\n\r\n  constructor(node: Node, offset: number) {\r\n    this.node = node;\r\n    this.offset = offset;\r\n  }\r\n}\r\n\r\nclass SelectionRange {\r\n  start: SelectionCaret;\r\n  end: SelectionCaret;\r\n\r\n  constructor(start: SelectionCaret, end: SelectionCaret) {\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n}\r\n\r\nclass StyleCommand {\r\n  cmd: string;\r\n  stateType: number;\r\n  cache: string|boolean;\r\n\r\n  constructor(c: string, s:number) {\r\n    this.cmd = c;\r\n    this.stateType = s;\r\n  }\r\n}\r\n\r\nexport default class DesignIFrame extends OutputTarget<{}> {\r\n  root: HTMLIFrameElement;\r\n  doc: Document;\r\n  docRoot: HTMLElement;\r\n\r\n  commandCache: StyleCommand[];\r\n\r\n  constructor(ele: HTMLIFrameElement) {\r\n    super();\r\n    this.root = ele;\r\n\r\n    if(ele.contentWindow && ele.contentWindow.document && ele.contentWindow.document.designMode == 'on') {\r\n      this.doc = ele.contentWindow.document;\r\n      this.docRoot = ele.contentWindow.document.documentElement;\r\n    } else {\r\n      throw \"Specified IFrame is not in design-mode!\";\r\n    }\r\n  }\r\n\r\n  get isSynthetic(): boolean {\r\n    return false;\r\n  }\r\n\r\n  getElement(): HTMLIFrameElement {\r\n    return this.root;\r\n  }\r\n\r\n  focus(): void {\r\n    this.doc.defaultView.focus(); // I3363 (Build 301)\r\n  }\r\n\r\n  isSelectionEmpty(): boolean {\r\n    if(!this.hasSelection()) {\r\n      return true;\r\n    }\r\n\r\n    return this.doc.getSelection().isCollapsed;\r\n  }\r\n\r\n  hasSelection(): boolean {\r\n    let Lsel = this.doc.getSelection();\r\n    let outerSel = document.getSelection();\r\n\r\n    // If the outer doc's selection matches, we're active.\r\n    if(outerSel.anchorNode == Lsel.anchorNode && outerSel.focusNode == Lsel.focusNode) {\r\n      return true;\r\n    } else {\r\n      // Problem:  for testing, we can't enforce the ideal (ie: first) condition.\r\n      // Technically, the IFrame _will_ always have its own internal selection, though... so... it kinda works?\r\n      return true;\r\n    }\r\n  }\r\n\r\n  clearSelection(): void {\r\n    if(this.hasSelection()) {\r\n      let Lsel = this.doc.getSelection();\r\n\r\n      if(!Lsel.isCollapsed) {\r\n        Lsel.deleteFromDocument();  // I2134, I2192\r\n      }\r\n    } else {\r\n      console.warn(\"Attempted to clear an unowned Selection!\");\r\n    }\r\n  }\r\n\r\n  invalidateSelection(): void { /* No cache maintenance needed here, partly because\r\n                                  * it's impossible to cache a Selection; it mutates.\r\n                                  */  }\r\n\r\n  getCarets(): SelectionRange {\r\n    let Lsel = this.doc.getSelection();\r\n    let code = Lsel.anchorNode.compareDocumentPosition(Lsel.focusNode);\r\n\r\n    if(Lsel.isCollapsed) {\r\n      let caret = new SelectionCaret(Lsel.anchorNode, Lsel.anchorOffset);\r\n      return new SelectionRange(caret, caret);\r\n    } else {\r\n      let anchor = new SelectionCaret(Lsel.anchorNode, Lsel.anchorOffset);\r\n      let focus = new SelectionCaret(Lsel.focusNode, Lsel.focusOffset);\r\n\r\n      if(anchor.node == focus.node) {\r\n        code = (focus.offset - anchor.offset > 0) ? 2 : 4;\r\n      }\r\n\r\n      if(code & 2) {\r\n        return new SelectionRange(anchor, focus);\r\n      } else { // Default\r\n        // can test against code & 4 to ensure Focus is before anchor, though.\r\n        return new SelectionRange(focus, anchor);\r\n      }\r\n    }\r\n  }\r\n\r\n  getDeadkeyCaret(): number {\r\n    return this.getTextBeforeCaret().kmwLength();\r\n  }\r\n\r\n  getTextBeforeCaret(): string {\r\n    if(!this.hasSelection()) {\r\n      return this.getText();\r\n    }\r\n\r\n    let caret = this.getCarets().start;\r\n\r\n    if(caret.node.nodeType != 3) {\r\n      return ''; // Must be a text node to provide a context.\r\n    }\r\n\r\n    return caret.node.textContent.substr(0, caret.offset);\r\n  }\r\n\r\n  getSelectedText(): string {\r\n    // TODO:  figure out the proper implementation.\r\n    // KMW 16 and before behavior may be maintained by just returning the empty string.\r\n    return '';\r\n  }\r\n\r\n  getTextAfterCaret(): string {\r\n    if(!this.hasSelection()) {\r\n      return '';\r\n    }\r\n\r\n    let caret = this.getCarets().end;\r\n\r\n    if(caret.node.nodeType != 3) {\r\n      return ''; // Must be a text node to provide a context.\r\n    }\r\n\r\n    return caret.node.textContent.substr(caret.offset);\r\n  }\r\n\r\n  getText(): string {\r\n    return this.docRoot.innerText;\r\n  }\r\n\r\n  deleteCharsBeforeCaret(dn: number) {\r\n    if(!this.hasSelection() || dn <= 0) {\r\n      return;\r\n    }\r\n\r\n    let start = this.getCarets().start;\r\n\r\n    // Bounds-check on the number of chars to delete.\r\n    if(dn > start.offset) {\r\n      dn = start.offset;\r\n    }\r\n\r\n    if(start.node.nodeType != 3) {\r\n      console.warn(\"Deletion of characters requested without available context!\");\r\n      return; // No context to delete characters from.\r\n    }\r\n\r\n    let range = this.doc.createRange();\r\n    let dnOffset = start.offset - start.node.nodeValue.substr(0, start.offset)._kmwSubstr(-dn).length;\r\n\r\n    range.setStart(start.node, dnOffset);\r\n    range.setEnd(start.node, start.offset);\r\n\r\n    this.adjustDeadkeys(-dn);\r\n    range.deleteContents();\r\n    // No need to reposition the caret - the DOM will auto-move the selection accordingly, since\r\n    // we didn't use the selection to delete anything.\r\n  }\r\n\r\n  insertTextBeforeCaret(s: string) {\r\n    if(!this.hasSelection()) {\r\n      return;\r\n    }\r\n\r\n    let start = this.getCarets().start;\r\n    let delta = s._kmwLength();\r\n    let Lsel = this.doc.getSelection();\r\n\r\n    if(delta == 0) {\r\n      return;\r\n    }\r\n\r\n    this.adjustDeadkeys(delta);\r\n\r\n    // While Selection.extend() was really nice for this, IE didn't support it whatsoever.\r\n    // However, IE (11, at least) DID support setting selections via ranges, so we were still\r\n    // able to manage the caret properly.\r\n    //\r\n    // TODO:  double-check that it was only IE-motivated, re-implement with Selection.extend().\r\n    let finalCaret = this.root.ownerDocument.createRange();\r\n\r\n    if(start.node.nodeType == 3) {\r\n      let textStart = <Text> start.node;\r\n      textStart.insertData(start.offset, s);\r\n      finalCaret.setStart(textStart, start.offset + s.length);\r\n    } else {\r\n      // Create a new text node - empty control\r\n      var n = this.doc.createTextNode(s);\r\n\r\n      let range = this.doc.createRange();\r\n      range.setStart(start.node, start.offset);\r\n      range.collapse(true);\r\n      range.insertNode(n);\r\n      finalCaret.setStart(n, s.length);\r\n    }\r\n\r\n    finalCaret.collapse(true);\r\n    Lsel.removeAllRanges();\r\n    try {\r\n      Lsel.addRange(finalCaret);\r\n    } catch(e) {\r\n      // Chrome (through 4.0 at least) throws an exception because it has not synchronised its content with the selection.\r\n      // scrollIntoView synchronises the content for selection\r\n      start.node.parentElement.scrollIntoView();\r\n      Lsel.addRange(finalCaret);\r\n    }\r\n    Lsel.collapseToEnd();\r\n  }\r\n\r\n  handleNewlineAtCaret(): void {\r\n    // TODO:  Implement.\r\n    //\r\n    // As it turns out, we never had an implementation for handling newline inputs from the OSK for this element type.\r\n    // At least this way, it's more explicit.\r\n    //\r\n    // Note:  consult \"// Create a new text node - empty control\" case in insertTextBeforeCaret -\r\n    // this helps to handle the browser-default implementation of newline handling.  In particular,\r\n    // entry of the first character after a newline.\r\n    //\r\n    // If raw newlines are entered into the HTML, but as with usual HTML, they're interpreted as excess whitespace and\r\n    // have no effect.  We need to add DOM elements for a functional newline.\r\n  }\r\n\r\n  protected setTextAfterCaret(s: string) {\r\n    if(!this.hasSelection()) {\r\n      return;\r\n    }\r\n\r\n    let caret = this.getCarets().end;\r\n    let delta = s._kmwLength();\r\n\r\n    if(delta == 0) {\r\n      return;\r\n    }\r\n\r\n    // This is designed explicitly for use in direct-setting operations; deadkeys\r\n    // will be handled after this method.\r\n\r\n    if(caret.node.nodeType == 3) {\r\n      let textStart = <Text> caret.node;\r\n      textStart.replaceData(caret.offset, textStart.length, s);\r\n    } else {\r\n      // Create a new text node - empty control\r\n      var n = caret.node.ownerDocument.createTextNode(s);\r\n\r\n      let range = this.root.ownerDocument.createRange();\r\n      range.setStart(caret.node, caret.offset);\r\n      range.collapse(true);\r\n      range.insertNode(n);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     saveProperties\r\n   * Scope        Private\r\n   * Description  Build and create list of styles that can be applied in iframes\r\n   */\r\n  saveProperties() {\r\n    // Formerly _CacheCommands.\r\n    var _CacheableCommands=[\r\n      new StyleCommand('backcolor',1), new StyleCommand('fontname',1), new StyleCommand('fontsize',1),\r\n      new StyleCommand('forecolor',1), new StyleCommand('bold',0), new StyleCommand('italic',0),\r\n      new StyleCommand('strikethrough',0), new StyleCommand('subscript',0),\r\n      new StyleCommand('superscript',0), new StyleCommand('underline',0)\r\n    ];\r\n\r\n    if(this.doc.defaultView) {\r\n      _CacheableCommands.push(new StyleCommand('hilitecolor',1));\r\n    }\r\n\r\n    for(var n=0; n < _CacheableCommands.length; n++) { // I1511 - array prototype extended\r\n      let cmd = _CacheableCommands[n];\r\n      //KeymanWeb._Debug('Command:'+_CacheableCommands[n][0]);\r\n      if(cmd.stateType == 1) {\r\n        cmd.cache = this.doc.queryCommandValue(cmd.cmd);\r\n      } else {\r\n        cmd.cache = this.doc.queryCommandState(cmd.cmd);\r\n      }\r\n    }\r\n    this.commandCache = _CacheableCommands;\r\n  }\r\n\r\n  /**\r\n   * Function     restoreProperties\r\n   * Scope        Private\r\n   * Description  Restore styles in IFRAMEs (??)\r\n   */\r\n  restoreProperties(_func?: () => void): void {\r\n    // Formerly _CacheCommandsReset.\r\n    if(!this.commandCache) {\r\n      console.error(\"No command cache exists to restore!\");\r\n    }\r\n\r\n    for(var n=0; n < this.commandCache.length; n++) { // I1511 - array prototype extended\r\n      let cmd = this.commandCache[n];\r\n\r\n      //KeymanWeb._Debug('ResetCacheCommand:'+_CacheableCommands[n][0]+'='+_CacheableCommands[n][2]);\r\n      if(cmd.stateType == 1) {\r\n        if(this.doc.queryCommandValue(cmd.cmd) != cmd.cache) {\r\n          if(_func) {\r\n            _func();\r\n          }\r\n          this.doc.execCommand(cmd.cmd, false, <string> cmd.cache);\r\n        }\r\n      } else if(this.doc.queryCommandState(cmd.cmd) != cmd.cache) {\r\n        if(_func) {\r\n          _func();\r\n        }\r\n        //KeymanWeb._Debug('executing command '+_CacheableCommand[n][0]);\r\n        this.doc.execCommand(cmd.cmd, false, null);\r\n      }\r\n    }\r\n  }\r\n\r\n  doInputEvent() {\r\n    // Root = the iframe, the outermost component and the one we were originally told to attach to.\r\n    this.dispatchInputEventOn(this.root);\r\n  }\r\n}",
    "import OutputTarget from './outputTarget.js';\r\n\r\nclass SelectionCaret {\r\n  node: Node;\r\n  offset: number;\r\n\r\n  constructor(node: Node, offset: number) {\r\n    this.node = node;\r\n    this.offset = offset;\r\n  }\r\n}\r\n\r\nclass SelectionRange {\r\n  start: SelectionCaret;\r\n  end: SelectionCaret;\r\n\r\n  constructor(start: SelectionCaret, end: SelectionCaret) {\r\n    this.start = start;\r\n    this.end = end;\r\n  }\r\n}\r\n\r\nexport default class ContentEditable extends OutputTarget<{}> {\r\n  root: HTMLElement;\r\n\r\n  constructor(ele: HTMLElement) {\r\n    if(ele.isContentEditable) {\r\n      super();\r\n      this.root = ele;\r\n    } else {\r\n      throw \"Specified element is not already content-editable!\";\r\n    }\r\n  }\r\n\r\n  get isSynthetic(): boolean {\r\n    return false;\r\n  }\r\n\r\n  getElement(): HTMLElement {\r\n    return this.root;\r\n  }\r\n\r\n  isSelectionEmpty(): boolean {\r\n    if(!this.hasSelection()) {\r\n      return true;\r\n    }\r\n\r\n    return this.root.ownerDocument.getSelection().isCollapsed;\r\n  }\r\n\r\n  hasSelection(): boolean {\r\n    let Lsel = this.root.ownerDocument.getSelection();\r\n\r\n    if(this.root != Lsel.anchorNode && !this.root.contains(Lsel.anchorNode)) {\r\n      return false;\r\n    }\r\n\r\n    if(this.root != Lsel.focusNode && !this.root.contains(Lsel.focusNode)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  clearSelection(): void {\r\n    if(this.hasSelection()) {\r\n      let Lsel = this.root.ownerDocument.getSelection();\r\n\r\n      if(!Lsel.isCollapsed) {\r\n        Lsel.deleteFromDocument();  // I2134, I2192\r\n      }\r\n    } else {\r\n      console.warn(\"Attempted to clear an unowned Selection!\");\r\n    }\r\n  }\r\n\r\n  invalidateSelection(): void { /* No cache maintenance needed here, partly because\r\n                                  * it's impossible to cache a Selection; it mutates.\r\n                                  */  }\r\n\r\n  getCarets(): SelectionRange {\r\n    let Lsel = this.root.ownerDocument.getSelection();\r\n    let code = Lsel.anchorNode.compareDocumentPosition(Lsel.focusNode);\r\n\r\n    if(Lsel.isCollapsed) {\r\n      let caret = new SelectionCaret(Lsel.anchorNode, Lsel.anchorOffset);\r\n      return new SelectionRange(caret, caret);\r\n    } else {\r\n      let anchor = new SelectionCaret(Lsel.anchorNode, Lsel.anchorOffset);\r\n      let focus = new SelectionCaret(Lsel.focusNode, Lsel.focusOffset);\r\n\r\n      if(anchor.node == focus.node) {\r\n        code = (focus.offset - anchor.offset > 0) ? 2 : 4;\r\n      }\r\n\r\n      if(code & 2) {\r\n        return new SelectionRange(anchor, focus);\r\n      } else { // Default\r\n        // can test against code & 4 to ensure Focus is before anchor, though.\r\n        return new SelectionRange(focus, anchor);\r\n      }\r\n    }\r\n  }\r\n\r\n  getDeadkeyCaret(): number {\r\n    return this.getTextBeforeCaret().kmwLength();\r\n  }\r\n\r\n  getTextBeforeCaret(): string {\r\n    if(!this.hasSelection()) {\r\n      return this.getText();\r\n    }\r\n\r\n    let caret = this.getCarets().start;\r\n\r\n    if(caret.node.nodeType != 3) {\r\n      return ''; // Must be a text node to provide a context.\r\n    }\r\n\r\n    return caret.node.textContent.substr(0, caret.offset);\r\n  }\r\n\r\n  getSelectedText(): string {\r\n    // TODO:  figure out the proper implementation.\r\n    // KMW 16 and before behavior may be maintained by just returning the empty string.\r\n    return '';\r\n  }\r\n\r\n  getTextAfterCaret(): string {\r\n    if(!this.hasSelection()) {\r\n      return '';\r\n    }\r\n\r\n    let caret = this.getCarets().end;\r\n\r\n    if(caret.node.nodeType != 3) {\r\n      return ''; // Must be a text node to provide a context.\r\n    }\r\n\r\n    return caret.node.textContent.substr(caret.offset);\r\n  }\r\n\r\n  getText(): string {\r\n    return this.root.innerText;\r\n  }\r\n\r\n  deleteCharsBeforeCaret(dn: number) {\r\n    if(!this.hasSelection() || dn <= 0) {\r\n      return;\r\n    }\r\n\r\n    let start = this.getCarets().start;\r\n\r\n    // Bounds-check on the number of chars to delete.\r\n    if(dn > start.offset) {\r\n      dn = start.offset;\r\n    }\r\n\r\n    if(start.node.nodeType != 3) {\r\n      console.warn(\"Deletion of characters requested without available context!\");\r\n      return; // No context to delete characters from.\r\n    }\r\n\r\n    let range = this.root.ownerDocument.createRange();\r\n    let dnOffset = start.offset - start.node.nodeValue.substr(0, start.offset)._kmwSubstr(-dn).length;\r\n\r\n    range.setStart(start.node, dnOffset);\r\n    range.setEnd(start.node, start.offset);\r\n\r\n    this.adjustDeadkeys(-dn);\r\n    range.deleteContents();\r\n    // No need to reposition the caret - the DOM will auto-move the selection accordingly, since\r\n    // we didn't use the selection to delete anything.\r\n  }\r\n\r\n  insertTextBeforeCaret(s: string) {\r\n    if(!this.hasSelection()) {\r\n      return;\r\n    }\r\n\r\n    let start = this.getCarets().start;\r\n    let delta = s._kmwLength();\r\n    let Lsel = this.root.ownerDocument.getSelection();\r\n\r\n    if(delta == 0) {\r\n      return;\r\n    }\r\n\r\n    this.adjustDeadkeys(delta);\r\n\r\n    // While Selection.extend() was really nice for this, IE didn't support it whatsoever.\r\n    // However, IE (11, at least) DID support setting selections via ranges, so we were still\r\n    // able to manage the caret properly.\r\n    //\r\n    // TODO:  double-check that it was only IE-motivated, re-implement with Selection.extend().\r\n    let finalCaret = this.root.ownerDocument.createRange();\r\n\r\n    if(start.node.nodeType == 3) {\r\n      let textStart = <Text> start.node;\r\n      textStart.insertData(start.offset, s);\r\n      finalCaret.setStart(textStart, start.offset + s.length);\r\n    } else {\r\n      // Create a new text node - empty control\r\n      var n = start.node.ownerDocument.createTextNode(s);\r\n\r\n      let range = this.root.ownerDocument.createRange();\r\n      range.setStart(start.node, start.offset);\r\n      range.collapse(true);\r\n      range.insertNode(n);\r\n      finalCaret.setStart(n, s.length);\r\n    }\r\n\r\n    finalCaret.collapse(true);\r\n    Lsel.removeAllRanges();\r\n    try {\r\n      Lsel.addRange(finalCaret);\r\n    } catch(e) {\r\n      // Chrome (through 4.0 at least) throws an exception because it has not synchronised its content with the selection.\r\n      // scrollIntoView synchronises the content for selection\r\n      start.node.parentElement.scrollIntoView();\r\n      Lsel.addRange(finalCaret);\r\n    }\r\n    Lsel.collapseToEnd();\r\n  }\r\n\r\n  handleNewlineAtCaret(): void {\r\n    // TODO:  Implement.\r\n    //\r\n    // As it turns out, we never had an implementation for handling newline inputs from the OSK for this element type.\r\n    // At least this way, it's more explicit.\r\n    //\r\n    // Note:  consult \"// Create a new text node - empty control\" case in insertTextBeforeCaret -\r\n    // this helps to handle the browser-default implementation of newline handling.  In particular,\r\n    // entry of the first character after a newline.\r\n    //\r\n    // If raw newlines are entered into the HTML, but as with usual HTML, they're interpreted as excess whitespace and\r\n    // have no effect.  We need to add DOM elements for a functional newline.\r\n  }\r\n\r\n  protected setTextAfterCaret(s: string) {\r\n    if(!this.hasSelection()) {\r\n      return;\r\n    }\r\n\r\n    let caret = this.getCarets().end;\r\n    let delta = s._kmwLength();\r\n\r\n    if(delta == 0) {\r\n      return;\r\n    }\r\n\r\n    // This is designed explicitly for use in direct-setting operations; deadkeys\r\n    // will be handled after this method.\r\n\r\n    if(caret.node.nodeType == 3) {\r\n      let textStart = <Text> caret.node;\r\n      textStart.replaceData(caret.offset, textStart.length, s);\r\n    } else {\r\n      // Create a new text node - empty control\r\n      var n = caret.node.ownerDocument.createTextNode(s);\r\n\r\n      let range = this.root.ownerDocument.createRange();\r\n      range.setStart(caret.node, caret.offset);\r\n      range.collapse(true);\r\n      range.insertNode(n);\r\n    }\r\n  }\r\n\r\n  doInputEvent() {\r\n    this.dispatchInputEventOn(this.root);\r\n  }\r\n}",
    "/**\r\n * Checks the type of an input DOM-related object while ensuring that it is checked against the correct prototype,\r\n * as class prototypes are (by specification) scoped upon the owning Window.\r\n *\r\n * See https://stackoverflow.com/questions/43587286/why-does-instanceof-return-false-on-chrome-safari-and-edge-and-true-on-firefox\r\n * for more details.\r\n *\r\n * @param {EventTarget}   Pelem       An element of the web page or one of its IFrame-based subdocuments.\r\n * @param {string}        className   The plain-text name of the expected Element type.\r\n * @return {boolean}\r\n */\r\nexport function nestedInstanceOf(Pelem: EventTarget, className: string): boolean {\r\n  var scopedClass;\r\n\r\n  if(!Pelem) {\r\n    // If we're bothering to check something's type, null references don't match\r\n    // what we're looking for.\r\n    return false;\r\n  }\r\n  // @ts-ignore\r\n  if (Pelem['Window']) { // Window objects contain the class definitions for types held within them.  So, we can check for those.\r\n    return className == 'Window';\r\n    // @ts-ignore\r\n  } else if (Pelem['defaultView']) { // Covers Document.\r\n    // @ts-ignore\r\n    scopedClass = (Pelem as Document)['defaultView'][className];\r\n    // @ts-ignore\r\n  } else if(Pelem['ownerDocument']) {\r\n    // @ts-ignore\r\n    scopedClass = (Pelem as Node).ownerDocument.defaultView[className];\r\n  }\r\n\r\n  if(scopedClass) {\r\n    return Pelem instanceof scopedClass;\r\n  } else {\r\n    return false;\r\n  }\r\n}",
    "import type OutputTarget from './outputTarget.js';\r\nimport Input from './input.js';\r\nimport TextArea from './textarea.js';\r\nimport DesignIFrame from './designIFrame.js';\r\nimport ContentEditable from './contentEditable.js';\r\nimport { nestedInstanceOf } from './utils.js';\r\n\r\nexport default function wrapElement(e: HTMLElement): OutputTarget<any> {\r\n  // Complex type scoping is implemented here so that kmwutils.ts is not a dependency for test compilations.\r\n\r\n  if(nestedInstanceOf(e, \"HTMLInputElement\")) {\r\n    return new Input(<HTMLInputElement> e);\r\n  } else if(nestedInstanceOf(e, \"HTMLTextAreaElement\")) {\r\n    return new TextArea(<HTMLTextAreaElement> e);\r\n  } else if(nestedInstanceOf(e, \"HTMLIFrameElement\")) {\r\n    let iframe = <HTMLIFrameElement> e;\r\n\r\n    if(iframe.contentWindow && iframe.contentWindow.document && iframe.contentWindow.document.designMode == \"on\") {\r\n      return new DesignIFrame(iframe);\r\n    } else if (e.isContentEditable) {\r\n      // Do content-editable <iframe>s make sense?\r\n      return new ContentEditable(e);\r\n    } else {\r\n      return null;\r\n    }\r\n  } else if(e.isContentEditable) {\r\n    return new ContentEditable(e);\r\n  }\r\n\r\n  return null;\r\n}",
    "/**\r\n * Encapsulates the emulated dialog used by KMW to signal alerts and keyboard-load\r\n * waiting messages to the user.\r\n *\r\n * The intent is for this to be a direct child element of `document.body`.\r\n */\r\nexport class AlertHost {\r\n  /**\r\n   * The \"background\" element - a full-page shim _behind_ the alert / wait box that assists\r\n   * in emulating a modal state.\r\n   *\r\n   * This element uses `display: none` by default, and as the root element, this keeps the others\r\n   * hidden by default as well.\r\n   */\r\n  private readonly bg: HTMLDivElement;\r\n\r\n  /**\r\n   * The \"wait text\" / \"alert text\" element - the element containing any message text associated\r\n   * with the alert or wait being signaled.\r\n   */\r\n  private readonly lt: HTMLDivElement;\r\n\r\n  /**\r\n   * The \"wait graphic\" - the spinny-bar graphic used during keyboard-load waiting messages.\r\n   */\r\n  private readonly gr: HTMLDivElement;\r\n\r\n  /**\r\n   * The top-right 'close'/'x' button.\r\n   */\r\n  private readonly bx: HTMLDivElement;\r\n\r\n  private dismiss?: () => void;\r\n  private pending: boolean = false;\r\n\r\n  // Formerly known as `this.waiting` when within `keyman.util`.\r\n  public get rootElement(): HTMLDivElement {\r\n    return this.bg;\r\n  }\r\n\r\n  /**\r\n   *  Prepares, but does not display, the background and keyboard loading wait message box\r\n   *  Should not be called before options are defined during initialization\r\n   **/\r\n  constructor() {\r\n    // \"background\" - the clickable shim BEHIND the 'dialog'\r\n    const bg = this.bg = document.createElement('div'),\r\n          lb = document.createElement('div'), // 'wait box' - the main actual message box / 'dialog' element\r\n          lt = this.lt = document.createElement('div'), // 'wait text' // or alert text - but the host for message text\r\n          gr = this.gr = document.createElement('div'), // 'wait graphic' - the little 'please wait' spinny / faux progress bar\r\n          bx = this.bx = document.createElement('div'); // the little 'close' top-right x button.\r\n\r\n    bg.className='kmw-wait-background';\r\n    lb.className='kmw-wait-box';\r\n    this.dismiss=null;\r\n    lt.className='kmw-wait-text';\r\n    gr.className='kmw-wait-graphic';\r\n    bx.className='kmw-alert-close';\r\n\r\n    // Close alert if anywhere in box is touched, since close box is too small on mobiles\r\n    const lbClick = lb.onmousedown = lb.onclick = (e: MouseEvent | TouchEvent) => {\r\n      // Ignore if waiting, only handle for alert\r\n      if(bx.style.display == 'block') {\r\n        bg.style.display='none';\r\n        if(this.dismiss) {\r\n          this.dismiss();\r\n        }\r\n      }\r\n    };\r\n\r\n    lb.addEventListener('touchstart', lbClick, false);\r\n    const bgClick = bg.onmousedown = bg.onclick = (e: MouseEvent | TouchEvent) => {\r\n      e.preventDefault();\r\n      e.stopPropagation();\r\n\r\n    }\r\n    bg.addEventListener('touchstart', bgClick, false);\r\n    lb.appendChild(bx); // [0]\r\n    lb.appendChild(lt); // [1]\r\n    lb.appendChild(gr); // [2]\r\n    bg.appendChild(lb);\r\n\r\n    document.body.appendChild(bg);\r\n  }\r\n\r\n  /**\r\n   * Customized wait display\r\n   *\r\n   * @param   {string|boolean}   s       displayed text\r\n   */\r\n  wait(s?: string) {\r\n    // Keyboards loaded with page are initialized before the page is ready,\r\n    // so cannot use the wait indicator (and don't need it, anyway)\r\n    const bg = this.bg;\r\n    if(typeof(bg) == 'undefined' || bg == null) {\r\n      return;\r\n    }\r\n\r\n    if(s) {\r\n      this.pending=true;\r\n      // In practice, is typically:  \"Installing keyboard\", with line 2 = keyboard name.\r\n      window.setTimeout(() => {\r\n        if(this.pending) {\r\n          window.scrollTo(0,0);\r\n          this.bx.style.display='none';\r\n          this.lt.className='kmw-wait-text';\r\n          this.lt.innerHTML=s;\r\n          this.gr.style.display='block';\r\n          bg.style.display='block';\r\n        }\r\n      }, 1000);\r\n    } else {\r\n      if(this.pending) {\r\n        this.lt.innerHTML='';\r\n        this.pending=false;\r\n        bg.style.display='none';\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Customized alert.\r\n   *\r\n   * @param     {string}        s       alert text\r\n   * @param     {function()=}   fn      function to call when alert dismissed\r\n   */\r\n  alert(s: string, fn?: () => void): void {\r\n    const bg = this.bg;\r\n    this.bx.style.display='block';\r\n    this.lt.className='kmw-alert-text';\r\n    this.lt.innerHTML=s;\r\n    this.gr.style.display='none';\r\n    bg.style.display='block';\r\n    this.dismiss = arguments.length > 1 ? fn : null;\r\n  }\r\n\r\n  shutdown() {\r\n    this.bg.parentNode.removeChild(this.bg);\r\n  }\r\n}",
    "export function whenDocumentReady(): Promise<void> {\r\n  if(document.readyState === 'complete') {\r\n    return Promise.resolve();\r\n  }\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const loadHandler: (e: Event) => void = () => {\r\n      window.removeEventListener('load', loadHandler);\r\n\r\n      resolve();\r\n    };\r\n\r\n    window.addEventListener('load', loadHandler);\r\n  });\r\n}",
    "import { EngineConfiguration, InitOptionSpec, InitOptionDefaults } from \"keyman/engine/main\";\r\n\r\nimport { OutputTarget as DOMOutputTarget } from 'keyman/engine/element-wrappers';\r\nimport { isEmptyTransform, OutputTarget, RuleBehavior } from 'keyman/engine/js-processor';\r\nimport { AlertHost } from \"./utils/alertHost.js\";\r\nimport { whenDocumentReady } from \"./utils/documentReady.js\";\r\n\r\nexport class BrowserConfiguration extends EngineConfiguration {\r\n  private _ui: string;\r\n  private _attachType: string;\r\n\r\n  private _alertHost?: AlertHost;\r\n  private _options: Required<BrowserInitOptionSpec>;\r\n\r\n  initialize(options: Required<BrowserInitOptionSpec>) {\r\n    if(this._options) {\r\n      // Preserve old options, but replace with any newly-set ones if specified.\r\n      // If specified, even as 'undefined' or 'null', it will still override.\r\n      this._options = {...this._options, ...options};\r\n    } else {\r\n      this._options = {...options};\r\n    }\r\n    super.initialize(options);\r\n    this._options = options;\r\n\r\n    this._ui = options.ui;\r\n    this._attachType = options.attachType;\r\n\r\n    whenDocumentReady().then(() => {\r\n      if(options.useAlerts && !this.alertHost) {\r\n        this._alertHost = new AlertHost();\r\n      } else if(!options.useAlerts && this.alertHost) {\r\n        this._alertHost?.shutdown();\r\n        this._alertHost = null;\r\n      }\r\n    });\r\n  }\r\n\r\n  get options() {\r\n    return this._options;\r\n  }\r\n\r\n  get attachType() {\r\n    return this._attachType;\r\n  }\r\n\r\n  get alertHost(): AlertHost | undefined {\r\n    return this._alertHost;\r\n  }\r\n\r\n  set signalUser(host: AlertHost) {\r\n    if(!host || host != this.alertHost) {\r\n      this.alertHost.shutdown();\r\n    }\r\n\r\n    this._alertHost = host;\r\n  }\r\n\r\n  debugReport(): Record<string, any> {\r\n    const baseReport = super.debugReport();\r\n    baseReport.attachType = this.attachType;\r\n    baseReport.ui = this._ui;\r\n    baseReport.keymanEngine = 'app/browser';\r\n\r\n    return baseReport;\r\n  }\r\n\r\n  onRuleFinalization(ruleBehavior: RuleBehavior, outputTarget: OutputTarget) {\r\n    // TODO: Patch up to modularized form.  But that doesn't exist yet for some of these...\r\n\r\n    // If the transform isn't empty, we've changed text - which should produce a 'changed' event in the DOM.\r\n    const ruleTransform = ruleBehavior.transcription.transform;\r\n    if(!isEmptyTransform(ruleTransform)) {\r\n      if(outputTarget instanceof DOMOutputTarget) {\r\n        outputTarget.changed = true;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport interface BrowserInitOptionSpec extends InitOptionSpec {\r\n  ui?: string;\r\n  attachType?: 'auto' | 'manual' | ''; // If blank or undefined, attachType will be assigned to \"auto\" or \"manual\"\r\n  useAlerts?: boolean;\r\n}\r\n\r\nexport const BrowserInitOptionDefaults: Required<BrowserInitOptionSpec> = {\r\n  ui: '',\r\n  attachType: '',\r\n  useAlerts: true,\r\n  ...InitOptionDefaults\r\n}",
    "import { OutputTarget } from 'keyman/engine/element-wrappers';\r\n\r\nexport class AttachmentInfo {\r\n  /**\r\n   * Provides the core interface between the DOM and the actual keyboard.\r\n   */\r\n  interface:      OutputTarget<any>;\r\n\r\n  /**\r\n   * Tracks the control's independent keyboard selection, when applicable.\r\n   */\r\n  keyboard:       string;\r\n\r\n  /**\r\n   * Tracks the language code corresponding to the `keyboard` field.\r\n   */\r\n  languageCode:   string;\r\n\r\n  /**\r\n   * Tracks the inputmode originally set by the webpage.\r\n   */\r\n  inputMode?: string;\r\n\r\n  constructor(eleInterface: OutputTarget<any>, kbd: string, touch?: boolean) {\r\n    this.interface = eleInterface;\r\n    this.keyboard = kbd;\r\n  }\r\n}",
    "import { nestedInstanceOf } from \"keyman/engine/element-wrappers\";\r\n\r\n/**\r\n * Given a DOM event related to an KMW-attached element, this function determines\r\n * the corresponding OutputTarget.\r\n * @param e\r\n * @returns\r\n */\r\nexport function eventOutputTarget(e: Event) {\r\n  let Ltarg: HTMLElement = e?.target as HTMLElement;\r\n  return outputTargetForElement(Ltarg);\r\n}\r\n\r\n/**\r\n * Given a DOM event related to an KMW-attached element, this function determines\r\n * the corresponding OutputTarget.\r\n * @param e\r\n * @returns\r\n */\r\nexport function outputTargetForElement(Ltarg: HTMLElement) {\r\n  if (Ltarg == null) {\r\n    return null;\r\n  }\r\n  // ... determine the element expected to hold the KMW attachment object based on\r\n  // its typing, properties, etc.\r\n\r\n  // @ts-ignore\r\n  if(Ltarg['body']) {\r\n    // @ts-ignore\r\n    Ltarg = Ltarg['body']; // Occurs in Firefox for design-mode iframes.\r\n  }\r\n\r\n  if (Ltarg.nodeType == 3) { // defeat Safari bug\r\n    Ltarg = Ltarg.parentNode as HTMLElement;\r\n  }\r\n\r\n  // Verify that the element does correspond to a remappable input field\r\n  if(nestedInstanceOf(Ltarg, \"HTMLInputElement\")) {\r\n    const et=(Ltarg as HTMLInputElement).type.toLowerCase();\r\n    if(!(et == 'text' || et == 'search')) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  // Step 2:  With the most likely host element determined, obtain the corresponding OutputTarget\r\n  // instance.\r\n  return Ltarg._kmwAttachment?.interface;\r\n}",
    "import { EventEmitter } from 'eventemitter3';\r\n\r\nimport { DeviceSpec, InternalKeyboardFont } from \"keyman/engine/keyboard\";\r\nimport { Input, nestedInstanceOf, wrapElement } from \"keyman/engine/element-wrappers\";\r\nimport {\r\n  arrayFromNodeList,\r\n  createStyleSheet,\r\n  getAbsoluteX,\r\n  getAbsoluteY,\r\n  StylesheetManager\r\n} from \"keyman/engine/dom-utils\";\r\n\r\nimport { AttachmentInfo } from \"./attachmentInfo.js\";\r\n\r\n// Extends the standard DOM definition for HTMLElement with our custom property underlying KMW element attachment.\r\ndeclare global {\r\n  interface HTMLElement {\r\n    /**\r\n     * A custom property used by Keyman Engine for Web to tag elements that it has attached to.\r\n     */\r\n    _kmwAttachment: AttachmentInfo,     // Used to track each input element's attachment data.\r\n  }\r\n}\r\n\r\n// Used for the `.sortedList` property - that is, for ordering valid input elements based\r\n// upon their location within the page.\r\ntype SortableInput = {\r\n  ip: HTMLInputElement | HTMLTextAreaElement,\r\n  x: number,\r\n  y: number\r\n};\r\n\r\ninterface EventMap {\r\n  /**\r\n   * For any elements being attached or being re-enabled after having been disabled.\r\n   */\r\n  'enabled': (obj: HTMLElement) => void;\r\n\r\n  /**\r\n   * For any elements being detached, disabled, or selectively not being attached due\r\n   * being pre-marked for a disabled state.\r\n   */\r\n  'disabled': (obj: HTMLElement) => void;\r\n}\r\n\r\nexport interface PageAttachmentOptions {\r\n  /**\r\n   * The DeviceSpec metadata for the actual device hosting the active webpage.\r\n   */\r\n  hostDevice: DeviceSpec;\r\n\r\n  /**\r\n   * If contained within an iframe, this should be set to .document's owning iframe.\r\n   */\r\n  owner?: HTMLIFrameElement;\r\n}\r\n\r\n/*\r\n * Note:  part of this class's design is to facilitate unit testing for the core\r\n * attachment algorithm - for validating the logic that determines which elements\r\n * gain attachment.\r\n */\r\n\r\n/**\r\n * This class is responsible for Keyman Engine for Web's\r\n * \"attachment\" mechanism, which is used to hook into page elements to determine\r\n * the user's active context and to receive any keystrokes said context receives.\r\n */\r\nexport class PageContextAttachment extends EventEmitter<EventMap> {\r\n  // Note:  we only seem to rely on `device.touchable` within this class?  None of the other properties.\r\n  private readonly options: PageAttachmentOptions;\r\n\r\n  public get device(): DeviceSpec {\r\n    return this.options.hostDevice;\r\n  }\r\n\r\n  public readonly document: Document;\r\n  protected readonly owner: HTMLIFrameElement;\r\n  private baseFont: string = '';\r\n  private appliedFont: string = '';\r\n  private stylesheetManager: StylesheetManager;\r\n\r\n  public get window(): Window {\r\n    return this.document.defaultView;\r\n  }\r\n\r\n  private embeddedPageContexts: PageContextAttachment[] = [];\r\n\r\n  // Only used for `shutdown`; order doesn't matter.\r\n  private _inputList: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Returns a list of all elements attached by this object or one of its children.\r\n   * Note that the list should be considered unordered, as its entries will not\r\n   * be in order of definition within the document.\r\n   */\r\n  public get inputList(): readonly HTMLElement[] {\r\n    let embeddedInputs = this.embeddedPageContexts.map(\r\n      // Gets the input list for any pages embedded via iframe\r\n      (embeddedPage) => embeddedPage.inputList\r\n    ).reduce(\r\n      // Flattens the resulting arrays into a 1D array.\r\n      (flattenedInputList, pageInputList) => flattenedInputList.concat(pageInputList), []\r\n    );\r\n\r\n    return [].concat(this._inputList).concat(embeddedInputs);\r\n  }\r\n\r\n  // Useful for `moveToNext` operations:  order matters.\r\n  // Note that it only includes `input` and `textarea` elements of the top-level document!\r\n  // Anything in embedded iframes was always ignored for this.\r\n  private _sortedInputs: HTMLElement[] = [];\r\n\r\n  /**\r\n   * Returns a list of the Input and Textarea elements hosted by the represented document,\r\n   * in 2D sorted order:  top to bottom, then left to right.\r\n   */\r\n  public get sortedInputs(): ReadonlyArray<HTMLElement> {\r\n    return this._sortedInputs;\r\n  }\r\n\r\n  private manualAttach: boolean;\r\n\r\n  /**\r\n   * Tracks the attachment MutationObserver.\r\n   */\r\n  private attachmentObserver: MutationObserver;\r\n\r\n  /**\r\n   * Tracks the enablement MutationObserver.\r\n   */\r\n  private enablementObserver: MutationObserver;\r\n\r\n  /**\r\n   * Tracks changes in inputmode state for attached elements.\r\n   */\r\n  private inputModeObserver: MutationObserver;\r\n\r\n  // Fields & properties done; now for the 'meat'.\r\n\r\n  /**\r\n   * Prepares the page context-attachment instance for the corresponding document.\r\n   * Does not actually attach until `.attach()` is called.\r\n   * @param document\r\n   * @param options\r\n   */\r\n  constructor(document: Document, options: PageAttachmentOptions) {\r\n    if(!document) {\r\n      throw new Error(\"Cannot attach to a null/undefined document\");\r\n    }\r\n\r\n    super();\r\n    this.options = options;\r\n    this.document = document;\r\n    this.stylesheetManager = new StylesheetManager(this.document.body);\r\n  }\r\n\r\n  // Note:  `install()` must be separate from construction - otherwise, there's no time\r\n  // interval available to attach event handlers before the attachment process begins.\r\n\r\n  /*\r\n   * Call this method **once**, when the page is fully loaded, to attach to all page elements\r\n   * eligible to serve as context for Keyman keyboard input.\r\n   */\r\n  install(manualAttach: boolean) {\r\n    // This field gets referenced by any non-design iframes detected during _SetupDocument.\r\n    // Thus, we must initialize it now.\r\n    this.manualAttach = manualAttach;\r\n    this.baseFont = this.getBaseFont();\r\n\r\n    if(!this.manualAttach) {\r\n      this._SetupDocument(this.document.documentElement);\r\n\r\n      // Create an ordered list of all input and textarea fields\r\n      this.listInputs();\r\n    }\r\n\r\n    // KMW 16.0 and before:  these were only ever established for the top-level doc, and so for\r\n    // 17.0 we'll keep it that way initially.\r\n    //\r\n    // That said, for future consideration:  enable it within iframe-internal documents too.\r\n    if(!this.options.owner) {\r\n      this.initMutationObservers(this.document, manualAttach);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     setupElementAttachment\r\n   * Scope        Private\r\n   * @param       {Element}   x   An element from the page valid for KMW attachment\r\n   * Description  Establishes the base KeymanWeb data for newly-attached elements.\r\n   *              Does not establish input hooks, which are instead handled during enablement.\r\n   */\r\n  setupElementAttachment(x: HTMLElement) {\r\n    // The `_kmwAttachment` property tag maintains all relevant KMW-maintained data regarding the element.\r\n    // It is disgarded upon de-attachment.\r\n    if(x._kmwAttachment) {\r\n      return;\r\n    } else {\r\n      // Problem:  tries to wrap IFrames that aren't design-mode.\r\n      // The elements in the contained document get separately wrapped, so this doesn't need a proper wrapper.\r\n      //\r\n      // Its attachment process might need some work.\r\n      let eleInterface = wrapElement(x);\r\n\r\n      // May should filter better for IFrames.\r\n      if(!(eleInterface || nestedInstanceOf(x, \"HTMLIFrameElement\"))) {\r\n        console.warn(\"Could not create processing interface for newly-attached element!\");\r\n      }\r\n\r\n      x._kmwAttachment = new AttachmentInfo(eleInterface, null, this.device.touchable);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     clearElementAttachment\r\n   * Scope        Private\r\n   * @param       {Element}   x   An element from the page valid for KMW attachment\r\n   * Description  Establishes the base KeymanWeb data for newly-attached elements.\r\n   *              Does not establish input hooks, which are instead handled during enablement.\r\n   */\r\n  clearElementAttachment(x: HTMLElement) {\r\n    // We need to clear the object when de-attaching; helps prevent memory leaks.\r\n    x._kmwAttachment = null;\r\n  }\r\n\r\n  /**\r\n   * Function     isKMWInput\r\n   * Scope        Private\r\n   * @param       {Element}   x   An element from the page.\r\n   * @return      {boolean}      true if the element is viable for KMW attachment.\r\n   * Description  Examines potential input elements to determine whether or not they are viable for KMW attachment.\r\n   *              Also filters elements not supported for touch devices when device.touchable == true.\r\n   */\r\n  isKMWInput(x: HTMLElement): boolean {\r\n    if(x instanceof x.ownerDocument.defaultView.HTMLTextAreaElement) {\r\n      return true;\r\n    } else if(x instanceof x.ownerDocument.defaultView.HTMLInputElement) {\r\n      if (Input.isSupportedType(x.type)) {\r\n        return true;\r\n      }\r\n    } else if(x instanceof x.ownerDocument.defaultView.HTMLIFrameElement) {\r\n      try {\r\n        if(x.contentWindow) {\r\n          const iframeDoc = x.contentWindow.document;\r\n          if(iframeDoc) { // Only allow attachment if the iframe's internal document is valid.\r\n            // Do not allow design-mode iframe attachment if in 'touch' mode.\r\n            if(this.device.touchable && iframeDoc.designMode.toLowerCase() == 'on') {\r\n              return false;\r\n            }\r\n            return true;\r\n          }\r\n        } else {\r\n          // If the element is being wholesale-deleted, the contentWindow may be gone...\r\n          // but a previously-placed attachment object may yet remain.\r\n          return !!x._kmwAttachment;\r\n        }\r\n      }\r\n      catch(err) {\r\n        /* Do not attempt to access iframes outside this site */\r\n        console.warn(\"Error during attachment to / detachment from iframe: \");\r\n        console.warn(err);\r\n      }\r\n    } else if(x.isContentEditable) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Function     isAttached\r\n   * Scope        Private\r\n   * @param       {Element}   x   An element from the page.\r\n   * @return      {boolean}       true if KMW is attached to the element, otherwise false.\r\n   */\r\n  isAttached(x: HTMLElement) {\r\n    if(x._kmwAttachment) {\r\n      return true;\r\n    }\r\n\r\n    // A non-design IFrame is 'attached' if there is a corresponding PageContextAttachment instance.\r\n    // ... which could be this one!\r\n    if(nestedInstanceOf(x, 'HTMLIFrameElement')) {\r\n      const iframe = x as HTMLIFrameElement;\r\n      if(iframe.contentDocument == this.document) {\r\n        return true;\r\n      }\r\n\r\n      // If not this one, perhaps a child?\r\n      for(let child of this.embeddedPageContexts) {\r\n        if(child.isAttached(x)) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Function     isKMWDisabled\r\n   * Scope        Private\r\n   * @param       {Element}   x   An element from the page.\r\n   * @return      {boolean}      true if the element's properties indicate a 'disabled' state.\r\n   * Description  Examines attachable elements to determine their default enablement state.\r\n   */\r\n  isKMWDisabled(x: HTMLElement): boolean {\r\n    const c = x.className;\r\n\r\n    // Exists for some HTMLElements, such as HTMLInputElement.\r\n    // @ts-ignore\r\n    if(x['readOnly']) {\r\n      return true;\r\n    } else if(c && c.indexOf('kmw-disabled') >= 0) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Function     enableInputElement\r\n   * Scope        Private\r\n   * @param       {Element}   Pelem   An element from the document to be enabled with full KMW handling.\r\n   * @param       {boolean=}   isAlias A flag that indicates if the element is a simulated input element for touch.\r\n   * Description  Performs the basic enabling setup for one element and adds it to the inputList if it is an input element.\r\n   *              Note that this method is called for both desktop and touch control routes; the touch route calls it from within\r\n   *              enableTouchElement as it must first establish the simulated touch element to serve as the alias \"input element\" here.\r\n   *              Note that the 'kmw-disabled' property is managed by the MutationObserver and by the surface API calls.\r\n   */\r\n  enableInputElement(Pelem: HTMLElement) {\r\n    if(!this.isKMWDisabled(Pelem)) {\r\n      if(Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement) {\r\n        this._AttachToIframe(Pelem);\r\n      } else {\r\n        this.setupElementAttachment(Pelem);\r\n\r\n        Pelem._kmwAttachment.inputMode = Pelem.inputMode ?? 'text';\r\n        this.disableInputModeObserver();\r\n        // ensures that the system keyboard doesn't show on mobile devices.\r\n        Pelem.inputMode = 'none';\r\n        this.enableInputModeObserver();\r\n\r\n        Pelem.classList.add('keymanweb-font');\r\n        this._inputList.push(Pelem);\r\n\r\n        this.emit('enabled', Pelem);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function     disableInputElement\r\n   * Scope        Private\r\n   * @param       {Element}   Pelem   An element from the document to be enabled with full KMW handling.\r\n   * @param       {boolean=}   isAlias A flag that indicates if the element is a simulated input element for touch.\r\n   * Description  Inverts the process of enableInputElement, removing all event-handling from the element.\r\n   *              Note that the 'kmw-disabled' property is managed by the MutationObserver and by the surface API calls.\r\n   */\r\n  disableInputElement(Pelem: HTMLElement) {\r\n    if(!Pelem) {\r\n      return;\r\n    }\r\n\r\n    // Do NOT test for pre-disabledness - we also use this to fully detach without officially 'disabling' via kmw-disabled.\r\n    if((Pelem.ownerDocument.defaultView && Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement) ||\r\n        Pelem instanceof HTMLIFrameElement) {\r\n      this._DetachFromIframe(Pelem);\r\n    } else {\r\n      if(this.isAttached(Pelem)) {\r\n        const intendedInputMode = Pelem._kmwAttachment?.inputMode;\r\n\r\n        this.disableInputModeObserver();\r\n        // restores the last-known setting before KMW forced it to 'none'.\r\n        // Refer to enableInputElement.\r\n        Pelem.inputMode = intendedInputMode;\r\n        this.enableInputModeObserver();\r\n      }\r\n\r\n      let cnIndex = Pelem.className.indexOf('keymanweb-font');\r\n      if(cnIndex >= 0) { // See note about the alias below.\r\n        Pelem.className = Pelem.className.replace('keymanweb-font', '').trim();\r\n      }\r\n\r\n      // Remove the element from our internal input tracking.\r\n      var index = this.inputList.indexOf(Pelem);\r\n      if(index > -1) {\r\n        this._inputList.splice(index, 1);\r\n      }\r\n      this.emit('disabled', Pelem);\r\n    }\r\n\r\n    return;\r\n  };\r\n\r\n  //#region Prime for removal! ----------------------\r\n\r\n  // TODO:  I missed this before, but the 'enable' and 'disable' `TouchElement` method variants should\r\n  // be 100% safe to remove now that touch-aliases are out!\r\n  //\r\n  // I've pre-emptively removed the `touchEnabled` flag, since the handlers are already so pruned as to make\r\n  // said flag unnecessary.\r\n\r\n  /**\r\n   * Function     enableTouchElement\r\n   * Scope        Private\r\n   * @param       {Element}  Pelem   An input or textarea element from the page.\r\n   * @return      {boolean}  Returns true if it creates a simulated input element for Pelem; false if not.\r\n   * Description  Creates a simulated input element for the specified INPUT or TEXTAREA, comprising:\r\n   *              an outer DIV, matching the position, size and style of the base element\r\n   *              a scrollable DIV within that outer element\r\n   *              two SPAN elements within the scrollable DIV, to hold the text before and after the caret\r\n   *\r\n   *              The left border of the second SPAN is flashed on and off as a visible caret\r\n   *\r\n   *              Also ensures the element is registered on keymanweb's internal input list.\r\n   */\r\n  enableTouchElement(Pelem: HTMLElement) {\r\n    if(this.isKMWDisabled(Pelem)) {\r\n      this.emit('disabled', Pelem);\r\n      return false;\r\n    }\r\n\r\n    if(!this.isAttached(Pelem)) {\r\n      this.setupElementAttachment(Pelem);\r\n    }\r\n\r\n    // Set font for base element\r\n    this.enableInputElement(Pelem);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Function     disableTouchElement\r\n   * Scope        Private\r\n   * @param       {Element}  Pelem   An input or textarea element from the page.\r\n   * Description  Destroys the simulated input element for the specified INPUT or TEXTAREA and reverts\r\n   *              back to desktop-style 'enablement' for the base control.\r\n   */\r\n  disableTouchElement(Pelem: HTMLElement) {\r\n    // Do not check for the element being officially disabled - it's also used for detachment.\r\n    if(this.isAttached(Pelem)) {\r\n      const intendedInputMode = Pelem._kmwAttachment.inputMode;\r\n\r\n      this.disableInputModeObserver();\r\n      Pelem.inputMode = intendedInputMode;\r\n      this.enableInputModeObserver();\r\n    }\r\n  }\r\n\r\n  //#endregion Prime for removal! ----------------------\r\n\r\n  /**\r\n   * The core method for a MutationObserver that checks for changes to the `.inputMode` property\r\n   * of controls that KMW is attached to in touch mode.\r\n   *\r\n   * In touch mode, KMW requires that their `.inputMode` property be set to 'none' in order\r\n   * to hide the device's default OSK.  That said, we should still aim to honor the setting\r\n   * and restore it if and when detachment occurs.  Should we ever support intents, we'll want\r\n   * to utilize the incoming value for use with that feature too.\r\n   */\r\n  private _InputModeObserverCore = (mutations: MutationRecord[]) => {\r\n    // Prevent infinite recursion from any changes / updates made within the observation handler.\r\n    this.disableInputModeObserver();\r\n    try {\r\n      for(const mutation of mutations) {\r\n        const target = mutation.target as HTMLElement;\r\n        if(!this.isAttached(target)) {\r\n          continue;\r\n        }\r\n\r\n        target._kmwAttachment.inputMode = target.inputMode;\r\n\r\n        if(this.device.touchable) {\r\n          target.inputMode = 'none';\r\n        }\r\n      }\r\n    } finally {\r\n      this.enableInputModeObserver();\r\n    }\r\n  };\r\n\r\n  /**\r\n     * Function     _AttachToIframe\r\n     * Scope        Private\r\n     * @param       {Element}      Pelem       IFrame to which KMW will be attached\r\n     * Description  Attaches KeymanWeb to IFrame\r\n     */\r\n  _AttachToIframe(Pelem: HTMLIFrameElement) {\r\n    try {\r\n      const Lelem=Pelem.contentWindow.document;\r\n      /* editable Iframe */\r\n      if(Lelem) {\r\n        if(Lelem.designMode.toLowerCase() == 'on') {\r\n          // Set up a reference alias; the internal document will need the same attachment info!\r\n          this.setupElementAttachment(Pelem);\r\n          Lelem.body._kmwAttachment = Pelem._kmwAttachment;\r\n\r\n          this._inputList.push(Pelem);\r\n          this.emit('enabled', Pelem);\r\n        } else {\r\n          // If already attached, do not attempt to attach again.\r\n          if(this.embeddedPageContexts.filter((context) => context.document == Lelem).length == 0) {\r\n            // Lelem is the IFrame's internal document; set 'er up!\r\n            let embeddedPageAttachment = new PageContextAttachment(Lelem, {\r\n              ...this.options,\r\n              owner: Pelem\r\n            });\r\n\r\n            this.embeddedPageContexts.push(embeddedPageAttachment);\r\n            // Forward any attached elements from the embedded page as if we attached them directly.\r\n            embeddedPageAttachment.on('enabled',  (elem) => this.emit('enabled',  elem));\r\n            embeddedPageAttachment.on('disabled', (elem) => this.emit('disabled', elem));\r\n\r\n            embeddedPageAttachment.install(this.manualAttach);\r\n          }\r\n        }\r\n      }\r\n    } catch(err) {\r\n      // do not attempt to attach to the iframe as it is from another domain - XSS denied!\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     _DetachFromIframe\r\n   * Scope        Private\r\n   * @param       {Element}      Pelem       IFrame to which KMW will be attached\r\n   * Description  Detaches KeymanWeb from an IFrame\r\n   */\r\n  _DetachFromIframe(Pelem: HTMLIFrameElement) {\r\n    const detachFromDesignIframe = () => {\r\n      this.clearElementAttachment(Pelem);\r\n\r\n      let index = this._inputList.indexOf(Pelem);\r\n      if(index != -1) {\r\n        this._inputList.splice(index, 1);\r\n      }\r\n      this.emit('disabled', Pelem);\r\n    }\r\n\r\n    try {\r\n      const Lelem=Pelem.contentWindow.document;\r\n      /* editable Iframe */\r\n      if(Lelem) {\r\n        if(Lelem.designMode.toLowerCase() == 'on') {\r\n          // Remove the reference to our prior attachment data!\r\n          Lelem.body._kmwAttachment = null; // is an extra step needed for this case.\r\n\r\n          detachFromDesignIframe();\r\n        } else {\r\n          // If already attached, do not attempt to attach again.\r\n          for(let i=0; i < this.embeddedPageContexts.length; i++) {\r\n            if(this.embeddedPageContexts[i].document == Lelem) {\r\n              // Pops the entry from the array and maintains a reference to it.\r\n              const embeddedPageAttachment = this.embeddedPageContexts.splice(i, 1)[0];\r\n\r\n              embeddedPageAttachment._ClearDocument(Lelem.body); // I2404 - Manage IE events in IFRAMEs\r\n              // The events defined in _AttachToIframe will still forward during `shutdown`.\r\n              embeddedPageAttachment.shutdown();\r\n\r\n              // Also, remove child attachment-engine, too.\r\n              this.embeddedPageContexts.splice(i, 1);\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } catch(err) {\r\n      // If we were previously attached but the content doc/window have been unloaded,\r\n      // we can at least address attachment via the attachment object.\r\n      if(Pelem._kmwAttachment) {\r\n        detachFromDesignIframe();\r\n      }\r\n\r\n      // Otherwise, do not attempt to attach to/detach from the iframe;\r\n      // as it's likely from another domain - XSS denied!\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     attachToControl\r\n   * Scope        Public\r\n   * @param       {Element}    Pelem       Element to which KMW will be attached\r\n   * Description  Attaches KMW to control (or IFrame)\r\n   */\r\n  attachToControl(Pelem: HTMLElement) {\r\n    var touchable = this.device.touchable;\r\n\r\n    // Exception for IFrame elements, in case of async loading issues.  (Fixes fun iframe loading bug with Chrome.)\r\n    if(this.isAttached(Pelem) && !(Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement)) {\r\n      return; // We're already attached.\r\n    }\r\n\r\n    if(this.isKMWInput(Pelem)) {\r\n      if(this.isKMWDisabled(Pelem)) {\r\n        // Future improvement - go ahead and attach, but in disabled state?\r\n        // Can't use `enableControl` later without that... or without the page\r\n        // directly manipulating `kmw-disabled`, anyway.\r\n        // Note:  this idea may require some shuffling of iframe-related handling\r\n        // to handle everything cleanly.\r\n        this.emit('disabled', Pelem);\r\n      } else {\r\n        if(touchable) {\r\n          this.enableTouchElement(Pelem);\r\n        } else {\r\n          this.enableInputElement(Pelem);\r\n        }\r\n      }\r\n    } else if(touchable) {\r\n      // Maybe an 'invalid' instead?\r\n      this.emit('disabled', Pelem);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     detachFromControl\r\n   * Scope        Public\r\n   * @param       {Element}    Pelem       Element from which KMW will detach\r\n   * Description  Detaches KMW from a control (or IFrame)\r\n   */\r\n  detachFromControl(Pelem: HTMLElement) {\r\n    if(!(this.isAttached(Pelem) || Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement)) {\r\n      return;  // We never were attached.\r\n    }\r\n\r\n    // #1 - if element is enabled, disable it.  But don't manipulate the 'kmw-disabled' tag.\r\n    if(this.isKMWInput(Pelem)) {\r\n      // Is it already disabled?\r\n      if(!this.isKMWDisabled(Pelem)) {\r\n        this._DisableControl(Pelem);\r\n      }\r\n    }\r\n\r\n    // #2 - clear attachment data.\r\n    this.clearElementAttachment(Pelem);\r\n  }\r\n\r\n  /**\r\n   * Function     _DisableControl\r\n   * Scope        Private\r\n   * @param       {Element}      Pelem       Element to be disabled\r\n   * Description  Disable KMW control element\r\n   */\r\n  _DisableControl(Pelem: HTMLElement) {\r\n    // Only operate on attached elements!  Non-design-mode IFrames don't get attachment markers, so we check them specifically instead.\r\n    if(this.isAttached(Pelem) || Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement) {\r\n      if(this.device.touchable) {\r\n        this.disableTouchElement(Pelem);\r\n      }\r\n\r\n      this.listInputs(); // Fix up our internal input ordering scheme.\r\n      this.disableInputElement(Pelem);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     _EnableControl\r\n   * Scope        Private\r\n   * @param       {Element}    Pelem   Element to be enabled\r\n   * Description  Enable KMW control element\r\n   */\r\n  _EnableControl(Pelem: HTMLElement) {\r\n    if(this.isAttached(Pelem)) { // Only operate on attached elements!\r\n      if(this.device.touchable) {\r\n        this.enableTouchElement(Pelem);\r\n\r\n      } else {\r\n        this.enableInputElement(Pelem);\r\n      }\r\n\r\n      this.listInputs();\r\n    } else if(nestedInstanceOf(Pelem, \"HTMLIFrameElement\")) {\r\n      // Future fix idea for this case:  when disabling a normal-iframe, keep the child instance.\r\n      // Just call 'shutdown' on it.  Then, re-'install' here.\r\n      // Current architecture unfortunately conflates 'enable' and 'detach' for iframes, though. :(\r\n      // Should be 'easy enough' to address if and when the time comes.\r\n      // But for now, this'll keep things smoothed over.\r\n      this._AttachToIframe(Pelem as HTMLIFrameElement);\r\n    }\r\n  }\r\n\r\n\r\n  /**\r\n   * Function     disableControl\r\n   * Scope        Public\r\n   * @param       {Element}      Pelem       Element to be disabled\r\n   * Description  Disables a KMW control element\r\n   */\r\n  disableControl(Pelem: HTMLElement) {\r\n    if(!this.isAttached(Pelem)) {\r\n      console.warn(\"KeymanWeb is not attached to element \" + Pelem);\r\n    }\r\n\r\n    var cn = Pelem.className;\r\n    if(cn.indexOf('kmw-disabled') < 0) { // if not already explicitly disabled...\r\n      Pelem.className = cn ? cn + ' kmw-disabled' : 'kmw-disabled';\r\n    }\r\n\r\n    // The rest is triggered within MutationObserver code.\r\n    // See _EnablementMutationObserverCore.\r\n  }\r\n\r\n  /**\r\n   * Function     enableControl\r\n   * Scope        Public\r\n   * @param       {Element}      Pelem       Element to be disabled\r\n   * Description  Disables a KMW control element\r\n   */\r\n  enableControl(Pelem: HTMLElement) {\r\n    // Current architecture unfortunately conflates 'enable' and 'detach' for iframes, so a\r\n    // disabled iframe appears detached.\r\n    if(!this.isAttached(Pelem) && !nestedInstanceOf(Pelem, \"HTMLIFrameElement\")) {\r\n      console.warn(\"KeymanWeb is not attached to element \" + Pelem);\r\n    }\r\n\r\n    var cn = Pelem.className;\r\n    var tagIndex = cn.indexOf('kmw-disabled');\r\n    if(tagIndex >= 0) { // if already explicitly disabled...\r\n      Pelem.className = cn.replace('kmw-disabled', '').trim();\r\n    }\r\n\r\n    // The rest is triggered within MutationObserver code.\r\n    // See _EnablementMutationObserverCore.\r\n  }\r\n\r\n  // Create an ordered list of all text and search input elements and textarea elements\r\n  // except any tagged with class 'kmw-disabled'\r\n  // TODO: email and url types should perhaps use default keyboard only\r\n  listInputs() {\r\n    let eList: SortableInput[]=[];\r\n    let t1=document.getElementsByTagName('input');\r\n    let t2=document.getElementsByTagName('textarea');\r\n\r\n    for(let i=0; i<t1.length; i++) {\r\n      if (Input.isSupportedType(t1[i].type) && t1[i].className.indexOf('kmw-disabled') < 0) {\r\n        eList.push({ip:t1[i], x: getAbsoluteX(t1[i]), y: getAbsoluteY(t1[i])});\r\n      }\r\n    }\r\n\r\n    for(let i=0; i<t2.length; i++) {\r\n      if(t2[i].className.indexOf('kmw-disabled') < 0) {\r\n        eList.push({ip:t2[i], x: getAbsoluteX(t2[i]), y: getAbsoluteY(t2[i])});\r\n      }\r\n    }\r\n\r\n    // Sort elements by Y then X\r\n    eList.sort((e1, e2) => {\r\n      if(e1.y != e2.y) {\r\n        return e1.y-e2.y;\r\n      }\r\n      return e1.x-e2.x;\r\n    });\r\n\r\n    // Create a new list of sorted elements\r\n    let tList: HTMLElement[] = [];\r\n    for(let i=0; i<eList.length; i++) {\r\n      tList.push(eList[i].ip);\r\n    }\r\n\r\n    // Return the sorted element list\r\n    this._sortedInputs=tList;\r\n  }\r\n\r\n  /**\r\n   * Move focus to next (or previous) input or text area element on TAB\r\n   *   Uses list of actual input elements\r\n   *\r\n   *   Note that activeElement() on touch devices returns the DIV that overlays\r\n   *   the input element, not the element itself.\r\n   *\r\n   * @param      {number|boolean}  bBack     Direction to move (0 or 1)\r\n   */\r\n  findNeighboringInput(activeBase: HTMLElement, bBack: number|boolean) {\r\n    var i,t=this.sortedInputs;\r\n\r\n    if(t.length == 0) {\r\n      return null;\r\n    }\r\n\r\n    // Identify the active element in the list of inputs ordered by position\r\n    for(i=0; i<t.length; i++) {\r\n      if(t[i] == activeBase) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // If the array is empty or does not hold the element, reverse by one so that\r\n    // either the last (bBack: true) or the first (bBack: false) element is selected.\r\n    if(i == t.length && !bBack) { // otherwise, ... \"or the second\".\r\n      i--;\r\n    }\r\n\r\n    // Find the next (or previous) element in the list\r\n    i = bBack ? i-1 : i+1;\r\n    // Treat the list as circular, wrapping the index if necessary.\r\n    i = i >= t.length ? i-t.length : i;\r\n    i = i < 0 ? i+t.length : i;\r\n\r\n    return t[i];\r\n  }\r\n\r\n\r\n  /**\r\n   * Function     _GetDocumentEditables\r\n   * Scope        Private\r\n   * @param       {Element}     Pelem     HTML element\r\n   * @return      {Array<Element>}        A list of potentially-editable controls.  Further filtering [as with isKMWInput() and\r\n   *                                      isKMWDisabled()] is required.\r\n   */\r\n  private _GetDocumentEditables(Pelem: HTMLElement): (HTMLElement)[] {\r\n    let possibleInputs: (HTMLElement)[] = [];\r\n\r\n    // Document.ownerDocument === null, so we better check that it's not null before proceeding.\r\n    if(Pelem.ownerDocument && Pelem instanceof Pelem.ownerDocument.defaultView.HTMLElement) {\r\n      let dv = Pelem.ownerDocument.defaultView;\r\n\r\n      if(Pelem instanceof dv.HTMLInputElement || Pelem instanceof dv.HTMLTextAreaElement) {\r\n        possibleInputs.push(Pelem);\r\n      } else if(Pelem instanceof dv.HTMLIFrameElement) {\r\n        possibleInputs.push(Pelem);\r\n      }\r\n    }\r\n\r\n    // Constructing it like this also allows for individual element filtering for the auto-attach MutationObserver without errors.\r\n    if(Pelem.getElementsByTagName) {\r\n      /**\r\n       * Function     LiTmp\r\n       * Scope        Private\r\n       * @param       {string}    _colon    type of element\r\n       * @return      {Array<Element>}  array of elements of specified type\r\n       * Description  Local function to get list of editable controls\r\n       */\r\n      var LiTmp = function(_colon: string): HTMLElement[] {\r\n        return arrayFromNodeList(Pelem.getElementsByTagName(_colon));\r\n      };\r\n\r\n      // Note that isKMWInput() will block IFRAME elements as necessary for touch-based devices.\r\n      possibleInputs = possibleInputs.concat(LiTmp('INPUT'), LiTmp('TEXTAREA'), LiTmp('IFRAME'));\r\n    }\r\n\r\n    // Not all active browsers may support the method, but only those that do would work with contenteditables anyway.\r\n    if(Pelem.querySelectorAll) {\r\n      possibleInputs = possibleInputs.concat(arrayFromNodeList(Pelem.querySelectorAll('[contenteditable]')));\r\n    }\r\n\r\n    if(Pelem.ownerDocument && Pelem instanceof Pelem.ownerDocument.defaultView.HTMLElement && Pelem.isContentEditable) {\r\n      possibleInputs.push(Pelem);\r\n    }\r\n\r\n    return possibleInputs;\r\n  }\r\n\r\n  /**\r\n   * Function     _SetupDocument\r\n   * Scope        Private\r\n   * @param       {Element}     Pelem - the root element of a document, including IFrame documents.\r\n   * Description  Used to automatically attach KMW to editable controls, regardless of control path.\r\n   */\r\n  private _SetupDocument(Pelem: HTMLElement) { // I1961\r\n    let possibleInputs = this._GetDocumentEditables(Pelem);\r\n\r\n    for(var Li = 0; Li < possibleInputs.length; Li++) {\r\n      // It knows how to handle pre-loaded iframes appropriately.\r\n      this.attachToControl(possibleInputs[Li]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     _ClearDocument\r\n   * Scope        Private\r\n   * @param       {Element}     Pelem - the root element of a document, including IFrame documents.\r\n   * Description  Used to automatically detach KMW from editable controls, regardless of control path.\r\n   *              Mostly used to clear out all controls of a detached IFrame.\r\n   */\r\n  private _ClearDocument(Pelem: HTMLElement) { // I1961\r\n    let possibleInputs = this._GetDocumentEditables(Pelem);\r\n\r\n    for(var Li = 0; Li < possibleInputs.length; Li++) {\r\n      // It knows how to handle pre-loaded iframes appropriately.\r\n      this.detachFromControl(possibleInputs[Li]);\r\n    }\r\n  }\r\n\r\n\r\n  _EnablementMutationObserverCore = (mutations: MutationRecord[]) => {\r\n    for(var i=0; i < mutations.length; i++) {\r\n      var mutation = mutations[i];\r\n\r\n      // ( ? : ) needed as a null check.\r\n      var disabledBefore = mutation.oldValue ? mutation.oldValue.indexOf('kmw-disabled') >= 0 : false;\r\n      var disabledAfter = (mutation.target as HTMLElement).className.indexOf('kmw-disabled') >= 0;\r\n\r\n      if(disabledBefore && !disabledAfter) {\r\n        this._EnableControl(mutation.target as HTMLElement);\r\n      } else if(!disabledBefore && disabledAfter) {\r\n        this._DisableControl(mutation.target as HTMLElement);\r\n      }\r\n\r\n      // 'readonly' triggers on whether or not the attribute exists, not its value.\r\n      if(!disabledAfter && mutation.attributeName == \"readonly\") {\r\n        var readonlyBefore = mutation.oldValue ? mutation.oldValue != null : false;\r\n        var elem = mutation.target;\r\n\r\n        if(elem instanceof elem.ownerDocument.defaultView.HTMLInputElement\r\n            || elem instanceof elem.ownerDocument.defaultView.HTMLTextAreaElement) {\r\n          var readonlyAfter = elem.readOnly;\r\n\r\n          if(readonlyBefore && !readonlyAfter) {\r\n            this._EnableControl(mutation.target as HTMLElement);\r\n          } else if(!readonlyBefore && readonlyAfter) {\r\n            this._DisableControl(mutation.target as HTMLElement);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  _AutoAttachObserverCore = (mutations: MutationRecord[]) => {\r\n    var inputElementAdditions: HTMLElement[] = [];\r\n    var inputElementRemovals: HTMLElement[] = [];\r\n\r\n    for(var i=0; i < mutations.length; i++) {\r\n      let mutation = mutations[i];\r\n\r\n      for(var j=0; j < mutation.addedNodes.length; j++) {\r\n        inputElementAdditions = inputElementAdditions.concat(this._GetDocumentEditables(mutation.addedNodes[j] as HTMLElement));\r\n      }\r\n\r\n      for(j = 0; j < mutation.removedNodes.length; j++) {\r\n        inputElementRemovals = inputElementRemovals.concat(this._GetDocumentEditables(mutation.removedNodes[j] as HTMLElement));\r\n      }\r\n    }\r\n\r\n    for(var k = 0; k < inputElementAdditions.length; k++) {\r\n      if(this.isKMWInput(inputElementAdditions[k])) { // Apply standard element filtering!\r\n        this._MutationAdditionObserved(inputElementAdditions[k]);\r\n      }\r\n    }\r\n\r\n    for(k = 0; k < inputElementRemovals.length; k++) {\r\n      let matched = false;\r\n      const elem = inputElementRemovals[k];\r\n\r\n      // Note:  for iframes, .contentWindow has already been deleted by this point!\r\n      if(elem instanceof elem.ownerDocument.defaultView.HTMLIFrameElement) {\r\n        // Non-design iframes\r\n        for(let i = 0; i < this.embeddedPageContexts.length; i++) {\r\n          if(this.embeddedPageContexts[i].options.owner == elem) {\r\n            // we can't do the standard detachment anymore, since the document and its elements\r\n            // have been obliterated.  BUT!  We still have our .inputList and can handle\r\n            // things that way!\r\n            this.embeddedPageContexts[i].shutdown();\r\n\r\n            // Also, remove the child attachment-engine, too.\r\n            this.embeddedPageContexts.splice(i, 1);\r\n            matched = true;\r\n            break;\r\n          }\r\n        }\r\n\r\n        if(!matched) {\r\n          // Time to check for design-mode iframe attachment...\r\n          for(let i = 0; i < this._inputList.length; i++) {\r\n            if(this._inputList[i] == elem) {\r\n              // We have a match!  Fortunately, this case is simpler from here.\r\n              this.detachFromControl(elem);\r\n\r\n              // Since the iframe itself was removed from the hierarchy, the detachment\r\n              // design-mode check will likely fail.  Double-check for robustness, but\r\n              // we'll need to tidy up our _inputList here.\r\n              if(this._inputList[i] == elem) {\r\n                this._inputList.splice(i, 1);\r\n              }\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      } else if(this.isKMWInput(elem)) {\r\n        this._MutationRemovalObserved(elem);\r\n      }\r\n    }\r\n\r\n    /* After all mutations have been handled, we need to recompile our .sortedInputs array, but only\r\n      * if any have actually occurred.\r\n      */\r\n    if(inputElementAdditions.length || inputElementRemovals.length) {\r\n      if(!this.device.touchable) {\r\n        this.listInputs();\r\n      } else if(this.device.touchable) {   // If something was added or removed, chances are it's gonna mess up our touch-based layout scheme, so let's update the touch elements.\r\n        window.setTimeout(() => {\r\n          this.listInputs();\r\n        }, 1);\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Function     _MutationAdditionObserved\r\n   * Scope        Private\r\n   * @param       {Element}  Pelem     A page input, textarea, or iframe element.\r\n   * Description  Used by the MutationObserver event handler to properly setup any elements dynamically added to the document post-initialization.\r\n   *\r\n   */\r\n  _MutationAdditionObserved = (Pelem: HTMLElement) => {\r\n    if(Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement) {\r\n      //Problem:  the iframe is loaded asynchronously, and we must wait for it to load fully before hooking in.\r\n\r\n      const attachFunctor = () => {  // Triggers at the same time as iframe's onload property, after its internal document loads.\r\n        // Provide a minor delay to allow 'load' event handlers to set the design-mode property.\r\n        window.setTimeout(() => {\r\n          this.attachToControl(Pelem);\r\n        }, 1);\r\n      };\r\n\r\n      Pelem.addEventListener('load', attachFunctor);\r\n\r\n      // The following block breaks for design-mode iframes, at least in Chrome; a blank document may exist\r\n      // before the load of the desired actual document.\r\n      //\r\n      // /* If the iframe has somehow already loaded, we can't expect the onload event to be raised.  We ought just\r\n      // * go ahead and perform our callback's contents.\r\n      // *\r\n      // * keymanweb.domManager.attachToControl() is now idempotent, so even if our call 'whiffs', it won't cause long-lasting\r\n      // * problems.\r\n      // */\r\n      // if(Pelem.contentDocument.readyState == 'complete') {\r\n      //   window.setTimeout(attachFunctor, 1);\r\n      // }\r\n    } else {\r\n      this.attachToControl(Pelem);\r\n    }\r\n  }\r\n\r\n  // Used by the mutation event handler to properly decouple any elements dynamically removed from the document.\r\n  _MutationRemovalObserved = (Pelem: HTMLElement) => {\r\n    this.detachFromControl(Pelem); // Remove all KMW event hooks, styling.\r\n  }\r\n\r\n  // To be called by the object responsible for webpage-integration.\r\n  initMutationObservers(document: Document, manualAttach: boolean) {\r\n    if(typeof MutationObserver == 'function') {\r\n      var observationTarget = document.querySelector('body'), observationConfig: MutationObserverInit;\r\n      if(!manualAttach) { //I1961\r\n        observationConfig = { childList: true, subtree: true};\r\n        this.attachmentObserver = new MutationObserver(this._AutoAttachObserverCore);\r\n        this.attachmentObserver.observe(observationTarget, observationConfig);\r\n      }\r\n\r\n      /*\r\n        * Setup of handlers for dynamic detection of the kmw-disabled class tag that controls enablement.\r\n        */\r\n      observationConfig = { subtree: true, attributes: true, attributeOldValue: true, attributeFilter: ['class', 'readonly']};\r\n      this.enablementObserver = new MutationObserver(this._EnablementMutationObserverCore);\r\n      this.enablementObserver.observe(observationTarget, observationConfig);\r\n\r\n      this.inputModeObserver = new MutationObserver(this._InputModeObserverCore);\r\n      this.enableInputModeObserver();\r\n    } else {\r\n      console.warn(\"Your browser is outdated and does not support MutationObservers, a web feature \" +\r\n        \"needed by KeymanWeb to support dynamically-added elements.\");\r\n    }\r\n  }\r\n\r\n  enableInputModeObserver() {\r\n    const observationTarget = document.querySelector('body');\r\n    const observationConfig = { subtree: true, attributes: true, attributeFilter: ['inputmode'] };\r\n    this.inputModeObserver?.observe(observationTarget, observationConfig);\r\n  }\r\n\r\n  disableInputModeObserver() {\r\n    this.inputModeObserver?.disconnect();\r\n  }\r\n\r\n  /**\r\n   * Get the user-specified (or default) font for the first mapped input or textarea element\r\n   * before applying any keymanweb styles or classes\r\n   *\r\n   *  @return   {string}\r\n   */\r\n  getBaseFont() {\r\n    var ipInput = document.getElementsByTagName<'input'>('input'),\r\n        ipTextArea=document.getElementsByTagName<'textarea'>('textarea'),\r\n        n=0,fs,fsDefault='Arial,sans-serif';\r\n\r\n    // Find the first input element (if it exists)\r\n    if(ipInput.length == 0 && ipTextArea.length == 0) {\r\n      n=0;\r\n    } else if(ipInput.length > 0 && ipTextArea.length == 0) {\r\n      n=1;\r\n    } else if(ipInput.length == 0 && ipTextArea.length > 0) {\r\n      n=2;\r\n    } else {\r\n      var firstInput = ipInput[0];\r\n      var firstTextArea = ipTextArea[0];\r\n\r\n      if(firstInput.offsetTop < firstTextArea.offsetTop) {\r\n        n=1;\r\n      } else if(firstInput.offsetTop > firstTextArea.offsetTop) {\r\n        n=2;\r\n      } else if(firstInput.offsetLeft < firstTextArea.offsetLeft) {\r\n        n=1;\r\n      } else if(firstInput.offsetLeft > firstTextArea.offsetLeft) {\r\n        n=2;\r\n      }\r\n    }\r\n\r\n    // Grab that font!\r\n    switch(n) {\r\n      case 0:\r\n        fs=fsDefault;\r\n        break;\r\n      case 1:\r\n        fs = getComputedStyle(ipInput[0]).fontFamily || '';\r\n        break;\r\n      case 2:\r\n        fs = getComputedStyle(ipTextArea[0]).fontFamily || '';\r\n        break;\r\n    }\r\n    if(typeof(fs) == 'undefined' || fs == 'monospace') {\r\n      fs=fsDefault;\r\n    }\r\n\r\n    return fs;\r\n  }\r\n\r\n  /**\r\n   *  Add or replace the style sheet used to set the font for input elements\r\n   *\r\n   *  @param  {Object}  kfd   KFont font descriptor\r\n   *  @return {string}\r\n   *\r\n   **/\r\n  buildAttachmentFontStyle(keyboardFontDescriptor: InternalKeyboardFont): string {\r\n    let kfd = keyboardFontDescriptor;\r\n\r\n    // Get name of font to be applied\r\n    let fontName = this.baseFont;\r\n    if (kfd && typeof (kfd.family) != 'undefined') {\r\n      fontName = kfd['family']; // If we have a font set by the keyboard, prioritize that over the base font.\r\n    }\r\n\r\n    // Unquote font name in base font (if quoted)\r\n    fontName = fontName.replace(/\\u0022/g, '');\r\n\r\n    // Set font family chain for mapped elements and remove any double quotes\r\n    // font-family:  maintains the base font as a fallback.\r\n    var rx = new RegExp('\\\\s?' + fontName + ',?'), fontFamily = this.appliedFont.replace(/\\u0022/g, '');\r\n\r\n    // Remove base font name from chain if present\r\n    fontFamily = fontFamily.replace(rx, '');\r\n    fontFamily = fontFamily.replace(/,$/, '');\r\n\r\n    // Then replace it at the head of the chain\r\n    if (fontFamily == '') {\r\n      fontFamily = fontName;\r\n    } else {\r\n      fontFamily = fontName + ',' + fontFamily;\r\n    }\r\n\r\n    // Re-insert quotes around individual font names\r\n    fontFamily = '\"' + fontFamily.replace(/\\,\\s?/g, '\",\"') + '\"';\r\n\r\n    // Add to the stylesheet, quoted, and with !important to override any explicit style\r\n    let s = '.keymanweb-font{\\nfont-family:' + fontFamily + ' !important;\\n}\\n';\r\n\r\n    // Store the current font chain (with quote-delimited font names)\r\n    this.appliedFont = fontFamily;\r\n\r\n    // Return the style string\r\n    return s;\r\n  }\r\n\r\n  setAttachmentFont(\r\n    keyboardFontDescriptor: InternalKeyboardFont,\r\n    fontRoot: string,\r\n    os: DeviceSpec.OperatingSystem\r\n  ) {\r\n    this.stylesheetManager.unlinkAll();\r\n    this.stylesheetManager.addStyleSheetForFont(keyboardFontDescriptor, fontRoot, os);\r\n    this.stylesheetManager.linkStylesheet(createStyleSheet(this.buildAttachmentFontStyle(keyboardFontDescriptor)));\r\n\r\n    // Future note:  might be worth propagating to any child documents (embedded iframes) via\r\n    // our child instances of this class. (via `this.embeddedPageContexts`)\r\n  }\r\n\r\n  shutdown() {\r\n    try {\r\n      this.enablementObserver?.disconnect();\r\n      this.attachmentObserver?.disconnect();\r\n      this.inputModeObserver?.disconnect();\r\n      this.stylesheetManager?.unlinkAll();\r\n\r\n      /*\r\n       * Part of shutdown involves detaching from elements... which typically does involve\r\n       * restoring the original `inputMode` settings.  Remove the observer reference after\r\n       * disconnection to prevent any further disable-enable actions.\r\n       *\r\n       * The others aren't toggled, so they're fine to leave.\r\n       */\r\n      this.inputModeObserver = null;\r\n\r\n      // Embedded pages first - that way, each page can handle its own inputs, rather than having\r\n      // the top-level instance handle all attached elements.\r\n      // (inputList enumerates child pages, too!)\r\n      this.embeddedPageContexts.forEach((embeddedPage) => {\r\n        try {\r\n          embeddedPage.shutdown();\r\n        } catch (e) {}\r\n      });\r\n\r\n      for(let input of this.inputList) {\r\n        try {\r\n          this.detachFromControl(input);\r\n        } catch(e) {\r\n          // If the element was within an iframe's document AND the iframe itself was\r\n          // removed, we can no longer read the element's properties.\r\n          // `.isKMWInput()` may throw an error then.\r\n          this.emit('disabled', input);\r\n        }\r\n      }\r\n      this._inputList = [];\r\n    } catch (e) {\r\n      console.error(\"Error occurred during shutdown\");\r\n      console.error(e);\r\n    }\r\n  }\r\n}\r\n",
    "import { EventEmitter } from \"eventemitter3\";\r\n\r\n/**\r\n * The return object documented for\r\n * https://help.keyman.com/developer/engine/web/16.0/reference/core/getUIState.\r\n *\r\n * As it has long been documented in this format, property names should not be adjusted!\r\n */\r\nexport class FocusStateAPIObject {\r\n  /**\r\n   * Indicates that KMW is in a state of actively restoring focus to a previously-active element.\r\n   */\r\n  activated: boolean;\r\n\r\n  /**\r\n   * Indicates that KMW is actively maintaining focus on the currently active OutputTarget control\r\n   * while some UI element (the OSK, a keyboard-change UI) is the current focus of user-interaction.\r\n   */\r\n  activationPending: boolean;\r\n\r\n  constructor(pending: boolean, activated: boolean) {\r\n    this.activationPending = pending;\r\n    this.activated = activated;\r\n  }\r\n}\r\n\r\ninterface EventMap {\r\n  /**\r\n   * Called immediately after the `maintainingFocus` flag is cleared.\r\n   * @returns\r\n   */\r\n  'maintainingfocusend': () => void;\r\n}\r\n\r\n// Formerly handled under \"UIManager\".\r\n/**\r\n * This class provides fields and methods useful for assisting context management.  Control focus (and\r\n * thus, activation of the corresponding OutputTarget) should not be lost to non-context components of\r\n * KMW, such as the OSK or a keyboard selector.\r\n */\r\nexport class FocusAssistant extends EventEmitter<EventMap> {\r\n  private _maintainingFocus: boolean = false;  // ActivatingKeymanWebUI - Does the OSK have active focus / an active interaction?\r\n\r\n  /**\r\n   * Returns `true` only when the active target has an active `forceScroll` method/state, which deliberately\r\n   * blurs and then refocuses the same element in order to force a browser-default page scroll to keep the\r\n   * element and text-caret visible.\r\n   */\r\n  readonly isTargetForcingScroll: () => boolean;\r\n\r\n  constructor(isTargetForcingScroll: () => boolean) {\r\n    super();\r\n    this.isTargetForcingScroll = isTargetForcingScroll;\r\n  }\r\n\r\n  /*\r\n   * Long-term idea here: about all of the relevant OSK events that would interact with this have \"enter\" and\r\n   * \"leave\" variants - we could take a stack of `Promise`s.  On a `Promise` fulfillment, remove it from the\r\n   * stack.  When the last one is removed, the focus-maintenance state would end, allowing further events\r\n   * to deactivate the active OutputTarget.\r\n   */\r\n\r\n  /**\r\n   * Indicates that KMW is actively maintaining focus on the currently active OutputTarget control, rather\r\n   * than losing focus while some UI element (the OSK, a keyboard-change UI) is the most direct recipient\r\n   * of browser focus due to user-interaction - generally, with non-context engine components.\r\n   *\r\n   * While the flag is active, the context-management system should not deactivate an OutputTarget upon\r\n   * its element's loss of focus within the page unless setting a different OutputTarget as active.\r\n   *\r\n   * TODO: (potential) Future enhancement - this should not be possible to set if there is no currently-active\r\n   * context target to maintain.\r\n   */\r\n  // Formerly `isActivating`.\r\n  public get maintainingFocus(): boolean {\r\n    return this._maintainingFocus;\r\n  }\r\n\r\n  public set maintainingFocus(value: boolean) {\r\n    const priorValue = this._maintainingFocus;\r\n    this._maintainingFocus = value;\r\n\r\n    // Needed to properly update .activeTarget upon loss of maintaining-focus state.\r\n    if(priorValue && !value) {\r\n      this.emit('maintainingfocusend');\r\n    }\r\n  }\r\n\r\n  /*\r\n   * Long-term idea here:  as (aside from OSK title/resize bar interactions) it's always used to actively\r\n   * RESTORE focus, taking in a closure to perform during the 'focus restoration state' would make a nice\r\n   * design.  Something like .performRefocus(closure: () => void):\r\n   * - would set this field before calling the closure\r\n   * - would unset this field after calling the closure\r\n   * - would try-catch to guarantee the 'unset'.\r\n   *\r\n   * OSK drag handlers should utilize the other field, anyway.\r\n   */\r\n\r\n  /**\r\n   * Indicates that KMW is in a state of actively restoring focus to a previously-active element.\r\n   * This is most commonly utilized whenever a keyboard is newly activated, generally due to\r\n   * user interaction to select the new keyboard.\r\n   */\r\n  // Formerly `justActivated`.\r\n  restoringFocus: boolean = false;   // JustActivatedKeymanWebUI - focussing back to control after KeymanWeb UI interaction\r\n\r\n  /**\r\n   * JH (2023-04-24): given how it's used within the KMW engine, this seems extremely similar in purpose to\r\n   * `restoringFocus` - it's set before calling an element's focus method to prevent focus-handlers from causing\r\n   * unwanted side-effects.  The ONE critical detail:  KSF / `saveFocus` will block a single check, not waiting for\r\n   * control flow restoration before clearing, where the other matching cases will block 100 (maybe to prevent\r\n   * some sort of event softlock?).\r\n   *\r\n   * So, it's like the `saveFocus` variant immediately clears the flag once checked, while others are intended\r\n   * to only clear the flag once control returns to the method that triggered a focus op.\r\n   *\r\n   * A future refactor should be able to merge the two, though it's worth noting that there are early checks for\r\n   * this, but _not_ `restoringFocus`, in the context-management control-blur event handler.  So, it's not 100%\r\n   * super-straightforward, but a refactor should be manageable all the same.\r\n   */\r\n  _IgnoreNextSelChange = 0;\r\n\r\n  /**\r\n   * Is used as a time-delayed async `restoringFocus` or `maintainingFocus` - could be modeled decently as a Promise.\r\n   * Probably more the latter, as it's a touch-OSK interaction like the other `maintainingFocus` cases.\r\n   */\r\n  focusing: boolean;\r\n  /**\r\n   * Manages the time-delay aspect of `focusing` state.\r\n   */\r\n  focusTimer: number;\r\n\r\n  /**\r\n   * Function     getUIState\r\n   * Scope        Public\r\n   * @return      {Object.<string,boolean>}\r\n   * Description  Return object with activation state of UI:\r\n   *                activationPending (bool):   KMW being activated\r\n   *                activated         (bool):   KMW active\r\n   */\r\n  getUIState(): FocusStateAPIObject {\r\n    return new FocusStateAPIObject(this.maintainingFocus, this.restoringFocus);\r\n  }\r\n\r\n  /**\r\n   * Set or clear the IsActivatingKeymanWebUI flag (exposed function)\r\n   *\r\n   * @param       {(boolean|number)}  state  Activate (true,false)\r\n   */\r\n  setMaintainingFocus(state: boolean) {\r\n    this.maintainingFocus = state ? true : false;\r\n  }\r\n\r\n  setFocusTimer(): void {\r\n    this.focusing=true;\r\n\r\n    this.focusTimer = window.setTimeout(() => {\r\n      this.focusing=false;\r\n    }, 50)\r\n  }\r\n}",
    "import { type Keyboard, KeyboardScriptError } from 'keyman/engine/keyboard';\r\nimport { type KeyboardStub } from 'keyman/engine/keyboard-storage';\r\nimport { CookieSerializer } from 'keyman/engine/dom-utils';\r\nimport { eventOutputTarget, outputTargetForElement, PageContextAttachment } from 'keyman/engine/attachment';\r\nimport { DomEventTracker, LegacyEventEmitter } from 'keyman/engine/events';\r\nimport { DesignIFrame, OutputTarget, nestedInstanceOf } from 'keyman/engine/element-wrappers';\r\nimport {\r\n  ContextManagerBase,\r\n  type KeyboardInterface,\r\n  LegacyAPIEvents\r\n} from 'keyman/engine/main';\r\nimport { BrowserConfiguration } from './configuration.js';\r\nimport { FocusAssistant } from './context/focusAssistant.js';\r\n\r\nexport interface KeyboardCookie {\r\n  current: string;\r\n}\r\n\r\n/**\r\n * Set target element text direction (LTR or RTL), but only if the element is empty\r\n *\r\n * If the element base directionality is changed after it contains content, unless all the text\r\n * has the same directionality, text runs will be re-ordered which is confusing and causes\r\n * incorrect caret positioning\r\n *\r\n * @param       {Object}      Ptarg      Target element\r\n */\r\nfunction _SetTargDir(Ptarg: HTMLElement, activeKeyboard: Keyboard) {\r\n  const elDir = activeKeyboard?.isRTL ? 'rtl' : 'ltr';\r\n\r\n  if(Ptarg) {\r\n    if(Ptarg instanceof Ptarg.ownerDocument.defaultView.HTMLInputElement\r\n        || Ptarg instanceof Ptarg.ownerDocument.defaultView.HTMLTextAreaElement) {\r\n      if((Ptarg as HTMLInputElement|HTMLTextAreaElement).value.length == 0) {\r\n        Ptarg.dir=elDir;\r\n      }\r\n    } else if(typeof Ptarg.textContent == \"string\" && Ptarg.textContent.length == 0) { // As with contenteditable DIVs, for example.\r\n      Ptarg.dir=elDir;\r\n    }\r\n  }\r\n}\r\n\r\nexport default class ContextManager extends ContextManagerBase<BrowserConfiguration> {\r\n  private _activeKeyboard: {keyboard: Keyboard, metadata: KeyboardStub};\r\n  private cookieManager = new CookieSerializer<KeyboardCookie>('KeymanWeb_Keyboard');\r\n  readonly focusAssistant = new FocusAssistant(() => this.activeTarget?.isForcingScroll());\r\n  readonly page: PageContextAttachment;\r\n  private mostRecentTarget: OutputTarget<any>;\r\n  private currentTarget: OutputTarget<any>;\r\n\r\n  private globalKeyboard: {keyboard: Keyboard, metadata: KeyboardStub};\r\n\r\n  private _eventsObj: () => LegacyEventEmitter<LegacyAPIEvents>;\r\n  private domEventTracker = new DomEventTracker();\r\n\r\n  constructor(engineConfig: BrowserConfiguration, eventsClosure: () => LegacyEventEmitter<LegacyAPIEvents>) {\r\n    super(engineConfig);\r\n\r\n    this._eventsObj = eventsClosure;\r\n\r\n    this.page = new PageContextAttachment(window.document, {\r\n      hostDevice: this.engineConfig.hostDevice\r\n    });\r\n\r\n    this.focusAssistant.on('maintainingfocusend', () => {\r\n      // Basically, if the maintaining state were the reason we still had an `activeTarget`...\r\n      if(!this.activeTarget && this.mostRecentTarget) {\r\n        this.emit('targetchange', this.activeTarget);\r\n      }\r\n    });\r\n  }\r\n\r\n  get apiEvents(): LegacyEventEmitter<LegacyAPIEvents> {\r\n    return this._eventsObj();\r\n  }\r\n\r\n  initialize(): void {\r\n    this.on('keyboardasyncload', (stub, completion) => {\r\n      this.engineConfig.alertHost?.wait('Installing keyboard<br/>' + stub.name);\r\n\r\n      completion.then(() => {\r\n        this.engineConfig.alertHost?.wait(); // cancels the wait.\r\n      });\r\n    });\r\n\r\n    this.engineConfig.deferForInitialization.then(() => {\r\n      const device = this.engineConfig.hostDevice;\r\n\r\n      const noPropagation = (event: Event) => event.stopPropagation()\r\n\r\n      // For any elements being attached, or being enabled after having been disabled...\r\n      this.page.on('enabled', (elem) => {\r\n        if(!(elem._kmwAttachment.interface instanceof DesignIFrame)) {\r\n          // For anything attached but (design-mode) iframes...\r\n\r\n          // This block:  has to do with maintaining focus.\r\n          if(device.touchable) {\r\n            // Remove any handlers for \"NonKMWTouch\" elements, since we're enabling it here.\r\n            this.domEventTracker.detachDOMEvent(elem, 'touchstart', this.nonKMWTouchHandler);\r\n\r\n            // Prevent base-page touch handlers from causing a defocus when interacting\r\n            // with attached input elements.\r\n            this.domEventTracker.attachDOMEvent(elem, 'touchmove', noPropagation, false);\r\n            this.domEventTracker.attachDOMEvent(elem, 'touchend', noPropagation, false);\r\n          }\r\n\r\n          // This block:  has to do with maintaining focus.\r\n          this.domEventTracker.attachDOMEvent(elem,'focus', this._ControlFocus);\r\n          this.domEventTracker.attachDOMEvent(elem,'blur', this._ControlBlur);\r\n          this.domEventTracker.attachDOMEvent(elem,'click', this._Click);\r\n        } else {\r\n          // For design-mode iframes:\r\n\r\n          // This block:  has to do with maintaining focus.\r\n          var Lelem=(elem as HTMLIFrameElement).contentWindow.document;\r\n          // I2404 - Attach to IFRAMEs child objects, only editable IFRAMEs here\r\n          if(device.browser == 'firefox') {\r\n            this.domEventTracker.attachDOMEvent(Lelem,'focus', this._ControlFocus);\r\n            this.domEventTracker.attachDOMEvent(Lelem,'blur', this._ControlBlur);\r\n          } else { // Chrome, Safari\r\n            this.domEventTracker.attachDOMEvent(Lelem.body,'focus', this._ControlFocus);\r\n            this.domEventTracker.attachDOMEvent(Lelem.body,'blur', this._ControlBlur);\r\n          }\r\n        }\r\n\r\n        if(elem.ownerDocument.activeElement == elem) {\r\n          this.setActiveTarget(outputTargetForElement(elem), true);\r\n        }\r\n      });\r\n\r\n      // For any elements being detached, disabled, or deliberately not being attached (b/c nonKMWTouchHandler)...\r\n      this.page.on('disabled', (elem) => {\r\n        // Note:  we may not actually be attached at this point.\r\n        if(!(nestedInstanceOf(elem, \"HTMLIFrameElement\"))) {\r\n          // For anything attached but (design-mode) iframes...\r\n\r\n          // This block:  has to do with maintaining focus.\r\n          if(device.touchable) {\r\n            this.domEventTracker.attachDOMEvent(elem, 'touchstart', this.nonKMWTouchHandler, false);\r\n\r\n            // does not detach the touch-handlers added in 'enabled'?\r\n          }\r\n\r\n          // This block:  has to do with maintaining focus.\r\n          this.domEventTracker.detachDOMEvent(elem,'focus', this._ControlFocus);\r\n          this.domEventTracker.detachDOMEvent(elem,'blur', this._ControlBlur);\r\n          this.domEventTracker.detachDOMEvent(elem,'click', this._Click);\r\n        } else {\r\n          // For design-mode iframes:\r\n\r\n          // This block:  has to do with maintaining focus.\r\n          let Lelem = (elem as HTMLIFrameElement).contentWindow.document;\r\n          // Mozilla      // I2404 - Attach to  IFRAMEs child objects, only editable IFRAMEs here\r\n          if(device.browser == 'firefox') {\r\n            // Firefox won't handle these events on Lelem.body - only directly on Lelem (the doc) instead.\r\n            this.domEventTracker.detachDOMEvent(Lelem,'focus', this._ControlFocus);\r\n            this.domEventTracker.detachDOMEvent(Lelem,'blur', this._ControlBlur);\r\n          } else { // Chrome, Safari\r\n            this.domEventTracker.detachDOMEvent(Lelem.body,'focus', this._ControlFocus);\r\n            this.domEventTracker.detachDOMEvent(Lelem.body,'blur', this._ControlBlur);\r\n          }\r\n        }\r\n\r\n        // This block:  has to do with maintaining focus (and consequences)\r\n        var lastElem = this.mostRecentTarget?.getElement();\r\n        if(lastElem && lastElem == elem) {\r\n          this.forgetActiveTarget(); // should already auto-hide the OSK while at it via event.\r\n        }\r\n      });\r\n\r\n      // This fires the events we just registered for.\r\n      this.page.install(this.engineConfig.attachType == 'manual');\r\n    });\r\n  }\r\n\r\n  get activeTarget(): OutputTarget<any> {\r\n    /*\r\n     * Assumption:  the maintainingFocus flag may only be set when there is a current target.\r\n     * This is not enforced proactively at present, but the assumption should hold.  (2023-05-03)\r\n     */\r\n    const maintainingFocus = this.focusAssistant.maintainingFocus;\r\n    return this.currentTarget || (maintainingFocus ? this.mostRecentTarget : null);\r\n  }\r\n\r\n  get lastActiveTarget(): OutputTarget<any> {\r\n    return this.mostRecentTarget;\r\n  }\r\n\r\n  public deactivateCurrentTarget() {\r\n    const priorTarget = this.activeTarget || this.lastActiveTarget;\r\n\r\n    /* During integrated tests, it was possible in the past for a `beforeAll`\r\n     * -initialized KMW to reach this state between tests.  The target fixture\r\n     * got cleared, but the `mostRecentTarget` / `lastActiveTarget` was not\r\n     * - just the `currentTarget` / `activeTarget`.  See #9718.\r\n     *\r\n     * Newly-added code in `forgetActiveTarget` seeks to prevent this scenario,\r\n     * but as there's no consistent repro to prove it sufficient, an appropriate\r\n     * guard-condition has been added here too.\r\n     */\r\n    if(priorTarget && this.page.isAttached(priorTarget.getElement())) {\r\n      this._BlurKeyboardSettings(priorTarget.getElement());\r\n    }\r\n\r\n    // Because of focus-maintenance effects\r\n    if(!this.activeTarget) {\r\n      this.setActiveTarget(null, true);\r\n    }\r\n  }\r\n\r\n  public forgetActiveTarget() {\r\n    this.focusAssistant.maintainingFocus = false;\r\n    this.focusAssistant.restoringFocus = false;\r\n\r\n    const priorTarget = this.activeTarget || this.mostRecentTarget;\r\n    if(priorTarget) {\r\n      this._BlurKeyboardSettings(priorTarget.getElement());\r\n    }\r\n\r\n    // Will ensure that the element is no longer active.  Does not erase\r\n    // it from being the `lastActiveTarget`, though.\r\n    this.setActiveTarget(null, true);\r\n\r\n    // So we erase it here.\r\n    if(priorTarget == this.lastActiveTarget) {\r\n      this.mostRecentTarget = null;\r\n    }\r\n  }\r\n\r\n  public setActiveTarget(target: OutputTarget<any>, sendEvents?: boolean) {\r\n    const previousTarget = this.mostRecentTarget;\r\n    const originalTarget = this.activeTarget; // may differ, depending on focus state.\r\n\r\n    if(target == originalTarget) {\r\n      // A focus state may have .currentTarget as null at this stage; if the func\r\n      // is being called with a non-null parameter, we want this SET. #9404\r\n      if(originalTarget) {\r\n        this.currentTarget = originalTarget;\r\n      }\r\n\r\n      /**\r\n       * If it's already active, we should cancel early.\r\n       *\r\n       * The #1 reason - we don't want .resetContext calls in this scenario.\r\n       * In particular, moving the caret or setting the selection range of an\r\n       * <input> or <textarea> in desktop Safari programmatically WILL trigger\r\n       * focus events!\r\n       *\r\n       * https://bugs.webkit.org/show_bug.cgi?id=224425\r\n       *\r\n       * > In WebKit, focus follows selection so if you modify selection, then the\r\n       *   focus will be moved there.\r\n       *\r\n       * Caret manipulation in the browser, as needed by certain keyboard text\r\n       * operations, IS text selection - of width zero, but still selection.\r\n       *\r\n       * At present, even if setting selection on the focused element, Safari will\r\n       * still trigger a focus event upon it... which can cascade here if uncaught\r\n       * and trigger a contextReset DURING keyboard rule processing without this\r\n       * guard.\r\n       *\r\n       * The #2 reason:  the `forceScroll` method used within the Input and Textarea\r\n       * types whenever the selection must be programatically updated.  The blur\r\n       * is 'swallowed', preventing it from being dropped as 'active'. However, the\r\n       * corresponding focus is not swallowed... until this if-condition's check.\r\n       */\r\n      return;\r\n    }\r\n\r\n    // We condition on 'priorElement' below as a check to allow KMW to set a default active keyboard.\r\n    let hadRecentElement = !!previousTarget;\r\n\r\n    // Must set before _Blur / _Focus to avoid infinite recursion due to complications\r\n    // in setActiveKeyboard behavior with managed keyboard settings.\r\n    this.currentTarget = this.mostRecentTarget = target; // I3363 (Build 301)\r\n    this.predictionContext.setCurrentTarget(target);\r\n\r\n    if(this.focusAssistant.restoringFocus) {\r\n      this._BlurKeyboardSettings(target.getElement());\r\n    } else if(target) {\r\n      this._FocusKeyboardSettings(target.getElement(), !hadRecentElement);\r\n    }\r\n\r\n    // Always do the common focus stuff, instantly returning if we're in an editable iframe.\r\n    if(this._CommonFocusHelper(target)) {\r\n      return;\r\n    };\r\n\r\n    // Set element directionality (but only if element is empty)\r\n    let focusedElement = target?.getElement();\r\n    if(target instanceof DesignIFrame) {\r\n      focusedElement = target.docRoot;\r\n    }\r\n    if(focusedElement && focusedElement.ownerDocument && focusedElement instanceof focusedElement.ownerDocument.defaultView.HTMLElement) {\r\n      _SetTargDir(focusedElement, this.activeKeyboard?.keyboard);\r\n    }\r\n\r\n    if(target != originalTarget) {\r\n      this.emit('targetchange', target);\r\n    }\r\n\r\n    //Execute external (UI) code needed on focus if required\r\n    if(sendEvents) {\r\n      let blurredElement = previousTarget?.getElement();\r\n      if(previousTarget instanceof DesignIFrame) {\r\n        blurredElement = previousTarget.docRoot;\r\n      }\r\n\r\n      if(!focusedElement) {\r\n        if(blurredElement) {\r\n          this.apiEvents.callEvent('controlblurred', {\r\n            target: blurredElement,\r\n            event: null,\r\n            isActivating: this.focusAssistant.maintainingFocus\r\n          });\r\n        }\r\n      } else {\r\n        // Note:  indicates the previous control being blurred (as\r\n        // `activeControl`). 'controlfocused' and 'controlblurred' are\r\n        // treated as mutually exclusive, with the latter only happening\r\n        // when nothing KMW-related is focused.\r\n        this.apiEvents.callEvent('controlfocused', {\r\n          target: focusedElement,\r\n          activeControl: blurredElement\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  get activeKeyboard() {\r\n    return this._activeKeyboard;\r\n  }\r\n\r\n  restoreLastActiveTarget() {\r\n    if(!this.mostRecentTarget) {\r\n      return;\r\n    }\r\n\r\n    this.focusAssistant.restoringFocus = true;\r\n    this.mostRecentTarget.focus(); // should auto-restore .mostRecentTarget as .currentTarget\r\n                                   // via related focus events.\r\n    this.focusAssistant.restoringFocus = false;\r\n  }\r\n\r\n  insertText(kbdInterface: KeyboardInterface<ContextManager>, Ptext: string, PdeadKey: number) {\r\n    // Find the correct output target to manipulate.  The user has likely be interacting with a\r\n    // 'help page' keyboard, like desktop `sil_euro_latin`, and active browser focus on the\r\n    // original context element may have been lost.\r\n    this.restoreLastActiveTarget();\r\n\r\n    let outputTarget = this.activeTarget;\r\n\r\n    if(outputTarget == null && this.mostRecentTarget) {\r\n      outputTarget = this.activeTarget;\r\n    }\r\n\r\n    if(outputTarget != null) {\r\n      return super.insertText(kbdInterface, Ptext, PdeadKey);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Determines the 'target' currently used to determine which keyboard should be active.\r\n   * When `null`, keyboard-activation operations will affect the global default; otherwise,\r\n   * such operations affect only the specified `target`.\r\n   *\r\n   * This is based on the current `.activeTarget` and its related attachment metadata.\r\n   */\r\n  protected currentKeyboardSrcTarget(): OutputTarget<any> {\r\n    let target = this.currentTarget || this.mostRecentTarget;\r\n\r\n    if(this.isTargetKeyboardIndependent(target)) {\r\n      return target;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private isTargetKeyboardIndependent(target: OutputTarget<any>): boolean {\r\n    let attachmentInfo = target?.getElement()._kmwAttachment;\r\n\r\n    // If null or undefined, we're in 'global' mode.\r\n    return !!(attachmentInfo?.keyboard || attachmentInfo?.keyboard === '');\r\n  }\r\n\r\n  // Note:  is part of the keyboard activation process.  Not to be called directly by published API.\r\n  activateKeyboardForTarget(kbd: {keyboard: Keyboard, metadata: KeyboardStub}, target: OutputTarget<any>) {\r\n    let attachment = target?.getElement()._kmwAttachment;\r\n\r\n    if(!attachment) {\r\n      // if not set with an \"independent keyboard\", changes the global.\r\n      this.globalKeyboard = kbd;\r\n    } else {\r\n      // if set with an \"independent keyboard\", changes only the active target's keyboard.\r\n      //\r\n      // This method is not called on the pathway to shift a control back to 'global keyboard' mode;\r\n      // only after.\r\n      attachment.keyboard = kbd?.metadata.id ?? '';\r\n      attachment.languageCode = kbd?.metadata.langId ?? '';\r\n    }\r\n\r\n    if(this.currentKeyboardSrcTarget() == target) {\r\n      this._activeKeyboard = kbd;\r\n\r\n      // Also, update with appropriate styling.\r\n      const activeStub = kbd?.metadata;\r\n      this.page.setAttachmentFont(activeStub?.KFont, this.engineConfig.paths.fonts, this.engineConfig.hostDevice.OS);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allows setting a control to a specific keyboard that does not change if the active keyboard changes when other\r\n   * controls are active.  Only activates the keyboard if the specified control represents the currently-active\r\n   * context.\r\n   *\r\n   * This is the core method that backs\r\n   * https://help.keyman.com/developer/engine/web/15.0/reference/core/setKeyboardForControl.\r\n   * @param target\r\n   * @param metadata\r\n   */\r\n  public setKeyboardForTarget(target: OutputTarget<any>, kbdId: string, langId: string) {\r\n    if(target instanceof DesignIFrame) {\r\n      console.warn(\"'keymanweb.setKeyboardForControl' cannot set keyboard on iframes.\");\r\n      return;\r\n    }\r\n\r\n    let attachment = target.getElement()._kmwAttachment;\r\n\r\n    // Catches if the target is already in independent-mode, even if it's being cancelled\r\n    // during this call.\r\n    const wasPriorTarget = this.currentKeyboardSrcTarget() == target;\r\n\r\n    if(!attachment) {\r\n      return;\r\n    } else {\r\n      // Either establishes or cancels independent-keyboard mode by setting the\r\n      // associated metadata.  This will have direct effects on the results\r\n      // of .currentKeyboardSrcTarget().\r\n      attachment.keyboard = kbdId || null;\r\n      attachment.languageCode = langId || null;\r\n\r\n      // If it has just entered independent-keyboard mode, we need the second check.\r\n      if(wasPriorTarget || this.currentKeyboardSrcTarget() == target) {\r\n        const globalKbd = this.globalKeyboard.metadata;\r\n\r\n        // The `||` bits below - in case we're cancelling independent-keyboard mode.\r\n        this.activateKeyboard(\r\n          attachment.keyboard || globalKbd.id,\r\n          attachment.languageCode || globalKbd.langId,\r\n          true\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  public getKeyboardStubForTarget(target: OutputTarget<any>) {\r\n    if(!this.isTargetKeyboardIndependent(target)) {\r\n      return this.globalKeyboard.metadata;\r\n    } else {\r\n      const attachment = target.getElement()._kmwAttachment;\r\n      return this.keyboardCache.getStub(attachment.keyboard, attachment.languageCode);\r\n    }\r\n  }\r\n\r\n  protected getFallbackStubKey() {\r\n    const emptyCodes = {\r\n      id: '',\r\n      langId: ''\r\n    };\r\n\r\n    if(this.engineConfig.hostDevice.touchable) {\r\n      /* Fallback behavior - if on a touch device, we need to keep a keyboard visible\r\n       * if one is available.\r\n       *\r\n       * When literally none are available, setting `emptyCodes` will ensure that `globalKeyboard`\r\n       * is unset properly and that relevant keyboard events are still generated.  (engine/main\r\n       * delegates 'fallback behavior' to its derived classes, so the parent class won't undo it.)\r\n       */\r\n      return this.keyboardCache.defaultStub || emptyCodes;\r\n    } else {\r\n      // Fallback behavior - if on a desktop device, the user still has a physical keyboard.\r\n      // Just clear out the active keyboard & OSK.\r\n      return emptyCodes;\r\n    }\r\n  }\r\n\r\n  public async activateKeyboard(keyboardId: string, languageCode?: string, saveCookie?: boolean): Promise<boolean> {\r\n    saveCookie ||= false;\r\n    const originalKeyboardTarget = this.currentKeyboardSrcTarget();\r\n\r\n    // If someone tries to activate a keyboard before we've had a chance to load it,\r\n    // we should defer the activation, just as we'd have deferred the load attempt.\r\n    if(!this.engineConfig.deferForInitialization.isFulfilled) {\r\n      await this.engineConfig.deferForInitialization.corePromise;\r\n    }\r\n\r\n    // Must do here b/c of fallback behavior stuff defined below.\r\n    // If the default keyboard is requested, load that.  May vary based on form-factor, which is\r\n    // part of what .getFallbackStubKey() handles.\r\n    if(!keyboardId) {\r\n      keyboardId = this.getFallbackStubKey().id;\r\n      languageCode = this.getFallbackStubKey().langId;\r\n    }\r\n\r\n    try {\r\n      let result = await super.activateKeyboard(keyboardId, languageCode, saveCookie);\r\n\r\n      this.engineConfig.alertHost?.wait(); // clear any pending waits.\r\n\r\n      if(saveCookie && !originalKeyboardTarget) { // if the active target uses global keyboard settings\r\n        this.cookieManager.save({current: `${keyboardId}:${languageCode}`});\r\n      }\r\n\r\n      // Only do these if the active keyboard-target still matches the original keyboard-target;\r\n      // otherwise, maintain what's correct for the currently active one.\r\n      if(originalKeyboardTarget == this.currentKeyboardSrcTarget()) {\r\n        _SetTargDir(this.currentTarget?.getElement(), this.keyboardCache.getKeyboard(keyboardId));\r\n        this.page.setAttachmentFont(this.activeKeyboard?.metadata?.KFont, this.engineConfig.paths.fonts, this.engineConfig.hostDevice.OS);\r\n\r\n        this.restoreLastActiveTarget();\r\n      }\r\n\r\n      return result;\r\n    } catch(err) {\r\n      // non-embedded:  if keyboard activation failed, deactivate the keyboard.\r\n\r\n      const fallback = async () => {\r\n        // Make sure we don't infinite-recursion should the deactivate somehow fail.\r\n        const fallbackCodes = this.getFallbackStubKey();\r\n        if((fallbackCodes.id != keyboardId)) {\r\n          await this.activateKeyboard(fallbackCodes.id, fallbackCodes.langId, true).catch(() => {});\r\n        } // else \"We already failed, so give up.\"\r\n      }\r\n\r\n      this.engineConfig.alertHost?.wait(); // clear the wait message box, either way.\r\n\r\n      const message = (err as Error)?.message ||\r\n                      'Sorry, the ' + keyboardId + ' keyboard for ' + languageCode + ' is not currently available.';\r\n\r\n      if(err instanceof KeyboardScriptError) {\r\n        // We get signaled about error log messages if the site is connected to our Sentry error reporting\r\n        // system; we want to know if we have a broken keyboard that's been published.\r\n        console.error(err || message);\r\n      } else {\r\n        // If it's just internet connectivity or \"file not found\" issues, that's not worth reporting\r\n        // to Sentry.\r\n        console.warn(err || message);\r\n      }\r\n\r\n      if(this.engineConfig.alertHost) {\r\n        // Possible future TODO:  have it return a Promise that resolves on completion of `fallback`?\r\n        // Though, we're talking about dropping the 'alert' subsystem entirely at some point.\r\n        this.engineConfig.alertHost?.alert(message, fallback);\r\n      } else {\r\n        await fallback();\r\n      }\r\n\r\n      throw err; // since the site-dev consumer may want to do their own error-handling.\r\n    }\r\n  }\r\n\r\n  //\r\n\r\n  /**\r\n   * Function             _BlurKeyboardSettings\r\n   * Description          Stores the last active element's keyboard settings.  Should be called\r\n   *                      whenever a KMW-enabled page element loses control.\r\n   */\r\n  _BlurKeyboardSettings(lastElem: HTMLElement, PInternalName?: string, PLgCode?: string) {\r\n    var keyboardID = this.activeKeyboard ? this.activeKeyboard.keyboard.id : '';\r\n    var langCode = this.activeKeyboard?.metadata.langId;\r\n\r\n    if(PInternalName !== undefined && PLgCode !== undefined) {\r\n      keyboardID = PInternalName;\r\n      langCode = PLgCode;\r\n    }\r\n\r\n    if(lastElem && lastElem._kmwAttachment.keyboard != null) {\r\n      lastElem._kmwAttachment.keyboard = keyboardID;\r\n      lastElem._kmwAttachment.languageCode = langCode;\r\n    } else {\r\n      this.globalKeyboard = this.activeKeyboard;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function             _FocusKeyboardSettings\r\n   * @param   {boolean}   blockGlobalChange   A flag indicating if the global keyboard setting should be ignored for this call.\r\n   * Description          Restores the newly active element's keyboard settings.  Should be called\r\n   *                      whenever a KMW-enabled page element gains control, but only once the prior\r\n   *                      element's loss of control is guaranteed.\r\n   */\r\n  _FocusKeyboardSettings(lastElem: HTMLElement, blockGlobalChange: boolean) {\r\n    // Important pre-condition:  the newly-focused element must be set as active.\r\n    let attachment = lastElem._kmwAttachment;\r\n    const global = this.globalKeyboard;\r\n\r\n    if(attachment.keyboard != null) {\r\n      this.activateKeyboard(attachment.keyboard, attachment.languageCode, true);\r\n    } else if(!blockGlobalChange && (global?.metadata != this._activeKeyboard?.metadata)) {\r\n      // TODO:  can we drop `!blockGlobalChange` in favor of the latter check?\r\n      this.activateKeyboard(global?.metadata.id, global?.metadata.langId, true);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function             _CommonFocusHelper\r\n   * @param   {Element}   target\r\n   * @returns {boolean}\r\n   * Description          Performs common state management for the various focus events of KeymanWeb.\r\n   *                      The return value indicates whether (true) or not (false) the calling event handler\r\n   *                      should be terminated immediately after the call.\r\n   */\r\n  _CommonFocusHelper(outputTarget: OutputTarget<any>): boolean {\r\n    const focusAssistant = this.focusAssistant;\r\n\r\n    let activeKeyboard = this.activeKeyboard?.keyboard;\r\n    if(!focusAssistant.restoringFocus) {\r\n      outputTarget?.deadkeys().clear();\r\n      activeKeyboard?.notify(0, outputTarget, 1);  // I2187\r\n    }\r\n\r\n    if(!focusAssistant.restoringFocus && this.mostRecentTarget != outputTarget) {\r\n      focusAssistant.maintainingFocus = false;\r\n    }\r\n    focusAssistant.restoringFocus = false;\r\n\r\n    // Now that we've fully entered the new context, invalidate the context so we can generate initial predictions from it.\r\n    // (Note that the active keyboard will have been updated by a method called before this one; the newly-focused\r\n    // context should now be 100% ready.)\r\n    this.resetContext();\r\n\r\n    return false;\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Respond to KeymanWeb-aware input element receiving focus\r\n   */\r\n  _ControlFocus = (e: FocusEvent): boolean => {\r\n    // Step 1: determine the corresponding OutputTarget instance.\r\n    const target = eventOutputTarget(e);\r\n    if(!target) {\r\n      // Probably should also make a warning or error?\r\n      return true;\r\n    }\r\n\r\n    // ???? ?: ensure it's properly active?\r\n    // if(target instanceof DesignIFrame) { //**TODO: check case reference\r\n    //   // But... the following should already have been done during attachment...\r\n    //   // attachmentEngine._AttachToIframe(Ltarg as HTMLIFrameElement);\r\n    //   target.docRoot\r\n    //   Ltarg=Ltarg.contentWindow.document.body; // And we only care about Ltarg b/c of finding the OutputTarget.\r\n    // }\r\n\r\n    // Step 2:  Make the newly-focused control the active control, and thus the active context.\r\n    this.setActiveTarget(target, true);\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Respond to KMW losing focus on event\r\n   */\r\n  _ControlBlur = (e: FocusEvent): boolean => {\r\n    // Step 0:  if we're in a state where loss-of-focus should be outright-ignored, bypass the handler entirely.\r\n    if(this.focusAssistant._IgnoreNextSelChange) {\r\n\r\n      // If a keyboard calls saveFocus() (KSF), then ignore the\r\n      // next selection change\r\n      this.focusAssistant._IgnoreNextSelChange--;\r\n      e.cancelBubble = true;\r\n      e.stopPropagation();\r\n      return true;\r\n    }\r\n\r\n    if(this.focusAssistant.isTargetForcingScroll()) {\r\n      // Prevent triggering other blur-handling events (as possible)\r\n      e.cancelBubble = true;\r\n      e.stopPropagation();\r\n      return true;\r\n    }\r\n\r\n    // Step 1: determine the corresponding OutputTarget instance.\r\n    let target = eventOutputTarget(e);\r\n    if (target == null) {\r\n      return true;\r\n    }\r\n\r\n    // Step 2:  persist the keyboard setting for the deactivating context.\r\n\r\n    ////keymanweb._SelectionControl = null;\r\n    if(this.lastActiveTarget) {\r\n      // There's no harm in saving them at this stage, even if we're still in the `maintainingFocus` state.\r\n      this._BlurKeyboardSettings(this.lastActiveTarget.getElement());\r\n    }\r\n\r\n    // Step 3: Now that we've handled all prior-element maintenance, update the active and 'last-active element'.\r\n    // (The \"context target\" state fields)\r\n    const previousTarget = this.activeTarget;\r\n    this.currentTarget = null; // I3363 (Build 301)\r\n\r\n    // After a .forgetActiveTarget call occurs before _ControlBlur is called on the corresponding element,\r\n    // we should avoid accidentally 'remembering' it here.\r\n    if(previousTarget || this.lastActiveTarget) {\r\n      this.mostRecentTarget = target;\r\n    }\r\n\r\n    // Step 4: any and all related events\r\n    /* If the KeymanWeb UI is active as a user changes controls, all UI-based effects\r\n     * should be restrained to this control in case the user is manually specifying\r\n     * languages on a per-control basis.\r\n     */\r\n    this.focusAssistant.restoringFocus = false;\r\n\r\n    let activeKeyboard = this.activeKeyboard;\r\n    const maintainingFocus = this.focusAssistant.maintainingFocus;\r\n    if(!maintainingFocus && activeKeyboard) {\r\n      activeKeyboard.keyboard.notify(0, target, 0);  // I2187\r\n    }\r\n    if(previousTarget && !this.activeTarget) {\r\n      this.emit('targetchange', null);\r\n    }\r\n\r\n    this.apiEvents.callEvent('controlblurred', {\r\n      target: target.getElement(),\r\n      event: e,\r\n      isActivating: maintainingFocus\r\n    });\r\n\r\n    // Is not an \"API event\"; it models a native browser event instead.\r\n    this.doChangeEvent(target);\r\n    this.resetContext();\r\n    return true;\r\n  }\r\n\r\n  doChangeEvent(target: OutputTarget<any>) {\r\n    if(target.changed) {\r\n      let event = new Event('change', {\"bubbles\": true, \"cancelable\": false});\r\n      target.getElement().dispatchEvent(event);\r\n    }\r\n\r\n    target.changed = false;\r\n  }\r\n\r\n  _Click: (e: MouseEvent) => boolean = (e: MouseEvent) => {\r\n    this.resetContext();\r\n    return true;\r\n  };\r\n\r\n  /**\r\n   * Gets the 'saved keyboard' cookie value for the last keyboard used in the\r\n   * iser's previous session.\r\n   **/\r\n  getSavedKeyboardRaw(): string {\r\n    const cookie = new CookieSerializer<KeyboardCookie>('KeymanWeb_Keyboard');\r\n    var v = cookie.load(decodeURIComponent);\r\n\r\n    if(typeof(v.current) != 'string') {\r\n      return 'Keyboard_us:en';\r\n    } else if(v.current == 'Keyboard_us:eng') {\r\n      // 16.0 used the :eng variant!\r\n      return 'Keyboard_us:en';\r\n    } else {\r\n      return v.current;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets the cookie for the name and language code of the most recently active keyboard\r\n   *\r\n   *  Defaults to US English, but this needs to be user-set in later revision (TODO)\r\n   *\r\n   * @return      {string}          InternalName:LanguageCode\r\n   **/\r\n  getSavedKeyboard(): string {\r\n    let cookieValue = this.getSavedKeyboardRaw();\r\n\r\n    // Check that the requested keyboard is included in the available keyboard stubs\r\n    const stubs = this.keyboardCache.getStubList()\r\n    let kd: string;\r\n\r\n    for(let n=0; n<stubs.length; n++) {\r\n      kd=stubs[n]['KI']+':'+stubs[n]['KLC'];\r\n      if(kd == cookieValue) {\r\n        return kd;\r\n      }\r\n    }\r\n\r\n    // Default to US English if available (but don't assume it is first)\r\n    for(let n=0; n<stubs.length; n++) {\r\n      kd=stubs[n]['KI']+':'+stubs[n]['KLC'];\r\n      if(kd == 'Keyboard_us:en') {\r\n        return kd;\r\n      }\r\n    }\r\n\r\n    // Otherwise use the first keyboard stub\r\n    if(stubs.length > 0) {\r\n      return stubs[0]['KI']+':'+stubs[0]['KLC'];\r\n    }\r\n\r\n    // Or US English if no stubs loaded (should never happen)\r\n    return 'Keyboard_us:en';\r\n  }\r\n\r\n  /**\r\n   * Restore the most recently used keyboard, if still available\r\n   */\r\n  restoreSavedKeyboard(kbd: string) {\r\n    // If no saved keyboard, defaults to US English\r\n    const d=kbd;\r\n\r\n    // Identify the stub with the saved keyboard\r\n    let t=d.split(':');\r\n    if(t.length < 2) {\r\n      t[1]='';\r\n    }\r\n\r\n    // Find the matching stub; if it doesn't exist, default to the first available stub.\r\n    let stub = this.keyboardCache.getStub(t[0], t[1]) || this.keyboardCache.defaultStub;\r\n\r\n    // Sets the default stub (as specified with the `getSavedKeyboard` call) as active.\r\n    if(stub) {\r\n      this.activateKeyboard(t[0], t[1]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     nonKMWTouchHandler\r\n   * Scope        Private\r\n   * Description  A handler for KMW-touch-disabled elements when operating on touch devices.\r\n   */\r\n  nonKMWTouchHandler = (x: Event) => {\r\n    this.focusAssistant.focusing=false;\r\n    clearTimeout(this.focusAssistant.focusTimer);\r\n    this.forgetActiveTarget();\r\n    // this.keyman.osk.hideNow(); // TODO:  is more aggressive than the default - how to migrate this tidbit?\r\n  };\r\n\r\n  shutdown() {\r\n    this.page.shutdown();\r\n    this.domEventTracker.shutdown();\r\n  }\r\n}",
    "import { ModifierKeyConstants } from '@keymanapp/common-types';\r\nimport {\r\n  Codes,\r\n  DefaultRules,\r\n  type KeyEvent\r\n} from 'keyman/engine/keyboard';\r\nimport { type OutputTarget } from 'keyman/engine/js-processor';\r\n\r\nimport ContextManager from './contextManager.js';\r\n\r\nexport default class DefaultBrowserRules extends DefaultRules {\r\n  private contextManager: ContextManager;\r\n\r\n  constructor(contextManager: ContextManager) {\r\n    super();\r\n    this.contextManager = contextManager;\r\n  }\r\n\r\n  isCommand(Lkc: KeyEvent): boolean {\r\n    let code = this.codeForEvent(Lkc);\r\n\r\n    switch(code) {\r\n      case Codes.keyCodes['K_TAB']:\r\n      case Codes.keyCodes['K_TABBACK']:\r\n      case Codes.keyCodes['K_TABFWD']:\r\n        return true;\r\n      default:\r\n        return super.isCommand(Lkc);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * applyCommand - used when a RuleBehavior represents a non-text \"command\" within the Engine.\r\n   */\r\n  applyCommand(Lkc: KeyEvent, outputTarget: OutputTarget): void {\r\n    let code = this.codeForEvent(Lkc);\r\n\r\n    const moveToNext = (back: boolean) => {\r\n      const contextManager = this.contextManager;\r\n      const activeElement = contextManager.activeTarget?.getElement();\r\n      const nextElement = contextManager.page.findNeighboringInput(activeElement, back);\r\n      nextElement?.focus();\r\n    }\r\n\r\n    switch(code) {\r\n      // This method will be handled between `ContextManager` and PageContextAttachment:\r\n      // pageContextAttachment.findNeighboringInput(contextManager.activeTarget.getElement(), <same flag>)\r\n      case Codes.keyCodes['K_TAB']:\r\n        moveToNext((Lkc.Lmodifiers & ModifierKeyConstants.K_SHIFTFLAG) != 0);\r\n        break;\r\n      case Codes.keyCodes['K_TABBACK']:\r\n        moveToNext(true);\r\n        break;\r\n      case Codes.keyCodes['K_TABFWD']:\r\n        moveToNext(false);\r\n        break;\r\n    }\r\n\r\n    super.applyCommand(Lkc, outputTarget);\r\n  }\r\n}",
    "import { Codes, DeviceSpec, KeyEvent, KeyMapping, Keyboard } from 'keyman/engine/keyboard';\r\nimport { KeyboardProcessor } from 'keyman/engine/js-processor';\r\nimport { ModifierKeyConstants } from '@keymanapp/common-types';\r\n\r\nimport { HardKeyboard, processForMnemonicsAndLegacy } from 'keyman/engine/main';\r\nimport { DomEventTracker } from 'keyman/engine/events';\r\nimport { DesignIFrame, nestedInstanceOf } from 'keyman/engine/element-wrappers';\r\nimport { eventOutputTarget, outputTargetForElement } from 'keyman/engine/attachment';\r\n\r\nimport ContextManager from './contextManager.js';\r\n\r\ntype KeyboardState = {\r\n  activeKeyboard: Keyboard,\r\n  modStateFlags: number,\r\n  baseLayout: string\r\n}\r\n\r\n// Important:  the following two lines should not cause a compile error if left uncommented.\r\n// let dummy1: KeyboardProcessor;\r\n// let dummy2: KeyboardState = dummy1;\r\n\r\n/**\r\n * Function     _GetEventKeyCode\r\n * Scope        Private\r\n * @param       {Event}       e         Event object\r\n * Description  Finds the key code represented by the event.\r\n */\r\nexport function _GetEventKeyCode(e: KeyboardEvent) {\r\n  if (e.keyCode) {\r\n    return e.keyCode;\r\n  } else if (e.which) {\r\n    return e.which;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\n// Keeping this as a separate function affords us the opportunity to unit-test the method more simply.\r\n\r\n/**\r\n * Function     _GetKeyEventProperties\r\n * Scope        Private\r\n * @param       {Event}       e         Event object\r\n * @return      {Object.<string,*>}     KMW keyboard event object:\r\n * Description  Get object with target element, key code, shift state, virtual key state\r\n *                Lcode=keyCode\r\n *                Lmodifiers=shiftState\r\n *                LisVirtualKeyCode e.g. ctrl/alt key\r\n *                LisVirtualKey     e.g. Virtual key or non-keypress event\r\n */\r\nexport function preprocessKeyboardEvent(e: KeyboardEvent, keyboardState: KeyboardState, device: DeviceSpec): KeyEvent {\r\n  if(e.cancelBubble === true) {\r\n    return null; // I2457 - Facebook meta-event generation mess -- two events generated for a keydown in Facebook contentEditable divs\r\n  }\r\n\r\n  let Lcode = _GetEventKeyCode(e);\r\n  if (Lcode == null) {\r\n    return null;\r\n  }\r\n\r\n  // Stage 1 - track the true state of the keyboard's modifiers.\r\n  var prevModState = keyboardState.modStateFlags, curModState = 0x0000;\r\n  var ctrlEvent = false, altEvent = false;\r\n\r\n  let keyCodes = Codes.keyCodes;\r\n  switch(Lcode) {\r\n    case keyCodes['K_CTRL']:      // The 3 shorter \"K_*CTRL\" entries exist in some legacy keyboards.\r\n    case keyCodes['K_LCTRL']:\r\n    case keyCodes['K_RCTRL']:\r\n    case keyCodes['K_CONTROL']:\r\n    case keyCodes['K_LCONTROL']:\r\n    case keyCodes['K_RCONTROL']:\r\n      ctrlEvent = true;\r\n      break;\r\n    case keyCodes['K_LMENU']:     // The 2 \"K_*MENU\" entries exist in some legacy keyboards.\r\n    case keyCodes['K_RMENU']:\r\n    case keyCodes['K_ALT']:\r\n    case keyCodes['K_LALT']:\r\n    case keyCodes['K_RALT']:\r\n      altEvent = true;\r\n      break;\r\n  }\r\n\r\n  /**\r\n   * Two separate conditions exist that should trigger chiral modifier detection.  Examples below use CTRL but also work for ALT.\r\n   *\r\n   * 1.  The user literally just pressed CTRL, so the event has a valid `location` property we can utilize.\r\n   *     Problem: its layer isn't presently activated within the OSK.\r\n   *\r\n   * 2.  CTRL has been held a while, so the OSK layer is valid, but the key event doesn't tell us the chirality of the active CTRL press.\r\n   *     Bonus issue:  RAlt simulation may cause erasure of this location property, but it should ONLY be empty if pressed in this case.\r\n   *     We default to the 'left' variants since they're more likely to exist and cause less issues with RAlt simulation handling.\r\n   *\r\n   * In either case, `e.getModifierState(\"Control\")` is set to true, but as a result does nothing to tell us which case is active.\r\n   *\r\n   * `e.location != 0` if true matches condition 1 and matches condition 2 if false.\r\n   */\r\n\r\n  curModState |= (e.getModifierState(\"Shift\") ? 0x10 : 0);\r\n\r\n  if(e.getModifierState(\"Control\")) {\r\n    curModState |= ((e.location != 0 && ctrlEvent) ?\r\n      (e.location == 1 ? ModifierKeyConstants.LCTRLFLAG : ModifierKeyConstants.RCTRLFLAG) : // Condition 1\r\n      prevModState & 0x0003);                                                       // Condition 2\r\n  }\r\n  if(e.getModifierState(\"Alt\")) {\r\n    curModState |= ((e.location != 0 && altEvent) ?\r\n      (e.location == 1 ? ModifierKeyConstants.LALTFLAG : ModifierKeyConstants.RALTFLAG) :   // Condition 1\r\n      prevModState & 0x000C);                                                       // Condition 2\r\n  }\r\n\r\n  // Stage 2 - detect state key information.  It can be looked up per keypress with no issue.\r\n  let Lstates = 0;\r\n\r\n  Lstates |= e.getModifierState('CapsLock') ? ModifierKeyConstants.CAPITALFLAG : ModifierKeyConstants.NOTCAPITALFLAG;\r\n  Lstates |= e.getModifierState('NumLock') ? ModifierKeyConstants.NUMLOCKFLAG : ModifierKeyConstants.NOTNUMLOCKFLAG;\r\n  Lstates |= (e.getModifierState('ScrollLock'))\r\n    ? ModifierKeyConstants.SCROLLFLAG : ModifierKeyConstants.NOTSCROLLFLAG;\r\n\r\n  // We need these states to be tracked as well for proper OSK updates.\r\n  curModState |= Lstates;\r\n\r\n  // Stage 3 - Set our modifier state tracking variable and perform basic AltGr-related management.\r\n  const LmodifierChange = keyboardState.modStateFlags != curModState;\r\n\r\n  // KeyboardState update:  save our known modifier/state analysis bits.\r\n  // Note:  `keyboardState` is typically the full-fledged KeyboardProcessor instance.  As a result,\r\n  // changes here persist across calls (as we only ever make the one instance).\r\n  keyboardState.modStateFlags = curModState;\r\n\r\n  // For European keyboards, not all browsers properly send both key-up events for the AltGr combo.\r\n  let altGrMask = ModifierKeyConstants.RALTFLAG | ModifierKeyConstants.LCTRLFLAG;\r\n  if((prevModState & altGrMask) == altGrMask && (curModState & altGrMask) != altGrMask) {\r\n    // We just released AltGr - make sure it's all released.\r\n    curModState &= ~ altGrMask;\r\n  }\r\n  // Perform basic filtering for Windows-based ALT_GR emulation on European keyboards.\r\n  if(curModState & ModifierKeyConstants.RALTFLAG) {\r\n    curModState &= ~ModifierKeyConstants.LCTRLFLAG;\r\n  }\r\n\r\n  let modifierBitmasks = Codes.modifierBitmasks;\r\n  // Stage 4 - map the modifier set to the appropriate keystroke's modifiers.\r\n  const activeKeyboard = keyboardState.activeKeyboard;\r\n  let Lmodifiers: number;\r\n  if(activeKeyboard && activeKeyboard.isChiral) {\r\n    Lmodifiers = curModState & modifierBitmasks.CHIRAL;\r\n\r\n    // Note for future - embedding a kill switch here would facilitate disabling AltGr / Right-alt simulation.\r\n    if(activeKeyboard.emulatesAltGr && (Lmodifiers & modifierBitmasks['ALT_GR_SIM']) == modifierBitmasks['ALT_GR_SIM']) {\r\n      Lmodifiers ^= modifierBitmasks['ALT_GR_SIM'];\r\n      Lmodifiers |= ModifierKeyConstants.RALTFLAG;\r\n    }\r\n  } else {\r\n    // No need to sim AltGr here; we don't need chiral ALTs.\r\n    Lmodifiers =\r\n      (curModState & 0x10) | // SHIFT\r\n      ((curModState & (ModifierKeyConstants.LCTRLFLAG | ModifierKeyConstants.RCTRLFLAG)) ? 0x20 : 0) |\r\n      ((curModState & (ModifierKeyConstants.LALTFLAG | ModifierKeyConstants.RALTFLAG))   ? 0x40 : 0);\r\n  }\r\n\r\n\r\n  /* Tweak the modifiers if an OS meta key is detected; this will allow meta-key-based\r\n    * hotkeys to bypass Keyman processing.  We do this AFTER the chiral modifier filtering\r\n    * because some keyboards specify their own modifierBitmask, which won't include it.\r\n    * We don't currently use that reference in this method, but that may change in the future.\r\n    */\r\n  Lmodifiers |= (e.metaKey ? ModifierKeyConstants.K_METAFLAG: 0);\r\n\r\n  // Physically-typed keys require use of a 'desktop' form factor and thus are based on a virtual \"physical\" Device.\r\n\r\n  // Perform any browser-specific key remapping before other remaps and mnemonic transforms.\r\n  // (See https://github.com/keymanapp/keyman/issues/1125.)\r\n  if(device.browser == DeviceSpec.Browser.Firefox) {\r\n  // Browser key identifiers are not completely consistent; Firefox has a few (for US punctuation)\r\n  // that differ from the norm.  Refer to https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/keyCode.\r\n    if(KeyMapping.browserMap.FF['k'+Lcode]) {\r\n      Lcode = KeyMapping.browserMap.FF['k'+Lcode];\r\n    }\r\n  }\r\n\r\n  // We now have enough properties to properly specify a KeyEvent object.\r\n  let s = new KeyEvent({\r\n    device: device,\r\n    kName: '',\r\n    Lcode: Lcode,\r\n    Lmodifiers: Lmodifiers,\r\n    Lstates: Lstates,\r\n    LmodifierChange: LmodifierChange,\r\n    // This is based on a KeyboardEvent, so it's not considered 'synthetic' within web-core.\r\n    isSynthetic: false\r\n  });\r\n\r\n  // The 0x6F used to be 0x60 - this adjustment now includes the chiral alt and ctrl modifiers in that check.\r\n  let LisVirtualKeyCode = (typeof e.charCode != 'undefined' && e.charCode != null  &&  (e.charCode == 0 || (Lmodifiers & 0x6F) != 0));\r\n  s.LisVirtualKey = LisVirtualKeyCode || e.type != 'keypress';\r\n\r\n  s = processForMnemonicsAndLegacy(s, activeKeyboard, keyboardState.baseLayout);\r\n\r\n  let processedEvent = new KeyEvent(s);\r\n  processedEvent.source = e;\r\n  return processedEvent;\r\n}\r\n\r\nexport default class HardwareEventKeyboard extends HardKeyboard {\r\n  private readonly hardDevice: DeviceSpec;\r\n\r\n  // Needed properties & methods:\r\n  // - `modStateFlags`\r\n  // - `baseLayout`\r\n  // - `doModifierPress()` - for modifier updates on key-up.\r\n  private readonly processor: KeyboardProcessor;\r\n  private readonly contextManager: ContextManager;\r\n  private domEventTracker = new DomEventTracker();\r\n\r\n  private swallowKeypress: boolean = false;\r\n\r\n  constructor(hardDevice: DeviceSpec, processor: KeyboardProcessor, contextManager: ContextManager) {\r\n    super();\r\n    this.hardDevice = hardDevice;\r\n    this.contextManager = contextManager;\r\n    this.processor = processor;\r\n\r\n    const page = contextManager.page;\r\n\r\n    const eventTracker = this.domEventTracker;\r\n\r\n    page.on('enabled', (Pelem) => {\r\n      const target = outputTargetForElement(Pelem);\r\n\r\n      if(!(target instanceof DesignIFrame)) {\r\n        // These need to be on the actual input element, as otherwise the keyboard will disappear on touch.\r\n        eventTracker.attachDOMEvent(Pelem, 'keypress', this._KeyPress);\r\n        eventTracker.attachDOMEvent(Pelem, 'keydown', this._KeyDown);\r\n        eventTracker.attachDOMEvent(Pelem, 'keyup', this._KeyUp);\r\n      } else {\r\n        const Lelem = target.getElement().contentDocument;\r\n        eventTracker.attachDOMEvent(Lelem.body,'keydown', this._KeyDown);\r\n        eventTracker.attachDOMEvent(Lelem.body,'keypress', this._KeyPress);\r\n        eventTracker.attachDOMEvent(Lelem.body,'keyup', this._KeyUp);\r\n      }\r\n    });\r\n\r\n    page.on('disabled', (Pelem) => {\r\n      const target = outputTargetForElement(Pelem);\r\n\r\n      if(!(target instanceof DesignIFrame)) {\r\n        eventTracker.detachDOMEvent(Pelem, 'keypress', this._KeyPress);\r\n        eventTracker.detachDOMEvent(Pelem, 'keydown', this._KeyDown);\r\n        eventTracker.detachDOMEvent(Pelem, 'keyup', this._KeyUp);\r\n      } else {\r\n        const Lelem = target.getElement().contentDocument;\r\n        eventTracker.detachDOMEvent(Lelem.body,'keydown', this._KeyDown);\r\n        eventTracker.detachDOMEvent(Lelem.body,'keypress', this._KeyPress);\r\n        eventTracker.detachDOMEvent(Lelem.body,'keyup', this._KeyUp);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Function     _KeyDown\r\n   * Scope        Private\r\n   * Description  Processes keydown event and passes data to keyboard.\r\n   *\r\n   * Note that the test-case oriented 'recorder' stubs this method to facilitate keystroke\r\n   * recording for use in test cases.  If changing this function, please ensure the recorder is\r\n   * not affected.\r\n   */\r\n  _KeyDown: (e: KeyboardEvent) => boolean = (e) => {\r\n    const activeKeyboard = this.contextManager.activeKeyboard;\r\n    const target = eventOutputTarget(e);\r\n\r\n    if(!target || activeKeyboard == null) {\r\n      return true;\r\n    }\r\n\r\n    // Prevent mapping element is readonly or tagged as kmw-disabled\r\n    const el = target.getElement();\r\n    if(el?.getAttribute('class')?.indexOf('kmw-disabled') >= 0) {\r\n      return true;\r\n    }\r\n\r\n    return this.keyDown(e);\r\n  }\r\n\r\n  /**\r\n   * Function     _KeyPress\r\n   * Scope        Private\r\n   * Description Processes keypress event (does not pass data to keyboard)\r\n   */\r\n  _KeyPress: (e: KeyboardEvent) => boolean = (e) => {\r\n    const target = eventOutputTarget(e);\r\n    if(!target || this.contextManager.activeKeyboard?.keyboard == null) {\r\n      return true;\r\n    }\r\n\r\n    return this.keyPress(e);\r\n  }\r\n\r\n  /**\r\n   * Function     _KeyUp\r\n   * Scope        Private\r\n   * Description Processes keyup event and passes event data to keyboard\r\n   */\r\n  _KeyUp: (e: KeyboardEvent) => boolean = (e) => {\r\n    const target = eventOutputTarget(e);\r\n    var Levent = preprocessKeyboardEvent(e, this.processor, this.hardDevice);\r\n    if(Levent == null || target == null) {\r\n      return true;\r\n    }\r\n\r\n    var inputEle = target.getElement();\r\n\r\n    // Since this part concerns DOM element + browser interaction management, we preprocess it for\r\n    // browser form commands before passing control to the Processor module.\r\n    if(Levent.Lcode == 13) {\r\n      var ignore = false;\r\n      if(nestedInstanceOf(inputEle, \"HTMLTextAreaElement\")) {\r\n        ignore = true;\r\n      }\r\n\r\n      if(!ignore) {\r\n        // For input fields, move to next input element\r\n        if(inputEle instanceof inputEle.ownerDocument.defaultView.HTMLInputElement) {\r\n          if(inputEle.form && (inputEle.type == 'search' || inputEle.type == 'submit')) {\r\n            inputEle.form.submit();\r\n          } else {\r\n            const nextElement = this.contextManager.page.findNeighboringInput(inputEle, false);\r\n            nextElement.focus();\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return this.keyUp(e);\r\n  }\r\n\r\n  /**\r\n   * Function     keyDown\r\n   * Scope        Public\r\n   * Description  Processes keydown event and passes data to keyboard.\r\n   *\r\n   * Note that the test-case oriented 'recorder' stubs this method to facilitate keystroke\r\n   * recording for use in test cases.  If changing this function, please ensure the recorder is\r\n   * not affected.\r\n   */\r\n  private keyDown(e: KeyboardEvent): boolean {\r\n    this.swallowKeypress = false;\r\n\r\n    // Get event properties\r\n    var Levent = preprocessKeyboardEvent(e, this.processor, this.hardDevice);\r\n    if(Levent == null) {\r\n      return true;\r\n    }\r\n\r\n    let resultCapture: { LeventMatched: boolean } = {\r\n      LeventMatched: false\r\n    }\r\n\r\n    // Is synchronous.\r\n    this.emit('keyevent', Levent, (ruleBehavior, error) => {\r\n      resultCapture.LeventMatched = ruleBehavior && !ruleBehavior.triggerKeyDefault;\r\n\r\n      if(resultCapture.LeventMatched) {\r\n        if(e  &&  e.preventDefault) {\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n        }\r\n\r\n        this.swallowKeypress = !!Levent.Lcode;\r\n        // Don't swallow backspaces on keypresses; this allows physical BKSP presses to repeat.\r\n        if(Levent.Lcode == 8) {\r\n          this.swallowKeypress = false;\r\n        }\r\n      } else {\r\n        this.swallowKeypress = false;\r\n      }\r\n    });\r\n\r\n    return !resultCapture.LeventMatched;\r\n  }\r\n\r\n  // KeyUp basically exists for two purposes:\r\n  // 1)  To detect browser form submissions (handled in kmwdomevents.ts)\r\n  // 2)  To detect modifier state changes.\r\n  private keyUp(e: KeyboardEvent): boolean {\r\n    var Levent = preprocessKeyboardEvent(e, this.processor, this.hardDevice);\r\n    if(Levent == null) {\r\n      return true;\r\n    }\r\n\r\n    let outputTarget = eventOutputTarget(e);\r\n    return this.processor.doModifierPress(Levent, outputTarget, false);\r\n  }\r\n\r\n  private keyPress(e: KeyboardEvent): boolean {\r\n    var Levent = preprocessKeyboardEvent(e, this.processor, this.hardDevice);\r\n    if(Levent == null || Levent.LisVirtualKey) {\r\n      return true;\r\n    }\r\n\r\n    // _Debug('KeyPress code='+Levent.Lcode+'; Ltarg='+Levent.Ltarg.tagName+'; LisVirtualKey='+Levent.LisVirtualKey+'; _KeyPressToSwallow='+keymanweb._KeyPressToSwallow+'; keyCode='+(e?e.keyCode:'nothing'));\r\n\r\n    /* I732 START - 13/03/2007 MCD: Swedish: Start positional keyboard layout code: prevent keystroke */\r\n    if(!this.contextManager.activeKeyboard?.keyboard.isMnemonic) {\r\n      if(!this.swallowKeypress) {\r\n        return true;\r\n      }\r\n      if(Levent.Lcode < 0x20 || (this.hardDevice.browser == DeviceSpec.Browser.Safari && (Levent.Lcode > 0xF700  &&  Levent.Lcode < 0xF900))) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n    /* I732 END - 13/03/2007 MCD: Swedish: End positional keyboard layout code */\r\n\r\n    // Only reached if it's a mnemonic keyboard.\r\n\r\n    let resultCapture: { preventDefaultKeystroke?: boolean } = {};\r\n\r\n    // Should only be run if `preventDefaultKeystroke` is required by the following conditional\r\n    // block.  If it isn't - that is, swallowKeypress == true, we want to swallow that keypress\r\n    // interpretation as well by _not_ evaluating it during this pass.\r\n    if(!this.swallowKeypress) {\r\n      // is synchronous\r\n      this.emit('keyevent', Levent, (result, error) => {\r\n        resultCapture.preventDefaultKeystroke = !!result;\r\n      })\r\n    }\r\n\r\n    // If we actively prevented a keystroke or if we processed one successfully,\r\n    // prevent the browser from producing its default text output for the event.\r\n    if(this.swallowKeypress || resultCapture.preventDefaultKeystroke) {\r\n      this.swallowKeypress = false;\r\n      if(e && e.preventDefault) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n      }\r\n      return false;\r\n    }\r\n\r\n    this.swallowKeypress = false;\r\n    return true;\r\n  }\r\n\r\n  shutdown() {\r\n    this.domEventTracker.shutdown();\r\n  }\r\n}",
    "import KeymanEngine from \"../keymanEngine.js\";\r\n\r\nclass RotationState {\r\n  innerWidth: number;\r\n  innerHeight: number;\r\n\r\n  constructor() {\r\n    this.innerWidth = window.innerWidth;\r\n    this.innerHeight = window.innerHeight;\r\n  }\r\n\r\n  equals(other: RotationState) {\r\n    return this.innerWidth == other.innerWidth && this.innerHeight == other.innerHeight;\r\n  }\r\n}\r\n\r\n// Please reference /testing/rotation-events/index.html and update it as necessary when maintaining this class.\r\nexport class RotationProcessor {\r\n  private keyman: KeymanEngine;\r\n\r\n  // State variables used by rotations.\r\n  private oskVisible: boolean;\r\n  private isActive: boolean;\r\n\r\n  // iOS-oriented members\r\n  // --------------------\r\n  // We'll assume permutations are complete after this many 'update' iterations.\r\n  private static readonly IDLE_PERMUTATION_CAP = 15;\r\n  // Tracks the number of idle 'update' iterations since the last permutation.\r\n  private idlePermutationCounter: number = RotationProcessor.IDLE_PERMUTATION_CAP;\r\n  // Tracks the most recent rotation state snapshot.\r\n  private rotState: RotationState;\r\n  // Tracks the window.setTimeout id for rotation update checks.\r\n  private updateTimer: number;\r\n  private static readonly UPDATE_INTERVAL = 20; // 20 ms, that is.\r\n  // --------------------\r\n\r\n  constructor(keyman: KeymanEngine) {\r\n    this.keyman = keyman;\r\n  }\r\n\r\n  resolve() {\r\n    var osk = this.keyman.osk;\r\n\r\n    // `keyman: KeymanEngine` (modularized app/browser)\r\n    this.keyman.touchLanguageMenu?.hide();\r\n    this.keyman.touchLanguageMenu = null;\r\n\r\n    osk.setNeedsLayout();\r\n    if(this.oskVisible) {\r\n      osk.present();\r\n    }\r\n\r\n    this.isActive = false;\r\n\r\n    // If we've been using an update interval loop, we should clear the state information.\r\n    if(this.updateTimer) {\r\n      window.clearInterval(this.updateTimer);\r\n      this.rotState = null;\r\n    }\r\n\r\n    const target = this.keyman.contextManager.activeTarget;\r\n    if(target) {\r\n      // This seems to help with scrolling accuracy in iOS Safari;\r\n      // the scroll tends to consistently go too far without it.\r\n      window.setTimeout(() => {\r\n        this.keyman.ensureElementVisibility(target.getElement());\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  // Used by both Android and iOS.\r\n  initNewRotation() {\r\n    this.oskVisible = this.keyman.osk.isVisible();\r\n    this.keyman.osk.hideNow();\r\n    this.isActive = true;\r\n  }\r\n\r\n  /**\r\n   * Establishes rotation-oriented event handling for native-mode KeymanWeb.  At this time, tablet PCs are not directly supported.\r\n   */\r\n  init() {\r\n    // Note:  we use wrapper functions instead of `.bind(this)` in this method to facilitate stubbing for our rotation test page.\r\n    var os = this.keyman.config.hostDevice.OS;\r\n    var util = this.keyman.util;\r\n\r\n    if(os == 'ios') {\r\n    /* iOS is rather inconsistent about these events, with changes to important window state information -\r\n      * especially to `window.innerWidth` - possible after the events trigger!  They don't always trigger\r\n      * the same amount or in a consistently predictable manner.\r\n      *\r\n      * The overall idea is to wait out all those changes so that we don't produce a bad keyboard layout.\r\n      */\r\n      util.attachDOMEvent(window, 'orientationchange', () => {\r\n        this.iOSEventHandler();\r\n        return false;\r\n      });\r\n      util.attachDOMEvent(window, 'resize', () => {\r\n        this.iOSEventHandler();\r\n        return false;\r\n      });\r\n    } else if(os == 'android') {\r\n      // Android's far more consistent with its event generation than iOS.\r\n      if('onmozorientationchange' in screen) {\r\n        // 'mozorientationchange' doesn't seem documented at this point, let alone by TypeScript.\r\n        // Plain 'orientationchange' requires a (comparatively) late version of Firefox for Android,\r\n        // though - v44, as opposed to Chrome for Android 18.\r\n        //@ts-ignore\r\n        util.attachDOMEvent(<any>screen, 'mozorientationchange', () => {\r\n          this.initNewRotation();\r\n          return false;\r\n        });\r\n      } else {\r\n        util.attachDOMEvent(window, 'orientationchange', () => {\r\n          this.initNewRotation();\r\n          return false;\r\n        });\r\n      }\r\n\r\n      util.attachDOMEvent(window, 'resize', () => {\r\n        this.resolve();\r\n        return false;\r\n      });\r\n    }\r\n  }\r\n\r\n  iOSEventHandler() {\r\n    if(!this.isActive) {\r\n      this.initNewRotation();\r\n      this.rotState = new RotationState();\r\n\r\n      this.updateTimer = window.setInterval(this.iOSEventUpdate.bind(this), RotationProcessor.UPDATE_INTERVAL);\r\n    }\r\n\r\n    // If one of the rotation-oriented events just triggered, we should ALWAYS reset the counter.\r\n    this.idlePermutationCounter = 0;\r\n  }\r\n\r\n  iOSEventUpdate() {\r\n    var newState = new RotationState();\r\n\r\n    if(this.rotState.equals(newState)) {\r\n      if(++this.idlePermutationCounter == RotationProcessor.IDLE_PERMUTATION_CAP) {\r\n        this.resolve();\r\n      }\r\n    } else {\r\n      this.rotState = newState;\r\n      this.idlePermutationCounter = 0;\r\n    }\r\n  }\r\n}",
    "import { DomEventTracker } from 'keyman/engine/events';\r\n\r\nimport KeymanEngine from \"../keymanEngine.js\";\r\nimport { FocusAssistant } from './focusAssistant.js';\r\nimport { RotationProcessor } from '../utils/rotationProcessor.js';\r\n\r\n// Note:  in the future, it'd probably be best to have an instance per iframe window as\r\n// well as the top-level window.  This was not done in or before KMW 16.0 though, so\r\n// we'll leave that out for now within the initial modular form of app/browser KMW in 17.0.\r\nexport class PageIntegrationHandlers {\r\n  private readonly window: Window;\r\n  private readonly engine: KeymanEngine;\r\n  private readonly domEventTracker = new DomEventTracker();\r\n\r\n  /**\r\n   * Used together with `deactivateOnRelease` to determine the distance of vertical scrolls;\r\n   * if sufficiently far at any point, we avoid deactivating the current context when it ends.\r\n   */\r\n  private touchY: number;\r\n\r\n  /**\r\n   * Used together with `touchY` to determine the distance of vertical scrolls;\r\n   * if sufficiently far at any point, we avoid deactivating the current context when it ends.\r\n   */\r\n  private deactivateOnRelease: boolean;\r\n\r\n  /**\r\n   * Used on certain browser/OS combinations (e.g. Chrome on Android) to prevent odd behaviors\r\n   * that arise when URL bars scroll into view during an ongoing scroll, as this can impede\r\n   * proper / smooth positioning of the OSK.  (Deactivating the active target also hides the OSK.)\r\n   */\r\n  private deactivateOnScroll: boolean;\r\n\r\n  /**\r\n   * This component should only ever be applied to a base page:  we need the ability to add 'scroll\r\n   * space' on touch devices so that the OSK doesn't block the bottom.\r\n   */\r\n  private mobilePageTrailer: HTMLDivElement;\r\n\r\n  private rotationProcessor: RotationProcessor;\r\n\r\n  constructor(window: Window, engine: KeymanEngine) {\r\n    this.window = window;\r\n    this.engine = engine;\r\n\r\n    this.attachHandlers();\r\n\r\n    if(engine.config.hostDevice.touchable) {\r\n      this.buildPageTrailer();\r\n\r\n      this.rotationProcessor = new RotationProcessor(this.engine);\r\n      this.rotationProcessor.init();\r\n    }\r\n  }\r\n\r\n  private buildPageTrailer() {\r\n    // Add a blank DIV to the bottom of the page to allow the bottom of the page to be shown\r\n    const dTrailer = this.mobilePageTrailer = document.createElement('div');\r\n    const ds=dTrailer.style;\r\n    ds.width='100%';\r\n    ds.height=(screen.width/2)+'px';  // ... interesting choice, but okay.\r\n    document.body.appendChild(dTrailer);\r\n  }\r\n\r\n  private get focusAssistant(): FocusAssistant {\r\n    return this.engine.contextManager.focusAssistant;\r\n  }\r\n\r\n  private suppressFocusCheck: (e: FocusEvent) => boolean = (e) => {\r\n    if(this.focusAssistant.isTargetForcingScroll()) {\r\n      // Prevent triggering other blur-handling events (as possible) - this blur\r\n      // is programmatic in order to force a browser scroll-position update.\r\n      // All focus changes should be prevented at this time.\r\n      e.stopPropagation();\r\n      e.cancelBubble = true;\r\n    }\r\n    // But DO perform default event behavior (actually blurring & focusing the affected element)\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Reset context when entering or exiting the active element.\r\n   * Will also trigger OSK shift state / layer reset.\r\n   **/\r\n  private pageFocusHandler: (e: FocusEvent) => boolean = () => {\r\n    if(!this.focusAssistant.maintainingFocus && this.engine.osk?.vkbd) {\r\n      this.engine.contextManager.deactivateCurrentTarget();\r\n      this.engine.contextManager.resetContext();\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Sets up page-default touch-based handling for activation-state management.\r\n  // These always trigger for the page, wherever a touch may occur. Does not\r\n  // prevent element-specific or OSK-key-specific handling from triggering.\r\n\r\n  private touchStartActivationHandler: (e: TouchEvent) => boolean = (e) => {\r\n    const osk = this.engine.osk;\r\n    if(!osk) {\r\n      return false;\r\n    }\r\n    const device = this.engine.config.hostDevice;\r\n\r\n    this.deactivateOnRelease=true;\r\n    this.touchY=e.touches[0].screenY;\r\n\r\n    // On Chrome, scrolling up or down causes the URL bar to be shown or hidden\r\n    // according to whether or not the document is at the top of the screen.\r\n    // But when doing that, each OSK row top and height gets modified by Chrome\r\n    // looking very ugly.  It would be best to hide the OSK then show it again\r\n    // when the user scroll finishes, but Chrome has no way to reliably report\r\n    // the touch end event after a move. c.f. http://code.google.com/p/chromium/issues/detail?id=152913\r\n    // The best compromise behaviour is simply to hide the OSK whenever any\r\n    // non-input and non-OSK element is touched.\r\n    this.deactivateOnScroll=false;\r\n    if(device.OS == 'android' && device.browser == 'chrome') {\r\n      // this.deactivateOnScroll has the inverse of the 'true' default,\r\n      // but that fact actually facilitates the following conditional logic.\r\n      if(typeof(osk._Box) == 'undefined') return false;\r\n      if(typeof(osk._Box.style) == 'undefined') return false;\r\n\r\n      // The following tests are needed to prevent the OSK from being hidden during normal input!\r\n      let p=(e.target as HTMLElement).parentElement;\r\n      if(typeof(p) != 'undefined' && p != null) {\r\n        if(p.getAttribute('class')?.indexOf('kmw-key-') >= 0) return false;\r\n        if(typeof(p.parentElement) != 'undefined' && p.parentElement != null) {\r\n          p=p.parentElement;\r\n          if(p.getAttribute('class')?.indexOf('kmw-key-') >= 0) return false;\r\n        }\r\n      }\r\n\r\n      this.deactivateOnScroll = true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  private touchMoveActivationHandler: (e: TouchEvent) => boolean = (e) => {\r\n    if(this.deactivateOnScroll) {  // Android / Chrone case.\r\n      this.focusAssistant.focusing = false;\r\n      this.engine.contextManager.deactivateCurrentTarget();\r\n    }\r\n\r\n    const y = e.touches[0].screenY;\r\n    const y0 = this.touchY;\r\n    if(y-y0 > 5 || y0-y < 5) {\r\n      this.deactivateOnRelease = false;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  private touchEndActivationHandler: (e: TouchEvent) => boolean = (e) => {\r\n    // Should not hide OSK if simply closing the language menu (30/4/15)\r\n    // or if the focusing timer (focusAssistant.setFocusTimer) is still active.\r\n    if(this.deactivateOnRelease && !this.engine.touchLanguageMenu && !this.focusAssistant.focusing) {\r\n      this.engine.contextManager.deactivateCurrentTarget();\r\n    }\r\n    this.deactivateOnRelease=false;\r\n    return false;\r\n  };\r\n\r\n\r\n  private _WindowLoad: (e: Event) => void = () => {\r\n    // Always return to top of page after a page reload\r\n    document.body.scrollTop=0;\r\n    if(typeof document.documentElement != 'undefined') {\r\n      document.documentElement.scrollTop=0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     _WindowUnload\r\n   * Scope        Private\r\n   * Description  Remove handlers before detaching KMW window\r\n   */\r\n  private _WindowUnload: () => void = () => {\r\n    // Future note:  should restrict this to anything for the corresponding document if on a\r\n    // child iframe, not the whole engine.\r\n    this.engine.shutdown();\r\n  }\r\n\r\n  private attachHandlers() {\r\n    const eventTracker = this.domEventTracker;\r\n    const device = this.engine.config.hostDevice;\r\n    const docBody = this.window.document.body;\r\n\r\n    eventTracker.attachDOMEvent(this.window, 'focus', this.pageFocusHandler, false);\r\n    eventTracker.attachDOMEvent(this.window, 'blur', this.pageFocusHandler, false);\r\n\r\n    /*\r\n     * To prevent propagation of focus & blur events from the input-scroll workaround,\r\n     * we attach top-level capturing listeners to the focus & blur events.  They prevent propagation\r\n     * but NOT default behavior, allowing the scroll to complete while preventing nearly all\r\n     * possible event 'noise' that could result from the workaround.\r\n     */\r\n    eventTracker.attachDOMEvent(docBody, 'focus', this.suppressFocusCheck, true);\r\n    eventTracker.attachDOMEvent(docBody, 'blur', this.suppressFocusCheck, true);\r\n\r\n    if(device.touchable) {\r\n      eventTracker.attachDOMEvent(docBody, 'touchstart', this.touchStartActivationHandler,false);\r\n      eventTracker.attachDOMEvent(docBody, 'touchmove',  this.touchMoveActivationHandler, false);\r\n      eventTracker.attachDOMEvent(docBody, 'touchend',   this.touchEndActivationHandler,  false);\r\n    }\r\n\r\n    eventTracker.attachDOMEvent(window, 'load',   this._WindowLoad,  false);\r\n    eventTracker.attachDOMEvent(window, 'unload', this._WindowUnload,false);\r\n\r\n    eventTracker.attachDOMEvent(document, 'keyup', this.engine.hotkeyManager._Process, false);\r\n  }\r\n\r\n  public shutdown() {\r\n    const eventTracker = this.domEventTracker;\r\n    const device = this.engine.config.hostDevice;\r\n    const docBody = this.window.document.body;\r\n\r\n    // See `attachHandlers` for the purpose behind all handlers listed here.\r\n\r\n    eventTracker.detachDOMEvent(this.window, 'focus', this.pageFocusHandler, false);\r\n    eventTracker.detachDOMEvent(this.window, 'blur', this.pageFocusHandler, false);\r\n\r\n    eventTracker.detachDOMEvent(docBody, 'focus', this.suppressFocusCheck, true);\r\n    eventTracker.detachDOMEvent(docBody, 'blur', this.suppressFocusCheck, true);\r\n\r\n    if(device.touchable) {\r\n      eventTracker.detachDOMEvent(docBody, 'touchstart', this.touchStartActivationHandler,false);\r\n      eventTracker.detachDOMEvent(docBody, 'touchmove',  this.touchMoveActivationHandler, false);\r\n      eventTracker.detachDOMEvent(docBody, 'touchend',   this.touchEndActivationHandler,  false);\r\n\r\n      this.mobilePageTrailer?.parentElement.removeChild(this.mobilePageTrailer);\r\n    }\r\n\r\n    eventTracker.detachDOMEvent(window, 'load',   this._WindowLoad,  false);\r\n    eventTracker.detachDOMEvent(window, 'unload', this._WindowUnload,false);\r\n\r\n    eventTracker.detachDOMEvent(document, 'keyup', this.engine.hotkeyManager._Process, false);\r\n  }\r\n}",
    "// Found a bit of magic formatting that allows dynamic return typing for a specified element tag!\r\nexport function _CreateElement<E extends \"p\"|\"style\"|\"script\"|\"div\"|\"canvas\"|\"span\">(nodeName:E) {\r\n  const e = document.createElement<E>(nodeName);\r\n  e.style.userSelect=\"none\";\r\n\r\n  // @ts-ignore\r\n  e.style.MozUserSelect=\"none\";\r\n  // @ts-ignore\r\n  e.style.KhtmlUserSelect=\"none\";\r\n  // @ts-ignore\r\n  e.style.UserSelect=\"none\";\r\n  // @ts-ignore\r\n  e.style.WebkitUserSelect=\"none\";\r\n  return e;\r\n}",
    "/**\r\n * Get browser-independent computed style value for element\r\n *\r\n * @param       {Element}     e             HTML element\r\n * @param       {string}      s             CSS style name\r\n * @return      {*}\r\n */\r\nexport function getStyleValue(e:HTMLElement, s:string) {\r\n  // Build 349: error trap added, since on iOS, getPropertyValue may fail\r\n  // and crash in some cases, possibly if passed a text node\r\n  try\r\n  {\r\n    if(e && (typeof(window.getComputedStyle) != 'undefined')) {\r\n        return window.getComputedStyle(e,'').getPropertyValue(s);\r\n    }\r\n  }\r\n  catch(ex){}\r\n\r\n  // Return empty string if unable to get style value\r\n  return '';\r\n}",
    "// Manages the language selection UI for touch-form factors, which is triggered by an OSK key.\r\nimport { getAbsoluteX, landscapeView } from \"keyman/engine/dom-utils\";\r\nimport { KeyboardStub } from \"keyman/engine/keyboard-storage\";\r\n\r\nimport KeymanEngine from \"./keymanEngine.js\";\r\nimport * as util from \"./utils/index.js\";\r\n\r\ninterface KeyboardTag {\r\n  /**\r\n   * Keyboard name\r\n   */\r\n  kn: string;\r\n\r\n  /**\r\n   * Keyboard language code\r\n   */\r\n  kc: string;\r\n}\r\n\r\ninterface LangBarTag {\r\n  kList: KeyboardStub[],\r\n  scrolled: boolean;\r\n}\r\n\r\n// Used by 'native'-mode KMW only - the Android and iOS embedding apps implement their own menus.\r\nexport class LanguageMenu {\r\n  private readonly keyman: KeymanEngine;\r\n\r\n  private lgList: HTMLDivElement;\r\n  private shim: HTMLDivElement;\r\n\r\n  private scrolling: boolean;\r\n  private activeLgNo: number;\r\n  private y0: number;\r\n\r\n  // A subset of CSSStyleDeclaration.\r\n  private originalBodyStyle: {overflowY?: string, height?: string};\r\n\r\n  constructor(keyman: KeymanEngine) {\r\n    this.keyman = keyman;\r\n    this.scrolling = false;\r\n\r\n    this.shim = this.constructShim();\r\n  }\r\n\r\n  constructShim(): HTMLDivElement {\r\n    let languageMenu = this;\r\n    let shim = util._CreateElement('div');\r\n    let osk = this.keyman.osk;\r\n\r\n    shim.id='kmw-language-menu-background';\r\n    shim.addEventListener('touchstart', (e) => {\r\n      e.preventDefault();\r\n      languageMenu.hide();\r\n\r\n      // Display build only if touching menu, space *and* one other point on screen (build 369)\r\n      if(e.touches.length > 2) {\r\n        var sX=e.touches[1].pageX,sY=e.touches[1].pageY;\r\n        let spaceBar = osk.vkbd.spaceBar;\r\n        if(sX > spaceBar.offsetLeft && sX < spaceBar.offsetLeft+spaceBar.offsetWidth &&\r\n           sY > spaceBar.offsetTop && sY < spaceBar.offsetTop+spaceBar.offsetHeight\r\n        ) {\r\n          this.keyman.osk.emit('showbuild');\r\n        }\r\n      }\r\n    },false);\r\n\r\n    return shim;\r\n  }\r\n\r\n  /**\r\n   * Display list of installed keyboards in pop-up menu\r\n   **/\r\n  show() {\r\n    const device = this.keyman.config.hostDevice;\r\n    let kbdList=this.keyman.keyboardRequisitioner.cache.getStubList();\r\n    let nKbds=kbdList.length;\r\n    if(nKbds < 1) {\r\n      return;\r\n    }\r\n\r\n    // Create the menu list container element\r\n    var menu=this.lgList=util._CreateElement('div');\r\n    this.lgList.id='kmw-language-menu';\r\n\r\n    // Insert a transparent overlay to prevent anything else happening during keyboard selection,\r\n    // but allow the menu to be closed if anywhere else on screen is touched\r\n\r\n    let languageMenu = this;\r\n\r\n    document.body.appendChild(this.shim);\r\n\r\n    // Add two nested DIVs to properly support iOS scrolling with momentum\r\n    //  c.f. https://github.com/joelambert/ScrollFix/issues/2\r\n    var m2=util._CreateElement('div'),s2=m2.style,\r\n        m3=util._CreateElement('div');\r\n    m2.id='kmw-menu-scroll-container'; m3.id='kmw-menu-scroller';\r\n\r\n    // Support momentum scrolling on iOS\r\n    if('WebkitOverflowScrolling' in s2) {\r\n      s2.WebkitOverflowScrolling='touch';\r\n    }\r\n\r\n    m2.appendChild(m3);\r\n    menu.appendChild(m2);\r\n\r\n    // Add menu index strip\r\n    let x,mx=util._CreateElement('div');\r\n    mx.id='kmw-menu-index';\r\n    for(let i=1; i<=26; i++) {\r\n      x=util._CreateElement('p');\r\n      x.innerHTML=String.fromCharCode(i+64);\r\n      mx.appendChild(x);\r\n    }\r\n\r\n    // Add index selection (for a large menu)\r\n    mx.addEventListener('touchstart',function(e){\r\n      languageMenu.scrollToLanguage(e, m2, m3);\r\n    }, false);\r\n    mx.addEventListener('touchend',function(e){\r\n      e.stopPropagation();\r\n    }, false);\r\n    menu.appendChild(mx);\r\n\r\n    //TODO: not sure if either of these two handlers ar actually needed.  touchmove handler may be doing all that is necessary.\r\n    // Add scroll end event handling to override body scroll\r\n    menu.addEventListener('scroll',function(e){\r\n      languageMenu.scrolling=true;\r\n    },false);\r\n    m2.addEventListener('scroll',function(e){\r\n      //this.lgList.scrolling=true;\r\n      if(m2.scrollTop < 1) {\r\n        m2.scrollTop=1;\r\n      }\r\n      if(m2.scrollTop > m2.scrollHeight-m2.offsetHeight-1) {\r\n        m2.scrollTop=m2.scrollHeight-m2.offsetHeight-1;\r\n      }\r\n    },false);\r\n\r\n    // Add a list of keyboards to the innermost DIV\r\n    this.activeLgNo=this.addLanguages(m3,kbdList);\r\n\r\n    // Do not display until sizes have been calculated\r\n    this.lgList.style.visibility='hidden';\r\n\r\n    // Append menu to document body, not to OSK\r\n    document.body.appendChild(this.lgList);\r\n\r\n    // Adjust size for viewport scaling (probably not needed for iOS, but check!)\r\n    if(device.OS == 'android' && 'devicePixelRatio' in window) {\r\n      this.lgList.style.fontSize=(2/window.devicePixelRatio)+'em';\r\n    }\r\n\r\n\r\n    // Adjust width for pixel scaling on Android tablets\r\n    if(device.OS == 'android' && device.formFactor == 'tablet' && 'devicePixelRatio' in window) {\r\n      var w=parseInt(util.getStyleValue(menu,'width'),10),\r\n      ms=menu.style;\r\n      if(!isNaN(w)) {\r\n        ms.width=ms.maxWidth=(2*w/window.devicePixelRatio)+'px';\r\n      }\r\n      w=parseInt(util.getStyleValue(m2,'width'),10);\r\n      ms=m2.style;\r\n      if(!isNaN(w)) {\r\n        ms.width=ms.maxWidth=(2*w/window.devicePixelRatio)+'px';\r\n      }\r\n      w=parseInt(util.getStyleValue(m3,'width'),10);\r\n      ms=m3.style;\r\n      if(!isNaN(w)) {\r\n        ms.width=ms.maxWidth=(2*w/window.devicePixelRatio)+'px';\r\n      }\r\n    }\r\n\r\n    // Adjust initial top and height of menu\r\n    this.adjust(0);\r\n\r\n    // Adjust the index font size and line height\r\n    var dy=(<HTMLElement>mx.childNodes[1]).offsetTop-(<HTMLElement>mx.childNodes[0]).offsetTop,\r\n        lineHeight=Math.floor(menu.offsetHeight/26.0),\r\n        scale=Math.round(100.0*lineHeight/dy)/100.0,\r\n        factor=(scale > 0.6 ? 1 : 2);\r\n\r\n    if(scale > 1.25) {\r\n      scale=1.25;\r\n    }\r\n\r\n    for(let i=0;i<26;i++) {\r\n      var qs=(<HTMLElement>mx.childNodes[i]).style;\r\n      if(factor == 2 && (i%2) == 1) {\r\n        qs.display='none';\r\n      } else {\r\n        qs.fontSize=(scale*factor)+'em';\r\n        qs.lineHeight=(lineHeight*factor)+'px';\r\n      }\r\n    }\r\n\r\n    // Increase width of outer menu DIV by index, else hide index\r\n    var menuWidth=m2.offsetWidth;\r\n    if(m2.scrollHeight > m2.offsetHeight+3) {\r\n      menuWidth = menuWidth+mx.offsetWidth;\r\n    } else {\r\n      mx.style.display='none';\r\n    }\r\n\r\n    menu.style.width=menuWidth+'px';\r\n\r\n    // Now display the menu\r\n    this.lgList.style.visibility='';\r\n\r\n    this.scrollToIndex(this.activeLgNo, m2, m3);\r\n  }\r\n\r\n  /**\r\n   * Adjust top and height of language menu\r\n   *\r\n   * @param   {number}  nKbds number of displayed keyboards to add to number of languages\r\n   **/\r\n  adjust(nKbds: number) {\r\n    let osk = this.keyman.osk;\r\n    let device = this.keyman.config.hostDevice;\r\n\r\n    var menu=this.lgList, m2=<HTMLElement>menu.firstChild, m3=<HTMLElement>m2.firstChild,\r\n      barWidth=0,s=menu.style,mx=<HTMLElement>menu.childNodes[1],\r\n      maxHeight=window.innerHeight-osk.vkbd.lgKey.offsetHeight-16,\r\n      nItems=m3.childNodes.length+nKbds-1,      // Number of (visible) keyboard selectors\r\n      itemHeight=(<HTMLElement>m3.firstChild.firstChild).offsetHeight,\r\n      menuHeight=nItems*itemHeight;\r\n\r\n    // Correct maxheight for viewport scaling (iPhone/iPod only) and internal position corrections\r\n    if(device.OS == 'ios') {\r\n      if(device.formFactor == 'phone') {\r\n        barWidth=(landscapeView() ? 36 : 0);\r\n        maxHeight=(window.innerHeight-barWidth-16)*util.getViewportScale(device.formFactor);\r\n      } else if(device.formFactor == 'tablet') {\r\n        barWidth=(landscapeView() ? 16 : 0);\r\n        maxHeight=(maxHeight-barWidth);\r\n      }\r\n    }\r\n\r\n    // Explicitly set position and height\r\n    s.left = getAbsoluteX(osk.vkbd.lgKey)+'px';\r\n    if(menuHeight > maxHeight) {\r\n      menuHeight=maxHeight;\r\n    }\r\n    s.height=menuHeight+'px';\r\n\r\n    // Position menu at bottom of screen using the same positioning model as the OSK.\r\n    s.bottom='0px';\r\n\r\n    // Explicitly set the scroller and index heights to the container height\r\n    mx.style.height=m2.style.height=s.height;\r\n  }\r\n\r\n  /**\r\n   * Add an index to the language menu\r\n   *\r\n   *  @param  {Object}  e         touch start event from index\r\n   *  @param  {Object}  m2        menu scroller DIV\r\n   *  @param  {Object}  menu      DIV with list of languages\r\n   */\r\n  scrollToLanguage(e: TouchEvent, m2: HTMLDivElement, menu: HTMLDivElement) {\r\n    e.stopImmediatePropagation();\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n\r\n    let target = <HTMLElement> e.touches[0].target;\r\n\r\n    // Will return 'P', not 'p'.\r\n    if(target.nodeName != 'P') {\r\n      return;\r\n    }\r\n\r\n    var i,t,initial=target.innerHTML.charCodeAt(0),nn=menu.childNodes;\r\n    try {\r\n      for(i=0; i<nn.length-1; i++) {\r\n        t=(<HTMLElement>nn[i].firstChild).innerHTML.toUpperCase().charCodeAt(0);\r\n        if(t >= initial) {\r\n          break;\r\n        }\r\n      }\r\n    } catch(ex){}\r\n\r\n    this.scrollToIndex(i, m2, menu);\r\n  }\r\n\r\n  scrollToIndex(index: number, m2: HTMLDivElement, menu: HTMLDivElement) {\r\n    let top: number;\r\n\r\n    // Will leave this much portion of the last pre-index item visible.\r\n    // 0.5 => 50%.\r\n    const SCROLL_ITEM_BUFFER = 0.5;\r\n    try {\r\n      top=(<HTMLElement>menu.firstChild).getBoundingClientRect().height*(index-SCROLL_ITEM_BUFFER)+1;\r\n      m2.scrollTop=top;\r\n    } catch(ex) {\r\n      top=0;\r\n    }\r\n\r\n    try {\r\n      // Clamp the language menu scroll within boundaries - do not leave \"whitespace\" either\r\n      // before or after all menu items due to scroll positioning near list borders.\r\n      if(m2.scrollTop < 0) {\r\n        m2.scrollTop = 0;\r\n      }\r\n      if(m2.scrollTop > m2.scrollHeight-m2.offsetHeight-1) {\r\n        m2.scrollTop=m2.scrollHeight-m2.offsetHeight-1;\r\n      }\r\n    } catch(ex){}\r\n  }\r\n\r\n  /**\r\n   * Display all languages for installed keyboards in scrollable list\r\n   *\r\n   *    @param    {Object}    menu      DIV to which language selectors will be added\r\n   *    @param    {Object}    kbdList   array of keyboard stub objects\r\n   *    @return   {number}              index of currently active language\r\n   **/\r\n  addLanguages(menu: HTMLDivElement, kbdList: KeyboardStub[]): number {\r\n    var nStubs=kbdList.length;\r\n    let device = this.keyman.config.hostDevice;\r\n\r\n    // Create and sort a list of languages\r\n    let langs: string[] = [];\r\n    for(let n=0; n<nStubs; n++) {\r\n      const lg=kbdList[n]['KL'];\r\n      if(langs.indexOf(lg) == -1) {\r\n        langs.push(lg);\r\n      }\r\n    }\r\n    langs.sort();\r\n\r\n    // Get current scale factor (reciprocal of viewport scale)\r\n    var scale=Math.round(100/util.getViewportScale(device.formFactor))/100;\r\n\r\n    let activeLanguageIndex=-1;\r\n\r\n    for(let k=0; k<langs.length; k++) {\r\n      const dx=util._CreateElement('div');\r\n      dx.className='kbd-list-closed';\r\n      const lgBar = util._CreateElement('p') as HTMLParagraphElement & LangBarTag & KeyboardTag;\r\n      lgBar.kList=[];\r\n\r\n      for(let n=0; n<nStubs; n++) {\r\n        if(kbdList[n]['KL'] == langs[k]) {\r\n          lgBar.kList.push(kbdList[n]);\r\n        }\r\n      }\r\n\r\n      // Adjust bar size for current viewport scaling (iOS only!)\r\n      if(device.OS == 'ios') {\r\n        lgBar.style.fontSize=scale+'em';\r\n      }\r\n\r\n      // Add to menu\r\n      dx.appendChild(lgBar);\r\n      menu.appendChild(dx);\r\n\r\n      if(langs[k] == this.keyman.contextManager.activeKeyboard?.metadata.langName) {\r\n        activeLanguageIndex=k;\r\n      }\r\n\r\n      const languageMenu = this;\r\n      // Several keyboards for this language\r\n      if(lgBar.kList.length > 1) {\r\n        lgBar.className='kbd-list';\r\n        lgBar.innerHTML=langs[k]+'...';\r\n        lgBar.scrolled=false;\r\n        lgBar.ontouchend = (e) => {\r\n          e.stopPropagation();\r\n          if(lgBar.scrolled) {\r\n            lgBar.scrolled=false;\r\n          } else {\r\n            lgBar.parentElement.className=(lgBar.parentElement.className=='kbd-list-closed'?'kbd-list-open':'kbd-list-closed');\r\n          }\r\n\r\n          // Adjust top of menu to allow for expanded list\r\n          languageMenu.adjust(lgBar.parentElement.className=='kbd-list-closed' ? 0 : lgBar.kList.length);\r\n        }\r\n\r\n        lgBar.addEventListener('touchstart',function(e){e.stopPropagation();},false);\r\n        lgBar.addEventListener('touchmove',function(e){lgBar.scrolled=true;e.stopPropagation();},false);\r\n\r\n        for(let i=0; i<lgBar.kList.length; i++) {\r\n          const kb=util._CreateElement('p') as HTMLParagraphElement & KeyboardTag;\r\n          kb.className='kbd-list-entry';\r\n          if(device.OS == 'ios') {\r\n            kb.style.fontSize=scale+'em';\r\n          }\r\n          this.addKeyboard(lgBar.kList[i], kb, false);\r\n          dx.appendChild(kb);\r\n        }\r\n        // Only one keyboard for this language\r\n      } else {\r\n        lgBar.innerHTML=langs[k];\r\n        lgBar.className='kbd-single-entry';\r\n        this.addKeyboard(lgBar.kList[0], lgBar, true);\r\n      }\r\n\r\n      if(k == activeLanguageIndex) {\r\n        lgBar.className=lgBar.className+' current';\r\n      }\r\n    }\r\n\r\n    // Add a non-selectable bottom bar so to allow scrolling to the last language\r\n    var padLast=util._CreateElement('div');\r\n    padLast.id='kmw-menu-footer';\r\n    var cancelTouch=function(e: TouchEvent){\r\n      if(e.cancelable) {\r\n        e.preventDefault();\r\n      }\r\n      e.stopPropagation();\r\n    };\r\n    padLast.addEventListener('touchstart',cancelTouch,false);\r\n    padLast.addEventListener('touchmove',cancelTouch,false);\r\n    padLast.addEventListener('touchend',cancelTouch,false);\r\n    menu.appendChild(padLast);\r\n\r\n    return activeLanguageIndex;\r\n  }\r\n\r\n  /**\r\n   * Add a keyboard entry to the language menu *\r\n   *\r\n   * @param   {Object}    kbd     keyboard object\r\n   * @param   {Object}    kb      element being added and styled\r\n   * @param   {boolean}   unique  is this the only keyboard for the language?\r\n   */\r\n  addKeyboard(kbd: KeyboardStub, kb: HTMLParagraphElement & KeyboardTag, unique: boolean) {\r\n    kb.kn=kbd['KI'];        // InternalName;\r\n    kb.kc=kbd['KLC'];       // LanguageCode;\r\n    kb.innerHTML=unique ? kbd['KL'] : kbd['KN'].replace(' Keyboard',''); // Name\r\n\r\n    // We're setting up a few events - this alias helps avoid scoping issues.\r\n    const languageMenu = this;\r\n\r\n    // Refer to https://github.com/keymanapp/keyman/pull/7790 for context on\r\n    // the following two methods.\r\n    const lockBodyScroll = () => {\r\n      // If this object still exists, we never ran our paired `unlock` method;\r\n      // preserve the original state so that we can still restore it later!\r\n      if(this.originalBodyStyle) {\r\n        console.error(\"Unexpected state:  `originalBodyStyle` was not cleared by a previous `unlockBodyScroll()` call\");\r\n        return false;\r\n      }\r\n\r\n      // Preserve the original style for the body element; we're going to change\r\n      // it to block page scrolling.  Must use a separate instance.\r\n      //\r\n      // Reference: https://stackoverflow.com/a/28411556\r\n      this.originalBodyStyle = {};\r\n\r\n      // Must be separate line from previous due to TS type inference stuff.\r\n      const obs = this.originalBodyStyle;\r\n      const dbs = document.body.style;\r\n      obs.overflowY = dbs.overflowY;\r\n      obs.height = dbs.height;\r\n\r\n      // Now that the properties we're going to overwrite have been cached...\r\n      dbs.overflowY = 'hidden';\r\n      dbs.height = '100%';\r\n      return true;\r\n    }\r\n\r\n    const unlockBodyScroll = () => {\r\n      if(!this.originalBodyStyle) {\r\n        // We shouldn't be able to reach here, but in case things go out-of-order due\r\n        // to some unforeseen circumstance, let's null-guard here.\r\n        console.error(\"Unexpected state:  `originalBodyStyle` is unset; cannot restore original body style\");\r\n        return;\r\n      }\r\n\r\n      // Reverses the changes to document.body.style made by `lockBodyScroll`.\r\n      const obs = this.originalBodyStyle;\r\n      const dbs = document.body.style;\r\n\r\n      dbs.overflowY = obs.overflowY;\r\n      dbs.height = obs.height;\r\n\r\n      // Successful restoration!  Clear the \"restore to this\" state so that the\r\n      // next 'lock' operation knows to do its part.\r\n      this.originalBodyStyle = null;\r\n    }\r\n\r\n    // Touchstart (or mspointerdown) event highlights the touched list item\r\n    const touchStart = function(this: HTMLElement, e: TouchEvent) {\r\n\r\n      e.stopPropagation();\r\n      if(this.className.indexOf('selected') <= 0) {\r\n        this.className=this.className+' selected';\r\n      }\r\n      languageMenu.scrolling=false;\r\n      languageMenu.y0=e.touches[0].pageY;//osk.lgList.childNodes[0].scrollTop;\r\n\r\n      lockBodyScroll();\r\n    };\r\n\r\n    //TODO: Still drags Android background sometimes (not consistently)\r\n    // Touchmove drags the list and prevents release from selecting the language\r\n    const touchMove=function(this: HTMLElement, e: TouchEvent) {\r\n      e.stopImmediatePropagation();\r\n      var scroller=<HTMLElement>languageMenu.lgList.childNodes[0],\r\n          yMax=scroller.scrollHeight-scroller.offsetHeight,\r\n      y, dy;\r\n\r\n      // TS does not have a standard definition for TouchEvent.pageY.\r\n      //@ts-ignore\r\n      if(\"undefined\" != typeof e.pageY) {\r\n        //@ts-ignore\r\n        y = e.pageY;\r\n      } else if(\"undefined\" != typeof e.touches) {\r\n        y = e.touches[0].pageY;\r\n      } else {\r\n        return false;\r\n      }\r\n\r\n      dy=y-languageMenu.y0;\r\n\r\n      // Scroll up (show later listed languages)\r\n      if(dy < 0) {\r\n        if(scroller.scrollTop >= yMax-1) {\r\n          languageMenu.y0=y;\r\n        }\r\n        // Scroll down (show earlier listed languages)\r\n      } else if(dy > 0) {\r\n        if(scroller.scrollTop < 2) {\r\n          languageMenu.y0=y;\r\n        }\r\n        // Dont' scroll - can happen if changing scroll direction\r\n      } else {\r\n        return false;\r\n      }\r\n\r\n      // Disable selected language if drag more than 5px\r\n      if(dy < -5 || dy > 5) {\r\n        languageMenu.scrolling=true;\r\n        this.className=this.className.replace(/\\s*selected/,'');\r\n        languageMenu.y0=y;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    // Touch release (click) event selects touched list item\r\n    const touchEnd=function(this: HTMLElement, e: TouchEvent) {\r\n      const entry = this as HTMLElement & KeyboardTag;\r\n      if(typeof(e.stopImmediatePropagation) != 'undefined') {\r\n        e.stopImmediatePropagation();\r\n      } else {\r\n        e.stopPropagation();\r\n      }\r\n\r\n      if(languageMenu.scrolling) {\r\n        this.className=this.className.replace(/\\s*selected/,'');\r\n      } else {\r\n        languageMenu.keyman.contextManager.focusAssistant.setFocusTimer(); // #5946\r\n\r\n        languageMenu.lgList.style.display='none'; //still allows blank menu momentarily on selection\r\n        languageMenu.keyman.contextManager.activateKeyboard(entry.kn, entry.kc,true);\r\n        languageMenu.keyman.contextManager.restoreLastActiveTarget();\r\n        languageMenu.hide();\r\n      }\r\n\r\n      unlockBodyScroll();\r\n      return true;\r\n    };\r\n\r\n    const touchCancel=function(e: TouchEvent) {\r\n      unlockBodyScroll();\r\n    }\r\n\r\n    kb.addEventListener('touchstart',touchStart,false);\r\n    kb.addEventListener('touchmove',touchMove,false);\r\n    kb.addEventListener('touchend',touchEnd,false);\r\n    kb.addEventListener('touchcancel',touchCancel,false);\r\n  }\r\n\r\n  /**\r\n   * Remove the language menu again\r\n   **/\r\n  hide() {\r\n    let osk = this.keyman.osk;\r\n\r\n    if(this.lgList) {\r\n      osk.vkbd.highlightKey(osk.vkbd.lgKey,false);\r\n      this.lgList.style.visibility='hidden';\r\n\r\n      window.setTimeout(() => {\r\n        // In case of extremely rapid keyboard swaps, this event may trigger more than once -\r\n        // the shim's on-touch event can trigger after a keyboard has been selected!\r\n        if(this.shim.parentElement) {\r\n          document.body.removeChild(this.shim);\r\n          document.body.removeChild(this.lgList);\r\n        }\r\n      },500);\r\n    }\r\n\r\n    this.keyman.touchLanguageMenu = null;\r\n  }\r\n}",
    "import { OSKView } from \"keyman/engine/osk\";\r\nimport { KEYMAN_VERSION } from \"@keymanapp/keyman-version\";\r\nimport ContextManager from \"./contextManager.js\";\r\nimport KeymanEngine from \"./keymanEngine.js\";\r\nimport { LanguageMenu } from \"./languageMenu.js\";\r\n\r\nexport function setupOskListeners(engine: KeymanEngine, osk: OSKView, contextManager: ContextManager) {\r\n  const focusAssistant = contextManager.focusAssistant;\r\n\r\n  osk.on('globekey', (key, on) => { // K_LOPT\r\n    if(on) {\r\n      if(osk.hostDevice.touchable) {\r\n        engine.touchLanguageMenu = new LanguageMenu(engine);\r\n        engine.touchLanguageMenu.show();\r\n      }\r\n    }\r\n\r\n    if(osk.vkbd) {\r\n      osk.vkbd.highlightKey(key, false); // never leave the globe key highlighted\r\n    }\r\n  });\r\n\r\n  osk.on('hiderequested', (key) => { // K_ROPT\r\n    if(osk) {\r\n      osk.startHide(true);\r\n      contextManager.forgetActiveTarget();\r\n    }\r\n  });\r\n\r\n  osk.addEventListener('hide', (params) => {\r\n    // If hidden by the UI, be sure to restore the focus\r\n    if(params?.HiddenByUser) {\r\n      contextManager.activeTarget?.focus();\r\n    }\r\n  });\r\n\r\n  osk.on('showbuild', () => {\r\n    engine.config.alertHost?.alert('KeymanWeb Version ' + KEYMAN_VERSION.VERSION + '<br /><br />'\r\n      +'<span style=\"font-size:0.8em\">Copyright &copy; 2007-2023 SIL International</span>');\r\n  });\r\n\r\n  osk.on('dragmove', async (promise) => {\r\n    focusAssistant.restoringFocus = true;\r\n\r\n    await promise;\r\n\r\n    contextManager.restoreLastActiveTarget();\r\n\r\n    focusAssistant.restoringFocus = false;\r\n    focusAssistant.setMaintainingFocus(false);\r\n  });\r\n\r\n  osk.on('resizemove', async (promise) => {\r\n    focusAssistant.restoringFocus = true;\r\n\r\n    await promise;\r\n    contextManager.restoreLastActiveTarget();\r\n\r\n    focusAssistant.restoringFocus = false;\r\n    focusAssistant.setMaintainingFocus(false);\r\n  });\r\n\r\n  osk.on('pointerinteraction', async (promise) => {\r\n   // On event start\r\n   focusAssistant.setMaintainingFocus(true);\r\n\r\n   await promise;\r\n\r\n   focusAssistant.setMaintainingFocus(false);\r\n  });\r\n}",
    "\r\nimport {\r\n  CookieSerializer,\r\n  createStyleSheet,\r\n  getAbsoluteX,\r\n  getAbsoluteY,\r\n  StylesheetManager\r\n } from \"keyman/engine/dom-utils\";\r\nimport { DomEventTracker } from \"keyman/engine/events\";\r\nimport { BrowserConfiguration, BrowserInitOptionSpec } from \"./configuration.js\";\r\nimport { getStyleValue } from \"./utils/getStyleValue.js\";\r\nimport { AlertHost } from \"./utils/alertHost.js\";\r\nimport { PathConfiguration } from 'keyman/engine/interfaces';\r\n\r\n/**\r\n * Calls document.createElement for the specified node type and also applies\r\n * 'user-select: none' styling to the new element.\r\n * @param nodeName\r\n * @returns\r\n */\r\nexport function createUnselectableElement<E extends keyof HTMLElementTagNameMap>(nodeName:E) {\r\n  const e = document.createElement<E>(nodeName);\r\n  e.style.userSelect=\"none\";\r\n  return e;\r\n}\r\n\r\n/**\r\n * Defines the base object for the long-standing `keyman.util` API methods, maintaining\r\n * their long-standing names and signatures as defined at\r\n * https://help.keyman.com/developer/engine/web/current-version/reference/util/\r\n */\r\nexport class UtilApiEndpoint {\r\n  readonly config: BrowserConfiguration;\r\n  private readonly stylesheetManager: StylesheetManager;\r\n  private readonly domEventTracker: DomEventTracker;\r\n  private _alertHost: AlertHost;\r\n\r\n  constructor(config: BrowserConfiguration) {\r\n    this.config = config;\r\n    this.stylesheetManager = new StylesheetManager(document.body, config.applyCacheBusting);\r\n    this.domEventTracker = new DomEventTracker();\r\n  }\r\n\r\n  /**\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/getAbsoluteX\r\n   */\r\n  public readonly getAbsoluteX = getAbsoluteX;\r\n\r\n  /**\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/getAbsoluteY\r\n   */\r\n  public readonly getAbsoluteY = getAbsoluteY;\r\n\r\n  // These four were renamed, but we need to maintain their legacy names.\r\n  readonly _GetAbsoluteX = getAbsoluteX;\r\n  readonly _GetAbsoluteY = getAbsoluteY;\r\n  readonly _GetAbsolute = this.getAbsolute;\r\n\r\n  /**\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/toNzString\r\n   */\r\n  public readonly toNzString = this.nzString;\r\n\r\n  /**\r\n   * Expose the touchable state for UIs - will disable external UIs entirely\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/isTouchDevice\r\n   **/\r\n  public isTouchDevice(): boolean {\r\n    return this.config.hostDevice.touchable;\r\n  }\r\n\r\n  /**\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/getAbsolute\r\n   */\r\n  public getAbsolute(elem: HTMLElement): { x: number, y: number } {\r\n    return {\r\n      x: getAbsoluteX(elem),\r\n      y: getAbsoluteY(elem)\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calls document.createElement for the specified node type and also applies\r\n   * 'user-select: none' styling to the new element.\r\n   * @param nodeName\r\n   * @returns\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/createElement\r\n   */\r\n  public readonly createElement = createUnselectableElement;\r\n\r\n  /**\r\n   * Function     getOption\r\n   * Scope        Public\r\n   * @param       {string}    optionName  Name of option\r\n   * @param       {*=}        dflt        Default value of option\r\n   * @return      {*}\r\n   * Description  Returns value of named option\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/getOption\r\n   */\r\n  public getOption(optionName: keyof BrowserInitOptionSpec, dflt?:any): any {\r\n    if(optionName in this.config.paths) {\r\n      return this.config.paths[optionName as keyof PathConfiguration];\r\n    } else if(optionName in this.config.options) {\r\n      return this.config.options[optionName];\r\n    } else if(arguments.length > 1) {\r\n      return dflt;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/setOption\r\n   *\r\n   * Note:  the 'attachType' and 'ui' options currently cannot be changed via this method.\r\n   */\r\n  public setOption(optionName: keyof BrowserInitOptionSpec, value: any): void {\r\n    switch(optionName) {\r\n      case 'attachType':\r\n        // 16.0 & before:  did nothing.\r\n        // Fixable for 17.0 with some extra work, but the changes would likely be enough to\r\n        // merit a focused PR.  It's not 100% straightforward.\r\n        break;\r\n      case 'ui':\r\n        // 16.0 & before:  relies on the Float UI to passively pick up on any changes.\r\n        // Only appears to be effective before the Float UI initializes.\r\n        break;\r\n      case 'useAlerts':\r\n        this.config.signalUser = (value ? new AlertHost() : null);\r\n        break;\r\n      case 'setActiveOnRegister':\r\n        this.config.activateFirstKeyboard = !!value;\r\n        break;\r\n      case 'spacebarText':\r\n        this.config.spacebarText = value;\r\n        break;\r\n      default:\r\n        throw new Error(\"Path-related options may not be changed after the engine has initialized.\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Document cookie parsing for use by kernel, OSK, UI etc.\r\n   *\r\n   * @param       {string=}       cn        cookie name (optional)\r\n   * @return      {Object}                  array of names and strings, or array of variables and values\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/loadCookie\r\n   */\r\n  public loadCookie<CookieType extends Record<keyof CookieType, string | number | boolean>>(cn?: string) {\r\n    const cookie = new CookieSerializer<CookieType>(cn);\r\n    return cookie.load(decodeURIComponent);\r\n  }\r\n\r\n  /**\r\n   * Standard cookie saving for use by kernel, OSK, UI etc.\r\n   *\r\n   * @param       {string}      cn            name of cookie\r\n   * @param       {Object}      cv            object with array of named arguments and values\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/saveCookie\r\n   */\r\n  public saveCookie<CookieType extends Record<keyof CookieType, string | number | boolean>>(cn: string, cv: CookieType) {\r\n    const cookie = new CookieSerializer<CookieType>(cn);\r\n    cookie.save(cv, encodeURIComponent);\r\n  }\r\n\r\n  /**\r\n   * Add a stylesheet to a page programmatically, for use by the OSK, the UI or the page creator\r\n   *\r\n   * @param       {string}        s             style string\r\n   * @return      {Object}                      returns the object reference\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/addStyleSheet\r\n   **/\r\n  public addStyleSheet(s: string): HTMLStyleElement {\r\n    const styleSheet = createStyleSheet(s);\r\n    this.stylesheetManager.linkStylesheet(styleSheet);\r\n\r\n    return styleSheet;\r\n  }\r\n\r\n  /**\r\n   * Remove a stylesheet element\r\n   *\r\n   * @param       {Object}        s             style sheet reference\r\n   * @return      {boolean}                     false if element is not a style sheet\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/removeStyleSheet\r\n   **/\r\n  public removeStyleSheet(s: HTMLStyleElement) {\r\n    return this.stylesheetManager.unlink(s);\r\n  }\r\n\r\n  /**\r\n   * Add a reference to an external stylesheet file\r\n   *\r\n   * @param   {string}  s   path to stylesheet file\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/linkStyleSheet\r\n   */\r\n  public linkStyleSheet(s: string): void {\r\n    this.stylesheetManager.linkExternalSheet(s);\r\n  }\r\n\r\n  // Possible alternative:  https://www.npmjs.com/package/language-tags\r\n  // This would necessitate linking in a npm module into compiled KeymanWeb, though.\r\n  getLanguageCodes(lgCode: string): string[] {\r\n    if(lgCode.indexOf('-')==-1) {\r\n      return [lgCode];\r\n    } else {\r\n      return lgCode.split('-');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     attachDOMEvent: Note for most browsers, adds an event to a chain, doesn't stop existing events\r\n   * Scope        Public\r\n   * @param       {Object}    Pelem       Element (or IFrame-internal Document) to which event is being attached\r\n   * @param       {string}    Peventname  Name of event without 'on' prefix\r\n   * @param       {function(Object)}  Phandler    Event handler for event\r\n   * @param       {boolean=}  PuseCapture True only if event to be handled on way to target element\r\n   * Description  Attaches event handler to element DOM event\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/attachDOMEvent\r\n   */\r\n  attachDOMEvent<K extends keyof WindowEventMap>(\r\n    Pelem: Window,\r\n    Peventname: K,\r\n    Phandler: (ev: WindowEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  attachDOMEvent<K extends keyof DocumentEventMap>(\r\n    Pelem: Document,\r\n    Peventname: K,\r\n    Phandler: (ev: DocumentEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  attachDOMEvent<K extends keyof HTMLElementEventMap>(\r\n    Pelem: HTMLElement,\r\n    Peventname: K,\r\n    Phandler: (ev: HTMLElementEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  public attachDOMEvent(Pelem: EventTarget, Peventname: string, Phandler: (arg0: Object) => boolean, PuseCapture?: boolean): void {\r\n    // TS can't quite track the type inference forwarding here.\r\n    this.domEventTracker.attachDOMEvent(Pelem as any, Peventname as any, Phandler, PuseCapture);\r\n  }\r\n\r\n  /**\r\n   * Function     detachDOMEvent\r\n   * Scope        Public\r\n   * @param       {Object}    Pelem       Element from which event is being detached\r\n   * @param       {string}    Peventname  Name of event without 'on' prefix\r\n   * @param       {function(Object)}  Phandler    Event handler for event\r\n   * @param       {boolean=}  PuseCapture True if event was being handled on way to target element\r\n   * Description Detaches event handler from element [to prevent memory leaks]\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/detachDOMEvent\r\n   */\r\n  detachDOMEvent<K extends keyof WindowEventMap>(\r\n    Pelem: Window,\r\n    Peventname: K,\r\n    Phandler: (ev: WindowEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  detachDOMEvent<K extends keyof DocumentEventMap>(\r\n    Pelem: Document,\r\n    Peventname: K,\r\n    Phandler: (ev: DocumentEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  detachDOMEvent<K extends keyof HTMLElementEventMap>(\r\n    Pelem: HTMLElement,\r\n    Peventname: K,\r\n    Phandler: (ev: HTMLElementEventMap[K]) => any,\r\n    PuseCapture?: boolean\r\n  ): void;\r\n  public detachDOMEvent(Pelem: EventTarget, Peventname: string, Phandler: (arg0: Object) => boolean, PuseCapture?: boolean): void {\r\n    // TS can't quite track the type inference forwarding here.\r\n    this.domEventTracker.detachDOMEvent(Pelem as any, Peventname as any, Phandler, PuseCapture);\r\n  }\r\n\r\n  getStyleValue = getStyleValue;\r\n\r\n  private get alertHost(): AlertHost {\r\n    if(this.config.alertHost) {\r\n      return this.config.alertHost;\r\n    } else if(!this._alertHost) {\r\n      // Lazy init:  if KMW is set to not show alerts, we try not to initialize the alert host.\r\n      // If the .alert API is called, though, we have no choice.\r\n      this._alertHost = new AlertHost();\r\n    }\r\n\r\n    return this._alertHost;\r\n  }\r\n\r\n  /**\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/alert.\r\n   */\r\n  public alert(s: string, fn: () => void) {\r\n    this.alertHost.alert(s, fn);\r\n  }\r\n\r\n  /**\r\n   * Function     toNzString\r\n   * Scope        Public\r\n   * @param       {*}           item         variable to test\r\n   * @param       {?*=}         dflt         default value\r\n   * @return      {*}\r\n   * Description  Test if a variable is null, false, empty string, or undefined, and return as string\r\n   */\r\n  public nzString(item: any, dflt: string): string {\r\n    // // ... is this whole thing essentially just:\r\n    // return '' + (item || dflt || '');\r\n    // // ?\r\n\r\n    let dfltValue = '';\r\n    if(arguments.length > 1) {\r\n      dfltValue = dflt;\r\n    }\r\n\r\n    if(typeof(item) == 'undefined') {\r\n      return dfltValue;\r\n    }\r\n\r\n    if(item == null) {\r\n      return dfltValue;\r\n    }\r\n\r\n    if(item == 0 || item == '') {\r\n      return dfltValue;\r\n    }\r\n\r\n    return ''+item;\r\n  }\r\n\r\n  /**\r\n   * Function     toNumber\r\n   * Scope        Public\r\n   * @param       {string}      s            numeric string\r\n   * @param       {number}      dflt         default value\r\n   * @return      {number}\r\n   * Description  Return string converted to integer or default value\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/toNumber\r\n   */\r\n  public toNumber(s: string, dflt: number): number {\r\n    const x = parseInt(s,10);\r\n    return isNaN(x) ? dflt : x;\r\n  }\r\n\r\n  /**\r\n   * Function     toFloat\r\n   * Scope        Public\r\n   * @param       {string}      s            numeric string\r\n   * @param       {number}      dflt         default value\r\n   * @return      {number}\r\n   * Description  Return string converted to real value or default value\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/toFloat\r\n   */\r\n  public toFloat(s: string, dflt: number): number {\r\n    const x = parseFloat(s);\r\n    return isNaN(x) ? dflt : x;\r\n  }\r\n\r\n  /**\r\n   * Function     rgba\r\n   * Scope        Public\r\n   * @param       {Object}      s           element style object\r\n   * @param       {number}      r           red value, 0-255\r\n   * @param       {number}      g           green value, 0-255\r\n   * @param       {number}      b           blue value, 0-255\r\n   * @param       {number}      a           opacity value, 0-1.0\r\n   * @return      {string}                  background colour style string\r\n   * Description  Browser-independent alpha-channel management\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/util/rgba\r\n   */\r\n  public rgba(s: HTMLStyleElement, r:number, g:number, b:number, a:number): string {\r\n    let bgColor='transparent';\r\n    try {\r\n      bgColor='rgba('+r+','+g+','+b+','+a+')';\r\n    } catch(ex) {\r\n      bgColor='rgb('+r+','+g+','+b+')';\r\n    }\r\n\r\n    return bgColor;\r\n  }\r\n\r\n  shutdown() {\r\n    this.stylesheetManager?.unlinkAll();\r\n    this.domEventTracker?.shutdown();\r\n    this._alertHost?.shutdown();\r\n  }\r\n}",
    "import { _GetEventKeyCode } from \"./hardwareEventKeyboard.js\";\r\n\r\nclass Hotkey {\r\n  code: number;\r\n  shift: number;\r\n  handler: () => void\r\n\r\n  constructor(code: number, shift: number, handler: () => void) {\r\n    this.code = code;\r\n    this.shift = shift;\r\n    this.handler = handler;\r\n  }\r\n\r\n  matches(keyCode: number, shiftState: number): boolean {\r\n    return (this.code == keyCode && this.shift == shiftState);\r\n  }\r\n}\r\n\r\nexport class HotkeyManager {\r\n  hotkeys: Hotkey[] = [];\r\n\r\n  /**\r\n   * Function     addHotkey\r\n   * Scope        Public\r\n   * @param       {number}            keyCode\r\n   * @param       {number}            shiftState\r\n   * @param       {function(Object)}  handler\r\n   * Description  Add hot key handler to array of document-level hotkeys triggered by key up event\r\n   */\r\n  addHotKey(keyCode: number, shiftState: number, handler: () => void) {\r\n    // Test if existing handler for this code and replace it if so\r\n    for(var i=0; i<this.hotkeys.length; i++) {\r\n      if(this.hotkeys[i].code == keyCode && this.hotkeys[i].shift == shiftState) {\r\n        this.hotkeys[i].handler = handler;\r\n        return;\r\n      }\r\n    }\r\n\r\n    // Otherwise add it to the array\r\n    this.hotkeys.push(new Hotkey(keyCode, shiftState, handler));\r\n  }\r\n\r\n  /**\r\n   * Function     removeHotkey\r\n   * Scope        Public\r\n   * @param       {number}        keyCode\r\n   * @param       {number}        shiftState\r\n   * Description  Remove a hot key handler from array of document-level hotkeys triggered by key up event\r\n   */\r\n  removeHotkey(keyCode: number, shiftState: number) {\r\n    for(var i=0; i<this.hotkeys.length; i++) {\r\n      if(this.hotkeys[i].matches(keyCode, shiftState)) {\r\n        this.hotkeys.splice(i,1);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     _Process\r\n   * Scope        Private\r\n   * @param       {Event}       e       event\r\n   * Description  Passes control to handlers according to the hotkey pressed\r\n   */\r\n  _Process: (e: KeyboardEvent) => boolean = (e: KeyboardEvent) => {\r\n    if(!e) {\r\n      e = window.event as KeyboardEvent;\r\n    }\r\n\r\n    var _Lcode = _GetEventKeyCode(e);\r\n    if(_Lcode == null) {\r\n      return false;\r\n    }\r\n\r\n    // Removed testing of e.shiftKey==null  I3363 (Build 301)\r\n    var _Lmodifiers =\r\n      (e.shiftKey ? 0x10 : 0) |\r\n      (e.ctrlKey ? 0x20 : 0) |\r\n      (e.altKey ? 0x40 : 0);\r\n\r\n    for(var i=0; i<this.hotkeys.length; i++) {\r\n      if(this.hotkeys[i].matches(_Lcode, _Lmodifiers)) {\r\n        this.hotkeys[i].handler();\r\n        e.returnValue = false;\r\n        if(e && e.preventDefault) {\r\n          e.preventDefault();\r\n        }\r\n        e.cancelBubble = true;\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}",
    "import { type KeyboardInterface } from 'keyman/engine/js-processor';\r\nimport { DesignIFrame, OutputTarget } from 'keyman/engine/element-wrappers';\r\n\r\n// Utility object used to handle beep (keyboard error response) operations.\r\nclass BeepData {\r\n  e: HTMLElement;\r\n  c: string;\r\n\r\n  constructor(e: HTMLElement) {\r\n    this.e = e;\r\n    this.c = e.style.backgroundColor;\r\n  }\r\n\r\n  reset(): void {\r\n    this.e.style.backgroundColor = this.c;\r\n  }\r\n}\r\n\r\nexport class BeepHandler {\r\n  readonly keyboardInterface: KeyboardInterface;\r\n\r\n  constructor(keyboardInterface: KeyboardInterface) {\r\n    this.keyboardInterface = keyboardInterface;\r\n  }\r\n\r\n  _BeepObjects: BeepData[] = [];  // BeepObjects - maintains a list of active 'beep' visual feedback elements\r\n  _BeepTimeout: number = 0;       // BeepTimeout - a flag indicating if there is an active 'beep'.\r\n                                  // Set to 1 if there is an active 'beep', otherwise leave as '0'.\r\n  /**\r\n   * Function     beep          KB      (DOM-side implementation)\r\n   * Scope        Public\r\n   * @param       {Object}      Pelem     element to flash\r\n   * Description  Flash body as substitute for audible beep; notify embedded device to vibrate\r\n   */\r\n  beep(outputTarget: OutputTarget<any>) {\r\n    if(!(outputTarget instanceof OutputTarget)) {\r\n      return;\r\n    }\r\n\r\n    // All code after this point is DOM-based, triggered by the beep.\r\n    var Pelem: HTMLElement = outputTarget.getElement();\r\n    if(outputTarget instanceof DesignIFrame) {\r\n      Pelem = outputTarget.docRoot; // I1446 - beep sometimes fails to flash when using OSK and rich control\r\n    }\r\n\r\n    if(!Pelem) {\r\n      return; // There's no way to signal a 'beep' to null, so just cut everything short.\r\n    }\r\n\r\n    if(!Pelem.style || typeof(Pelem.style.backgroundColor)=='undefined') {\r\n      return;\r\n    }\r\n\r\n    for(var Lbo=0; Lbo<this._BeepObjects.length; Lbo++) { // I1446 - beep sometimes fails to return background color to normal\r\n                                                                // I1511 - array prototype extended\r\n      if(this._BeepObjects[Lbo].e == Pelem) {\r\n        return;\r\n      }\r\n    }\r\n\r\n    this._BeepObjects.push(new BeepData(Pelem));\r\n\r\n    // TODO:  This is probably a bad color choice if \"dark mode\" is enabled.  A proper implementation\r\n    //        would probably require some 'fun' CSS work, though.\r\n    Pelem.style.backgroundColor = '#000000';\r\n    if(this._BeepTimeout == 0) {\r\n      this._BeepTimeout = 1;\r\n      window.setTimeout(this.reset, 50);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     reset\r\n   * Scope        Public\r\n   * Description  Reset/terminate beep or flash (not currently used: Aug 2011)\r\n   */\r\n  readonly reset = () => {\r\n    this.keyboardInterface.resetContextCache();\r\n\r\n    var Lbo;\r\n    this._BeepTimeout = 0;\r\n    for(Lbo=0;Lbo<this._BeepObjects.length;Lbo++) { // I1511 - array prototype extended\r\n      this._BeepObjects[Lbo].reset();\r\n    }\r\n    this._BeepObjects = [];\r\n  }\r\n}",
    "import { type OutputTarget } from 'keyman/engine/element-wrappers';\r\nimport { FloatingOSKView } from 'keyman/engine/osk';\r\nimport { KeyboardInterface as KeyboardInterfaceBase } from 'keyman/engine/main';\r\n\r\nimport ContextManager from './contextManager.js';\r\nimport KeymanEngine from './keymanEngine.js';\r\n\r\nexport default class KeyboardInterface extends KeyboardInterfaceBase<ContextManager> {\r\n  constructor(\r\n    _jsGlobal: any,\r\n    engine: KeymanEngine,\r\n  ) {\r\n    super(_jsGlobal, engine);\r\n\r\n    // Nothing else to do here... quite yet.  Things may not stay that way, though.\r\n  }\r\n\r\n  // *** The following are quite useful for website-integrating KMW, but not needed for the embedded form. ***\r\n\r\n  /**\r\n   * Function     KSF\r\n   * Scope        Public\r\n   * Description  Save keyboard focus\r\n   */\r\n  saveFocus(): void {\r\n    this.engine.contextManager.focusAssistant._IgnoreNextSelChange = 1;\r\n  }\r\n\r\n  /**\r\n   * Legacy entry points (non-standard names)- included only to allow existing IME keyboards to continue to be used\r\n   */\r\n  getLastActiveElement(): OutputTarget<any> {\r\n    return this.engine.contextManager.lastActiveTarget;\r\n  }\r\n\r\n  focusLastActiveElement(): void {\r\n    this.engine.contextManager.restoreLastActiveTarget();\r\n  }\r\n\r\n  //The following entry points are defined but should not normally be used in a keyboard, as OSK display is no longer determined by the keyboard\r\n  hideHelp(): void {\r\n    const osk = this.engine.osk;\r\n    osk.startHide(true);\r\n  }\r\n\r\n  showHelp(Px: number, Py: number): void {\r\n    const osk = this.engine.osk;\r\n\r\n    if(osk instanceof FloatingOSKView) {\r\n      osk.presentAtPosition(Px,Py);\r\n    } else {\r\n      osk.present();\r\n    }\r\n  }\r\n\r\n  showPinnedHelp(): void {\r\n    const osk = this.engine.osk;\r\n\r\n    if(osk instanceof FloatingOSKView) {\r\n      // An old KMW bug previously auto-unset the affected field when this function was\r\n      // used by CJK keyboards during rule processing.  As a result, we need to condition\r\n      // on whether or not:\r\n      // 1.  The active keyboard is CJK\r\n      // 2.  A keyboard rule is actively processing.\r\n      //\r\n      // If BOTH are true, we do NOT mutate keyman.osk.userPositioned.\r\n      // Otherwise, not all conditions are met, so we still allow OSK pinning.\r\n      if(!osk.activeKeyboard.keyboard.isCJK || !this.ruleBehavior) {\r\n        osk.userPositioned=true;\r\n      }\r\n    }\r\n    // Automatically reuses previously-set positioning.\r\n    // Other OSK API functions must have previously been used to set the\r\n    // pinned position.\r\n    osk.present();\r\n  }\r\n\r\n  // Also needed for some legacy CJK keyboards.\r\n  readonly GetLastActiveElement = this.getLastActiveElement;\r\n  readonly FocusLastActiveElement = this.focusLastActiveElement;\r\n  readonly HideHelp = this.hideHelp;\r\n  readonly ShowHelp = this.showHelp;\r\n  readonly ShowPinnedHelp = this.showPinnedHelp;\r\n}\r\n\r\n(function() {\r\n  // Update the shorthand API; we did just rewrite KSF / `saveFocus`.\r\n  KeyboardInterface.__publishShorthandAPI();\r\n})();",
    "import { KeymanWebKeyboard } from '@keymanapp/common-types';\r\nimport { KeymanEngine as KeymanEngineBase, DeviceDetector } from 'keyman/engine/main';\r\nimport { getAbsoluteY } from 'keyman/engine/dom-utils';\r\nimport { OutputTarget } from 'keyman/engine/element-wrappers';\r\nimport {\r\n  TwoStateActivator,\r\n  VisualKeyboard\r\n} from 'keyman/engine/osk';\r\nimport { ErrorStub, KeyboardStub, CloudQueryResult, toPrefixedKeyboardId as prefixed } from 'keyman/engine/keyboard-storage';\r\nimport { DeviceSpec, Keyboard } from \"keyman/engine/keyboard\";\r\nimport KeyboardObject = KeymanWebKeyboard.KeyboardObject;\r\n\r\nimport * as views from './viewsAnchorpoint.js';\r\nimport { BrowserConfiguration, BrowserInitOptionDefaults, BrowserInitOptionSpec } from './configuration.js';\r\nimport { default as ContextManager } from './contextManager.js';\r\nimport DefaultBrowserRules from './defaultBrowserRules.js';\r\nimport HardwareEventKeyboard from './hardwareEventKeyboard.js';\r\nimport { FocusStateAPIObject } from './context/focusAssistant.js';\r\nimport { PageIntegrationHandlers } from './context/pageIntegrationHandlers.js';\r\nimport { LanguageMenu } from './languageMenu.js';\r\nimport { setupOskListeners } from './oskConfiguration.js';\r\nimport { whenDocumentReady } from './utils/documentReady.js';\r\nimport { outputTargetForElement } from 'keyman/engine/attachment';\r\n\r\nimport { UtilApiEndpoint} from './utilApiEndpoint.js';\r\nimport { UIModule } from './uiModuleInterface.js';\r\nimport { HotkeyManager } from './hotkeyManager.js';\r\nimport { BeepHandler } from './beepHandler.js';\r\nimport KeyboardInterface from './keyboardInterface.js';\r\n\r\nexport default class KeymanEngine extends KeymanEngineBase<BrowserConfiguration, ContextManager, HardwareEventKeyboard> {\r\n  touchLanguageMenu?: LanguageMenu;\r\n  private pageIntegration: PageIntegrationHandlers;\r\n\r\n  private _initialized: number = 0;\r\n  readonly _util: UtilApiEndpoint;\r\n\r\n  private _ui: UIModule;\r\n  hotkeyManager: HotkeyManager = new HotkeyManager();\r\n  private readonly beepHandler: BeepHandler;\r\n\r\n\r\n  // Properties sometimes set up by a hosting page\r\n  getOskHeight?: () => number = null;\r\n  getOskWidth?: () => number = null;\r\n\r\n  /**\r\n   * Provides a quick link to the base help page for Keyman keyboards.\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/helpURL\r\n   */\r\n  public readonly helpURL = 'https://help.keyman.com/go';\r\n\r\n  keyEventRefocus = () => {\r\n    this.contextManager.restoreLastActiveTarget();\r\n  }\r\n\r\n  constructor(worker: Worker, sourceUri: string) {\r\n    const config = new BrowserConfiguration(sourceUri);  // currently set to perform device auto-detect.\r\n\r\n    super(worker, config, new ContextManager(config, () => this.legacyAPIEvents), (engine) => {\r\n      return {\r\n        // The `engine` parameter cannot be supplied with the constructing instance before calling\r\n        // `super`, hence the 'fun' rigging to supply it _from_ `super` via this closure.\r\n        keyboardInterface: new KeyboardInterface(window, engine as KeymanEngine),\r\n        defaultOutputRules: new DefaultBrowserRules(engine.contextManager)\r\n      };\r\n    });\r\n\r\n    this._util = new UtilApiEndpoint(config);\r\n    this.beepHandler = new BeepHandler(this.core.keyboardInterface);\r\n    this.core.keyboardProcessor.beepHandler = () => this.beepHandler.beep(this.contextManager.activeTarget);\r\n\r\n    this.hardKeyboard = new HardwareEventKeyboard(config.hardDevice, this.core.keyboardProcessor, this.contextManager);\r\n\r\n    // Scrolls the document-body to ensure that a focused element remains visible after the OSK appears.\r\n    this.contextManager.on('targetchange', (target) => {\r\n      const e = (target as OutputTarget<any>)?.getElement();\r\n      if(this.osk) {\r\n        (this.osk.activationModel as TwoStateActivator<HTMLElement>).activationTrigger = e;\r\n      }\r\n\r\n      if(this.config.hostDevice.touchable && target) {\r\n        this.ensureElementVisibility(e);\r\n      }\r\n    });\r\n  }\r\n\r\n  public ensureElementVisibility(e: HTMLElement) {\r\n    if(!e || !this.osk) {\r\n      return;\r\n    }\r\n\r\n    // Get the absolute position of the caret\r\n    const y = getAbsoluteY(e);\r\n    const t = window.pageYOffset;\r\n    let dy = y-t;\r\n    if(y >= t) {\r\n      dy -= (window.innerHeight - this.osk._Box.offsetHeight - e.offsetHeight - 2);\r\n      if(dy < 0) {\r\n        dy=0;\r\n      }\r\n    }\r\n    // Hide OSK, then scroll, then re-anchor OSK with absolute position (on end of scroll event)\r\n    if(dy != 0) {\r\n      window.scrollTo(0, dy + t);\r\n    }\r\n  }\r\n\r\n  public get util() {\r\n    return this._util;\r\n  }\r\n\r\n  public get views() {\r\n    // NOT this.views.  Just... `views`, the import of viewsAnchorpoint.ts\r\n    return views;\r\n  }\r\n\r\n  /**\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/initialized\r\n   */\r\n  public get initialized() {\r\n    return this._initialized;\r\n  }\r\n\r\n  public get ui() {\r\n    return this._ui;\r\n  }\r\n\r\n  public set ui(module: UIModule) {\r\n    if(this._ui) {\r\n      this._ui.shutdown();\r\n    }\r\n\r\n    this._ui = module;\r\n    if(this.config.deferForInitialization.isFulfilled) {\r\n      module.initialize();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Function     Initialization\r\n   * Scope        Public\r\n   * @param       {com.keyman.OptionType}  arg     object specifying configuration properties for KeymanEngine + its resources\r\n   *\r\n   * Performs initialization of the KeymanEngine for Web, including:\r\n   * - device-detection\r\n   * - option configuration\r\n   * - integration with the active page\r\n   * - OSK-selection\r\n   * - finalization for pre-loaded keyboard + stub registrations.\r\n   *\r\n   * It also self-defers if the page is not yet fully loaded; it will automatically await page\r\n   * load and resume once page-load is complete.  (Certain initialization behaviors will only\r\n   * proceed properly with a fully-loaded page.)\r\n   *\r\n   * @returns A Promise that only resolves once the engine is fully initialized.\r\n   */\r\n  public async init(options: Required<BrowserInitOptionSpec>) {\r\n    let deviceDetector = new DeviceDetector();\r\n    let device = deviceDetector.detect();\r\n\r\n    const totalOptions = {...BrowserInitOptionDefaults, ...options};\r\n\r\n    // // Possible condition we can add:  no change of init options after a  ***\r\n    // // prior finalized init.\r\n\r\n    this.config.hostDevice = device;\r\n    // Set any incoming options, overriding previous entries.\r\n    this.config.initialize(totalOptions);\r\n\r\n    this._initialized = 1;\r\n\r\n    // Must wait for document load for further initialization.\r\n    await whenDocumentReady();\r\n\r\n    // Deferred keyboard loading + shortcutting if a different init call on the engine has\r\n    // already fully resolved.\r\n    if(this.config.deferForInitialization.isResolved) {\r\n      // abort!  Maybe throw an error, too.\r\n      return Promise.resolve();\r\n    }\r\n\r\n    // There may be some valid mutations possible even on repeated calls?\r\n    // The original seems to allow it.\r\n\r\n    await super.init(totalOptions);\r\n\r\n    // Used by keymanweb.com; if no keyboard-cookie exists, we need this to trigger\r\n    // default-stub selection on mobile devices so that a keyboard - and thus, the\r\n    // globe key - are accessible.\r\n    //\r\n    // The `super` call above initializes `keyboardRequisitioner`, as needed here.\r\n    this.keyboardRequisitioner.cloudQueryEngine.once('unboundregister', () => {\r\n      if(!this.contextManager.activeKeyboard?.keyboard) {\r\n        // Autoselects this.keyboardRequisitioner.cache.defaultStub, which will be\r\n        // set to an actual keyboard on mobile devices.\r\n        this.setActiveKeyboard('', '');\r\n      }\r\n    });\r\n\r\n    this.contextManager.initialize();  // will seek to attach to the page, which requires document.body\r\n\r\n    // Capture the saved-keyboard string now, before we load any keyboards/stubs\r\n    // or do anything that would mutate the value.\r\n    const savedKeyboardStr = this.contextManager.getSavedKeyboardRaw();\r\n\r\n    if(device.touchable) {\r\n      this.osk = new views.AnchoredOSKView(this);\r\n    } else {\r\n      this.osk = new views.FloatingOSKView(this);\r\n    }\r\n\r\n    setupOskListeners(this, this.osk, this.contextManager);\r\n\r\n    // Automatically performs related handler setup & maintains references\r\n    // needed for related cleanup / shutdown.\r\n    this.pageIntegration = new PageIntegrationHandlers(window, this);\r\n    this.config.finalizeInit();\r\n\r\n    if(this.ui) {\r\n      this.ui.initialize();\r\n      this.legacyAPIEvents.callEvent('loaduserinterface', {});\r\n    }\r\n\r\n    this._initialized = 2;\r\n\r\n    // Let any deferred, pre-init stubs complete registration\r\n    await Promise.resolve();\r\n\r\n    // Attempt to restore the user's last-used keyboard from their previous session.\r\n    //\r\n    // Note:  any cloud stubs will probably not be available yet.\r\n    // If we tracked cloud requests and awaited a Promise.all on pending queries,\r\n    // we could handle that too.\r\n    this.contextManager.restoreSavedKeyboard(savedKeyboardStr);\r\n\r\n    await Promise.resolve();\r\n  }\r\n\r\n  get register(): (x: CloudQueryResult) => void {\r\n    return this.keyboardRequisitioner.cloudQueryEngine.registerFromCloud;\r\n  }\r\n\r\n  /**\r\n   * Function     getUIState\r\n   * Scope        Public\r\n   * @return      {Object.<string,(boolean|number)>}\r\n   * Description  Return object with activation state of UI:\r\n   *                activationPending (bool):   KMW being activated\r\n   *                activated         (bool):   KMW active\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/16.0/reference/core/getUIState\r\n   */\r\n  public getUIState(): FocusStateAPIObject {\r\n    return this.contextManager.focusAssistant.getUIState();\r\n  }\r\n\r\n  /**\r\n   * Set or clear the IsActivatingKeymanWebUI flag (exposed function)\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/16.0/reference/core/activatingUI\r\n   *\r\n   * @param       {(boolean|number)}  state  Activate (true,false)\r\n   */\r\n  public activatingUI(state: boolean | number) {\r\n    this.contextManager.focusAssistant.setMaintainingFocus(!!state);\r\n  }\r\n\r\n  /**\r\n   * Function     setKeyboardForControl\r\n   * Scope        Public\r\n   * @param       {Element}    Pelem    Control element\r\n   * @param       {string|null=}    Pkbd     Keyboard (Clears the set keyboard if set to null.)\r\n   * @param       {string|null=}     Plc      Language Code\r\n   * Description  Set default keyboard for the control\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/setKeyboardForControl\r\n   */\r\n  public setKeyboardForControl(Pelem: HTMLElement, Pkbd?: string, Plc?: string) {\r\n    if(Pelem instanceof Pelem.ownerDocument.defaultView.HTMLIFrameElement) {\r\n      console.warn(\"'keymanweb.setKeyboardForControl' cannot set keyboard on iframes.\");\r\n      return;\r\n    }\r\n\r\n    if(!this.isAttached(Pelem)) {\r\n      console.error(\"KeymanWeb is not attached to element \" + Pelem);\r\n      return;\r\n    }\r\n\r\n    let stub = null;\r\n    if(Pkbd) {\r\n      stub = this.keyboardRequisitioner.cache.getStub(Pkbd, Plc);\r\n      if(!stub) {\r\n        throw new Error(`No keyboard has been registered with id ${Pkbd} and language code ${Plc}.`);\r\n      }\r\n    }\r\n\r\n    this.contextManager.setKeyboardForTarget(Pelem._kmwAttachment.interface, Pkbd, Plc);\r\n  }\r\n  /**\r\n   * Function     getKeyboardForControl\r\n   * Scope        Public\r\n   * @param       {Element}    Pelem    Control element\r\n   * @return      {string|null}         The independently-managed keyboard for the control.\r\n   * Description  Returns the keyboard ID of the current independently-managed keyboard for this control.\r\n   *              If it is currently following the global keyboard setting, returns null instead.\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/getKeyboardForControl\r\n   */\r\n  public getKeyboardForControl(Pelem: HTMLElement) {\r\n    const target = outputTargetForElement(Pelem);\r\n    return this.contextManager.getKeyboardStubForTarget(target).id;\r\n  }\r\n\r\n  // Is not currently published API... but it exists.\r\n  /**\r\n   * Function     getLanguageForControl\r\n   * Scope        Public\r\n   * @param       {Element}    Pelem    Control element\r\n   * @return      {string|null}         The independently-managed keyboard for the control.\r\n   * Description  Returns the language code used with the current independently-managed keyboard for this control.\r\n   *              If it is currently following the global keyboard setting, returns null instead.\r\n   */\r\n  getLanguageForControl(Pelem: HTMLElement) {\r\n    const target = outputTargetForElement(Pelem);\r\n    return this.contextManager.getKeyboardStubForTarget(target).langId;\r\n  }\r\n\r\n  isAttached(x: HTMLElement): boolean {\r\n    return this.contextManager.page.isAttached(x);\r\n  }\r\n\r\n  /**\r\n   * Exposed function to load keyboards by name. One or more arguments may be used\r\n   *\r\n   * @param {any[]} args keyboard name string or keyboard metadata JSON object\r\n   * @returns {Promise<(KeyboardStub|ErrorStub)[]>} Promise of added keyboard/error stubs\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/addKeyboards\r\n   */\r\n  public addKeyboards(...args: any[]): Promise<(KeyboardStub|ErrorStub)[]> {\r\n    return this.config.deferForInitialization.then(() => {\r\n      if (!args || !args[0] || args[0].length == 0) {\r\n        // Get the cloud keyboard catalog\r\n        return this.keyboardRequisitioner.fetchCloudCatalog().catch((errVal) => {\r\n          console.error(errVal[0].error);\r\n          return errVal;\r\n        });\r\n      } else {\r\n        let x: (string|KeyboardStub)[] = [];\r\n        if (Array.isArray(args[0])) {\r\n          x = x.concat(args[0]);\r\n        } else if (Array.isArray(args)) {\r\n          x = x.concat(args);\r\n        }\r\n        return this.keyboardRequisitioner.addKeyboardArray(x);\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   *  Add default keyboards for given language(s)\r\n   *\r\n   *  @param  {string|string[]}   arg    Language name (multiple arguments allowed)\r\n   *  @returns {Promise<(KeyboardStub|ErrorStub)[]>} Promise of added keyboard/error stubs\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/addKeyboardsForLanguage\r\n   **/\r\n  public addKeyboardsForLanguage(arg: string[]|string) : Promise<(KeyboardStub|ErrorStub)[]> {\r\n    return this.config.deferForInitialization.then(() => {\r\n      if (typeof arg === 'string') {\r\n        return this.keyboardRequisitioner.addLanguageKeyboards(arg.split(',').map(item => item.trim()));\r\n      } else {\r\n        return this.keyboardRequisitioner.addLanguageKeyboards(arg);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get an associative array of keyboard identification strings\r\n   *   This was defined as an array, so is kept that way, but\r\n   *   Javascript treats it as an object anyway\r\n   *\r\n   * This is a public API function documented at\r\n   * https://help.keyman.com/developer/engine/web/current-version/reference/core/getKeyboard.\r\n   *\r\n   * @param       {Object}    Lstub      Keyboard stub object\r\n   * @param       {Object}    Lkbd       Keyboard script object\r\n   * @return      {Object}               Copy of keyboard identification strings\r\n   *\r\n   */\r\n  private _GetKeyboardDetail = function(Lstub: KeyboardStub, Lkbd: Keyboard) { // I2078 - Full keyboard detail\r\n    let Lr = {\r\n      Name: Lstub.KN,\r\n      InternalName: Lstub.KI,\r\n      LanguageName: Lstub.KL,  // I1300 - Add support for language names\r\n      LanguageCode: Lstub.KLC, // I1702 - Add support for language codes, region names, region codes, country names and country codes\r\n      RegionName: Lstub.KR,\r\n      RegionCode: Lstub.KRC,\r\n      // @ts-ignore\r\n      CountryName: Lstub['KC'] as string,\r\n      // @ts-ignore\r\n      CountryCode: Lstub['KCC'] as string,\r\n      // @ts-ignore\r\n      KeyboardID: Lstub['KD'] as string,\r\n      Font: Lstub.KFont,\r\n      OskFont: Lstub.KOskFont,\r\n      HasLoaded: !!Lkbd,\r\n      IsRTL: Lkbd ? Lkbd.isRTL : null\r\n    };\r\n\r\n    return Lr;\r\n  }\r\n\r\n  /**\r\n   * Function    isCJK\r\n   * Scope       Public\r\n   * @param      {Object=}  k0\r\n   * @return     {boolean}\r\n   * Description Tests if active keyboard (or specified keyboard script object, as optional argument)\r\n   *             uses a pick list (Chinese, Japanese, Korean, etc.)\r\n   *             (This function accepts either keyboard structure.)\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/isCJK\r\n   */\r\n  public isCJK(k0?: KeyboardObject | ReturnType<KeymanEngine['_GetKeyboardDetail']> /* [b/c Toolbar UI]*/) {\r\n    let kbd: Keyboard;\r\n    if(k0) {\r\n      let kbdDetail = k0 as ReturnType<KeymanEngine['_GetKeyboardDetail']>;\r\n      if(kbdDetail.KeyboardID){\r\n        kbd = this.keyboardRequisitioner.cache.getKeyboard(kbdDetail.KeyboardID);\r\n      } else {\r\n        kbd = new Keyboard(k0);\r\n      }\r\n    } else {\r\n      kbd = this.core.activeKeyboard;\r\n    }\r\n\r\n    return kbd && kbd.isCJK;\r\n  }\r\n\r\n  /**\r\n   * Get keyboard meta data for the selected keyboard and language\r\n   *\r\n   * @param       {string}    PInternalName     Internal name of keyboard\r\n   * @param       {string=}   PlgCode           language code\r\n   * @return      {Object}                      Details of named keyboard\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/getKeyboard\r\n   **/\r\n  public getKeyboard(PInternalName: string, PlgCode?: string) {\r\n    const stub = this.keyboardRequisitioner.cache.getStub(PInternalName, PlgCode);\r\n    const keyboard = this.keyboardRequisitioner.cache.getKeyboardForStub(stub);\r\n\r\n    return stub && this._GetKeyboardDetail(stub, keyboard);\r\n  }\r\n\r\n  /**\r\n   * Get API-friendly array of available keyboard stubs\r\n   *\r\n   * Refer to https://help.keyman.com/developer/engine/web/current-version/reference/core/getKeyboards.\r\n   *\r\n   * The type of each entry of the array corresponds to that of `getKeyboard`.\r\n   *\r\n   * @return   {Array}     Array of available keyboards\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/getKeyboards\r\n   */\r\n  public getKeyboards(): ReturnType<KeymanEngine['_GetKeyboardDetail']>[] {\r\n    const Lr: ReturnType<KeymanEngine['_GetKeyboardDetail']>[] = [];\r\n\r\n    const cache = this.keyboardRequisitioner.cache;\r\n    const keyboardStubs = cache.getStubList()\r\n    for(let Ln=0; Ln < keyboardStubs.length; Ln++) { // I1511 - array prototype extended\r\n      const Lstub = keyboardStubs[Ln];\r\n\r\n      // In Chrome, (including on Android), Array.prototype.find() requires Chrome 45.\r\n      // This is a later version than the default on our oldest-supported Android devices.\r\n      const Lkbd = cache.getKeyboardForStub(Lstub);\r\n      const Lrn = this._GetKeyboardDetail(Lstub, Lkbd);  // I2078 - Full keyboard detail\r\n      Lr.push(Lrn);\r\n    }\r\n    return Lr;\r\n  }\r\n\r\n  /**\r\n   * Build 362: removeKeyboards() remove keyboard from list of available keyboards\r\n   *\r\n   * @param {string}  x      keyboard name string\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/removeKeyboards\r\n   */\r\n  public removeKeyboards(...x: string[]) {\r\n    for(let i=0; i < x.length; i++) {\r\n      // This will completely forget the keyboard, requiring an async load operation to restore it again.\r\n      // `true` is responsible for this & is required to pass a variable-store unit test.\r\n      this.keyboardRequisitioner.cache.forgetKeyboard(x[i], true);\r\n\r\n      if(this.contextManager.activeKeyboard?.metadata.id == prefixed(x[i])) {\r\n        this.contextManager.activateKeyboard('', '');\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Gets the cookie for the name and language code of the most recently active keyboard\r\n   *\r\n   * Defaults to US English, but this needs to be user-set in later revision (TODO)\r\n   *\r\n   * @return      {string}          InternalName:LanguageCode\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/getSavedKeyboard\r\n   **/\r\n  public getSavedKeyboard(): string {\r\n    return this.contextManager.getSavedKeyboard();\r\n  }\r\n\r\n  /**\r\n   * Set focus to last active target element (browser-dependent)\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/focusLastActiveElement\r\n   */\r\n  public focusLastActiveElement() {\r\n    this.contextManager.lastActiveTarget?.focus();\r\n  }\r\n\r\n  /**\r\n   * Get the last active target element *before* KMW activated (I1297)\r\n   *\r\n   * @return      {Object}\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/getLastActiveElement\r\n   */\r\n  public getLastActiveElement() {\r\n    return this.contextManager.lastActiveTarget?.getElement();\r\n  }\r\n\r\n  /**\r\n   *  Set the active input element directly optionally setting focus\r\n   *\r\n   *  @param  {Object|string} e         element id or element\r\n   *  @param  {boolean=}      setFocus  optionally set focus  (KMEW-123)\r\n   **/\r\n  setActiveElement(e: string|HTMLElement, setFocus?: boolean) {\r\n    if(typeof e == 'string') {\r\n      const id = e;\r\n      e = document.getElementById(e);\r\n\r\n      if(!e) {\r\n        throw new Error(`Could not find the specified element (id: ${id}`);\r\n      }\r\n    }\r\n\r\n    const target = outputTargetForElement(e);\r\n    if(!target) {\r\n      throw new Error(`KMW is not attached to the specified element (id: ${e.id}).`);\r\n    }\r\n    this.contextManager.setActiveTarget(target, setFocus);\r\n  }\r\n\r\n  /**\r\n   * Move focus to user-specified element\r\n   *\r\n   *  @param  {string|Object}   e   element or element id\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/moveToElement\r\n   **/\r\n  public moveToElement(e: string|HTMLElement) {\r\n    if(typeof(e) == \"string\") { // Can't instanceof string, and String is a different type.\r\n      e=document.getElementById(e);\r\n    }\r\n\r\n    e.focus();\r\n  }\r\n\r\n  /**\r\n   * Function     addHotkey\r\n   * Scope        Public\r\n   * @param       {number}            keyCode\r\n   * @param       {number}            shiftState\r\n   * @param       {function(Object)}  handler\r\n   * Description  Add hot key handler to array of document-level hotkeys triggered by key up event\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/addHotKey\r\n   */\r\n  public addHotKey(keyCode: number, shiftState: number, handler: () => void) {\r\n    this.hotkeyManager.addHotKey(keyCode, shiftState, handler);\r\n  }\r\n\r\n  /**\r\n   * Function     removeHotkey\r\n   * Scope        Public\r\n   * @param       {number}        keyCode\r\n   * @param       {number}        shiftState\r\n   * Description  Remove a hot key handler from array of document-level hotkeys triggered by key up event\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/removeHotKey\r\n   */\r\n  public removeHotKey(keyCode: number, shiftState: number) {\r\n    this.hotkeyManager.removeHotkey(keyCode, shiftState);\r\n  }\r\n\r\n  /**\r\n   * Function     attachToControl\r\n   * Scope        Public\r\n   * @param       {Element}    Pelem       Element to which KMW will be attached\r\n   * Description  Attaches KMW to control (or IFrame)\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/attachToControl\r\n   */\r\n  public attachToControl(Pelem: HTMLElement) {\r\n    this.contextManager.page.attachToControl(Pelem);\r\n  }\r\n\r\n  /**\r\n   * Function     detachFromControl\r\n   * Scope        Public\r\n   * @param       {Element}    Pelem       Element from which KMW will detach\r\n   * Description  Detaches KMW from a control (or IFrame)\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/detachFromControl\r\n   */\r\n  public detachFromControl(Pelem: HTMLElement) {\r\n    this.contextManager.page.detachFromControl(Pelem);\r\n  }\r\n\r\n  /**\r\n   * Function     disableControl\r\n   * Scope        Public\r\n   * @param       {Element}      Pelem       Element to be disabled\r\n   * Description  Disables a KMW control element\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/disableControl\r\n   */\r\n  public disableControl(Pelem: HTMLElement) {\r\n    this.contextManager.page.disableControl(Pelem);\r\n  }\r\n\r\n  /**\r\n   * Function     enableControl\r\n   * Scope        Public\r\n   * @param       {Element}      Pelem       Element to be disabled\r\n   * Description  Disables a KMW control element\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/enableControl\r\n   */\r\n  public enableControl(Pelem: HTMLMapElement) {\r\n    this.contextManager.page.enableControl(Pelem);\r\n  }\r\n\r\n  /**\r\n   * Create copy of the OSK that can be used for embedding in documentation or help\r\n   * The currently active keyboard will be returned if PInternalName is null\r\n   *\r\n   *  @param  {string}          PInternalName   internal name of keyboard, with or without Keyboard_ prefix\r\n   *  @param  {number}          Pstatic         static keyboard flag  (unselectable elements)\r\n   *  @param  {string=}         argFormFactor   layout form factor, defaulting to 'desktop'\r\n   *  @param  {(string)=}  argLayerId    name or index of layer to show, defaulting to 'default'\r\n   *  @return {Object}                          DIV object with filled keyboard layer content\r\n   *\r\n   * See https://help.keyman.com/developer/engine/web/current-version/reference/core/BuildVisualKeyboard\r\n   */\r\n  public BuildVisualKeyboard(\r\n    PInternalName: string,\r\n    Pstatic: number,\r\n    argFormFactor?: DeviceSpec.FormFactor,\r\n    argLayerId?: string\r\n  ): HTMLElement {\r\n    let PKbd: Keyboard = null;\r\n\r\n    if(PInternalName != null) {\r\n      PKbd = this.keyboardRequisitioner.cache.getKeyboard(PInternalName);\r\n    }\r\n\r\n    PKbd = PKbd || this.core.activeKeyboard;\r\n    let Pstub = this.keyboardRequisitioner.cache.getStub(PKbd);\r\n\r\n    // help.keyman.com will set this function in place to specify the desired\r\n    // dimensions for the documentation-keyboards, so we'll give it priority.  One of those\r\n    // \"temporary\" (but actually permanent) solutions from yesteryear.\r\n    //\r\n    // Note that the main intended use of that function is for embedded KMW on the mobile apps...\r\n    // but they never call `BuildVisualKeyboard`, so it's all good.\r\n    const getOskHeight = this['getOskHeight'];\r\n    let targetHeight = (typeof getOskHeight == 'function' ? getOskHeight() : null) || this.osk.computedHeight || 200;\r\n\r\n    return VisualKeyboard.buildDocumentationKeyboard(\r\n      PKbd,\r\n      Pstub,\r\n      this.config.paths,\r\n      argFormFactor,\r\n      argLayerId,\r\n      targetHeight\r\n      );\r\n  }\r\n\r\n  /**\r\n   * Detaches all KMW event handlers attached by this instance of the engine and releases\r\n   * other related resources as appropriate.\r\n   *\r\n   * The primary use of this method is to facilitate a clean transition between engine\r\n   * instances during integration testing.  The goal is to prevent interactions intended\r\n   * for the 'current' instance from being accidentally intercepted by a discarded one.\r\n   */\r\n  shutdown() {\r\n    this.pageIntegration.shutdown();\r\n    this.contextManager.shutdown();\r\n    this.osk?.shutdown();\r\n    this.core.languageProcessor.shutdown();\r\n    this.hardKeyboard.shutdown();\r\n    this.util.shutdown(); // For tracked dom events, stylesheets.\r\n\r\n    this.legacyAPIEvents.callEvent('unloaduserinterface', {});\r\n    this.ui?.shutdown();\r\n  }\r\n}\r\n",
    "import KeymanEngine from './keymanEngine.js'\r\nimport { Worker } from '@keymanapp/lexical-model-layer/web'\r\n\r\n /**\r\n  * Determine path and protocol of executing script, setting them as\r\n  * construction defaults.\r\n  *\r\n  * This can only be done during load when the active script will be the\r\n  * last script loaded.  Otherwise the script must be identified by name.\r\n */\r\n var scripts = document.getElementsByTagName('script');\r\n var ss = scripts[scripts.length-1].src;\r\n var sPath = ss.substr(0,ss.lastIndexOf('/')+1);\r\n\r\n// @ts-ignore\r\nwindow['keyman'] = new KeymanEngine(Worker.constructInstance(), sPath);"
  ],
  "mappings": "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",
  "names": [
    "require_eventemitter3",
    "__commonJSMin",
    "exports",
    "module",
    "has",
    "prefix",
    "Events",
    "__name",
    "EE",
    "fn",
    "context",
    "once",
    "addListener",
    "emitter",
    "event",
    "listener",
    "evt",
    "clearEvent",
    "EventEmitter",
    "names",
    "events",
    "name",
    "handlers",
    "l",
    "ee",
    "listeners",
    "a1",
    "a2",
    "a3",
    "a4",
    "a5",
    "len",
    "args",
    "i",
    "length",
    "j",
    "ModifierKeyConstants",
    "USVirtualKeyCodes",
    "k",
    "CLDRScanToUSVirtualKeyCodes",
    "keyman_touch_layout_file_exports",
    "__export",
    "PRIVATE_USE_IDS",
    "TouchLayoutKeySp",
    "Uni_LEAD_SURROGATE_START",
    "Uni_LEAD_SURROGATE_END",
    "Uni_TRAIL_SURROGATE_START",
    "Uni_TRAIL_SURROGATE_END",
    "Uni_IsSurrogate1",
    "ch",
    "Uni_LEAD_SURROGATE_START",
    "Uni_LEAD_SURROGATE_END",
    "__name",
    "Uni_IsSurrogate2",
    "Uni_TRAIL_SURROGATE_START",
    "Uni_TRAIL_SURROGATE_END",
    "keyboard_object_exports",
    "import_index",
    "Codes",
    "ModifierKeyConstants",
    "__spreadValues",
    "USVirtualKeyCodes",
    "keyID",
    "layerId",
    "modifier",
    "ctrlMatched",
    "altMatched",
    "codes_default",
    "_DefaultRules",
    "Lkc",
    "codes_default",
    "isMnemonic",
    "logMessages",
    "char",
    "outputTarget",
    "Lch",
    "keyName",
    "result",
    "codePoints",
    "codePoint",
    "codePointValue",
    "keyShiftState",
    "ModifierKeyConstants",
    "e",
    "__name",
    "DefaultRules",
    "BASE_DEFAULT_RULES",
    "DefaultRules",
    "_KeyEvent",
    "keyEventSpec",
    "key",
    "device",
    "shifted",
    "capsActive",
    "codes_default",
    "mappingEvent",
    "mappedChar",
    "__name",
    "KeyEvent",
    "_KeyMap",
    "__name",
    "KeyMap",
    "_BrowserKeyMaps",
    "BrowserKeyMaps",
    "_LanguageKeyMaps",
    "LanguageKeyMaps",
    "_KeyMapping",
    "s0",
    "s1",
    "Levent",
    "KeyMapping",
    "deepCopy",
    "p",
    "clone",
    "keys",
    "key",
    "__name",
    "_DeviceSpec",
    "browser",
    "formFactor",
    "OS",
    "touchable",
    "__name",
    "DeviceSpec",
    "Browser",
    "OperatingSystem",
    "FormFactor",
    "physicalKeyDeviceAlias",
    "device",
    "deviceSpec_default",
    "_KEYMAN_VERSION",
    "__name",
    "KEYMAN_VERSION",
    "version_inc_default",
    "_Version",
    "text",
    "components",
    "parts",
    "componentArray",
    "value",
    "other",
    "isShorter",
    "maxDepth",
    "delta",
    "longList",
    "__name",
    "version_inc_default",
    "Version",
    "getGlobalObject",
    "__name",
    "extendString",
    "cp0",
    "chars",
    "i",
    "c",
    "codePointIndex",
    "str",
    "codeUnitIndex",
    "first",
    "second",
    "searchValue",
    "fromIndex",
    "beginSlice",
    "endSlice",
    "beginSliceCodeUnit",
    "endSliceCodeUnit",
    "start",
    "length",
    "startCodeUnit",
    "endCodeUnit",
    "indexA",
    "indexB",
    "indexACodeUnit",
    "indexBCodeUnit",
    "n",
    "ln",
    "bEnable",
    "p",
    "__name",
    "_ManagedPromise",
    "executor",
    "resolve",
    "reject",
    "value",
    "reason",
    "onfulfilled",
    "onrejected",
    "onfinally",
    "__name",
    "ManagedPromise",
    "_TimeoutPromise",
    "ManagedPromise",
    "timeoutInMillis",
    "timerHandleCapture",
    "resolve",
    "val",
    "reject",
    "__name",
    "TimeoutPromise",
    "timedPromise",
    "time",
    "ButtonClasses",
    "keyman_touch_layout_file_exports",
    "KEY_102_WIDTH",
    "_Layouts",
    "PVK",
    "keyboard",
    "formFactor",
    "_a",
    "layoutType",
    "kbdBitmask",
    "codes_default",
    "kbdDevVersion",
    "Version",
    "layout",
    "deepCopy",
    "n",
    "layers",
    "keyLabels",
    "key102",
    "i",
    "j",
    "k",
    "rows",
    "key",
    "keys",
    "chiral",
    "legacyFontSpec",
    "kmw10Plus",
    "validIdList",
    "invalidIdList",
    "idList",
    "shiftKey",
    "r",
    "c",
    "layerID",
    "specialChar",
    "subkey",
    "layer",
    "kx",
    "capsKey",
    "numKey",
    "scrollKey",
    "layerSpec",
    "isShift",
    "isDefault",
    "layerId",
    "ButtonClasses",
    "m",
    "s",
    "ModifierKeyConstants",
    "layerCnt",
    "offset",
    "layerIds",
    "row",
    "BK",
    "KLS",
    "id",
    "arr",
    "valid",
    "index",
    "__name",
    "Layouts",
    "Enumerable",
    "target",
    "propertyKey",
    "descriptor",
    "__name",
    "KeyTypesOfKeyMap",
    "KeyTypesOfFlickList",
    "assignDefaultsWithPropDefs",
    "rawObj",
    "defaults",
    "proto",
    "prop",
    "_ActiveKeyBase",
    "spec",
    "layout",
    "displayLayer",
    "ActiveKey",
    "ButtonClasses",
    "baseID",
    "val",
    "KeyEvent",
    "id",
    "errorCallback",
    "result",
    "codePoints",
    "codePoint",
    "codePointValue",
    "rawKey",
    "key",
    "value",
    "arr",
    "i",
    "sk",
    "flickObj",
    "flickKey",
    "layer",
    "keyName",
    "props",
    "codes_default",
    "Lkc",
    "keyboard",
    "KeyMapping",
    "__decorateClass",
    "ActiveKeyBase",
    "_ActiveKey",
    "coreID",
    "ActiveSubKey",
    "multitap",
    "flick",
    "defaultHint",
    "_a",
    "dir",
    "_ActiveSubKey",
    "_ActiveRow",
    "rawRow",
    "row",
    "totalWidth",
    "proportionalY",
    "keys",
    "DEFAULT_KEY",
    "j",
    "keySet",
    "tp",
    "typedKey",
    "processedKey",
    "setProportions",
    "padPc",
    "keyPc",
    "totalPc",
    "totalPercent",
    "rightMargin",
    "finalKey",
    "keyPercent",
    "padPercent",
    "aRow",
    "map",
    "ActiveRow",
    "_ActiveLayer",
    "rawLayer",
    "rows",
    "width",
    "rowCount",
    "rowProportionalY",
    "aLayer",
    "keyId",
    "idComponents",
    "ActiveLayer",
    "_ActiveLayout",
    "layerId",
    "layerSpec",
    "layers",
    "n",
    "rawLayout",
    "formFactor",
    "analysisMetadata",
    "layerMap",
    "aLayout",
    "entry",
    "defaultLayer",
    "shiftLayer",
    "defaultShift",
    "shiftShift",
    "__spreadValues",
    "Layouts",
    "index",
    "ActiveLayout",
    "_CacheTag",
    "__name",
    "CacheTag",
    "LayoutState",
    "_Keyboard",
    "keyboardScript",
    "outputTarget",
    "keystroke",
    "storeNames",
    "values",
    "store",
    "value",
    "Version",
    "e",
    "lg",
    "codes_default",
    "tag",
    "layers",
    "emulationMask",
    "ModifierKeyConstants",
    "unshiftedEmulationLayer",
    "Layouts",
    "shiftedEmulationLayer",
    "bitmask",
    "kbd",
    "device",
    "deviceSpec_default",
    "_PCommand",
    "_PTarget",
    "_PData",
    "formFactor",
    "rawSpecifications",
    "keyCaps",
    "layout",
    "rawLayout",
    "ActiveLayout",
    "formFactors",
    "_this",
    "form",
    "stateKeys",
    "keyEvent",
    "KeyEvent",
    "key",
    "Lkc",
    "keyName",
    "dict",
    "i",
    "res",
    "Keyboard",
    "MinimalKeymanGlobal",
    "codes_default",
    "_KeyboardHarness",
    "_jsGlobal",
    "keymanGlobal",
    "scriptObject",
    "Keyboard",
    "kbdName",
    "storeName",
    "dfltValue",
    "__name",
    "KeyboardHarness",
    "_KeyboardScriptError",
    "msg",
    "cause",
    "__name",
    "KeyboardScriptError",
    "_KeyboardMissingError",
    "KeyboardMissingError",
    "_UriBasedErrorBuilder",
    "uri",
    "err",
    "UriBasedErrorBuilder",
    "_StubBasedErrorBuilder",
    "stub",
    "StubBasedErrorBuilder",
    "_KeyboardLoaderBase",
    "harness",
    "KeyboardLoaderBase",
    "SpacebarText",
    "spacebarText_default",
    "internalizeFont",
    "fontObj",
    "fontPath",
    "__name",
    "_KeyboardProperties",
    "source",
    "arg1",
    "arg2",
    "other",
    "apiStub",
    "stubs",
    "langSpec",
    "stub",
    "kbdName",
    "lgName",
    "spacebarText_default",
    "name",
    "KeyboardProperties",
    "addDelimiter",
    "__name",
    "p",
    "_PathConfiguration",
    "pathSpec",
    "sourcePath",
    "_rootPath",
    "resources",
    "path",
    "PathConfiguration",
    "PathOptionDefaults",
    "_ReadySuggestions",
    "suggestions",
    "id",
    "__name",
    "ReadySuggestions",
    "_PredictionContext",
    "EventEmitter",
    "langProcessor",
    "getLayerId",
    "__name",
    "source",
    "returnObj",
    "recentAcceptCause",
    "prediction",
    "suggestions",
    "s",
    "state",
    "validSuggestionState",
    "suggestion",
    "reversion",
    "__async",
    "ReadySuggestions",
    "target",
    "originalTarget",
    "mayShowKeep",
    "keepNeeded",
    "_this",
    "PredictionContext",
    "_StyleConstants",
    "device",
    "deviceSpec_default",
    "__name",
    "StyleConstants",
    "_DeviceDetector",
    "s",
    "dpi",
    "possMacSpoof",
    "agent",
    "rx",
    "ex",
    "results",
    "versionString",
    "version",
    "Version",
    "dimMin",
    "dimMax",
    "aspect",
    "possibleChromeEmulation",
    "bMatch",
    "aspectRatio",
    "StyleConstants",
    "deviceSpec_default",
    "__name",
    "DeviceDetector",
    "_EngineConfiguration",
    "EventEmitter",
    "sourcePath",
    "device",
    "deviceDetector",
    "DeviceDetector",
    "ManagedPromise",
    "options",
    "PathConfiguration",
    "KeyboardProperties",
    "value",
    "physicalKeyDeviceAlias",
    "functor",
    "ruleBehavior",
    "outputTarget",
    "__name",
    "EngineConfiguration",
    "InitOptionDefaults",
    "__spreadValues",
    "spacebarText_default",
    "PathOptionDefaults",
    "_ContextManagerBase",
    "EventEmitter",
    "engineConfig",
    "config",
    "kbdInterface",
    "Ptext",
    "PdeadKey",
    "outputTarget",
    "target",
    "activationIndex",
    "kbdPromise",
    "metadata",
    "__async",
    "activation",
    "activationAfterAwait",
    "keyboardId",
    "languageCode",
    "saveCookie",
    "wasNull",
    "activatingKeyboard",
    "originalKeyboardTarget",
    "keyboard",
    "kbdStubPair",
    "_a",
    "requestedStub",
    "defermentPromise",
    "completionPromise",
    "ManagedPromise",
    "keyboardPromise",
    "timeoutPromise",
    "resolve",
    "reject",
    "timeoutMsg",
    "combinedPromise",
    "err",
    "__name",
    "ContextManagerBase",
    "_HardKeyboard",
    "EventEmitter",
    "__name",
    "HardKeyboard",
    "processForMnemonicsAndLegacy",
    "s",
    "activeKeyboard",
    "baseLayout",
    "ModifierKeyConstants",
    "Lbase",
    "KeyMapping",
    "codes_default",
    "KeyEvent",
    "findCommonSubstringEndIndex",
    "str1",
    "str2",
    "commonSuffix",
    "maxInterval",
    "start",
    "index",
    "end",
    "inc",
    "offset",
    "commonPotentialSurrogate",
    "divergentChar1",
    "divergentChar2",
    "commonSurrogateChecker",
    "Uni_IsSurrogate2",
    "Uni_IsSurrogate1",
    "divergentSurrogateChecker",
    "__name",
    "_Deadkey",
    "pos",
    "id",
    "p",
    "d",
    "result",
    "other",
    "dk",
    "__name",
    "a",
    "b",
    "Deadkey",
    "_DeadkeyTracker",
    "dkt",
    "dks",
    "value",
    "caretPos",
    "n",
    "sp",
    "i",
    "index",
    "Li",
    "Lstart",
    "Ldelta",
    "otherDks",
    "matchedDks",
    "otherDk",
    "DeadkeyTracker",
    "extendString",
    "isEmptyTransform",
    "transform",
    "_a",
    "__name",
    "_TextTransform",
    "insert",
    "deleteLeft",
    "deleteRight",
    "erasedSelection",
    "TextTransform",
    "_Transcription",
    "keystroke",
    "preInput",
    "alternates",
    "token",
    "alt",
    "Transcription",
    "_OutputTarget",
    "DeadkeyTracker",
    "n",
    "d",
    "dk",
    "Deadkey",
    "delta",
    "dks",
    "original",
    "toLeft",
    "fromLeft",
    "leftDivergenceIndex",
    "findCommonSubstringEndIndex",
    "deletedLeft",
    "insertedText",
    "toRight",
    "fromRight",
    "rightDivergenceIndex",
    "deletedRight",
    "keyEvent",
    "readonly",
    "Mock",
    "s",
    "OutputTarget",
    "_Mock",
    "OutputTarget",
    "text",
    "selStart",
    "selEnd",
    "defaultLength",
    "outputTarget",
    "readonly",
    "clone",
    "priorMock",
    "textLen",
    "selectionStart",
    "selectionEnd",
    "beforeText",
    "afterText",
    "start",
    "end",
    "temp",
    "dn",
    "s",
    "other",
    "__name",
    "Mock",
    "_RuleBehavior",
    "processor",
    "outputTarget",
    "readonly",
    "storeID",
    "sysStore",
    "error",
    "keyEvent",
    "other",
    "keystroke",
    "keyFromOther",
    "mergingMock",
    "Mock",
    "__name",
    "RuleBehavior",
    "_SystemStore",
    "id",
    "value",
    "__name",
    "SystemStore",
    "_MutableSystemStore",
    "defaultValue",
    "MutableSystemStore",
    "_PlatformSystemStore",
    "keyboardInterface",
    "i",
    "constraint",
    "constraints",
    "device",
    "PlatformSystemStore",
    "_KeyInformation",
    "__name",
    "KeyInformation",
    "_CachedContext",
    "n",
    "ln",
    "val",
    "__name",
    "CachedContext",
    "_CachedContextEx",
    "r",
    "CachedContextEx",
    "_KeyboardInterface",
    "KeyboardHarness",
    "_jsGlobal",
    "keymanGlobal",
    "variableStoreSerializer",
    "PlatformSystemStore",
    "MutableSystemStore",
    "codes_default",
    "Pk",
    "keyboard",
    "Keyboard",
    "outputTarget",
    "v",
    "tempContext",
    "cx",
    "cache",
    "unmatchedDeadkeys",
    "index",
    "sp",
    "deadPos",
    "kc",
    "subCache",
    "i",
    "rule",
    "fullContext",
    "context",
    "deadContext",
    "mismatch",
    "NUL_CONTEXT",
    "assertNever",
    "x",
    "str",
    "lookup",
    "result",
    "ch",
    "KeyMapping",
    "eventModifiers",
    "targetModifierMask",
    "CHIRAL_ALT",
    "ModifierKeyConstants",
    "CHIRAL_CTRL",
    "modifiers",
    "altIntersection",
    "ctrlIntersection",
    "Lruleshift",
    "Lrulekey",
    "retVal",
    "keyCode",
    "bitmask",
    "modifierBitmask",
    "stateBitmask",
    "Lstate",
    "ei",
    "KeyInformation",
    "d",
    "store",
    "cachedStores",
    "s",
    "Lix",
    "entry",
    "Ps",
    "Pn",
    "Pdn",
    "indexChar",
    "dn",
    "nulCount",
    "dk",
    "contextLength",
    "contextOffset",
    "vc",
    "Pd",
    "systemId",
    "strValue",
    "kbdName",
    "storeName",
    "dfltValue",
    "optValue",
    "kbd",
    "valueObj",
    "keystroke",
    "callee",
    "readonly",
    "preInput",
    "Mock",
    "cachedVariableStores",
    "RuleBehavior",
    "matched",
    "behavior",
    "stores",
    "prototype",
    "exportKBCallback",
    "miniName",
    "longName",
    "KeyboardInterface",
    "_KeyboardProcessor",
    "EventEmitter",
    "device",
    "options",
    "KeyboardInterface",
    "getGlobalObject",
    "MinimalKeymanGlobal",
    "keyboard",
    "value",
    "Lkc",
    "outputTarget",
    "readonly",
    "preInput",
    "Mock",
    "ruleBehavior",
    "RuleBehavior",
    "matched",
    "char",
    "special",
    "isMnemonic",
    "transcription",
    "keyEvent",
    "matchBehavior",
    "nothingDeletable",
    "codes_default",
    "defaultBehavior",
    "keyShiftState",
    "lockNames",
    "lockKeys",
    "lockModifiers",
    "ModifierKeyConstants",
    "stateMutation",
    "i",
    "noLockModifers",
    "key",
    "modifier",
    "Layouts",
    "keyName",
    "nextLayer",
    "isChiral",
    "id",
    "activeLayer",
    "deviceSpec_default",
    "idx",
    "replacements",
    "baseModifierState",
    "Levent",
    "isKeyDown",
    "target",
    "__name",
    "DefaultRules",
    "KeyboardProcessor",
    "KEYBOARD_PREFIX",
    "prefixed",
    "text",
    "__name",
    "withoutPrefix",
    "text",
    "KEYBOARD_PREFIX",
    "__name",
    "_StubAndKeyboardCache",
    "EventEmitter",
    "keyboardLoader",
    "stub",
    "keyboardID",
    "entry",
    "prefixed",
    "getFirstValue",
    "obj",
    "keys",
    "__name",
    "stubTable",
    "keyboard",
    "cachedEntry",
    "Keyboard",
    "withoutPrefix",
    "promise",
    "kbd",
    "err",
    "_a",
    "arg0",
    "arg1",
    "languageID",
    "purge",
    "id",
    "arr",
    "kbdIds",
    "kbdId",
    "row",
    "langIds",
    "langId",
    "StubAndKeyboardCache",
    "REGIONS",
    "REGION_CODES",
    "REGEX_FOR_PRECONFIGURED_PATH",
    "configureFilePathing",
    "path",
    "configurationBasePath",
    "__name",
    "_KeyboardStub",
    "KeyboardProperties",
    "arg0",
    "arg1",
    "arg2",
    "__super",
    "apiSpec",
    "prefixed",
    "rawStub",
    "language",
    "region",
    "rIndex",
    "list",
    "i",
    "arg",
    "keyboardBaseUri",
    "fontBaseUri",
    "errorMsg",
    "languages",
    "stubs",
    "intermediate",
    "__spreadProps",
    "__spreadValues",
    "stub",
    "KeyboardStub",
    "mergeAndResolveStubPromises",
    "keyboardStubs",
    "errorStubs",
    "result",
    "CLOUD_TIMEOUT_ERR",
    "CLOUD_MALFORMED_OBJECT_ERR",
    "CLOUD_STUB_REGISTRATION_ERR",
    "CLOUD_REGISTRATION_ERR",
    "MISSING_KEYBOARD",
    "__name",
    "kbdid",
    "_CloudQueryEngine",
    "EventEmitter",
    "requestEngine",
    "pathConfig",
    "x",
    "promiseid",
    "result",
    "err",
    "promise",
    "ManagedPromise",
    "error",
    "cmd",
    "byLanguage",
    "URL",
    "queryConfig",
    "Version",
    "query",
    "queryId",
    "queryResult",
    "options",
    "fontPath",
    "badName",
    "keyboardId",
    "stubs",
    "i",
    "kp",
    "languageList",
    "nArg",
    "kbId",
    "nDflt",
    "id",
    "langArray",
    "j",
    "allStubs",
    "KeyboardStub",
    "lgCode",
    "stub",
    "cloudList",
    "__async",
    "comma",
    "errorStubs",
    "mergeAndResolveStubPromises",
    "CloudQueryEngine",
    "_CloudRequestEntry",
    "id",
    "language",
    "str",
    "__name",
    "CloudRequestEntry",
    "convertToErrorStub",
    "stub",
    "err",
    "toQuerySpecs",
    "langId",
    "version",
    "obj",
    "isUniqueRequest",
    "cache",
    "cloudList",
    "tEntry",
    "k",
    "_KeyboardRequisitioner",
    "keyboardLoader",
    "keyboardRequester",
    "pathConfig",
    "StubAndKeyboardCache",
    "CloudQueryEngine",
    "registration",
    "entry",
    "KeyboardStub",
    "x",
    "completeStubs",
    "incompleteStubs",
    "stubs",
    "identifiers",
    "errorStubs",
    "apiSpecEntry",
    "msg",
    "splitStubs",
    "singleLangEntry",
    "incomplete",
    "querySpec",
    "withoutPrefix",
    "identifier",
    "pList",
    "lList",
    "j",
    "spec",
    "queryResults",
    "result",
    "languages",
    "__async",
    "fetchedLanguageList",
    "error",
    "languageList",
    "cmd",
    "i",
    "lgName",
    "addAll",
    "languageFound",
    "results",
    "mergeAndResolveStubPromises",
    "languageName",
    "KeyboardRequisitioner",
    "_ModelManager",
    "lgCode",
    "model",
    "mm",
    "code",
    "modelId",
    "__name",
    "ModelManager",
    "arrayFromNodeList",
    "nl",
    "res",
    "i",
    "__name",
    "createUnselectableElement",
    "nodeName",
    "e",
    "__name",
    "_StylesheetManager",
    "linkNode",
    "doCacheBusting",
    "_ElemHead",
    "entry",
    "sheet",
    "promise",
    "ManagedPromise",
    "__async",
    "allPromises",
    "fd",
    "fontPathRoot",
    "os",
    "fontKey",
    "source",
    "i",
    "ttf",
    "woff",
    "fList",
    "data",
    "deviceSpec_default",
    "fontStyleMap",
    "s",
    "format",
    "createStyleSheet",
    "loadPromise",
    "clearPromise",
    "__name",
    "uri",
    "href",
    "force",
    "e",
    "linkElement",
    "stylesheet",
    "index",
    "tuple",
    "StylesheetManager",
    "styleString",
    "_ElemStyle",
    "landscapeView",
    "orientation",
    "__name",
    "_CookieSerializer",
    "name",
    "decoder",
    "val",
    "cookie",
    "encoder",
    "v",
    "c",
    "i",
    "d",
    "cookieName",
    "encodedCookie",
    "rawDecode",
    "record",
    "key",
    "value",
    "cookieValueMap",
    "serialization",
    "cookieConfig",
    "__name",
    "CookieSerializer",
    "getAbsoluteX",
    "Pobj",
    "Lobj",
    "Lcurleft",
    "Ldoc",
    "__name",
    "getAbsoluteY",
    "Lcurtop",
    "_VarStoreSerializer",
    "CookieSerializer",
    "keyboardID",
    "storeName",
    "storeMap",
    "__name",
    "VarStoreSerializer",
    "_VariableStoreCookieSerializer",
    "VariableStoreCookieSerializer",
    "_KeyboardInterface",
    "KeyboardInterface",
    "_jsGlobal",
    "engine",
    "stubNamespacer",
    "VariableStoreCookieSerializer",
    "__name",
    "Ptext",
    "PdeadKey",
    "Pk",
    "trueID",
    "scripts",
    "currentScript",
    "withoutPrefix",
    "registeredKeyboard",
    "Pstub",
    "_a",
    "buildStub",
    "pathConfig",
    "KeyboardStub",
    "stub",
    "_DOMKeyboardLoader",
    "KeyboardLoaderBase",
    "harness",
    "cacheBust",
    "__super",
    "KeyboardHarness",
    "MinimalKeymanGlobal",
    "uri",
    "errorBuilder",
    "id",
    "promise",
    "ManagedPromise",
    "document",
    "script",
    "err",
    "keyboard",
    "__name",
    "DOMKeyboardLoader",
    "_ContextWindow",
    "mock",
    "config",
    "layerId",
    "caretPos",
    "Mock",
    "__name",
    "ContextWindow",
    "_PromiseStore",
    "token",
    "resolve",
    "reject",
    "value",
    "callbacks",
    "accept",
    "reason",
    "__name",
    "PromiseStore",
    "_LMLayer",
    "capabilities",
    "worker",
    "testMode",
    "PromiseStore",
    "modelSource",
    "loadType",
    "resolve",
    "_reject",
    "modelSourceSpec",
    "transform",
    "context",
    "token",
    "reject",
    "suggestion",
    "postTransform",
    "reversion",
    "event",
    "payload",
    "__name",
    "LMLayer",
    "unwrap",
    "encodedSrc",
    "__name",
    "LMLayerWorkerCode",
    "LMLayerWorkerSourcemapComment",
    "_DefaultWorker",
    "LMLayerWorkerCode",
    "encodedSrc",
    "code",
    "unwrap",
    "LMLayerWorkerSourcemapComment",
    "blob",
    "__name",
    "DefaultWorker",
    "_LanguageProcessor",
    "EventEmitter",
    "predictiveTextWorker",
    "transcriptionCache",
    "supportsRightDeletions",
    "capabilities",
    "LMLayer",
    "model",
    "specType",
    "source",
    "config",
    "error",
    "message",
    "outputTarget",
    "layerId",
    "transcription",
    "target",
    "context",
    "ContextWindow",
    "Mock",
    "suggestion",
    "getLayerId",
    "original",
    "final",
    "transform",
    "suggestionContext",
    "reversionPromise",
    "reversion",
    "mappedReversion",
    "promise",
    "resetContext",
    "alternates",
    "suggestions",
    "result",
    "ReadySuggestions",
    "id",
    "flag",
    "oldVal",
    "state",
    "_a",
    "returnObj",
    "__name",
    "LanguageProcessor",
    "TRANSCRIPTION_BUFFER_SIZE",
    "_TranscriptionCache",
    "key",
    "value",
    "__name",
    "TranscriptionCache",
    "_InputProcessor",
    "device",
    "predictiveTextWorker",
    "options",
    "TranscriptionCache",
    "KeyboardProcessor",
    "LanguageProcessor",
    "keyboard",
    "keyEvent",
    "outputTarget",
    "kbdMismatch",
    "trueActiveKeyboard",
    "transcription",
    "isEmptyTransform",
    "Mock",
    "_a",
    "formFactor",
    "fromOSK",
    "deviceSpec_default",
    "RuleBehavior",
    "codes_default",
    "preInputMock",
    "startingLayerId",
    "ruleBehavior",
    "isOnlyLayerSwitchKey",
    "keepRuleBehavior",
    "alternates",
    "hasLayerChanged",
    "postRuleBehavior",
    "keyDistribution",
    "windowedMock",
    "ContextWindow",
    "TIMEOUT_THRESHOLD",
    "_globalThis",
    "getGlobalObject",
    "timer",
    "__name",
    "KEYSTROKE_EPSILON",
    "a",
    "b",
    "totalMass",
    "pair",
    "mock",
    "altKey",
    "altEvent",
    "alternateBehavior",
    "transform",
    "alt",
    "InputProcessor",
    "_DomEventTracking",
    "Pelem",
    "Peventname",
    "Phandler",
    "PuseCapture",
    "other",
    "__name",
    "DomEventTracking",
    "_DomEventTracker",
    "event",
    "i",
    "DomEventTracker",
    "_EmitterListenerSpy",
    "EventEmitter",
    "emitter",
    "spyEventName",
    "method",
    "eventName",
    "listener",
    "retVal",
    "__name",
    "EmitterListenerSpy",
    "_LegacyEventEmitter",
    "event",
    "func",
    "i",
    "params",
    "result",
    "strExcept",
    "listeners",
    "__name",
    "LegacyEventEmitter",
    "_DOMCloudRequester",
    "fileLocal",
    "query",
    "promise",
    "ManagedPromise",
    "timeoutID",
    "CLOUD_TIMEOUT_ERR",
    "tFlag",
    "fullRef",
    "Lscript",
    "event",
    "CLOUD_STUB_REGISTRATION_ERR",
    "source",
    "lineno",
    "colno",
    "error",
    "msg",
    "CLOUD_MALFORMED_OBJECT_ERR",
    "ex",
    "__name",
    "DOMCloudRequester",
    "determineBaseLayout",
    "__name",
    "_KeymanEngine",
    "worker",
    "config",
    "contextManager",
    "processorConfigInitializer",
    "LegacyEventEmitter",
    "event",
    "callback",
    "_a",
    "outputTarget",
    "oskLayer",
    "result",
    "processorConfiguration",
    "InputProcessor",
    "state",
    "_b",
    "stateKeys",
    "metadata",
    "kbd",
    "prepareKeyboardSwap",
    "optionSpec",
    "__async",
    "keyboardLoader",
    "DOMKeyboardLoader",
    "KeyboardRequisitioner",
    "DOMCloudRequester",
    "ModelManager",
    "kbdCache",
    "keyboardProcessor",
    "predictionContext",
    "PredictionContext",
    "target",
    "stub",
    "eventRaiser",
    "keyboard",
    "version_inc_default",
    "value",
    "_c",
    "_d",
    "_e",
    "_f",
    "_g",
    "_h",
    "_i",
    "_j",
    "_k",
    "_l",
    "_m",
    "_n",
    "activeKbd",
    "withoutPrefix",
    "model",
    "listener",
    "activeStub",
    "modelId",
    "keyboardId",
    "languageCode",
    "fullName",
    "k0",
    "kbdObj",
    "KeymanEngine",
    "_Banner",
    "height",
    "width",
    "ds",
    "currentHeightStyle",
    "currentDisplayStyle",
    "d",
    "createUnselectableElement",
    "keyboard",
    "keyboardProperties",
    "__name",
    "Banner",
    "_ParsedLengthStyle",
    "style",
    "parsed",
    "scalar",
    "val",
    "suffix",
    "spec",
    "CONSTANT_STYLE",
    "__name",
    "ParsedLengthStyle",
    "_BlankBanner",
    "Banner",
    "__name",
    "BlankBanner",
    "_BannerView",
    "Banner",
    "EventEmitter",
    "d",
    "createUnselectableElement",
    "banner",
    "prevBanner",
    "BlankBanner",
    "h",
    "ParsedLengthStyle",
    "_a",
    "w",
    "_b",
    "__name",
    "BannerView",
    "_ImageBanner",
    "Banner",
    "imagePath",
    "height",
    "__super",
    "ds",
    "__name",
    "ImageBanner",
    "reportError",
    "baseMsg",
    "err",
    "__name",
    "_AsyncClosureDispatchQueue",
    "defaultWaitFactory",
    "timedPromise",
    "__async",
    "functor",
    "result",
    "err",
    "reportError",
    "closure",
    "isReady",
    "__name",
    "AsyncClosureDispatchQueue",
    "isAnInputSample",
    "obj",
    "__name",
    "_CumulativePathStats",
    "obj",
    "__spreadValues",
    "isAnInputSample",
    "sample",
    "result",
    "baseSample",
    "x",
    "y",
    "t",
    "xDelta",
    "yDelta",
    "coordArcDeltaSq",
    "coordArcDelta",
    "subsetStats",
    "dim",
    "d",
    "functor",
    "singleSample",
    "originalSample",
    "tDelta",
    "_a",
    "value",
    "yAngleDiff",
    "buckets",
    "bucketIndex",
    "__name",
    "CumulativePathStats",
    "getGestureModel",
    "defs",
    "id",
    "result",
    "spec",
    "__name",
    "getGestureModelSet",
    "idSet",
    "set",
    "missing",
    "EMPTY_GESTURE_DEFS",
    "_ViewportZoneSource",
    "__name",
    "ViewportZoneSource",
    "_PaddedZoneSource",
    "rootZoneSource",
    "edgePadding",
    "ViewportZoneSource",
    "val",
    "rootZone",
    "__name",
    "PaddedZoneSource",
    "preprocessRecognizerConfig",
    "config",
    "_a",
    "_b",
    "_c",
    "_d",
    "_e",
    "_f",
    "_g",
    "processingConfig",
    "__spreadValues",
    "PaddedZoneSource",
    "paddingArray",
    "__name",
    "_GesturePath",
    "EventEmitter",
    "CumulativePathStats",
    "instance",
    "functor",
    "sample",
    "cancel",
    "__name",
    "GesturePath",
    "_GestureDebugPath",
    "GesturePath",
    "instance",
    "CumulativePathStats",
    "jsonObj",
    "obj",
    "__spreadValues",
    "stats",
    "sample",
    "functor",
    "i",
    "jsonClone",
    "__name",
    "GestureDebugPath",
    "_GestureSource",
    "identifier",
    "recognizerConfig",
    "isFromTouch",
    "pathConstructor",
    "GesturePath",
    "closure",
    "sample",
    "value",
    "startAtEnd",
    "preserveBaseItem",
    "stateTokenOverride",
    "GestureSourceSubview",
    "cancel",
    "config",
    "configToProcess",
    "__spreadProps",
    "__spreadValues",
    "preprocessRecognizerConfig",
    "__name",
    "GestureSource",
    "_GestureSourceSubview",
    "source",
    "configStack",
    "start",
    "length",
    "baseSource",
    "translateSample",
    "translation",
    "transformedSample",
    "lastSample",
    "completeHook",
    "invalidatedHook",
    "stepHook",
    "currentClientRect",
    "baseClientRect",
    "_GestureDebugSource",
    "GestureSource",
    "identifier",
    "recognizerConfig",
    "isFromTouch",
    "GestureDebugPath",
    "jsonObj",
    "id",
    "path",
    "instance",
    "__name",
    "GestureDebugSource",
    "_InputEngineBase",
    "EventEmitter",
    "config",
    "_a",
    "GestureDebugSource",
    "GestureSource",
    "identifier",
    "isFromTouch",
    "unique_id",
    "source",
    "touchpoint",
    "touchpoints",
    "id",
    "point",
    "pt",
    "key",
    "keyVal",
    "__name",
    "InputEngineBase",
    "processSampleClientCoords",
    "config",
    "clientX",
    "clientY",
    "targetRect",
    "__name",
    "_InputEventEngine",
    "InputEngineBase",
    "target",
    "timestamp",
    "source",
    "_a",
    "_b",
    "sample",
    "__spreadProps",
    "__spreadValues",
    "hoveredItem",
    "identifier",
    "isFromTouch",
    "touchpoint",
    "err",
    "reportError",
    "InputEventEngine",
    "_ZoneBoundaryChecker",
    "coord",
    "zone",
    "bounds",
    "bitmask",
    "config",
    "ignoredSafeBoundFlags",
    "__name",
    "ZoneBoundaryChecker",
    "_MouseEventEngine",
    "InputEventEngine",
    "config",
    "event",
    "sample",
    "ZoneBoundaryChecker",
    "touchpoint",
    "cleanup",
    "__name",
    "source",
    "MouseEventEngine",
    "touchListToArray",
    "list",
    "arr",
    "i",
    "__name",
    "_TouchEventEngine",
    "InputEventEngine",
    "config",
    "AsyncClosureDispatchQueue",
    "event",
    "source",
    "key",
    "keyVal",
    "touchpoint",
    "lock",
    "identifier",
    "touch",
    "timestamp",
    "allTouches",
    "newTouches",
    "oldSourcePromises",
    "touch1",
    "touch2",
    "__async",
    "oldSources",
    "capturedSourcePromises",
    "promise",
    "ManagedPromise",
    "touchId",
    "sample",
    "ZoneBoundaryChecker",
    "sourcePromise",
    "cleanup",
    "eventSignalPromise",
    "_a",
    "touches",
    "promiseToCapture",
    "TouchEventEngine",
    "_PathMatcher",
    "model",
    "source",
    "basePathStats",
    "ManagedPromise",
    "offset",
    "TimeoutPromise",
    "result",
    "trueSource",
    "GestureSourceSubview",
    "timestamp",
    "__spreadProps",
    "__spreadValues",
    "cause",
    "retVal",
    "__name",
    "PathMatcher",
    "_GestureMatcher",
    "model",
    "sourceObj",
    "_a",
    "predecessor",
    "GestureSource",
    "source",
    "ManagedPromise",
    "TimeoutPromise",
    "elapsed",
    "shouldResolve",
    "sourceTouchpoints",
    "entry",
    "cleansed",
    "touchpointIndex",
    "srcContact",
    "GestureSourceSubview",
    "contactSpec",
    "inheritancePattern",
    "preserveBaseItem",
    "contact",
    "pathMatch",
    "index",
    "matched",
    "cause",
    "_b",
    "action",
    "resolutionItem",
    "resolveObj",
    "__spreadProps",
    "__spreadValues",
    "err",
    "i",
    "matcher",
    "bestMatcher",
    "highestPriority",
    "currentIds",
    "predecessorIds",
    "simpleSource",
    "existingContacts",
    "basePathStats",
    "whileInitializing",
    "contactModel",
    "PathMatcher",
    "CumulativePathStats",
    "ancestorSource",
    "baseItem",
    "baseItemMode",
    "baseStateToken",
    "originalStats",
    "replacementSampleBase",
    "replacementSample",
    "processSampleClientCoords",
    "result",
    "resolution",
    "__name",
    "GestureMatcher",
    "_MatcherSelector",
    "EventEmitter",
    "baseSetId",
    "__name",
    "sourceCurrentTimestamps",
    "tracker",
    "t",
    "t2",
    "matcher",
    "source",
    "id",
    "potentialMatchers",
    "matchersToCancel",
    "matchersToPreserve",
    "sourceIdsToPreserve",
    "compactArray",
    "current",
    "entry",
    "sourceTracker",
    "index",
    "data",
    "gestureModelSet",
    "__async",
    "sourceNotYetStaged",
    "GestureSource",
    "determinePredecessorSources",
    "directSources",
    "sources",
    "GestureSourceSubview",
    "unmatchedSource",
    "priorMatcher",
    "parentLockPromise",
    "childLock",
    "ManagedPromise",
    "matchPromise",
    "sourceTrackers",
    "src",
    "sourceSelectors",
    "synchronizationSet",
    "track",
    "extendableMatcherSet",
    "originalStateToken",
    "matchingLock",
    "timedPromise",
    "incomingStateToken",
    "currentSample",
    "newlyMatched",
    "newMatchers",
    "model",
    "GestureMatcher",
    "err",
    "a",
    "b",
    "resetHooks",
    "gestureSource",
    "baseSource",
    "idsToClean",
    "matchSynchronizers",
    "result",
    "sourceMetadata",
    "metadata",
    "matcherIndex",
    "losingMatchers",
    "matcher2",
    "replacer",
    "replacementModel",
    "replacementMatcher",
    "trackers",
    "remainingMatcherStats",
    "stat",
    "MatcherSelector",
    "_GestureStageReport",
    "selection",
    "gestureSetId",
    "_a",
    "_b",
    "matcher",
    "result",
    "source",
    "a",
    "b",
    "__name",
    "GestureStageReport",
    "_GestureSequence",
    "EventEmitter",
    "firstSelectionMatch",
    "gestureModelDefinitions",
    "selector",
    "touchpointCoordinator",
    "__async",
    "_c",
    "_d",
    "_e",
    "_f",
    "_g",
    "_h",
    "_i",
    "_j",
    "gestureSet",
    "matchReport",
    "sourceTracker",
    "sources",
    "matchSource",
    "GestureSourceSubview",
    "actionType",
    "sustainCompletionPromises",
    "promise",
    "ManagedPromise",
    "timedPromise",
    "command",
    "selectorNotCurrent",
    "nextModels",
    "modelSetForAction",
    "model",
    "targetSet",
    "changedSetSelector",
    "MatcherSelector",
    "selectionHost",
    "replaceModelWith",
    "sourceIds",
    "getGestureModel",
    "selectors",
    "flattened",
    "arr",
    "deduplicated",
    "entry",
    "src",
    "GestureSequence",
    "action",
    "activeSetId",
    "_TouchpointCoordinator",
    "EventEmitter",
    "gestureModelDefinitions",
    "inputEngines",
    "historyLength",
    "MatcherSelector",
    "__name",
    "selection",
    "replaceModelWith",
    "sourceIds",
    "sequence",
    "a",
    "getGestureModel",
    "touchpoint",
    "__async",
    "modelDefs",
    "potentialSelector",
    "selectionPromise",
    "modelingSpinupResults",
    "getGestureModelSet",
    "correctSample",
    "sample",
    "GestureDebugPath",
    "selector",
    "preGestureScribe",
    "err",
    "reportError",
    "engine",
    "sourceIDs",
    "id1",
    "id2",
    "gestureSequence",
    "GestureSequence",
    "index",
    "sustainedSources",
    "i",
    "source",
    "selectorIndex",
    "matcher",
    "flattened",
    "entry",
    "gesture",
    "histMax",
    "merged",
    "arr",
    "sanitizingReplacer",
    "key",
    "value",
    "token",
    "owningSequence",
    "TouchpointCoordinator",
    "specs_exports",
    "__export",
    "EMPTY_GESTURE_DEFS",
    "getGestureModel",
    "getGestureModelSet",
    "_GestureRecognizer",
    "TouchpointCoordinator",
    "gestureModelDefinitions",
    "config",
    "preprocessedConfig",
    "preprocessRecognizerConfig",
    "EMPTY_GESTURE_DEFS",
    "MouseEventEngine",
    "TouchEventEngine",
    "sequence",
    "source",
    "__name",
    "GestureRecognizer",
    "gestures_exports",
    "__export",
    "matchers_exports",
    "specs_exports",
    "matchers_exports",
    "__export",
    "GestureMatcher",
    "GestureSequence",
    "GestureStageReport",
    "MatcherSelector",
    "PathMatcher",
    "modelSetForAction",
    "keyTouchDistances",
    "touchCoords",
    "correctiveLayout",
    "keyDists",
    "entry",
    "dx",
    "dy",
    "distX",
    "distY",
    "distance",
    "__name",
    "distributionFromDistanceMaps",
    "squaredDistMaps",
    "_a",
    "keyProbs",
    "totalMass",
    "squaredDistMap",
    "key",
    "list",
    "a",
    "b",
    "OrderedFlickDirections",
    "PI",
    "FlickNameCoordMap",
    "map",
    "angleIncrement",
    "i",
    "lockedAngleForDir",
    "lockedDir",
    "__name",
    "calcLockedDistance",
    "pathStats",
    "lockedAngle",
    "rootCoord",
    "deltaX",
    "deltaY",
    "projY",
    "buildFlickScroller",
    "source",
    "previewHost",
    "gestureParams",
    "coord",
    "maxProgressDist",
    "progressDist",
    "slidePc",
    "previewX",
    "previewY",
    "MAX_TOLERANCE_ANGLE_SKEW",
    "_Flick",
    "sequence",
    "configChanger",
    "vkbd",
    "e",
    "baseSource",
    "result",
    "_a",
    "baseSelection",
    "GestureSourceSubview",
    "dir",
    "selection",
    "altConfig",
    "keyEvent",
    "roamBounding",
    "base",
    "__spreadProps",
    "__spreadValues",
    "ignoreThreshold",
    "flickSet",
    "keys",
    "angle",
    "TRIGGER_DIST",
    "distThresholdRatio",
    "totalMass",
    "distribution",
    "entry",
    "angleDist",
    "angleDelta1",
    "angleDelta2",
    "geoDelta",
    "geoDist",
    "mass",
    "normalizer",
    "a",
    "b",
    "baseDistMap",
    "baseSpec",
    "baseDistances",
    "flickDistrib",
    "baseKeyFlickProbIndex",
    "baseKeyFlickProb",
    "baseDistribution",
    "distributionFromDistanceMaps",
    "Flick",
    "ButtonClasses",
    "keyman_touch_layout_file_exports",
    "DEFAULT_GESTURE_PARAMS",
    "getKeyCentroid",
    "key",
    "keyRect",
    "__name",
    "buildDistFromKeyCentroidFunctor",
    "keyCentroid",
    "a",
    "dx",
    "dy",
    "keySupportsModipress",
    "keySpec",
    "modifierKeyIds",
    "modKeyId",
    "gestureSetForLayout",
    "flags",
    "paramObj",
    "gestureKeyFilter",
    "__name",
    "key",
    "gestureId",
    "keySpec",
    "keySupportsModipress",
    "params",
    "flickSpec",
    "doRoaming",
    "_initialTapModel",
    "deepCopy",
    "initialTapModelWithReset",
    "initialTapModel",
    "_simpleTapModel",
    "simpleTapModelWithReset",
    "simpleTapModel",
    "_longpressModel",
    "withKeySpecFiltering",
    "longpressModel",
    "_multitapStartModel",
    "multitapStartModel",
    "_modipressMultitapStartModel",
    "modipressMultitapStartModel",
    "model",
    "contactIndices",
    "modelId",
    "contact",
    "index",
    "_a",
    "baseInitialStateCheck",
    "__spreadProps",
    "__spreadValues",
    "sample",
    "ancestorSample",
    "specialStartModel",
    "specialKeyStartModel",
    "_modipressStartModel",
    "modipressStartModel",
    "gestureModels",
    "multitapEndModel",
    "specialKeyEndModel",
    "subkeySelectModel",
    "modipressHoldModel",
    "modipressEndModel",
    "modipressMultitapTransitionModel",
    "modipressMultitapEndModel",
    "modipressMultitapLockModel",
    "defaultSet",
    "longpressModelAfterRoaming",
    "longpressRoamRestoration",
    "flickStartModel",
    "flickMidModel",
    "flickResetModel",
    "flickResetCenteringModel",
    "flickRestartModel",
    "flickResetEndModel",
    "flickEndModel",
    "entry",
    "instantContactRejectionModel",
    "path",
    "instantContactResolutionModel",
    "flickStartContactModel",
    "flickParams",
    "_",
    "item",
    "stats",
    "baseDistance",
    "angle",
    "determineLockFromStats",
    "pathStats",
    "baseItem",
    "supportedDirs",
    "bestDir",
    "bestLockedDist",
    "dir",
    "lockedDist",
    "calcLockedDistance",
    "flickMidContactModel",
    "priorStats",
    "dist",
    "trueAngle",
    "lockAngle",
    "lockedAngleForDir",
    "dist1",
    "dist2",
    "MAX_TOLERANCE_ANGLE_SKEW",
    "flickEndContactModel",
    "baseStats",
    "longpressContactModel",
    "enabledFlicks",
    "resetForRoaming",
    "spec",
    "baseKey",
    "modipressContactStartModel",
    "modipressContactHoldModel",
    "modipressContactEndModel",
    "simpleTapContactModel",
    "isNotInitial",
    "roamingEnabled",
    "subkeySelectContactModel",
    "allowShortcut",
    "allowRoaming",
    "base",
    "keyCentroid",
    "getKeyCentroid",
    "calcDist",
    "buildDistFromKeyCentroidFunctor",
    "coord",
    "distFromCenter",
    "dirLockDist",
    "projectionScalar",
    "dx",
    "dy",
    "newDist",
    "incomingSample",
    "comparisonSample",
    "simpleModel",
    "BannerSimpleTap",
    "__spreadProps",
    "__spreadValues",
    "deepCopy",
    "simpleTapModelWithReset",
    "BANNER_GESTURE_SET",
    "getFontSizeStyle",
    "e",
    "fs",
    "ParsedLengthStyle",
    "__name",
    "defaultFontSize",
    "device",
    "computedHeight",
    "isEmbedded",
    "fontScale",
    "metricsCanvas",
    "getTextMetrics",
    "text",
    "emScale",
    "style",
    "fontFamily",
    "fontSpec",
    "getFontSizeStyle",
    "fontSize",
    "context",
    "metrics",
    "__name",
    "HAS_SCROLLED_FUDGE_FACTOR",
    "_BannerScrollState",
    "coord",
    "baseScrollLeft",
    "prevCoord",
    "delta",
    "__name",
    "BannerScrollState",
    "TOUCHED_CLASS",
    "BANNER_SCROLLER_CLASS",
    "BANNER_VERT_ROAMING_HEIGHT_RATIO",
    "FADE_SWALLOW_STYLE",
    "_BannerSuggestion",
    "index",
    "isRTL",
    "display",
    "createUnselectableElement",
    "div",
    "container",
    "widthpc",
    "SuggestionBanner",
    "keyboardProperties",
    "font",
    "suggestion",
    "format",
    "rawMetrics",
    "getTextMetrics",
    "collapserStyle",
    "fadeClass",
    "val",
    "_a",
    "_b",
    "spanWidth",
    "utilizedWidth",
    "maxWidth",
    "on",
    "elem",
    "rtl",
    "suggestionText",
    "s",
    "orderCode",
    "__name",
    "BannerSuggestion",
    "_SuggestionBanner",
    "Banner",
    "hostDevice",
    "height",
    "suggestions",
    "fontStyleBase",
    "fontStyle",
    "emSizeStr",
    "emSize",
    "getFontSizeStyle",
    "textStyle",
    "targetWidth",
    "textLeftPad",
    "ParsedLengthStyle",
    "textRightPad",
    "optionFormat",
    "i",
    "d",
    "collapsedOptions",
    "totalWidth",
    "displayCount",
    "opt",
    "separatorWidth",
    "maxFillPadding",
    "a",
    "b",
    "shortestCollapsed",
    "neededWidth",
    "padding",
    "fillPadding",
    "indexToInsert",
    "separatorDiv",
    "ds",
    "safeBounds",
    "PaddedZoneSource",
    "config",
    "sample",
    "selBounds",
    "bestMatch",
    "bestDist",
    "option",
    "optionBounding",
    "dist",
    "engine",
    "GestureRecognizer",
    "BANNER_GESTURE_SET",
    "sourceTracker",
    "markSelection",
    "SuggestionExpandContractAnimation",
    "clearSelection",
    "source",
    "autoselection",
    "entry",
    "BannerScrollState",
    "newScrollLeft",
    "incoming",
    "terminationHandler",
    "currentSuggestions",
    "timedPromise",
    "__async",
    "sequence",
    "result",
    "keyboard",
    "context",
    "_SuggestionExpandContractAnimation",
    "scrollContainer",
    "forRTL",
    "maxWidthToCounterscroll",
    "ltrOverflow",
    "rtlOverflow",
    "srcCounterscrollOverflow",
    "unclampedExpandingScrollOffset",
    "rootUnclampedExpandingScrollOffset",
    "elementOffsetForClamping",
    "elementOffsetFromBorder",
    "clampedExpandingScrollOffset",
    "finalScrollOffset",
    "fractionalOffset",
    "timestamp",
    "progressTime",
    "fin",
    "expansionDiff",
    "expansionRatio",
    "expansionPx",
    "progress",
    "_HTMLBanner",
    "Banner",
    "contents",
    "bannerHost",
    "div",
    "raw",
    "__name",
    "HTMLBanner",
    "_BannerController",
    "bannerView",
    "hostDevice",
    "predictionContext",
    "ImageBanner",
    "HTMLBanner",
    "BlankBanner",
    "banner",
    "SuggestionBanner",
    "on",
    "oldBanner",
    "suggestBanner",
    "state",
    "keyboard",
    "keyboardProperties",
    "__name",
    "BannerController",
    "_EmptyView",
    "Ldiv",
    "ParsedLengthStyle",
    "__name",
    "EmptyView",
    "_HelpPageView",
    "keyboard",
    "Ldiv",
    "ParsedLengthStyle",
    "__name",
    "HelpPageView",
    "_CorrectiveBaseKeyLayout",
    "layer",
    "row",
    "key",
    "__name",
    "CorrectiveBaseKeyLayout",
    "correctionKeyFilter",
    "codes_default",
    "buildCorrectiveLayout",
    "kbdScaleRatio",
    "flattened",
    "rowEntries",
    "entry",
    "specialCharacters",
    "specialCharacters_default",
    "BUTTON_CLASSES",
    "buttonClassNames_default",
    "renameSpecialKey",
    "oldText",
    "vkbd",
    "deviceSpec_default",
    "specialCode",
    "specialCharacters_default",
    "specialCodePUA",
    "__name",
    "_OSKKey",
    "spec",
    "layer",
    "_a",
    "key",
    "btn",
    "buttonClassNames_default",
    "flag",
    "btnClassId",
    "classIndex",
    "on",
    "classes",
    "text",
    "layoutParams",
    "scale",
    "ParsedLengthStyle",
    "keyWidth",
    "keyHeight",
    "emScale",
    "originalSize",
    "style",
    "metrics",
    "getTextMetrics",
    "MAX_X_PROPORTION",
    "MAX_Y_PROPORTION",
    "X_PADDING",
    "fontHeight",
    "textHeight",
    "xProportion",
    "yProportion",
    "proportion",
    "DEFAULT_BLANK",
    "keyText",
    "t",
    "ts",
    "specialText",
    "styleSpec",
    "ButtonClasses",
    "lblStyle",
    "computedFontSize",
    "layoutFontSize",
    "baseEmFontSize",
    "baseFontSize",
    "localFontScaling",
    "fontSize",
    "keyCapText",
    "OSKKey",
    "_KeyData",
    "keyData",
    "keyId",
    "__name",
    "KeyData",
    "link",
    "elem",
    "data",
    "id",
    "isKey",
    "OSKKey",
    "getKeyFrom",
    "_OSKBaseKey",
    "OSKKey",
    "spec",
    "layer",
    "row",
    "x",
    "codes_default",
    "q",
    "btn",
    "vkbd",
    "bsn",
    "bsk",
    "oldText",
    "renameSpecialKey",
    "kDiv",
    "btnEle",
    "link",
    "KeyData",
    "keyCap",
    "skIcon",
    "hintSpec",
    "parsed",
    "ParsedLengthStyle",
    "baseText",
    "text",
    "previewHost",
    "oldPreview",
    "layoutParams",
    "flag",
    "__name",
    "OSKBaseKey",
    "KEY_BTN_Y_PAD_RATIO",
    "_OSKRow",
    "vkbd",
    "layerSpec",
    "rowSpec",
    "rDiv",
    "keys",
    "j",
    "key",
    "keyObj",
    "OSKBaseKey",
    "element",
    "flag",
    "layoutParams",
    "rs",
    "rowHeight",
    "keyHeightBase",
    "ParsedLengthStyle",
    "padTop",
    "keyHeight",
    "keySquare",
    "keyElement",
    "kss",
    "kes",
    "keyWidth",
    "_a",
    "widthStyle",
    "heightStyle",
    "keyPad",
    "styleHeight",
    "keyStyle",
    "__name",
    "OSKRow",
    "_OSKLayer",
    "vkbd",
    "layout",
    "layer",
    "gDiv",
    "gs",
    "nRows",
    "rows",
    "i",
    "rowObj",
    "OSKRow",
    "spacebarLabel",
    "tButton",
    "keyId",
    "row",
    "key",
    "displayName",
    "ex",
    "layoutParams",
    "layerHeight",
    "rowHeight",
    "usesFixedWidthScaling",
    "nRow",
    "oskRow",
    "bottom",
    "__name",
    "OSKLayer",
    "NEAREST_KEY_TOUCH_MARGIN_PERCENT",
    "_OSKLayerGroup",
    "vkbd",
    "keyboard",
    "formFactor",
    "layout",
    "lDiv",
    "ls",
    "layoutFS",
    "layerId",
    "layerSpec",
    "layer",
    "OSKLayer",
    "id",
    "layerIds",
    "spec",
    "key",
    "layerElement",
    "coord",
    "arg",
    "priorLayer",
    "trueLayer",
    "proportionalCoords",
    "rowIndex",
    "row",
    "closestKey",
    "minDistance",
    "keySpec",
    "ButtonClasses",
    "keyRadius",
    "distanceFromCenter",
    "distance",
    "layoutParams",
    "computedGroupStyle",
    "pt",
    "pb",
    "_a",
    "__name",
    "OSKLayerGroup",
    "CSS_PREFIX",
    "DEFAULT_TIP_ORIENTATION",
    "_KeyTip",
    "vkbd",
    "constrain",
    "tipElement",
    "orientation",
    "key",
    "on",
    "previewHost",
    "_a",
    "rowElement",
    "rkey",
    "rrow",
    "xLeft",
    "xWidth",
    "xHeight",
    "previewFontScale",
    "kts",
    "_BoxRect",
    "keyRect",
    "y",
    "distFromTop",
    "ySubPixelPadding",
    "canvasWidth",
    "canvasHeight",
    "unselectedOrientation",
    "layerFontFamily",
    "ckts",
    "px",
    "scaleStyle",
    "ParsedLengthStyle",
    "xOverflow",
    "cs",
    "oskHeight",
    "bottomY",
    "tipHeight",
    "halfHeight",
    "capOffset",
    "capStart",
    "defaultCapHeight",
    "delta",
    "hx",
    "oldHost",
    "oldPreview",
    "__name",
    "KeyTip",
    "BASE_CLASS",
    "OVERLAY_CLASS",
    "BASE_ID",
    "_TabletKeyTip",
    "vkbd",
    "base",
    "key",
    "on",
    "previewHost",
    "keyLayer",
    "hostRect",
    "keyRect",
    "conditionalOverlayStyle",
    "kts",
    "fontFamily",
    "oldHost",
    "oldPreview",
    "__name",
    "TabletKeyTip",
    "getViewportScale",
    "formFactor",
    "viewportWidth",
    "screenWidth",
    "landscapeView",
    "ex",
    "__name",
    "_HeldRepeater",
    "source",
    "closureToRepeat",
    "__name",
    "baseKey",
    "HeldRepeater",
    "_OSKSubKey",
    "OSKKey",
    "spec",
    "layer",
    "osk",
    "baseKey",
    "width",
    "topMargin",
    "kDiv",
    "ks",
    "btnEle",
    "btn",
    "link",
    "KeyData",
    "bs",
    "__name",
    "OSKSubKey",
    "CALLOUT_ROW_HEIGHT_RATIO",
    "MAX_CALLOUT_KEY_WIDTH",
    "SUBKEY_MENU_VERT_OFFSET",
    "SUBKEY_DEFAULT_MARGIN_LEFT",
    "CALLOUT_BASE_HEIGHT",
    "_SubkeyPopup",
    "source",
    "configChanger",
    "vkbd",
    "e",
    "gestureParams",
    "_a",
    "key",
    "keyEvent",
    "subkeyComponent",
    "sample",
    "_b",
    "subKeySpec",
    "elements",
    "ss",
    "computedStyle",
    "layer",
    "nKeys",
    "nRows",
    "nCols",
    "thisRowWidth",
    "iRow",
    "i",
    "iCol",
    "subkeyWidth",
    "kDiv",
    "OSKSubKey",
    "deviceSpec_default",
    "config",
    "baseBounding",
    "underlyingKeyBounding",
    "subkeyStyle",
    "basePadding",
    "topScalar",
    "bottomDistance",
    "roamBounding",
    "PaddedZoneSource",
    "sustainBounding",
    "base",
    "coord",
    "target",
    "roamingRect",
    "bestMatchKey",
    "bestYdist",
    "bestXdist",
    "keyBounds",
    "xDist",
    "yDist",
    "subKeys",
    "_Box",
    "rowElement",
    "parentOffsetLeft",
    "x",
    "xMax",
    "_BoxRect",
    "rowElementRect",
    "constrainPopup",
    "cs",
    "topY",
    "topOffset",
    "delta",
    "host",
    "isTablet",
    "cms",
    "borderRadius",
    "keyRect",
    "calloutTop",
    "calloutProportionalHeight",
    "maxProportionalHeight",
    "targetHeight",
    "calloutDownscaleRatio",
    "maxHeight",
    "selectedHeight",
    "cc",
    "ccs",
    "calloutKeyWidthRatio",
    "desiredCalloutWidth",
    "maxCalloutWidth",
    "targetCalloutWidth",
    "calloutLeftOffset",
    "calloutRightOverrun",
    "calloutLeftOverrun",
    "baseKey",
    "popupBase",
    "bk",
    "subkeys",
    "skSpec",
    "skElement",
    "aspectRatio",
    "keyElement",
    "subkeyBounds",
    "latestStage",
    "baseStage",
    "gestureSource",
    "lastCoord",
    "mappedCoord",
    "rawSqDistances",
    "keyTouchDistances",
    "currentKeyDist",
    "timeDistance",
    "pathDistance",
    "layerDistance",
    "baseKeyDistance",
    "baseKeyMap",
    "subkeyMatch",
    "entry",
    "distributionFromDistanceMaps",
    "__name",
    "SubkeyPopup",
    "_Modipress",
    "source",
    "vkbd",
    "completionCallback",
    "initialStage",
    "stage",
    "stageName",
    "callback",
    "baseDistMap",
    "__name",
    "Modipress",
    "_Multitap",
    "source",
    "vkbd",
    "e",
    "contextToken",
    "previewHost",
    "startModipress",
    "__name",
    "tap",
    "_a",
    "modipressHandler",
    "Modipress",
    "tapLookahead",
    "offset",
    "updatePreview",
    "stageHandler",
    "selection",
    "keyEvent",
    "coord",
    "baseDistances",
    "matchKey",
    "__spreadProps",
    "__spreadValues",
    "p",
    "baseDistribution",
    "distributionFromDistanceMaps",
    "keyIndex",
    "entry",
    "keySupportsModipress",
    "baseProb",
    "totalWeight",
    "multitapEntries",
    "i",
    "key",
    "distStd",
    "distWrap",
    "modularLinDist",
    "keyWeight",
    "scalar",
    "a",
    "b",
    "Multitap",
    "FLICK_OVERFLOW_OFFSET",
    "coerceZeroes",
    "__name",
    "val",
    "_GesturePreviewHost",
    "EventEmitter",
    "key",
    "isPhone",
    "width",
    "height",
    "_a",
    "keySpec",
    "edgeLength",
    "base",
    "previewImgContainer",
    "label",
    "flickSpec",
    "dir",
    "flickPreview",
    "ps",
    "coords",
    "FlickNameCoordMap",
    "x",
    "y",
    "hintLabel",
    "compStyle",
    "ele",
    "handler",
    "currentSrc",
    "nextSrc",
    "vkbd",
    "_b",
    "current",
    "renameSpecialKey",
    "next",
    "scrollStyle",
    "edge",
    "preferredOrientation",
    "GesturePreviewHost",
    "DEBUG_GESTURES",
    "version_inc_default",
    "DEBUG_HISTORY_COUNT",
    "_VisualKeyboard",
    "EventEmitter",
    "config",
    "_a",
    "_b",
    "_c",
    "__spreadValues",
    "DEFAULT_GESTURE_PARAMS",
    "Lkbd",
    "StylesheetManager",
    "layout",
    "rawLayout",
    "Layouts",
    "ActiveLayout",
    "formFactor",
    "Keyboard",
    "OSKLayerGroup",
    "kbdID",
    "separatorIndex",
    "kbdClassSuffix",
    "value",
    "changedLayer",
    "PaddedZoneSource",
    "sample",
    "target",
    "recognizer",
    "GestureRecognizer",
    "gestureSetForLayout",
    "sourceTrackingMap",
    "clearActiveGestures",
    "__name",
    "excludedTouchpointId",
    "identifier",
    "gestureHandlerMap",
    "source",
    "previewHost",
    "trackingEntry",
    "endHighlighting",
    "timedPromise",
    "key",
    "oldKey",
    "gestureSequence",
    "id",
    "gestureStage",
    "configChanger",
    "existingPreviewHost",
    "obj",
    "clearPreviewHost",
    "handlers",
    "clearRoaming",
    "_id",
    "tracker",
    "gestureKey",
    "coordSource",
    "coord",
    "keyResult",
    "correctionKeyDistribution",
    "baseDistanceMap",
    "distributionFromDistanceMaps",
    "shouldLockLayer",
    "SubkeyPopup",
    "baseItem",
    "HeldRepeater",
    "Multitap",
    "Flick",
    "modipressHandler",
    "Modipress",
    "index",
    "completingHandlers",
    "handler",
    "baseWidth",
    "ParsedLengthStyle",
    "baseHeight",
    "val",
    "node",
    "width",
    "height",
    "pending",
    "input",
    "offsetCoords",
    "keySpec",
    "touchKbdPos",
    "kbdAspectRatio",
    "correctiveLayout",
    "buildCorrectiveLayout",
    "keyTouchDistances",
    "t",
    "getKeyFrom",
    "ex",
    "keyDistribution",
    "keyEvent",
    "Lkc",
    "layerId",
    "i",
    "layer",
    "states",
    "keys",
    "stateKeys",
    "on",
    "usePreview",
    "keySquareScale",
    "emSizeStr",
    "emSize",
    "emScale",
    "device",
    "fs",
    "deviceSpec_default",
    "getViewportScale",
    "gs",
    "fixedSize",
    "computedStyle",
    "groupStyle",
    "isInDOM",
    "isGroupInDOM",
    "allottedHeight",
    "layers",
    "oskHeight",
    "layerID",
    "nRows",
    "rowHeight",
    "layerHeight",
    "activeKeyboard",
    "activeStub",
    "kfd",
    "ofd",
    "customStyle",
    "createStyleSheet",
    "s",
    "family",
    "fd",
    "PKbd",
    "kbdProperties",
    "pathConfig",
    "argFormFactor",
    "argLayerId",
    "deviceSpec",
    "kbdObj",
    "kbd",
    "classWrapper",
    "defaultFontSize",
    "detectAndHandleInsertion",
    "__async",
    "mainSheet",
    "sheets",
    "sheet",
    "insertionObserver",
    "sheetFile",
    "OSKView",
    "sheetHref",
    "keyName",
    "keyDown",
    "tip",
    "layoutParams",
    "keyWidth",
    "keyHeight",
    "GesturePreviewHost",
    "constrainPopup",
    "KeyTip",
    "TabletKeyTip",
    "enable",
    "e",
    "callbackData",
    "keyEventCallback",
    "result",
    "error",
    "transform",
    "isEmptyTransform",
    "OSKKey",
    "VisualKeyboard",
    "_Activator",
    "EventEmitter",
    "__name",
    "Activator",
    "_StaticActivator",
    "value",
    "StaticActivator",
    "_TouchEventPromiseMap",
    "id",
    "ManagedPromise",
    "list",
    "keys",
    "i",
    "pos",
    "endedKey",
    "__name",
    "TouchEventPromiseMap",
    "getResourcePath",
    "config",
    "resourcePathExt",
    "__name",
    "_OSKView",
    "EventEmitter",
    "configuration",
    "_a",
    "LegacyEventEmitter",
    "TouchEventPromiseMap",
    "flag",
    "source",
    "newValue",
    "_b",
    "__spreadValues",
    "DEFAULT_GESTURE_PARAMS",
    "createUnselectableElement",
    "StylesheetManager",
    "BannerView",
    "BannerController",
    "resourcePath",
    "sheetFile",
    "sheetHref",
    "codes_default",
    "ManagedPromise",
    "commonPrevention",
    "e",
    "promise",
    "spec",
    "newSpec",
    "model",
    "VisualKeyboard",
    "device",
    "computedHeight",
    "isEmbedded",
    "fontScale",
    "ParsedLengthStyle",
    "keyboardData",
    "width",
    "height",
    "pending",
    "mutatedFlag",
    "parsedWidth",
    "parsedHeight",
    "closure",
    "fixedSize",
    "computedStyle",
    "isInDOM",
    "parent",
    "availableHeight",
    "bs",
    "_c",
    "_d",
    "_e",
    "oldKbd",
    "oldKbdStyleManager",
    "kbdView",
    "globeHint",
    "keyboard",
    "keyboardMetadata",
    "EmptyView",
    "HelpPageView",
    "vkbd",
    "keyEvent",
    "callback",
    "keyElement",
    "on",
    "_this",
    "hiddenByUser",
    "shouldHide",
    "StaticActivator",
    "os",
    "resolve",
    "cleanup",
    "startup",
    "_box",
    "p",
    "getAbsoluteX",
    "getAbsoluteY",
    "bShow",
    "event",
    "fn",
    "OSKView",
    "_TitleBar",
    "EventEmitter",
    "dragHandler",
    "__name",
    "ev",
    "val",
    "visible",
    "str",
    "keyboard",
    "title",
    "bar",
    "createUnselectableElement",
    "Ltitle",
    "Limg",
    "ParsedLengthStyle",
    "TitleBar",
    "_ResizeBar",
    "EventEmitter",
    "dragHandler",
    "__name",
    "ev",
    "flag",
    "bar",
    "createUnselectableElement",
    "Ltitle",
    "e",
    "Limg",
    "ParsedLengthStyle",
    "ResizeBar",
    "_InputEventCoordinate",
    "x",
    "y",
    "source",
    "e",
    "coordSource",
    "__name",
    "InputEventCoordinate",
    "_MouseStartSnapshot",
    "MouseStartSnapshot",
    "_MouseDragOperation",
    "cursorType",
    "flag",
    "coord",
    "deltaX",
    "deltaY",
    "MouseDragOperation",
    "_TwoStateActivator",
    "Activator",
    "oldValue",
    "flag",
    "oldState",
    "value",
    "__name",
    "TwoStateActivator",
    "_FloatingOSKCookieSerializer",
    "CookieSerializer",
    "defaults",
    "__spreadValues",
    "cookie",
    "value",
    "key",
    "__name",
    "FloatingOSKCookieSerializer",
    "_FloatingOSKView",
    "OSKView",
    "config",
    "TwoStateActivator",
    "FloatingOSKCookieSerializer",
    "keepDefaultPosition",
    "isVisible",
    "dragPromise",
    "ManagedPromise",
    "TitleBar",
    "ResizeBar",
    "onListenedEvent",
    "__name",
    "eventName",
    "titleBar",
    "listenerSpyNew",
    "EmitterListenerSpy",
    "listenerSpyOld",
    "listenerSpy",
    "s",
    "p",
    "c",
    "Version",
    "cookieVersionString",
    "isNewCookie",
    "newWidth",
    "newHeight",
    "oskHeightLandscapeView",
    "height",
    "sx",
    "sy",
    "landscapeView",
    "deviceSpec_default",
    "getViewportScale",
    "width",
    "ex",
    "b",
    "bs",
    "getAbsoluteX",
    "getAbsoluteY",
    "d",
    "ds",
    "w",
    "h",
    "Lkbd",
    "Px",
    "Py",
    "Ls",
    "el",
    "hiddenByUser",
    "bShow",
    "flag",
    "_this",
    "MouseDragOperation",
    "cumulativeX",
    "cumulativeY",
    "r",
    "FloatingOSKView",
    "_AnchoredOSKView",
    "OSKView",
    "config",
    "StaticActivator",
    "TwoStateActivator",
    "keepDefaultPosition",
    "s",
    "pending",
    "targetOSKHeight",
    "_a",
    "_b",
    "device",
    "baseWidth",
    "baseHeight",
    "landscapeView",
    "temp",
    "oskHeightLandscapeView",
    "height",
    "deviceSpec_default",
    "getViewportScale",
    "width",
    "p",
    "Lkbd",
    "Ls",
    "__name",
    "AnchoredOSKView",
    "_SimpleActivator",
    "Activator",
    "value",
    "__name",
    "SimpleActivator",
    "_InlinedOSKView",
    "OSKView",
    "config",
    "SimpleActivator",
    "keepDefaultPosition",
    "s",
    "VisualKeyboard",
    "p",
    "Lkbd",
    "newSpec",
    "__name",
    "InlinedOSKView",
    "viewsAnchorpoint_exports",
    "__export",
    "PublishedAnchoredOSKView",
    "PublishedFloatingOSKView",
    "PublishedInlineOSKView",
    "buildBaseOskConfiguration",
    "engine",
    "__name",
    "_PublishedAnchoredOSKView",
    "AnchoredOSKView",
    "config",
    "finalConfig",
    "__spreadValues",
    "PublishedAnchoredOSKView",
    "_PublishedFloatingOSKView",
    "FloatingOSKView",
    "PublishedFloatingOSKView",
    "_PublishedInlineOSKView",
    "InlinedOSKView",
    "PublishedInlineOSKView",
    "_OutputTarget",
    "OutputTarget",
    "EventEmitter",
    "ele",
    "elem",
    "event",
    "__name",
    "_Input",
    "OutputTarget",
    "ele",
    "type",
    "caret",
    "start",
    "end",
    "direction",
    "domStart",
    "domEnd",
    "element",
    "selectionStart",
    "selectionEnd",
    "text",
    "selectionLength",
    "newCaret",
    "s",
    "dn",
    "curText",
    "front",
    "back",
    "inputEle",
    "__name",
    "Input",
    "_TextArea",
    "OutputTarget",
    "ele",
    "caret",
    "start",
    "end",
    "direction",
    "domStart",
    "domEnd",
    "element",
    "selectionStart",
    "selectionEnd",
    "text",
    "selectionLength",
    "newCaret",
    "s",
    "dn",
    "curText",
    "front",
    "back",
    "__name",
    "TextArea",
    "_SelectionCaret",
    "node",
    "offset",
    "__name",
    "SelectionCaret",
    "_SelectionRange",
    "start",
    "end",
    "SelectionRange",
    "_StyleCommand",
    "c",
    "s",
    "StyleCommand",
    "_DesignIFrame",
    "OutputTarget",
    "ele",
    "Lsel",
    "outerSel",
    "code",
    "caret",
    "anchor",
    "focus",
    "dn",
    "range",
    "dnOffset",
    "delta",
    "finalCaret",
    "textStart",
    "n",
    "e",
    "_CacheableCommands",
    "cmd",
    "_func",
    "DesignIFrame",
    "_SelectionCaret",
    "node",
    "offset",
    "__name",
    "SelectionCaret",
    "_SelectionRange",
    "start",
    "end",
    "SelectionRange",
    "_ContentEditable",
    "OutputTarget",
    "ele",
    "__super",
    "Lsel",
    "code",
    "caret",
    "anchor",
    "focus",
    "dn",
    "range",
    "dnOffset",
    "s",
    "delta",
    "finalCaret",
    "textStart",
    "n",
    "e",
    "ContentEditable",
    "nestedInstanceOf",
    "Pelem",
    "className",
    "scopedClass",
    "__name",
    "wrapElement",
    "e",
    "nestedInstanceOf",
    "Input",
    "TextArea",
    "iframe",
    "DesignIFrame",
    "ContentEditable",
    "__name",
    "_AlertHost",
    "bg",
    "lb",
    "lt",
    "gr",
    "bx",
    "lbClick",
    "e",
    "bgClick",
    "s",
    "fn",
    "__name",
    "AlertHost",
    "whenDocumentReady",
    "resolve",
    "reject",
    "loadHandler",
    "__name",
    "_BrowserConfiguration",
    "EngineConfiguration",
    "options",
    "__spreadValues",
    "whenDocumentReady",
    "_a",
    "AlertHost",
    "host",
    "baseReport",
    "ruleBehavior",
    "outputTarget",
    "ruleTransform",
    "isEmptyTransform",
    "OutputTarget",
    "__name",
    "BrowserConfiguration",
    "BrowserInitOptionDefaults",
    "InitOptionDefaults",
    "_AttachmentInfo",
    "eleInterface",
    "kbd",
    "touch",
    "__name",
    "AttachmentInfo",
    "eventOutputTarget",
    "e",
    "Ltarg",
    "outputTargetForElement",
    "__name",
    "_a",
    "nestedInstanceOf",
    "et",
    "_PageContextAttachment",
    "EventEmitter",
    "document",
    "options",
    "__name",
    "mutations",
    "mutation",
    "target",
    "i",
    "disabledBefore",
    "disabledAfter",
    "readonlyBefore",
    "elem",
    "readonlyAfter",
    "inputElementAdditions",
    "inputElementRemovals",
    "j",
    "k",
    "matched",
    "Pelem",
    "attachFunctor",
    "StylesheetManager",
    "embeddedInputs",
    "embeddedPage",
    "flattenedInputList",
    "pageInputList",
    "manualAttach",
    "x",
    "eleInterface",
    "wrapElement",
    "nestedInstanceOf",
    "AttachmentInfo",
    "Input",
    "iframeDoc",
    "err",
    "child",
    "c",
    "_a",
    "intendedInputMode",
    "index",
    "Lelem",
    "context",
    "embeddedPageAttachment",
    "__spreadProps",
    "__spreadValues",
    "detachFromDesignIframe",
    "touchable",
    "cn",
    "tagIndex",
    "eList",
    "t1",
    "t2",
    "getAbsoluteX",
    "getAbsoluteY",
    "e1",
    "e2",
    "tList",
    "activeBase",
    "bBack",
    "t",
    "possibleInputs",
    "dv",
    "LiTmp",
    "_colon",
    "arrayFromNodeList",
    "Li",
    "observationTarget",
    "observationConfig",
    "ipInput",
    "ipTextArea",
    "n",
    "fs",
    "fsDefault",
    "firstInput",
    "firstTextArea",
    "keyboardFontDescriptor",
    "kfd",
    "fontName",
    "rx",
    "fontFamily",
    "s",
    "fontRoot",
    "os",
    "createStyleSheet",
    "_b",
    "_c",
    "_d",
    "e",
    "input",
    "PageContextAttachment",
    "_FocusStateAPIObject",
    "pending",
    "activated",
    "__name",
    "FocusStateAPIObject",
    "_FocusAssistant",
    "EventEmitter",
    "isTargetForcingScroll",
    "value",
    "priorValue",
    "state",
    "FocusAssistant",
    "_SetTargDir",
    "Ptarg",
    "activeKeyboard",
    "elDir",
    "__name",
    "_ContextManager",
    "ContextManagerBase",
    "engineConfig",
    "eventsClosure",
    "CookieSerializer",
    "FocusAssistant",
    "_a",
    "DomEventTracker",
    "target",
    "eventOutputTarget",
    "previousTarget",
    "maintainingFocus",
    "x",
    "PageContextAttachment",
    "stub",
    "completion",
    "device",
    "noPropagation",
    "event",
    "elem",
    "DesignIFrame",
    "Lelem",
    "outputTargetForElement",
    "nestedInstanceOf",
    "lastElem",
    "priorTarget",
    "sendEvents",
    "originalTarget",
    "hadRecentElement",
    "focusedElement",
    "blurredElement",
    "kbdInterface",
    "Ptext",
    "PdeadKey",
    "outputTarget",
    "attachmentInfo",
    "kbd",
    "_b",
    "attachment",
    "activeStub",
    "kbdId",
    "langId",
    "wasPriorTarget",
    "globalKbd",
    "emptyCodes",
    "keyboardId",
    "languageCode",
    "saveCookie",
    "__async",
    "_c",
    "_d",
    "_e",
    "_f",
    "originalKeyboardTarget",
    "result",
    "__superGet",
    "err",
    "fallback",
    "fallbackCodes",
    "message",
    "KeyboardScriptError",
    "PInternalName",
    "PLgCode",
    "keyboardID",
    "langCode",
    "blockGlobalChange",
    "global",
    "focusAssistant",
    "v",
    "cookieValue",
    "stubs",
    "kd",
    "n",
    "t",
    "ContextManager",
    "_DefaultBrowserRules",
    "DefaultRules",
    "contextManager",
    "Lkc",
    "codes_default",
    "outputTarget",
    "code",
    "moveToNext",
    "__name",
    "back",
    "_a",
    "activeElement",
    "nextElement",
    "ModifierKeyConstants",
    "DefaultBrowserRules",
    "_GetEventKeyCode",
    "e",
    "__name",
    "preprocessKeyboardEvent",
    "keyboardState",
    "device",
    "Lcode",
    "prevModState",
    "curModState",
    "ctrlEvent",
    "altEvent",
    "keyCodes",
    "codes_default",
    "ModifierKeyConstants",
    "Lstates",
    "LmodifierChange",
    "altGrMask",
    "modifierBitmasks",
    "activeKeyboard",
    "Lmodifiers",
    "deviceSpec_default",
    "KeyMapping",
    "s",
    "KeyEvent",
    "LisVirtualKeyCode",
    "processForMnemonicsAndLegacy",
    "processedEvent",
    "_HardwareEventKeyboard",
    "HardKeyboard",
    "hardDevice",
    "processor",
    "contextManager",
    "DomEventTracker",
    "_a",
    "target",
    "eventOutputTarget",
    "el",
    "Levent",
    "inputEle",
    "ignore",
    "nestedInstanceOf",
    "page",
    "eventTracker",
    "Pelem",
    "outputTargetForElement",
    "DesignIFrame",
    "Lelem",
    "resultCapture",
    "ruleBehavior",
    "error",
    "outputTarget",
    "result",
    "HardwareEventKeyboard",
    "_RotationState",
    "other",
    "__name",
    "RotationState",
    "_RotationProcessor",
    "keyman",
    "_a",
    "osk",
    "target",
    "os",
    "util",
    "newState",
    "RotationProcessor",
    "_PageIntegrationHandlers",
    "window",
    "engine",
    "DomEventTracker",
    "__name",
    "e",
    "_a",
    "_b",
    "osk",
    "device",
    "p",
    "y",
    "y0",
    "RotationProcessor",
    "dTrailer",
    "ds",
    "eventTracker",
    "docBody",
    "PageIntegrationHandlers",
    "_CreateElement",
    "nodeName",
    "e",
    "__name",
    "getStyleValue",
    "e",
    "s",
    "ex",
    "__name",
    "_LanguageMenu",
    "keyman",
    "languageMenu",
    "shim",
    "_CreateElement",
    "osk",
    "e",
    "sX",
    "sY",
    "spaceBar",
    "device",
    "kbdList",
    "menu",
    "m2",
    "s2",
    "m3",
    "x",
    "mx",
    "i",
    "w",
    "getStyleValue",
    "ms",
    "dy",
    "lineHeight",
    "scale",
    "factor",
    "qs",
    "menuWidth",
    "nKbds",
    "barWidth",
    "s",
    "maxHeight",
    "nItems",
    "itemHeight",
    "menuHeight",
    "landscapeView",
    "getViewportScale",
    "getAbsoluteX",
    "target",
    "t",
    "initial",
    "nn",
    "ex",
    "index",
    "top",
    "_a",
    "nStubs",
    "langs",
    "n",
    "lg",
    "activeLanguageIndex",
    "k",
    "dx",
    "lgBar",
    "kb",
    "padLast",
    "cancelTouch",
    "__name",
    "kbd",
    "unique",
    "lockBodyScroll",
    "obs",
    "dbs",
    "unlockBodyScroll",
    "touchStart",
    "touchMove",
    "scroller",
    "yMax",
    "y",
    "touchEnd",
    "entry",
    "touchCancel",
    "LanguageMenu",
    "setupOskListeners",
    "engine",
    "osk",
    "contextManager",
    "focusAssistant",
    "key",
    "on",
    "LanguageMenu",
    "params",
    "_a",
    "KEYMAN_VERSION",
    "promise",
    "__async",
    "__name",
    "createUnselectableElement",
    "nodeName",
    "e",
    "__name",
    "_UtilApiEndpoint",
    "config",
    "getAbsoluteX",
    "getAbsoluteY",
    "getStyleValue",
    "StylesheetManager",
    "DomEventTracker",
    "elem",
    "optionName",
    "dflt",
    "value",
    "AlertHost",
    "cn",
    "CookieSerializer",
    "cv",
    "s",
    "styleSheet",
    "createStyleSheet",
    "lgCode",
    "Pelem",
    "Peventname",
    "Phandler",
    "PuseCapture",
    "fn",
    "item",
    "dfltValue",
    "x",
    "r",
    "g",
    "b",
    "a",
    "bgColor",
    "ex",
    "_a",
    "_b",
    "_c",
    "UtilApiEndpoint",
    "_Hotkey",
    "code",
    "shift",
    "handler",
    "keyCode",
    "shiftState",
    "__name",
    "Hotkey",
    "_HotkeyManager",
    "e",
    "_Lcode",
    "_GetEventKeyCode",
    "_Lmodifiers",
    "i",
    "HotkeyManager",
    "_BeepData",
    "e",
    "__name",
    "BeepData",
    "_BeepHandler",
    "keyboardInterface",
    "Lbo",
    "outputTarget",
    "OutputTarget",
    "Pelem",
    "DesignIFrame",
    "BeepHandler",
    "_KeyboardInterface",
    "KeyboardInterface",
    "_jsGlobal",
    "engine",
    "Px",
    "Py",
    "osk",
    "FloatingOSKView",
    "__name",
    "_KeymanEngine",
    "KeymanEngine",
    "worker",
    "sourceUri",
    "config",
    "BrowserConfiguration",
    "ContextManager",
    "engine",
    "KeyboardInterface",
    "DefaultBrowserRules",
    "HotkeyManager",
    "__name",
    "Lstub",
    "Lkbd",
    "UtilApiEndpoint",
    "BeepHandler",
    "HardwareEventKeyboard",
    "target",
    "e",
    "y",
    "getAbsoluteY",
    "t",
    "dy",
    "viewsAnchorpoint_exports",
    "module",
    "options",
    "__async",
    "device",
    "DeviceDetector",
    "totalOptions",
    "__spreadValues",
    "BrowserInitOptionDefaults",
    "whenDocumentReady",
    "__superGet",
    "_a",
    "savedKeyboardStr",
    "PublishedAnchoredOSKView",
    "PublishedFloatingOSKView",
    "setupOskListeners",
    "PageIntegrationHandlers",
    "state",
    "Pelem",
    "Pkbd",
    "Plc",
    "stub",
    "outputTargetForElement",
    "x",
    "args",
    "errVal",
    "arg",
    "item",
    "k0",
    "kbd",
    "kbdDetail",
    "Keyboard",
    "PInternalName",
    "PlgCode",
    "keyboard",
    "Lr",
    "cache",
    "keyboardStubs",
    "Ln",
    "Lrn",
    "prefixed",
    "setFocus",
    "id",
    "keyCode",
    "shiftState",
    "handler",
    "Pstatic",
    "argFormFactor",
    "argLayerId",
    "PKbd",
    "Pstub",
    "getOskHeight",
    "targetHeight",
    "VisualKeyboard",
    "_b",
    "scripts",
    "ss",
    "sPath",
    "KeymanEngine",
    "DefaultWorker"
  ]
}